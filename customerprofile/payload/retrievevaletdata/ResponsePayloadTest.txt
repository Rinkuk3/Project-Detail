package com.td.mbna.msec.midtier.customerprofile.payload.retrievevaletdata;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testGetterObjectData() {
        responsePayload.setObjectData("testData");
        assertThat(responsePayload.getObjectData()).isEqualTo("testData");
    }

    @Test
    public void testSetterObjectData() {
        responsePayload.setObjectData("sampleData");
        assertThat(responsePayload.getObjectData()).isEqualTo("sampleData");
    }

    @Test
    public void testToStringWithNull() {
        responsePayload.setObjectData(null);
        String result = responsePayload.toString();
        assertThat(result).isEqualTo("RequestPayload [objectData=null]");
    }

    @Test
    public void testToStringWithValidObjectData() {
        responsePayload.setObjectData("sample");
        String result = responsePayload.toString();
        assertThat(result).isEqualTo("RequestPayload [objectData=sample]");
    }

    @Test
    public void testHashCodeWithNullObjectData() {
        responsePayload.setObjectData(null);
        int hashCode = responsePayload.hashCode();
        assertThat(hashCode).isEqualTo(1);
    }

    @Test
    public void testHashCodeWithValidObjectData() {
        responsePayload.setObjectData("test");
        int hashCode = responsePayload.hashCode();
        assertThat(hashCode).isEqualTo(31 * 1 + "test".hashCode());
    }

    @Test
    public void testEqualsWithItself() {
        responsePayload.setObjectData("test");
        assertThat(responsePayload).isEqualTo(responsePayload);
    }

    @Test
    public void testEqualsWithNull() {
        assertThat(responsePayload).isNotEqualTo(null);
    }

    @Test
    public void testEqualsWithDifferentType() {
        assertThat(responsePayload).isNotEqualTo(new Object());
    }

    @Test
    public void testEqualsWithSameObjectData() {
        ResponsePayload other = new ResponsePayload();
        other.setObjectData("test");
        responsePayload.setObjectData("test");
        assertThat(responsePayload).isEqualTo(other);
    }

    @Test
    public void testEqualsWithDifferentObjectData() {
        ResponsePayload other = new ResponsePayload();
        other.setObjectData("otherData");
        responsePayload.setObjectData("test");
        assertThat(responsePayload).isNotEqualTo(other);
    }
}
