package com.td.mbna.msec.midtier.customerprofile.payload.retrievevaletdata;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestPayloadTest {

    private RequestPayload requestPayload;

    @BeforeEach
    void setUp() {
        requestPayload = new RequestPayload();
    }

    // Test getter logic for ticketId
    @Test
    public void testGetterTicketId() {
        requestPayload.setTicketId("ABC123");
        assertThat(requestPayload.getTicketId()).isEqualTo("ABC123");
    }

    // Test setter logic
    @Test
    public void testSetterTicketId() {
        requestPayload.setTicketId("XYZ789");
        assertThat(requestPayload.getTicketId()).isEqualTo("XYZ789");
    }

    // Test toString() when ticketId is null
    @Test
    public void testToStringWithNullTicketId() {
        requestPayload.setTicketId(null);
        String result = requestPayload.toString();
        assertThat(result).isEqualTo("ResponsePayload [ticketId=null]");
    }

    // Test toString() when ticketId is set
    @Test
    public void testToStringWithValidTicketId() {
        requestPayload.setTicketId("12345");
        String result = requestPayload.toString();
        assertThat(result).isEqualTo("ResponsePayload [ticketId=12345]");
    }

    // Test hashCode() when ticketId is null
    @Test
    public void testHashCodeWithNullTicketId() {
        requestPayload.setTicketId(null);
        int hashCode = requestPayload.hashCode();
        assertThat(hashCode).isEqualTo(0);
    }

    // Test hashCode() when ticketId is non-null
    @Test
    public void testHashCodeWithValidTicketId() {
        requestPayload.setTicketId("ABC123");
        int hashCode = requestPayload.hashCode();
        assertThat(hashCode).isEqualTo(31 * 1 + "ABC123".hashCode());
    }

    // Test equals() with itself
    @Test
    public void testEqualsWithItself() {
        requestPayload.setTicketId("ABC123");
        assertThat(requestPayload).isEqualTo(requestPayload);
    }

    // Test equals() with null
    @Test
    public void testEqualsWithNull() {
        assertThat(requestPayload).isNotEqualTo(null);
    }

    // Test equals() with different type
    @Test
    public void testEqualsWithDifferentType() {
        assertThat(requestPayload).isNotEqualTo(new Object());
    }

    // Test equals() when ticketId is the same
    @Test
    public void testEqualsWithSameTicketId() {
        RequestPayload other = new RequestPayload();
        other.setTicketId("ABC123");
        requestPayload.setTicketId("ABC123");

        assertThat(requestPayload).isEqualTo(other);
    }

    // Test equals() when ticketId is different
    @Test
    public void testEqualsWithDifferentTicketId() {
        RequestPayload other = new RequestPayload();
        other.setTicketId("XYZ789");
        requestPayload.setTicketId("ABC123");

        assertThat(requestPayload).isNotEqualTo(other);
    }
}
