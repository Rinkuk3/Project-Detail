package com.td.mbna.msec.midtier.customerprofile.payload.getuserinfoandaccounts;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class GetUserInfoAndAccountsResponseTest {

    private GetUserInfoAndAccountsResponse response;

    @BeforeEach
    void setUp() {
        response = new GetUserInfoAndAccountsResponse();
    }

    @Test
    public void testLazyInitializationResponsePayload() {
        // Test lazy initialization
        assertThat(response.getResponsePayload()).isNotNull();
    }

    @Test
    public void testSetAndGetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        assertThat(response.getResponsePayload()).isEqualTo(payload);
    }

    @Test
    public void testToStringLogic() {
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("200");
        response.setErrorMessages("Error");

        String result = response.toString();
        assertThat(result).contains("status");
        assertThat(result).contains("errorMsgs");
        assertThat(result).contains("responsePayload");
    }

    @Test
    public void testHashCodeWithNullFields() {
        response.setErrorMessages(null);
        response.setResponsePayload(null);
        response.setStatus(null);

        int hash1 = response.hashCode();
        response.setErrorMessages("Error");
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("200");

        int hash2 = response.hashCode();

        assertThat(hash1).isNotEqualTo(hash2);
    }

    @Test
    public void testEqualsSameValues() {
        GetUserInfoAndAccountsResponse response2 = new GetUserInfoAndAccountsResponse();
        response.setErrorMessages("Error");
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("200");

        response2.setErrorMessages("Error");
        response2.setResponsePayload(new ResponsePayload());
        response2.setStatus("200");

        assertThat(response).isEqualTo(response2);
    }

    @Test
    public void testEqualsDifferentResponsePayload() {
        GetUserInfoAndAccountsResponse response2 = new GetUserInfoAndAccountsResponse();
        response.setResponsePayload(new ResponsePayload());
        response2.setResponsePayload(null);

        assertThat(response).isNotEqualTo(response2);
    }

    @Test
    public void testEqualsDifferentStatus() {
        GetUserInfoAndAccountsResponse response2 = new GetUserInfoAndAccountsResponse();
        response.setStatus("Error");
        response2.setStatus("200");

        assertThat(response).isNotEqualTo(response2);
    }

    @Test
    public void testEqualsDifferentErrorMessages() {
        GetUserInfoAndAccountsResponse response2 = new GetUserInfoAndAccountsResponse();
        response.setErrorMessages("Error");
        response2.setErrorMessages("Different Error");

        assertThat(response).isNotEqualTo(response2);
    }

    @Test
    public void testHashCodeEquality() {
        response.setErrorMessages("Error");
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("200");

        GetUserInfoAndAccountsResponse response2 = new GetUserInfoAndAccountsResponse();
        response2.setErrorMessages("Error");
        response2.setResponsePayload(new ResponsePayload());
        response2.setStatus("200");

        assertThat(response.hashCode()).isEqualTo(response2.hashCode());
    }

}
