package com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment;

import com.td.mbna.msec.midtier.types.common.BaseRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class RetrieveEnrollmentRequestTest {

    private RetrieveEnrollmentRequest retrieveEnrollmentRequest;

    @BeforeEach
    void setUp() {
        retrieveEnrollmentRequest = new RetrieveEnrollmentRequest();
    }

    // Test getter and setter for requestPayload
    @Test
    public void testGetterAndSetterForRequestPayload() {
        RequestPayload requestPayload = new RequestPayload();
        retrieveEnrollmentRequest.setRequestPayload(requestPayload);
        assertThat(retrieveEnrollmentRequest.getRequestPayload()).isEqualTo(requestPayload);
    }

    // Test toString() with null fields
    @Test
    public void testToStringWithNullFields() {
        String expected = "com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment.RetrieveEnrollmentRequest@";
        assertThat(retrieveEnrollmentRequest.toString()).startsWith(expected);
    }

    // Test hashCode() when fields are null
    @Test
    public void testHashCodeWithNullFields() {
        int initialHash = retrieveEnrollmentRequest.hashCode();
        assertThat(initialHash).isNotZero();
    }

    // Test equals() with itself
    @Test
    public void testEqualsWithItself() {
        assertThat(retrieveEnrollmentRequest).isEqualTo(retrieveEnrollmentRequest);
    }

    // Test equals() with a different instance
    @Test
    public void testEqualsWithDifferentInstance() {
        Object other = new Object();
        assertThat(retrieveEnrollmentRequest).isNotEqualTo(other);
    }

    // Test equals() when fields are the same
    @Test
    public void testEqualsWithSameFields() {
        RetrieveEnrollmentRequest anotherRequest = new RetrieveEnrollmentRequest();
        anotherRequest.setRequestPayload(new RequestPayload());
        assertThat(retrieveEnrollmentRequest).isNotEqualTo(anotherRequest);
    }

    // Test hashCode changes with the `requestPayload`
    @Test
    public void testHashCodeChangeWithRequestPayload() {
        RequestPayload payload1 = new RequestPayload();
        retrieveEnrollmentRequest.setRequestPayload(payload1);
        int firstHash = retrieveEnrollmentRequest.hashCode();

        RequestPayload payload2 = new RequestPayload();
        retrieveEnrollmentRequest.setRequestPayload(payload2);
        int secondHash = retrieveEnrollmentRequest.hashCode();

        assertThat(firstHash).isNotEqualTo(secondHash);
    }

    @Test
    public void testAllEdgeCasesForToString() {
        retrieveEnrollmentRequest.setRequestPayload(null);
        assertThat(retrieveEnrollmentRequest.toString()).contains("<null>");
    }
}
