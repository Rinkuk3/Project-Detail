package com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import com.td.mbna.msec.midtier.types.common.CustAcctType;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    // Test getter and setter for custId
    @Test
    public void testGetterAndSetterForCustId() {
        responsePayload.setCustId("cust123");
        assertThat(responsePayload.getCustId()).isEqualTo("cust123");
    }

    // Test getter for enrolledAccts - should return initialized empty list by default
    @Test
    public void testDefaultInitializationOfEnrolledAccts() {
        List<CustAcctType> enrolledAccts = responsePayload.getEnrolledAccts();
        assertThat(enrolledAccts).isEmpty();
    }

    // Test adding an account type to the enrolledAccts list
    @Test
    public void testAddToEnrolledAccts() {
        CustAcctType accountType = new CustAcctType();
        responsePayload.getEnrolledAccts().add(accountType);
        assertThat(responsePayload.getEnrolledAccts()).hasSize(1);
    }

    // Test equals() with identical values
    @Test
    public void testEqualsWithIdenticalValues() {
        ResponsePayload otherResponse = new ResponsePayload();
        otherResponse.setCustId("cust123");
        otherResponse.getEnrolledAccts().add(new CustAcctType());

        responsePayload.setCustId("cust123");
        responsePayload.getEnrolledAccts().add(new CustAcctType());

        assertThat(responsePayload).isEqualTo(otherResponse);
    }

    // Test equals() with itself
    @Test
    public void testEqualsWithItself() {
        responsePayload.setCustId("cust123");
        assertThat(responsePayload).isEqualTo(responsePayload);
    }

    // Test equals() with different values
    @Test
    public void testEqualsWithDifferentValues() {
        ResponsePayload otherResponse = new ResponsePayload();
        otherResponse.setCustId("other");

        responsePayload.setCustId("cust123");

        assertThat(responsePayload).isNotEqualTo(otherResponse);
    }

    // Test hashCode() consistency
    @Test
    public void testHashCodeConsistency() {
        responsePayload.setCustId("cust123");
        assertThat(responsePayload.hashCode()).isEqualTo(responsePayload.hashCode());
    }

    // Test hashCode() changes when fields change
    @Test
    public void testHashCodeChanges() {
        responsePayload.setCustId("cust123");
        int firstHash = responsePayload.hashCode();

        responsePayload.setCustId("other123");
        int secondHash = responsePayload.hashCode();

        assertThat(firstHash).isNotEqualTo(secondHash);
    }

    // Test toString()
    @Test
    public void testToString() {
        responsePayload.setCustId("cust123");
        responsePayload.getEnrolledAccts().add(new CustAcctType());

        String expectedString = "ResponsePayload(custId=cust123, enrolledAccts=[com.td.mbna.msec.midtier.types.common.CustAcctType@";
        assertThat(responsePayload.toString()).startsWith(expectedString);
    }

    // Test toString() when fields are empty or null
    @Test
    public void testToStringWithEmptyFields() {
        String expectedString = "ResponsePayload(custId=null, enrolledAccts=[])";
        assertThat(responsePayload.toString()).isEqualTo(expectedString);
    }
}
