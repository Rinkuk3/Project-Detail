package com.td.mbna.msec.midtier.customerprofile.payload.getkycacctsinfo;

import com.td.mbna.msec.midtier.customerprofile.payload.customeragreement.RequestPayload;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class GetKycAcctsInfoRequestTest {

    private GetKycAcctsInfoRequest request;

    @BeforeEach
    void setUp() {
        // Set up a fresh instance before each test
        request = new GetKycAcctsInfoRequest();
    }

    /**
     * Test default initialization.
     */
    @Test
    public void testDefaultInitialization() {
        assertThat(request).isNotNull();
        assertThat(request.getRequestPayload()).isNull();
    }

    /**
     * Test setting and getting the request payload.
     */
    @Test
    public void testSetAndGetRequestPayload() {
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        assertThat(request.getRequestPayload()).isEqualTo(payload);
    }

    /**
     * Test hashCode computation logic.
     */
    @Test
    public void testHashCode() {
        request.setRequestPayload(new RequestPayload());
        request.setAuditInfo("auditInfo");
        request.setAliasCustId("aliasCustId");

        int hashCode = request.hashCode();
        assertThat(hashCode).isNotZero();
    }

    /**
     * Test equals with another object with the same state.
     */
    @Test
    public void testEqualsSameObject() {
        request.setRequestPayload(new RequestPayload());
        request.setAuditInfo("auditInfo");

        GetKycAcctsInfoRequest other = new GetKycAcctsInfoRequest();
        other.setRequestPayload(new RequestPayload());
        other.setAuditInfo("auditInfo");

        assertThat(request).isEqualTo(other);
    }

    /**
     * Test equals with different objects.
     */
    @Test
    public void testEqualsDifferentObject() {
        request.setRequestPayload(new RequestPayload());
        request.setAuditInfo("auditInfo");

        GetKycAcctsInfoRequest other = new GetKycAcctsInfoRequest();
        other.setRequestPayload(new RequestPayload());
        other.setAuditInfo("differentAuditInfo");

        assertThat(request).isNotEqualTo(other);
    }

    /**
     * Test the toString method for proper string representation.
     */
    @Test
    public void testToString() {
        request.setRequestPayload(new RequestPayload());
        request.setAuditInfo("auditInfo");

        String toStringValue = request.toString();
        assertThat(toStringValue).contains("requestPayload");
        assertThat(toStringValue).contains("auditInfo");
    }

    /**
     * Test edge case: setting and getting all fields.
     */
    @Test
    public void testAllFieldSettersAndGetters() {
        request.setAuditInfo("auditInfo");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("123456");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setCustId("C123");
        request.setCustInterface("WEB");
        request.setReserved1("reserved");

        assertThat(request.getAuditInfo()).isEqualTo("auditInfo");
        assertThat(request.getAliasCustId()).isEqualTo("aliasCustId");
        assertThat(request.getAcctNum()).isEqualTo("123456");
        assertThat(request.getAcctType()).isEqualTo("Type1");
        assertThat(request.getLanguagePref()).isEqualTo("EN");
        assertThat(request.getCustId()).isEqualTo("C123");
        assertThat(request.getCustInterface()).isEqualTo("WEB");
        assertThat(request.getReserved1()).isEqualTo("reserved");
    }
}
