package com.td.mbna.msec.midtier.customerprofile.payload.getkycacctsinfo;

import com.td.mbna.msec.midtier.types.common.CustAcctType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestPayloadTest {

    private RequestPayload requestPayload;

    @BeforeEach
    void setUp() {
        requestPayload = new RequestPayload();
    }

    /**
     * Test default initialization state for kycNeededAccts.
     */
    @Test
    public void testDefaultInitialization() {
        assertThat(requestPayload.getKycNeededAccts()).isEmpty();
    }

    /**
     * Test getter and setter for kycNeededAccts.
     */
    @Test
    public void testSetAndGetKycNeededAccts() {
        CustAcctType accountType1 = new CustAcctType();
        CustAcctType accountType2 = new CustAcctType();
        requestPayload.setKycNeededAccts(Arrays.asList(accountType1, accountType2));

        assertThat(requestPayload.getKycNeededAccts()).containsExactly(accountType1, accountType2);
    }

    /**
     * Test hashCode with an empty list.
     */
    @Test
    public void testHashCodeEmptyList() {
        requestPayload.setKycNeededAccts(Collections.emptyList());
        assertThat(requestPayload.hashCode()).isNotZero();
    }

    /**
     * Test hashCode with initialized list values.
     */
    @Test
    public void testHashCodeWithValues() {
        CustAcctType accountType1 = new CustAcctType();
        requestPayload.setKycNeededAccts(Arrays.asList(accountType1));

        int hashCode = requestPayload.hashCode();
        assertThat(hashCode).isNotZero();
    }

    /**
     * Test equals with identical values in kycNeededAccts.
     */
    @Test
    public void testEqualsWithSameValues() {
        CustAcctType accountType1 = new CustAcctType();
        CustAcctType accountType2 = new CustAcctType();
        
        RequestPayload payload1 = new RequestPayload();
        payload1.setKycNeededAccts(Arrays.asList(accountType1, accountType2));
        
        RequestPayload payload2 = new RequestPayload();
        payload2.setKycNeededAccts(Arrays.asList(accountType1, accountType2));

        assertThat(payload1).isEqualTo(payload2);
    }

    /**
     * Test equals with different kycNeededAccts.
     */
    @Test
    public void testEqualsWithDifferentValues() {
        CustAcctType accountType1 = new CustAcctType();
        CustAcctType accountType2 = new CustAcctType();
        CustAcctType accountType3 = new CustAcctType();

        RequestPayload payload1 = new RequestPayload();
        payload1.setKycNeededAccts(Arrays.asList(accountType1, accountType2));

        RequestPayload payload2 = new RequestPayload();
        payload2.setKycNeededAccts(Collections.singletonList(accountType3));

        assertThat(payload1).isNotEqualTo(payload2);
    }

    /**
     * Test equals with null kycNeededAccts list.
     */
    @Test
    public void testEqualsWithNullValues() {
        RequestPayload payload1 = new RequestPayload();
        payload1.setKycNeededAccts(null);

        RequestPayload payload2 = new RequestPayload();
        payload2.setKycNeededAccts(null);

        assertThat(payload1).isEqualTo(payload2);
    }

    /**
     * Test toString() logic.
     */
    @Test
    public void testToString() {
        CustAcctType accountType1 = new CustAcctType();
        requestPayload.setKycNeededAccts(Collections.singletonList(accountType1));

        String toStringOutput = requestPayload.toString();
        assertThat(toStringOutput).contains("kycNeededAccts");
        assertThat(toStringOutput).contains(accountType1.toString());
    }
}
