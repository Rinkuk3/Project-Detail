package com.td.mbna.msec.midtier.customerprofile.payload.addauthorizeduser;

import com.td.mbna.msec.midtier.types.common.UnformattedAddress;
import com.td.mbna.msec.midtier.types.common.UserNameType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testGettersAndSetters() {
        responsePayload.setNewCustId("custId");
        assertThat(responsePayload.getNewCustId()).isEqualTo("custId");

        responsePayload.setNewAliasCustId("aliasId");
        assertThat(responsePayload.getNewAliasCustId()).isEqualTo("aliasId");

        UserNameType userNameType = new UserNameType();
        responsePayload.setUserName(userNameType);
        assertThat(responsePayload.getUserName()).isEqualTo(userNameType);

        UnformattedAddress unformattedAddress = new UnformattedAddress();
        responsePayload.setAuthorizedUserAddress(unformattedAddress);
        assertThat(responsePayload.getAuthorizedUserAddress()).isEqualTo(unformattedAddress);

        responsePayload.setDateOfBirth(100L);
        assertThat(responsePayload.getDateOfBirth()).isEqualTo(100L);

        responsePayload.setBusinessPhone("123");
        assertThat(responsePayload.getBusinessPhone()).isEqualTo("123");

        responsePayload.setHomePhone("456");
        assertThat(responsePayload.getHomePhone()).isEqualTo("456");

        responsePayload.setMobilePhone("789");
        assertThat(responsePayload.getMobilePhone()).isEqualTo("789");

        responsePayload.setRelationToPrimaryUser("parent");
        assertThat(responsePayload.getRelationToPrimaryUser()).isEqualTo("parent");
    }

    @Test
    public void testToString() {
        responsePayload.setNewCustId("custId");
        responsePayload.setNewAliasCustId("aliasId");
        responsePayload.setBusinessPhone("123");
        responsePayload.setHomePhone("456");
        responsePayload.setMobilePhone("789");
        responsePayload.setRelationToPrimaryUser("parent");

        String expectedString = 
            "com.td.mbna.msec.midtier.customerprofile.payload.addauthorizeduser.ResponsePayload@" +
            Integer.toHexString(System.identityHashCode(responsePayload)) + 
            "[newCustId=custId,newAliasCustId=aliasId,userName=<null>,authorizedUserAddress=<null>,dateOfBirth=<null>,businessPhone=123,homePhone=456,mobilePhone=789,relationToPrimaryUser=parent]";

        assertThat(responsePayload.toString()).isEqualTo(expectedString);
    }

    @Test
    public void testHashCode() {
        responsePayload.setNewCustId("custId");
        responsePayload.setNewAliasCustId("aliasId");
        responsePayload.setBusinessPhone("123");

        int hashCode = responsePayload.hashCode();
        assertThat(hashCode).isNotZero();
    }

    @Test
    public void testEquals_SameObject() {
        assertThat(responsePayload).isEqualTo(responsePayload);
    }

    @Test
    public void testEquals_NullObject() {
        assertThat(responsePayload).isNotEqualTo(null);
    }

    @Test
    public void testEquals_DifferentType() {
        assertThat(responsePayload).isNotEqualTo("string");
    }

    @Test
    public void testEquals_DifferentValues() {
        ResponsePayload another = new ResponsePayload();
        another.setNewCustId("anotherCustId");
        another.setNewAliasCustId("anotherAlias");
        another.setBusinessPhone("123");

        assertThat(responsePayload).isNotEqualTo(another);
    }

    @Test
    public void testEquals_SameValues() {
        ResponsePayload another = new ResponsePayload();
        another.setNewCustId("custId");
        another.setNewAliasCustId("aliasId");
        another.setBusinessPhone("123");

        assertThat(responsePayload).isEqualTo(another);
    }

    @Test
    public void testHashCode_DifferentObjects() {
        ResponsePayload another = new ResponsePayload();
        another.setNewCustId("custId");
        another.setNewAliasCustId("aliasId");
        another.setBusinessPhone("123");

        assertThat(responsePayload.hashCode()).isEqualTo(another.hashCode());
    }

}
