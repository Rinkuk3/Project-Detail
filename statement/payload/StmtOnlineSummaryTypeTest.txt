package com.td.mbna.msec.midtier.statement.payload;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class StmtOnlineSummaryTypeTest {

    @Test
    void testSetAndGetAcctEnding() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        
        // Test setting and getting acctEnding
        summary.setAcctEnding("1234");
        assertEquals("1234", summary.getAcctEnding());
    }

    @Test
    void testSetAndGetStatementClosingDate() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        
        // Test setting and getting statementClosingDate
        summary.setStatementClosingDate("2024-12-31");
        assertEquals("2024-12-31", summary.getStatementClosingDate());
    }

    @Test
    void testSetAndGetCreditLimit() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal creditLimit = new BigDecimal("5000.00");
        
        // Test setting and getting creditLimit
        summary.setCreditLimit(creditLimit);
        assertEquals(creditLimit, summary.getCreditLimit());
    }

    @Test
    void testSetAndGetCacheAdvanceLimit() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal cacheAdvanceLimit = new BigDecimal("2000.00");
        
        // Test setting and getting cacheAdvanceLimit
        summary.setCacheAdvanceLimit(cacheAdvanceLimit);
        assertEquals(cacheAdvanceLimit, summary.getCacheAdvanceLimit());
    }

    @Test
    void testSetAndGetCreditAvailable() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal creditAvailable = new BigDecimal("3000.00");
        
        // Test setting and getting creditAvailable
        summary.setCreditAvailable(creditAvailable);
        assertEquals(creditAvailable, summary.getCreditAvailable());
    }

    @Test
    void testSetAndGetCreditAdvanceAvailable() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal creditAdvanceAvailable = new BigDecimal("1500.00");
        
        // Test setting and getting creditAdvanceAvailable
        summary.setCreditAdvanceAvailable(creditAdvanceAvailable);
        assertEquals(creditAdvanceAvailable, summary.getCreditAdvanceAvailable());
    }

    @Test
    void testSetAndGetDaysInBillingCycle() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        
        // Test setting and getting daysInBillingCycle
        summary.setDaysInBillingCycle(30);
        assertEquals(Integer.valueOf(30), summary.getDaysInBillingCycle());
    }

    @Test
    void testSetAndGetTotalMinimumPaymentDue() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal totalMinimumPaymentDue = new BigDecimal("250.00");
        
        // Test setting and getting totalMinimumPaymentDue
        summary.setTotalMinimumPaymentDue(totalMinimumPaymentDue);
        assertEquals(totalMinimumPaymentDue, summary.getTotalMinimumPaymentDue());
    }

    @Test
    void testSetAndGetTotalMinimumPaymentDueDate() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        
        // Test setting and getting totalMinimumPaymentDueDate
        summary.setTotalMinimumPaymentDueDate("2025-01-15");
        assertEquals("2025-01-15", summary.getTotalMinimumPaymentDueDate());
    }

    @Test
    void testSetAndGetAllFields() {
        StmtOnlineSummaryType summary = new StmtOnlineSummaryType();
        BigDecimal creditLimit = new BigDecimal("5000.00");
        BigDecimal cacheAdvanceLimit = new BigDecimal("2000.00");
        BigDecimal creditAvailable = new BigDecimal("3000.00");
        BigDecimal creditAdvanceAvailable = new BigDecimal("1500.00");
        BigDecimal totalMinimumPaymentDue = new BigDecimal("250.00");

        // Set all fields
        summary.setAcctEnding("1234");
        summary.setStatementClosingDate("2024-12-31");
        summary.setCreditLimit(creditLimit);
        summary.setCacheAdvanceLimit(cacheAdvanceLimit);
        summary.setCreditAvailable(creditAvailable);
        summary.setCreditAdvanceAvailable(creditAdvanceAvailable);
        summary.setDaysInBillingCycle(30);
        summary.setTotalMinimumPaymentDue(totalMinimumPaymentDue);
        summary.setTotalMinimumPaymentDueDate("2025-01-15");

        // Validate all fields
        assertEquals("1234", summary.getAcctEnding());
        assertEquals("2024-12-31", summary.getStatementClosingDate());
        assertEquals(creditLimit, summary.getCreditLimit());
        assertEquals(cacheAdvanceLimit, summary.getCacheAdvanceLimit());
        assertEquals(creditAvailable, summary.getCreditAvailable());
        assertEquals(creditAdvanceAvailable, summary.getCreditAdvanceAvailable());
        assertEquals(Integer.valueOf(30), summary.getDaysInBillingCycle());
        assertEquals(totalMinimumPaymentDue, summary.getTotalMinimumPaymentDue());
        assertEquals("2025-01-15", summary.getTotalMinimumPaymentDueDate());
    }
}
