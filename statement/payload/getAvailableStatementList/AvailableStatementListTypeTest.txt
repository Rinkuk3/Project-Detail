package com.td.mbna.msec.midtier.statement.payload.getAvailableStatementList;

import com.td.mbna.msec.midtier.statement.payload.HistoryStatementListType;
import com.td.mbna.msec.midtier.statement.payload.StatementActivityStatusType;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AvailableStatementListTypeTest {

    @Test
    void testGetAndSetStatementEndDate() {
        AvailableStatementListType availableStatementListType = new AvailableStatementListType();

        List<String> statementEndDate = new ArrayList<>();
        statementEndDate.add("2023-12-31");
        
        availableStatementListType.setStatementEndDate(statementEndDate);
        
        assertNotNull(availableStatementListType.getStatementEndDate());
        assertEquals(1, availableStatementListType.getStatementEndDate().size());
        assertEquals("2023-12-31", availableStatementListType.getStatementEndDate().get(0));
    }

    @Test
    void testGetAndSetStatementInfo() {
        AvailableStatementListType availableStatementListType = new AvailableStatementListType();

        List<HistoryStatementListType> statementInfo = new ArrayList<>();
        HistoryStatementListType historyStatement = new HistoryStatementListType();
        statementInfo.add(historyStatement);
        
        availableStatementListType.setStatementInfo(statementInfo);
        
        assertNotNull(availableStatementListType.getStatementInfo());
        assertEquals(1, availableStatementListType.getStatementInfo().size());
    }

    @Test
    void testGetAndSetStatementActivityStatus() {
        AvailableStatementListType availableStatementListType = new AvailableStatementListType();

        List<StatementActivityStatusType> statementActivityStatus = new ArrayList<>();
        StatementActivityStatusType statusType = new StatementActivityStatusType();
        statementActivityStatus.add(statusType);
        
        availableStatementListType.setStatementActivityStatus(statementActivityStatus);
        
        assertNotNull(availableStatementListType.getStatementActivityStatus());
        assertEquals(1, availableStatementListType.getStatementActivityStatus().size());
    }

    @Test
    void testGetAndSetHardCopyRate() {
        AvailableStatementListType availableStatementListType = new AvailableStatementListType();

        BigDecimal hardCopyRate = new BigDecimal("5.00");
        availableStatementListType.setHardCopyRate(hardCopyRate);
        
        assertNotNull(availableStatementListType.getHardCopyRate());
        assertEquals(0, availableStatementListType.getHardCopyRate().compareTo(hardCopyRate));
    }
}
