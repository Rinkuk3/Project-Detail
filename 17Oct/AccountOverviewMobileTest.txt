import com.td.mbna.msec.account.domain.mobile.AccountOverviewMobile;
import com.td.mbna.msec.account.domain.mobile.AccountMobile;
import com.td.mbna.msec.nudge.model.MobileNudge;
import com.td.mbna.msec.profile.model.ProfileMobile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AccountOverviewMobileTest {

    private AccountOverviewMobile accountOverviewMobile;

    @BeforeEach
    void setUp() {
        accountOverviewMobile = new AccountOverviewMobile();
    }

    @Test
    void testGettersAndSetters() {
        // Test ProfileMobile field
        ProfileMobile profile = new ProfileMobile();
        accountOverviewMobile.setProfile(profile);
        assertEquals(profile, accountOverviewMobile.getProfile());

        // Test List<AccountMobile> field
        List<AccountMobile> accounts = new ArrayList<>();
        AccountMobile account1 = new AccountMobile();
        AccountMobile account2 = new AccountMobile();
        accounts.add(account1);
        accounts.add(account2);
        accountOverviewMobile.setAccounts(accounts);
        assertEquals(accounts, accountOverviewMobile.getAccounts());
        assertEquals(2, accountOverviewMobile.getAccounts().size());

        // Test MobileNudge field
        MobileNudge nudge = new MobileNudge();
        accountOverviewMobile.setNudge(nudge);
        assertEquals(nudge, accountOverviewMobile.getNudge());

        // Test List<Object> intercept field
        List<Object> interceptList = new ArrayList<>();
        interceptList.add("Sample Intercept 1");
        interceptList.add("Sample Intercept 2");
        accountOverviewMobile.setIntercept(interceptList);
        assertEquals(interceptList, accountOverviewMobile.getIntercept());
        assertEquals(2, accountOverviewMobile.getIntercept().size());
    }

    @Test
    void testSerialization() throws IOException, ClassNotFoundException {
        accountOverviewMobile.setProfile(new ProfileMobile());

        // Serialize the object
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(accountOverviewMobile);

        // Deserialize the object
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        AccountOverviewMobile deserializedAccountOverviewMobile = (AccountOverviewMobile) objectInputStream.readObject();

        assertNotNull(deserializedAccountOverviewMobile);
        assertNotNull(deserializedAccountOverviewMobile.getProfile());
    }

    @Test
    void testToString() {
        ProfileMobile profile = new ProfileMobile();
        profile.setProfileId("12345");
        accountOverviewMobile.setProfile(profile);

        String toStringResult = accountOverviewMobile.toString();

        assertTrue(toStringResult.contains("profile"));
        assertTrue(toStringResult.contains("ProfileMobile"));
    }

    @Test
    void testEqualsAndHashCode() {
        AccountOverviewMobile accountOverviewMobile1 = new AccountOverviewMobile();
        AccountOverviewMobile accountOverviewMobile2 = new AccountOverviewMobile();

        ProfileMobile profile = new ProfileMobile();
        profile.setProfileId("12345");

        accountOverviewMobile1.setProfile(profile);
        accountOverviewMobile2.setProfile(profile);

        AccountOverviewMobile accountOverviewMobile3 = new AccountOverviewMobile();
        ProfileMobile differentProfile = new ProfileMobile();
        differentProfile.setProfileId("67890");
        accountOverviewMobile3.setProfile(differentProfile);

        // Test equality
        assertEquals(accountOverviewMobile1, accountOverviewMobile2);
        assertNotEquals(accountOverviewMobile1, accountOverviewMobile3);

        // Test hashCode
        assertEquals(accountOverviewMobile1.hashCode(), accountOverviewMobile2.hashCode());
        assertNotEquals(accountOverviewMobile1.hashCode(), accountOverviewMobile3.hashCode());
    }

    @Test
    void testAccountsListOperations() {
        List<AccountMobile> accounts = accountOverviewMobile.getAccounts();
        assertNotNull(accounts);  // The default should be an empty list, not null

        // Add account and test
        AccountMobile accountMobile = new AccountMobile();
        accounts.add(accountMobile);
        assertEquals(1, accounts.size());
        assertEquals(accountMobile, accounts.get(0));
    }

    @Test
    void testInterceptListOperations() {
        List<Object> intercept = accountOverviewMobile.getIntercept();
        assertNotNull(intercept);  // The default should be an empty list, not null

        // Add intercept object and test
        intercept.add("Test Intercept");
        assertEquals(1, intercept.size());
        assertEquals("Test Intercept", intercept.get(0));
    }
}
