import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.core.support.AccountHelper;
import com.td.mbna.msec.core.support.CommonTypeMapper;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.midtier.statement.payload.AcctDeliveryPreferenceType;
import com.td.mbna.msec.midtier.statement.payload.updateStatementDeliveryPreferences.UpdateStatementDeliveryPreferencesResponse;
import com.td.mbna.msec.midtier.types.common.DeliveryPreferenceType;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.ERROR;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.SUCCESS;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.UGO_BUSINESS_REASON;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class StatementDeliveryStatusServiceImplTest {

    @InjectMocks
    private StatementDeliveryStatusServiceImpl statementDeliveryStatusService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private CustomerDetails sessionCustomer;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private BaseMsecbffResponse response;

    @Mock
    private UpdateStatementDeliveryPreferencesResponse updateResponse;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private SessionProvider sessionProvider;

    @BeforeEach
    void setUp() {
        when(sessionProvider.getSessionCustomer()).thenReturn(sessionCustomer);
        when(sessionCustomer.getAccounts()).thenReturn(new ArrayList<>());
        when(sessionProvider.getSessionCustomer()).thenReturn(sessionCustomer);
    }

    @Test
    void testUpdateDeliveryPreferencesToPaper_success() {
        String accountNumber = "123456789";

        when(sessionCustomer.getAccounts()).thenReturn(new ArrayList<>());
        when(statementDeliveryStatusService.getAccount(accountNumber)).thenReturn(accountDetails);
        when(accountDetails.isAllowedPaperStatements()).thenReturn(true);
        when(statementDeliveryStatusService.updateStatementDeliveryPreferences(accountDetails)).thenReturn(updateResponse);
        when(updateResponse.getResponsePayload()).thenReturn(new Object());

        BaseMsecbffResponse result = statementDeliveryStatusService.updateDeliveryPreferencesToPaper(accountNumber, httpServletRequest);

        assertEquals(SUCCESS, result.getStatus());
        verify(CommonTypeMapper).updateCurrentAccDeliveryPres(accountNumber, sessionCustomer.getAccounts(), DeliveryPreferenceType.PAPER);
        verify(AccountHelper).updateToPaper(accountDetails);
        verify(midTierServiceHelper).createAuditLog("SS1005");
    }

    @Test
    void testUpdateDeliveryPreferencesToPaper_unauthorized() {
        String accountNumber = "123456789";

        when(statementDeliveryStatusService.getAccount(accountNumber)).thenReturn(accountDetails);
        when(accountDetails.isAllowedPaperStatements()).thenReturn(false);

        assertThrows(BusinessException.class, () -> {
            statementDeliveryStatusService.updateDeliveryPreferencesToPaper(accountNumber, httpServletRequest);
        });

        verify(midTierServiceHelper).createAuditLog("SS1001");
    }

    @Test
    void testUpdateDeliveryPreferencesToPaper_updateFailure() {
        String accountNumber = "123456789";

        when(statementDeliveryStatusService.getAccount(accountNumber)).thenReturn(accountDetails);
        when(accountDetails.isAllowedPaperStatements()).thenReturn(true);
        when(statementDeliveryStatusService.updateStatementDeliveryPreferences(accountDetails)).thenThrow(new RuntimeException("Update failed"));

        assertThrows(RuntimeException.class, () -> {
            statementDeliveryStatusService.updateDeliveryPreferencesToPaper(accountNumber, httpServletRequest);
        });

        verify(midTierServiceHelper).createAuditLog("SS1006");
    }

    @Test
    void testUpdateDeliveryPreferencesToPaper_nullResponse() {
        String accountNumber = "123456789";

        when(statementDeliveryStatusService.getAccount(accountNumber)).thenReturn(accountDetails);
        when(accountDetails.isAllowedPaperStatements()).thenReturn(true);
        when(statementDeliveryStatusService.updateStatementDeliveryPreferences(accountDetails)).thenReturn(updateResponse);
        when(updateResponse.getResponsePayload()).thenReturn(null);
        when(HttpUtil.isUgoApp(httpServletRequest)).thenReturn(true);

        BaseMsecbffResponse result = statementDeliveryStatusService.updateDeliveryPreferencesToPaper(accountNumber, httpServletRequest);

        assertEquals(ERROR, result.getStatus());
        verify(sessionProvider).setSessionAttribute(MBNA_BUSINESS_EVENT_REASON, EMPTY);
    }

    @Test
    void testIsAuthorized_authorized() {
        when(accountDetails.isAllowedPaperStatements()).thenReturn(true);

        boolean result = statementDeliveryStatusService.isAuthorized(accountDetails);

        assertTrue(result);
    }

    @Test
    void testIsAuthorized_notAuthorized() {
        when(accountDetails.isAllowedPaperStatements()).thenReturn(false);

        boolean result = statementDeliveryStatusService.isAuthorized(accountDetails);

        assertFalse(result);
    }

    @Test
    void testIsAuthorized_nullAccount() {
        boolean result = statementDeliveryStatusService.isAuthorized(null);

        assertFalse(result);
    }
}
