package com.td.mbna.msec.balancetransfer.domain;

import com.td.mbna.msec.midtier.transfer.payload.BTConfirmationType;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class BalanceTransferResponseTest {

    @Test
    void testSettersAndGetters() {
        // Given
        BalanceTransferResponse response = new BalanceTransferResponse();

        // Test email
        String email = "test@example.com";
        response.setEmail(email);
        assertEquals(email, response.getEmail());

        // Test phone
        String phone = "123-456-7890";
        response.setPhone(phone);
        assertEquals(phone, response.getPhone());

        // Test numberoftransfers
        response.setNumberoftransfers(3);
        assertEquals(3, response.getNumberoftransfers());

        // Test btConfirmationList
        List<BTConfirmationType> confirmationList = new ArrayList<>();
        BTConfirmationType confirmation = new BTConfirmationType(); // Assume BTConfirmationType has a no-arg constructor
        confirmationList.add(confirmation);
        response.setBtConfirmationList(confirmationList);
        assertEquals(confirmationList, response.getBtConfirmationList());
        assertEquals(1, response.getBtConfirmationList().size());

        // Test minNumOfDays
        Integer minNumOfDays = 7;
        response.setMinNumOfDays(minNumOfDays);
        assertEquals(minNumOfDays, response.getMinNumOfDays());

        // Test maxNumOfDays
        Integer maxNumOfDays = 30;
        response.setMaxNumOfDays(maxNumOfDays);
        assertEquals(maxNumOfDays, response.getMaxNumOfDays());

        // Test containError
        response.setContainError(true);
        assertTrue(response.getContainError());

        // Test contractRate
        BigDecimal contractRate = new BigDecimal("2.5");
        response.setContractRate(contractRate);
        assertEquals(contractRate, response.getContractRate());

        // Test interestRate
        BigDecimal interestRate = new BigDecimal("3.5");
        response.setInterestRate(interestRate);
        assertEquals(interestRate, response.getInterestRate());

        // Test totalTransferFees
        BigDecimal totalTransferFees = new BigDecimal("100.00");
        response.setTotalTransferFees(totalTransferFees);
        assertEquals(totalTransferFees, response.getTotalTransferFees());
    }
}
