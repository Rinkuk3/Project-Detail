import com.td.mbna.msec.account.domain.StatementItem;
import com.td.mbna.msec.account.repository.AccountRepository;
import com.td.mbna.msec.account.statement.StatementHistoryService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.ResponseEntity;

import javax.servlet.http.HttpServletRequest;
import java.io.InputStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class StatementHistoryResourceTest {

    @InjectMocks
    private StatementHistoryResource statementHistoryResource;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private AccountRepository accountRepository;

    @Mock
    private StatementHistoryService statementHistoryService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetStatementHistoryYearList() {
        // Arrange
        String accountId = "12345";
        List<String> years = List.of("2021", "2022");
        when(statementHistoryService.getStatementHistoryYearList(accountId, httpServletRequest)).thenReturn(years);

        // Act
        Map<String, Object> response = statementHistoryResource.getStatementHistoryYearList(accountId, httpServletRequest);

        // Assert
        assertEquals(SUCCESS, response.get(STATUS));
        assertEquals(years, response.get("years"));
    }

    @Test
    public void testGetStatementHistory_DmsNotAvailable() {
        // Arrange
        String accountId = "12345";
        String year = "2022";
        when(statementHistoryService.getStatementHistory(accountId, year, httpServletRequest)).thenReturn(new ArrayList<>());
        when(sessionProvider.getSessionAttribute(SESSION_DMS_AVAILABILITY_KEY)).thenReturn(false);

        // Act
        Map<String, Object> response = statementHistoryResource.getStatementHistory(accountId, year, httpServletRequest);

        // Assert
        assertEquals(SUCCESS, response.get(STATUS));
        assertEquals(new ArrayList<>(), response.get("StatementItem"));
        assertEquals(false, response.get("dmsAvailable"));
    }

    @Test
    public void testGetStatementHistory_DmsAvailable() {
        // Arrange
        String accountId = "12345";
        String year = "2022";
        List<StatementItem> statementItems = List.of(new StatementItem());
        when(statementHistoryService.getStatementHistory(accountId, year, httpServletRequest)).thenReturn(statementItems);
        when(sessionProvider.getSessionAttribute(SESSION_DMS_AVAILABILITY_KEY)).thenReturn(true);

        // Act
        Map<String, Object> response = statementHistoryResource.getStatementHistory(accountId, year, httpServletRequest);

        // Assert
        assertEquals(SUCCESS, response.get(STATUS));
        assertEquals(statementItems, response.get("StatementItem"));
        assertEquals(true, response.get("dmsAvailable"));
    }

    @Test
    public void testGetFileData() throws ParseException {
        // Arrange
        String accountId = "12345";
        String selectedDate = "2024-10-16";
        String contentDisposition = "attachment";
        String folder = "someFolder";
        String insertDocId = "docId";
        InputStream inputStream = mock(InputStream.class);
        int[] size = {1024}; // Example size

        when(statementHistoryService.getFileData(accountId, selectedDate, contentDisposition, folder, insertDocId, size)).thenReturn(inputStream);

        // Act
        ResponseEntity<InputStreamResource> responseEntity = statementHistoryResource.getFileData(accountId, selectedDate, contentDisposition, folder, insertDocId, httpServletRequest);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    }

    @Test
    public void testGetHistoryFileData() {
        // Arrange
        String accountId = "12345";
        String selectedDate = "2024-10-16";
        String contentDisposition = "inline";
        String folder = "someFolder";
        String insertDocId = "docId";
        InputStream inputStream = mock(InputStream.class);
        int[] size = {2048}; // Example size

        when(statementHistoryService.getHistoryFileData(accountId, selectedDate, contentDisposition, folder, insertDocId, httpServletRequest, size)).thenReturn(inputStream);

        // Act
        ResponseEntity<InputStreamResource> responseEntity = statementHistoryResource.getHistoryFileData(accountId, selectedDate, contentDisposition, folder, insertDocId, httpServletRequest);

        // Assert
        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
    }

    @Test
    public void testGetStatementByClosingDate() {
        // Arrange
        Map<String, String> closingDates = new HashMap<>();
        closingDates.put("2024-10-01", "Closing Date 1");
        when(statementHistoryService.getStatementClosingDates(httpServletRequest)).thenReturn(closingDates);

        // Act
        Map<String, Object> response = statementHistoryResource.getStatementByClosingDate(httpServletRequest);

        // Assert
        assertEquals(SUCCESS, response.get(STATUS));
        assertEquals(closingDates, response.get("closingDate"));
    }

    @Test
    public void testHandleStatements() {
        // Arrange
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(accountRepository.getRequestedAccount(request)).thenReturn(mock(com.td.mbna.msec.account.domain.AccountDetails.class));

        // Act
        ModelAndView modelAndView = statementHistoryResource.handleStatements(request);

        // Assert
        assertEquals("redirect:index.html#/account/statements", modelAndView.getViewName());
    }
}
