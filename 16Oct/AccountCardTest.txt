import com.td.mbna.msec.account.domain.AccountBalances;
import com.td.mbna.msec.account.domain.Card;
import com.td.mbna.msec.quicklink.model.QuickLinks;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class AccountCardTest {

    @Test
    public void testAccountCardBuilderAndGetters() {
        // Arrange
        AccountBalances accountBalances = AccountBalances.builder()
                .currentBalance(new java.math.BigDecimal("1000.50"))
                .creditAvailable(new java.math.BigDecimal("500.75"))
                .minimumPaymentDueDate(java.time.LocalDate.now())
                .build();
        
        Card card = Card.builder()
                .cardNumber("1234 5678 9123 4567")
                .cardType("Credit Card")
                .build();

        QuickLinks quickLinks = QuickLinks.builder()
                .linkName("Manage Card")
                .url("https://example.com/manage")
                .build();

        String customerId = "CUST123456";
        boolean isClosed = false;
        boolean isAllowedAccountSummary = true;
        String primaryCardHolderName = "John Doe";

        // Act
        AccountCard accountCard = AccountCard.builder()
                .accountBalances(accountBalances)
                .card(card)
                .quickLinks(quickLinks)
                .customerId(customerId)
                .closed(isClosed)
                .allowedAccountSummary(isAllowedAccountSummary)
                .primaryCardHolderName(primaryCardHolderName)
                .build();

        // Assert
        assertEquals(accountBalances, accountCard.getAccountBalances());
        assertEquals(card, accountCard.getCard());
        assertEquals(quickLinks, accountCard.getQuickLinks());
        assertEquals(customerId, accountCard.getCustomerId());
        assertEquals(isClosed, accountCard.isClosed());
        assertEquals(isAllowedAccountSummary, accountCard.isAllowedAccountSummary());
        assertEquals(primaryCardHolderName, accountCard.getPrimaryCardHolderName());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        AccountBalances accountBalances1 = AccountBalances.builder()
                .currentBalance(new java.math.BigDecimal("1000.50"))
                .creditAvailable(new java.math.BigDecimal("500.75"))
                .minimumPaymentDueDate(java.time.LocalDate.now())
                .build();

        Card card1 = Card.builder()
                .cardNumber("1234 5678 9123 4567")
                .cardType("Credit Card")
                .build();

        QuickLinks quickLinks1 = QuickLinks.builder()
                .linkName("Manage Card")
                .url("https://example.com/manage")
                .build();

        AccountCard accountCard1 = AccountCard.builder()
                .accountBalances(accountBalances1)
                .card(card1)
                .quickLinks(quickLinks1)
                .customerId("CUST123456")
                .closed(false)
                .allowedAccountSummary(true)
                .primaryCardHolderName("John Doe")
                .build();

        AccountCard accountCard2 = AccountCard.builder()
                .accountBalances(accountBalances1)
                .card(card1)
                .quickLinks(quickLinks1)
                .customerId("CUST123456")
                .closed(false)
                .allowedAccountSummary(true)
                .primaryCardHolderName("John Doe")
                .build();

        AccountCard accountCard3 = AccountCard.builder()
                .accountBalances(accountBalances1)
                .card(card1)
                .quickLinks(quickLinks1)
                .customerId("CUST654321")
                .closed(false)
                .allowedAccountSummary(true)
                .primaryCardHolderName("Jane Doe")
                .build();

        // Act & Assert
        assertEquals(accountCard1, accountCard2, "Objects with the same values should be equal");
        assertNotEquals(accountCard1, accountCard3, "Objects with different values should not be equal");

        assertEquals(accountCard1.hashCode(), accountCard2.hashCode(), "Objects with the same values should have the same hash code");
        assertNotEquals(accountCard1.hashCode(), accountCard3.hashCode(), "Objects with different values should have different hash codes");
    }

    @Test
    public void testToString() {
        // Arrange
        AccountBalances accountBalances = AccountBalances.builder()
                .currentBalance(new java.math.BigDecimal("1000.50"))
                .creditAvailable(new java.math.BigDecimal("500.75"))
                .minimumPaymentDueDate(java.time.LocalDate.now())
                .build();

        Card card = Card.builder()
                .cardNumber("1234 5678 9123 4567")
                .cardType("Credit Card")
                .build();

        QuickLinks quickLinks = QuickLinks.builder()
                .linkName("Manage Card")
                .url("https://example.com/manage")
                .build();

        AccountCard accountCard = AccountCard.builder()
                .accountBalances(accountBalances)
                .card(card)
                .quickLinks(quickLinks)
                .customerId("CUST123456")
                .closed(false)
                .allowedAccountSummary(true)
                .primaryCardHolderName("John Doe")
                .build();

        // Act
        String result = accountCard.toString();

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("AccountBalances"));
        assertTrue(result.contains("Card"));
        assertTrue(result.contains("QuickLinks"));
        assertTrue(result.contains("customerId=CUST123456"));
        assertTrue(result.contains("primaryCardHolderName=John Doe"));
    }
}
