import com.td.mbna.msec.account.domain.AccountSummary;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class AccountSummaryTest {

    @Test
    public void testBuilderAndGetters() {
        // Arrange
        String cardName = "Visa";
        String cardNameFr = "Visa FR";
        String accountId = "123456";
        String endingIn = "7890";
        boolean allowedAccountSummary = true;
        String cardNameShort = "VISA";
        String cardUrlEn = "http://example.com/visa";
        String cardNameShortFr = "VISA FR";
        String cardUrlFr = "http://example.com/visa_fr";
        boolean eligibleForPaperlessOffer = true;
        boolean enrolledForPaperlessStatements = false;
        String pchName = "John Doe";
        String accountCurrentSetting = "Active";
        String accountEmail = "john.doe@example.com";
        boolean allowedStandardEForms = true;
        boolean primaryCardHolder = true;

        // Act
        AccountSummary accountSummary = AccountSummary.builder()
                .cardName(cardName)
                .cardNameFr(cardNameFr)
                .accountId(accountId)
                .endingIn(endingIn)
                .allowedAccountSummary(allowedAccountSummary)
                .cardNameShort(cardNameShort)
                .cardUrlEn(cardUrlEn)
                .cardNameShortFr(cardNameShortFr)
                .cardUrlFr(cardUrlFr)
                .eligibleForPaperlessOffer(eligibleForPaperlessOffer)
                .enrolledForPaperlessStatements(enrolledForPaperlessStatements)
                .pchName(pchName)
                .accountCurrentSetting(accountCurrentSetting)
                .accountEmail(accountEmail)
                .allowedStandardEForms(allowedStandardEForms)
                .primaryCardHolder(primaryCardHolder)
                .build();

        // Assert
        assertEquals(cardName, accountSummary.getCardName(), "Card name should match");
        assertEquals(cardNameFr, accountSummary.getCardNameFr(), "Card name in French should match");
        assertEquals(accountId, accountSummary.getAccountId(), "Account ID should match");
        assertEquals(endingIn, accountSummary.getEndingIn(), "Ending in should match");
        assertEquals(allowedAccountSummary, accountSummary.isAllowedAccountSummary(), "Allowed account summary should match");
        assertEquals(cardNameShort, accountSummary.getCardNameShort(), "Short card name should match");
        assertEquals(cardUrlEn, accountSummary.getCardUrlEn(), "Card URL in English should match");
        assertEquals(cardNameShortFr, accountSummary.getCardNameShortFr(), "Short card name in French should match");
        assertEquals(cardUrlFr, accountSummary.getCardUrlFr(), "Card URL in French should match");
        assertEquals(eligibleForPaperlessOffer, accountSummary.isEligibleForPaperlessOffer(), "Eligible for paperless offer should match");
        assertEquals(enrolledForPaperlessStatements, accountSummary.isEnrolledForPaperlessStatements(), "Enrolled for paperless statements should match");
        assertEquals(pchName, accountSummary.getPchName(), "PCH name should match");
        assertEquals(accountCurrentSetting, accountSummary.getAccountCurrentSetting(), "Account current setting should match");
        assertEquals(accountEmail, accountSummary.getAccountEmail(), "Account email should match");
        assertEquals(allowedStandardEForms, accountSummary.isAllowedStandardEForms(), "Allowed standard E-forms should match");
        assertEquals(primaryCardHolder, accountSummary.isPrimaryCardHolder(), "Primary card holder should match");
    }

    @Test
    public void testWithNullValues() {
        // Act
        AccountSummary accountSummary = AccountSummary.builder()
                .cardName(null)
                .cardNameFr(null)
                .accountId(null)
                .endingIn(null)
                .allowedAccountSummary(false)
                .cardNameShort(null)
                .cardUrlEn(null)
                .cardNameShortFr(null)
                .cardUrlFr(null)
                .eligibleForPaperlessOffer(false)
                .enrolledForPaperlessStatements(false)
                .pchName(null)
                .accountCurrentSetting(null)
                .accountEmail(null)
                .allowedStandardEForms(false)
                .primaryCardHolder(false)
                .build();

        // Assert
        assertNull(accountSummary.getCardName(), "Card name should be null");
        assertNull(accountSummary.getCardNameFr(), "Card name in French should be null");
        assertNull(accountSummary.getAccountId(), "Account ID should be null");
        assertNull(accountSummary.getEndingIn(), "Ending in should be null");
        assertFalse(accountSummary.isAllowedAccountSummary(), "Allowed account summary should be false");
        assertNull(accountSummary.getCardNameShort(), "Short card name should be null");
        assertNull(accountSummary.getCardUrlEn(), "Card URL in English should be null");
        assertNull(accountSummary.getCardNameShortFr(), "Short card name in French should be null");
        assertNull(accountSummary.getCardUrlFr(), "Card URL in French should be null");
        assertFalse(accountSummary.isEligibleForPaperlessOffer(), "Eligible for paperless offer should be false");
        assertFalse(accountSummary.isEnrolledForPaperlessStatements(), "Enrolled for paperless statements should be false");
        assertNull(accountSummary.getPchName(), "PCH name should be null");
        assertNull(accountSummary.getAccountCurrentSetting(), "Account current setting should be null");
        assertNull(accountSummary.getAccountEmail(), "Account email should be null");
        assertFalse(accountSummary.isAllowedStandardEForms(), "Allowed standard E-forms should be false");
        assertFalse(accountSummary.isPrimaryCardHolder(), "Primary card holder should be false");
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        AccountSummary accountSummary1 = AccountSummary.builder()
                .cardName("Visa")
                .accountId("123456")
                .allowedAccountSummary(true)
                .build();

        AccountSummary accountSummary2 = AccountSummary.builder()
                .cardName("Visa")
                .accountId("123456")
                .allowedAccountSummary(true)
                .build();

        // Act & Assert
        assertEquals(accountSummary1, accountSummary2, "AccountSummary should be equal");
        assertEquals(accountSummary1.hashCode(), accountSummary2.hashCode(), "Hashcodes should match");
    }
}
