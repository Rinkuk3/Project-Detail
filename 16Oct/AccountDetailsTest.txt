import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class AccountDetailsTest {

    @Test
    public void testDefaultConstructor() {
        AccountDetails accountDetails = new AccountDetails();
        assertNotNull(accountDetails);
        assertNull(accountDetails.getAccountNumber());
        assertNull(accountDetails.getAccountId());
        assertNull(accountDetails.getCardName());
        assertNull(accountDetails.getCreditAvailable());
        assertNull(accountDetails.getCashAdvAvailable());
        assertNull(accountDetails.getMinPaymentDue());
        assertNotNull(accountDetails.getTransactions()); // should initialize as an empty list
    }

    @Test
    public void testConstructorWithAccountNumber() {
        String accountNumber = "12345";
        AccountDetails accountDetails = new AccountDetails(accountNumber);

        assertEquals(accountNumber, accountDetails.getAccountNumber());
    }

    @Test
    public void testConstructorWithMultipleParams() {
        String accountNumber = "12345";
        String accountId = "A123";
        String cardName = "Test Card";
        BigDecimal creditAvailable = new BigDecimal("1000.00");
        BigDecimal cashAdvAvailable = new BigDecimal("500.00");
        BigDecimal minPaymentDue = new BigDecimal("50.00");

        AccountDetails accountDetails = new AccountDetails(accountNumber, accountId, cardName, creditAvailable, cashAdvAvailable, minPaymentDue);

        assertEquals(accountNumber, accountDetails.getAccountNumber());
        assertEquals(accountId, accountDetails.getAccountId());
        assertEquals(cardName, accountDetails.getCardName());
        assertEquals(creditAvailable, accountDetails.getCreditAvailable());
        assertEquals(cashAdvAvailable, accountDetails.getCashAdvAvailable());
        assertEquals(minPaymentDue, accountDetails.getMinPaymentDue());
        assertNotNull(accountDetails.getTransactions());
        assertTrue(accountDetails.getTransactions().isEmpty());
    }

    @Test
    public void testGettersAndSetters() {
        AccountDetails accountDetails = new AccountDetails();

        accountDetails.setAccountNumber("12345");
        accountDetails.setAccountId("A123");
        accountDetails.setCardName("Test Card");
        accountDetails.setCreditAvailable(new BigDecimal("1000.00"));
        accountDetails.setCashAdvAvailable(new BigDecimal("500.00"));
        accountDetails.setMinPaymentDue(new BigDecimal("50.00"));
        
        assertEquals("12345", accountDetails.getAccountNumber());
        assertEquals("A123", accountDetails.getAccountId());
        assertEquals("Test Card", accountDetails.getCardName());
        assertEquals(new BigDecimal("1000.00"), accountDetails.getCreditAvailable());
        assertEquals(new BigDecimal("500.00"), accountDetails.getCashAdvAvailable());
        assertEquals(new BigDecimal("50.00"), accountDetails.getMinPaymentDue());
    }

    @Test
    public void testTransactions() {
        AccountDetails accountDetails = new AccountDetails();
        List<TransactionDetails> transactions = new ArrayList<>();
        transactions.add(new TransactionDetails()); // assuming TransactionDetails is properly implemented

        accountDetails.setTransactions(transactions);
        assertNotNull(accountDetails.getTransactions());
        assertEquals(1, accountDetails.getTransactions().size());
    }

    @Test
    public void testCardNameForDropDown() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setCardName("Test\u1D39\u1D30Card");

        assertEquals("Test<sup>MD</sup>Card", accountDetails.getCardName());
        assertEquals("TestMDCard", accountDetails.getCardNameForDropDown());
    }

    @Test
    public void testIsRewardsCard() {
        AccountDetails accountDetails = new AccountDetails();
        assertFalse(accountDetails.isRewardsCard());

        accountDetails.setRewardsCard(true);
        assertTrue(accountDetails.isRewardsCard());
    }

    @Test
    public void testTempAuths() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setTempAuths(new BigDecimal("300.00"));
        assertEquals(new BigDecimal("300.00"), accountDetails.getTempAuths());
    }

    @Test
    public void testPointsAvailable() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setPointsAvailable(new BigDecimal("5000"));
        assertEquals(new BigDecimal("5000"), accountDetails.getPointsAvailable());
    }

    @Test
    public void testBalance() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setBalance(new BigDecimal("1000"));
        assertEquals(new BigDecimal("1000"), accountDetails.getBalance());
    }
	
	 @Test
    public void testSetMinPaymentDueDate() {
        yourClass.setMinPaymentDueDate(date);
        assertEquals(date, yourClass.getMinPaymentDueDate());
    }

    @Test
    public void testGetLastStmtBalanceDate() {
        yourClass.setLastStmtBalanceDate(date);
        assertEquals(date, yourClass.getLastStmtBalanceDate());
    }

    @Test
    public void testSetLastStmtBalance() {
        yourClass.setLastStmtBalance(bigDecimal);
        assertEquals(bigDecimal, yourClass.getLastStmtBalance());
    }

    @Test
    public void testSetNextStmtDate() {
        yourClass.setNextStmtDate(date);
        assertEquals(date, yourClass.getNextStmtDate());
    }

    @Test
    public void testSetCurrentSetting() {
        yourClass.setCurrentSetting(string);
        assertEquals(string, yourClass.getCurrentSetting());
    }

    @Test
    public void testSetRewardsCard() {
        yourClass.setRewardsCard(bool);
        assertTrue(yourClass.isRewardsCard());
    }

    @Test
    public void testSetAffinityCode() {
        yourClass.setAffinityCode(string);
        assertEquals(string, yourClass.getAffinityCode());
    }

    @Test
    public void testSetLogo() {
        yourClass.setLogo(string);
        assertEquals(string, yourClass.getLogo());
    }

    @Test
    public void testSetCurrentDate() {
        yourClass.setCurrentDate(timestamp);
        assertEquals(timestamp, yourClass.getCurrentDate());
    }

    @Test
    public void testSetCardActivated() {
        yourClass.setCardActivated(bool);
        assertTrue(yourClass.isCardActivated());
    }

    @Test
    public void testSetEnrolled() {
        yourClass.setEnrolled(bool);
        assertTrue(yourClass.isEnrolled());
    }

    @Test
    public void testSetPrimaryUser() {
        yourClass.setPrimaryUser(bool);
        assertTrue(yourClass.isPrimaryUser());
    }

    @Test
    public void testSetCardDeliveredDate() {
        yourClass.setCardDeliveredDate(date);
        assertEquals(date, yourClass.getCardDeliveredDate());
    }

    @Test
    public void testSetAcctOpenDate() {
        yourClass.setAcctOpenDate(date);
        assertEquals(date, yourClass.getAcctOpenDate());
    }

    @Test
    public void testSetAllowedBalanceProtection() {
        yourClass.setAllowedBalanceProtection(bool);
        assertTrue(yourClass.isAllowedBalanceProtection());
    }

    @Test
    public void testSetAllowedBalanceTransfer() {
        yourClass.setAllowedBalanceTransfer(bool);
        assertTrue(yourClass.isAllowedBalanceTransfer());
    }

    @Test
    public void testSetAllowedMiniPayment() {
        yourClass.setAllowedMiniPayment(bool);
        assertTrue(yourClass.isAllowedMiniPayment());
    }

    @Test
    public void testSetAllowedCreditLimitDecrease() {
        yourClass.setAllowedCreditLimitDecrease(bool);
        assertTrue(yourClass.isAllowedCreditLimitDecrease());
    }

    @Test
    public void testSetAllowedEStatementDisplay() {
        yourClass.setAllowedEStatementDisplay(bool);
        assertTrue(yourClass.isAllowedEStatementDisplay());
    }

    @Test
    public void testSetAllowedEnrollment() {
        yourClass.setAllowedEnrollment(bool);
        assertTrue(yourClass.isAllowedEnrollment());
    }

    @Test
    public void testSetBpOffers() {
        yourClass.setBpOffers(offers);
        assertEquals(offers, yourClass.getBpOffers());
    }

    @Test
    public void testSetMpdOffers() {
        yourClass.setMpdOffers(offers);
        assertEquals(offers, yourClass.getMpdOffers());
    }

    @Test
    public void testSetBtOffers() {
        yourClass.setBtOffers(offers);
        assertEquals(offers, yourClass.getBtOffers());
    }
	
	 @Test
    public void testGetTopCLIOffer_CliOffersNotNullAndNotEmpty_ReturnsFirstOffer() {
        List<OfferDetails> cliOffers = new ArrayList<>();
        cliOffers.add(mockOfferDetails);
        yourClass.setCliOffers(cliOffers);
        
        OfferDetails result = yourClass.getTopCLIOffer();
        
        assertNotNull(result);
        assertEquals(mockOfferDetails, result);
    }

    @Test
    public void testGetTopCLIOffer_CliOffersNull_ReturnsNull() {
        yourClass.setCliOffers(null);
        assertNull(yourClass.getTopCLIOffer());
    }

    @Test
    public void testGetTopCLIOffer_CliOffersEmpty_ReturnsNull() {
        yourClass.setCliOffers(new ArrayList<>());
        assertNull(yourClass.getTopCLIOffer());
    }

    @Test
    public void testGetCLIOffer_ValidOfferID_ReturnsMatchingOffer() {
        when(mockOfferDetails.getOfferID()).thenReturn("offer1");
        List<OfferDetails> cliOffers = new ArrayList<>();
        cliOffers.add(mockOfferDetails);
        yourClass.setCliOffers(cliOffers);

        OfferDetails result = yourClass.getCLIOffer("offer1");
        
        assertNotNull(result);
        assertEquals(mockOfferDetails, result);
    }

    @Test
    public void testGetCLIOffer_InvalidOfferID_ReturnsNull() {
        when(mockOfferDetails.getOfferID()).thenReturn("offer1");
        List<OfferDetails> cliOffers = new ArrayList<>();
        cliOffers.add(mockOfferDetails);
        yourClass.setCliOffers(cliOffers);

        OfferDetails result = yourClass.getCLIOffer("offer2");
        
        assertNull(result);
    }

    @Test
    public void testHasBTOffers_WhenOffersExist_ReturnsTrue() {
        List<OfferDetails> btOffers = new ArrayList<>();
        btOffers.add(mockOfferDetails);
        yourClass.setBtOffers(btOffers);

        assertTrue(yourClass.hasBTOffers());
    }

    @Test
    public void testHasBTOffers_NoOffers_ReturnsFalse() {
        yourClass.setBtOffers(new ArrayList<>());
        assertFalse(yourClass.hasBTOffers());
    }

    @Test
    public void testGetTopBTOffer_WithBTOffers_ReturnsFirstOffer() {
        List<OfferDetails> btOffers = new ArrayList<>();
        btOffers.add(mockOfferDetails);
        yourClass.setBtOffers(btOffers);

        OfferDetails result = yourClass.getTopBTOffer();
        
        assertNotNull(result);
        assertEquals(mockOfferDetails, result);
    }

    @Test
    public void testGetTopBTOffer_NoBTOffers_ReturnsNull() {
        yourClass.setBtOffers(new ArrayList<>());
        assertNull(yourClass.getTopBTOffer());
    }

    @Test
    public void testIsAllowedToAddAU_WhenUnderLimit_ReturnsTrue() {
        List<CardHolderType> authorizedUsers = new ArrayList<>();
        authorizedUsers.add(new CardHolderType());
        yourClass.setAuthorizedUsers(authorizedUsers);

        boolean result = yourClass.isAllowedToAddAU("5");
        assertTrue(result);
    }

    @Test
    public void testIsAllowedToAddAU_WhenOverLimit_ReturnsFalse() {
        List<CardHolderType> authorizedUsers = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            authorizedUsers.add(new CardHolderType());
        }
        yourClass.setAuthorizedUsers(authorizedUsers);

        boolean result = yourClass.isAllowedToAddAU("4");
        assertFalse(result);
    }

    @Test
    public void testIsAllowedToAddAU_NullAuthorizedUsers_ReturnsTrue() {
        yourClass.setAuthorizedUsers(null);
        assertTrue(yourClass.isAllowedToAddAU("4"));
    }

    @Test
    public void testGetOfferById_ValidOfferID_ReturnsOffer() {
        when(mockOfferDetails.getOfferID()).thenReturn("offer1");
        List<OfferDetails> offers = new ArrayList<>();
        offers.add(mockOfferDetails);

        OfferDetails result = yourClass.getOfferById("offer1", offers);
        
        assertNotNull(result);
        assertEquals(mockOfferDetails, result);
    }

    @Test
    public void testGetOfferById_InvalidOfferID_ReturnsNull() {
        when(mockOfferDetails.getOfferID()).thenReturn("offer1");
        List<OfferDetails> offers = new ArrayList<>();
        offers.add(mockOfferDetails);

        OfferDetails result = yourClass.getOfferById("offer2", offers);
        
        assertNull(result);
    }

    @Test
    public void testGetContractOffer_ReturnsSetOffer() {
        yourClass.setContractOffer(mockOfferDetails);
        OfferDetails result = yourClass.getContractOffer();

        assertNotNull(result);
        assertEquals(mockOfferDetails, result);
    }

    @Test
    public void testHasContractOffer_WithOffer_ReturnsTrue() {
        yourClass.setContractOffer(mockOfferDetails);
        assertTrue(yourClass.hasContractOffer());
    }

    @Test
    public void testHasContractOffer_NoOffer_ReturnsFalse() {
        yourClass.setContractOffer(null);
        assertFalse(yourClass.hasContractOffer());
    }
    
    @Test
    public void testSetAndGetRoleCD() {
        yourClass.setRoleCD("admin");
        assertEquals("admin", yourClass.getRoleCD());
    }
    
}
	