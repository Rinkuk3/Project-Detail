import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class TransactionsTest {

    @Test
    public void testGettersAndSetters() {
        // Arrange
        Transactions transaction = new Transactions();
        String tranType = "Purchase";
        String tranDate = "2023-10-01";
        String postDate = "2023-10-02";
        String desc = "Transaction Description";
        String refNo = "REF123456";
        int amt = 100;
        String cardHolderName = "John Doe";
        String last4 = "1234";
        boolean ipEligibility = true;
        List<IpOfferRate> offerRate = new ArrayList<>();

        // Act
        transaction.setTranType(tranType);
        transaction.setTranDate(tranDate);
        transaction.setPostDate(postDate);
        transaction.setDesc(desc);
        transaction.setRefNo(refNo);
        transaction.setAmt(amt);
        transaction.setCardHolderName(cardHolderName);
        transaction.setLast4(last4);
        transaction.setIpEligibility(ipEligibility);
        transaction.setOfferRate(offerRate);

        // Assert
        assertEquals(tranType, transaction.getTranType());
        assertEquals(tranDate, transaction.getTranDate());
        assertEquals(postDate, transaction.getPostDate());
        assertEquals(desc, transaction.getDesc());
        assertEquals(refNo, transaction.getRefNo());
        assertEquals(amt, transaction.getAmt());
        assertEquals(cardHolderName, transaction.getCardHolderName());
        assertEquals(last4, transaction.getLast4());
        assertTrue(transaction.isIpEligibility());
        assertEquals(offerRate, transaction.getOfferRate());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        Transactions transaction1 = new Transactions();
        Transactions transaction2 = new Transactions();
        Transactions transaction3 = new Transactions();
        
        transaction1.setAmt(100);
        transaction2.setAmt(100);
        transaction3.setAmt(200);

        // Set the same properties for transaction1 and transaction2
        transaction1.setTranType("Purchase");
        transaction1.setTranDate("2023-10-01");
        transaction1.setPostDate("2023-10-02");
        transaction1.setDesc("Transaction Description");
        transaction1.setRefNo("REF123456");
        transaction1.setCardHolderName("John Doe");
        transaction1.setLast4("1234");
        transaction1.setIpEligibility(true);

        transaction2.setTranType("Purchase");
        transaction2.setTranDate("2023-10-01");
        transaction2.setPostDate("2023-10-02");
        transaction2.setDesc("Transaction Description");
        transaction2.setRefNo("REF123456");
        transaction2.setCardHolderName("John Doe");
        transaction2.setLast4("1234");
        transaction2.setIpEligibility(true);

        // Act & Assert
        assertEquals(transaction1, transaction2); // Check equality
        assertNotEquals(transaction1, transaction3); // Check non-equality
        assertEquals(transaction1.hashCode(), transaction2.hashCode()); // Check hash code equality
        assertNotEquals(transaction1.hashCode(), transaction3.hashCode()); // Check hash code non-equality
    }

    @Test
    public void testEqualsHandlesNull() {
        // Arrange
        Transactions transaction = new Transactions();

        // Act & Assert
        assertNotEquals(transaction, null); // Ensure not equal to null
        assertEquals(transaction, transaction); // Ensure equal to itself
    }

    @Test
    public void testEqualsWithDifferentTypes() {
        // Arrange
        Transactions transaction = new Transactions();
        String differentType = "String";

        // Act & Assert
        assertNotEquals(transaction, differentType); // Ensure not equal to a different type
    }

    @Test
    public void testHashCodeWithEmptyFields() {
        // Arrange
        Transactions transaction = new Transactions();
        transaction.setAmt(0);
        transaction.setDesc(null); // testing with null values
        transaction.setRefNo(null); // testing with null values
        transaction.setTranType(null); // testing with null values

        // Act
        int hashCode = transaction.hashCode();

        // Assert
        assertNotNull(hashCode); // Hash code should not be null
    }
}
