import com.td.mbna.msec.account.domain.AccountTransaction;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.*;

public class AccountTransactionTest {

    @Test
    public void testBuilderAndGetters() {
        // Arrange
        LocalDate transactionDate = LocalDate.of(2024, 10, 15);
        LocalDate postingDate = LocalDate.of(2024, 10, 16);
        String description = "Transaction description";
        String referenceNumber = "REF123456";
        String cardHolderName = "John Doe";
        String cardHolderNameFr = "Jean Dupont";
        BigDecimal amount = new BigDecimal("100.00");
        boolean primaryCardHolder = true;
        boolean ipEligibility = false;

        // Act
        AccountTransaction transaction = AccountTransaction.builder()
                .transactionDate(transactionDate)
                .postingDate(postingDate)
                .description(description)
                .referenceNumber(referenceNumber)
                .cardHolderName(cardHolderName)
                .cardHolderNameFr(cardHolderNameFr)
                .amount(amount)
                .primaryCardHolder(primaryCardHolder)
                .ipEligibility(ipEligibility)
                .build();

        // Assert
        assertEquals(transactionDate, transaction.getTransactionDate(), "Transaction date should match");
        assertEquals(postingDate, transaction.getPostingDate(), "Posting date should match");
        assertEquals(description, transaction.getDescription(), "Description should match");
        assertEquals(referenceNumber, transaction.getReferenceNumber(), "Reference number should match");
        assertEquals(cardHolderName, transaction.getCardHolderName(), "Card holder name should match");
        assertEquals(cardHolderNameFr, transaction.getCardHolderNameFr(), "Card holder name in French should match");
        assertEquals(amount, transaction.getAmount(), "Amount should match");
        assertTrue(transaction.isPrimaryCardHolder(), "Should be primary card holder");
        assertFalse(transaction.isIpEligibility(), "IP eligibility should be false");
    }

    @Test
    public void testWithNullValues() {
        // Act
        AccountTransaction transaction = AccountTransaction.builder()
                .transactionDate(null)
                .postingDate(null)
                .description(null)
                .referenceNumber(null)
                .cardHolderName(null)
                .cardHolderNameFr(null)
                .amount(null)
                .primaryCardHolder(false)
                .ipEligibility(false)
                .build();

        // Assert
        assertNull(transaction.getTransactionDate(), "Transaction date should be null");
        assertNull(transaction.getPostingDate(), "Posting date should be null");
        assertNull(transaction.getDescription(), "Description should be null");
        assertNull(transaction.getReferenceNumber(), "Reference number should be null");
        assertNull(transaction.getCardHolderName(), "Card holder name should be null");
        assertNull(transaction.getCardHolderNameFr(), "Card holder name in French should be null");
        assertNull(transaction.getAmount(), "Amount should be null");
        assertFalse(transaction.isPrimaryCardHolder(), "Should not be primary card holder");
        assertFalse(transaction.isIpEligibility(), "IP eligibility should be false");
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        LocalDate transactionDate = LocalDate.of(2024, 10, 15);
        AccountTransaction transaction1 = AccountTransaction.builder()
                .transactionDate(transactionDate)
                .description("Transaction 1")
                .amount(new BigDecimal("50.00"))
                .primaryCardHolder(true)
                .build();

        AccountTransaction transaction2 = AccountTransaction.builder()
                .transactionDate(transactionDate)
                .description("Transaction 1")
                .amount(new BigDecimal("50.00"))
                .primaryCardHolder(true)
                .build();

        // Act & Assert
        assertEquals(transaction1, transaction2, "Transactions should be equal");
        assertEquals(transaction1.hashCode(), transaction2.hashCode(), "Hashcodes should match");
    }
}
