import org.junit.jupiter.api.Test;
import java.util.Collections;
import static org.junit.jupiter.api.Assertions.*;

public class CreditCardTest {

    @Test
    public void testDefaultValues() {
        // Arrange
        CreditCard creditCard = new CreditCard();

        // Act & Assert
        assertNull(creditCard.getCardType(), "Default card type should be null");
        assertNull(creditCard.getCardName(), "Default card name should be null");
        assertNull(creditCard.getCardImgUrl(), "Default card image URL should be null");
        assertFalse(creditCard.isPrimaryCardHolder(), "Default primary card holder should be false");
        assertNull(creditCard.getAccountNumber(), "Default account number should be null");
        assertNull(creditCard.getEndingIn(), "Default endingIn should be null");
        assertFalse(creditCard.isActive(), "Default active should be false");
        assertFalse(creditCard.isMultiCard(), "Default multiCard should be false");
        assertFalse(creditCard.isNewlyOpenedAccount(), "Default newly opened account should be false");
        assertNull(creditCard.getAuthorizedUsers(), "Default authorized users should be null");
    }

    @Test
    public void testSettersAndGetters() {
        // Arrange
        CreditCard creditCard = new CreditCard();
        String cardType = "Visa";
        String cardName = "Visa Credit Card";
        String cardImgUrl = "http://example.com/card.jpg";
        String accountNumber = "123456789012";
        String endingIn = "1234";
        boolean primaryCardHolder = true;
        boolean active = true;
        boolean multiCard = true;
        boolean newlyOpenedAccount = true;
        AuthorizedUser user = new AuthorizedUser();
        user.setName("John Doe");
        
        // Act
        creditCard.setCardType(cardType);
        creditCard.setCardName(cardName);
        creditCard.setCardImgUrl(cardImgUrl);
        creditCard.setAccountNumber(accountNumber);
        creditCard.setEndingIn(endingIn);
        creditCard.setPrimaryCardHolder(primaryCardHolder);
        creditCard.setActive(active);
        creditCard.setMultiCard(multiCard);
        creditCard.setNewlyOpenedAccount(newlyOpenedAccount);
        creditCard.setAuthorizedUsers(Collections.singletonList(user));

        // Assert
        assertEquals(cardType, creditCard.getCardType(), "Card type should match");
        assertEquals(cardName, creditCard.getCardName(), "Card name should match");
        assertEquals(cardImgUrl, creditCard.getCardImgUrl(), "Card image URL should match");
        assertEquals(accountNumber, creditCard.getAccountNumber(), "Account number should match");
        assertEquals(endingIn, creditCard.getEndingIn(), "Ending in should match");
        assertTrue(creditCard.isPrimaryCardHolder(), "Primary card holder should be true");
        assertTrue(creditCard.isActive(), "Active should be true");
        assertTrue(creditCard.isMultiCard(), "Multi card should be true");
        assertTrue(creditCard.isNewlyOpenedAccount(), "Newly opened account should be true");
        assertNotNull(creditCard.getAuthorizedUsers(), "Authorized users should not be null");
        assertEquals(1, creditCard.getAuthorizedUsers().size(), "Authorized users size should match");
        assertEquals("John Doe", creditCard.getAuthorizedUsers().get(0).getName(), "Authorized user name should match");
    }
    
    @Test
    public void testAuthorizedUsersNull() {
        // Arrange
        CreditCard creditCard = new CreditCard();
        
        // Act
        creditCard.setAuthorizedUsers(null);
        
        // Assert
        assertNull(creditCard.getAuthorizedUsers(), "Authorized users should be null");
    }
}
