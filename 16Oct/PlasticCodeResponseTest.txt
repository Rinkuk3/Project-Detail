import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

public class PlasticCodeResponseTest {

    @Test
    public void testConstructorAndGetters() {
        // Arrange
        String expectedProductCodes = "Code123, Code456";
        String expectedLanguage = "en";
        String expectedPoCode = "PO123456";
        String expectedPictureId = "Pic123";
        LocalDateTime expectedLastUpdatedTime = LocalDateTime.now();

        // Act
        PlasticCodeResponse response = new PlasticCodeResponse();
        response.setProductCodes(expectedProductCodes);
        response.setLanguage(expectedLanguage);
        response.setPoCode(expectedPoCode);
        response.setPictureId(expectedPictureId);
        response.setLastUpdatedTime(expectedLastUpdatedTime);

        // Assert
        assertEquals(expectedProductCodes, response.getProductCodes());
        assertEquals(expectedLanguage, response.getLanguage());
        assertEquals(expectedPoCode, response.getPoCode());
        assertEquals(expectedPictureId, response.getPictureId());
        assertEquals(expectedLastUpdatedTime, response.getLastUpdatedTime());
    }

    @Test
    public void testSetters() {
        // Arrange
        PlasticCodeResponse response = new PlasticCodeResponse();
        
        String productCodes = "Code789, Code101112";
        String language = "fr";
        String poCode = "PO789101112";
        String pictureId = "Pic456";
        LocalDateTime lastUpdatedTime = LocalDateTime.now();

        // Act
        response.setProductCodes(productCodes);
        response.setLanguage(language);
        response.setPoCode(poCode);
        response.setPictureId(pictureId);
        response.setLastUpdatedTime(lastUpdatedTime);

        // Assert
        assertEquals(productCodes, response.getProductCodes());
        assertEquals(language, response.getLanguage());
        assertEquals(poCode, response.getPoCode());
        assertEquals(pictureId, response.getPictureId());
        assertEquals(lastUpdatedTime, response.getLastUpdatedTime());
    }

    @Test
    public void testJsonSerialization() {
        // Arrange
        PlasticCodeResponse response = new PlasticCodeResponse();
        response.setProductCodes("Code123");
        response.setLanguage("en");
        response.setPoCode("PO123456");
        response.setPictureId("Pic123");
        LocalDateTime lastUpdatedTime = LocalDateTime.now();
        response.setLastUpdatedTime(lastUpdatedTime);

        // Act
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new GsonLocalDateSerializer())
                .create();
        
        String jsonResponse = gson.toJson(response);
        
        // Assert
        assertNotNull(jsonResponse);
        assertTrue(jsonResponse.contains("Code123"));
        assertTrue(jsonResponse.contains("en"));
        assertTrue(jsonResponse.contains("PO123456"));
        assertTrue(jsonResponse.contains("Pic123"));
        assertTrue(jsonResponse.contains(lastUpdatedTime.toString()));
    }

    @Test
    public void testJsonDeserialization() {
        // Arrange
        String jsonInput = "{\"productCodes\":\"Code123\",\"language\":\"en\",\"poCode\":\"PO123456\",\"pictureId\":\"Pic123\",\"lastUpdatedTime\":\"2024-10-16T12:00:00\"}";

        // Act
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new GsonLocalDateSerializer())
                .create();
        
        PlasticCodeResponse response = gson.fromJson(jsonInput, PlasticCodeResponse.class);

        // Assert
        assertNotNull(response);
        assertEquals("Code123", response.getProductCodes());
        assertEquals("en", response.getLanguage());
        assertEquals("PO123456", response.getPoCode());
        assertEquals("Pic123", response.getPictureId());
        assertEquals(LocalDateTime.parse("2024-10-16T12:00:00"), response.getLastUpdatedTime());
    }
}
