import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class StatementTest {

    @Test
    public void testBuilder() {
        // Arrange
        BigDecimal expectedBalance = BigDecimal.valueOf(1000);
        BigDecimal expectedCreditLimit = BigDecimal.valueOf(5000);
        BigDecimal expectedMinPaymentDue = BigDecimal.valueOf(50);
        LocalDate expectedMinPaymentDueDate = LocalDate.of(2024, 10, 31);
        LocalDate expectedClosingDate = LocalDate.of(2024, 10, 30);
        boolean expectedShowPaperlessLink = true;
        boolean expectedShowPaperlessLinkNoEmail = false;
        boolean expectedStatementAvailable = true;
        boolean expectedDmsAvailable = false;
        boolean expectedMultiCard = false;
        boolean expectedNumActivitiesExceedMax = false;
        boolean expectedPchUser = true;
        boolean expectedCyclesAvailable = true;
        boolean expectedActivityAvailable = true;

        List<AccountTransaction> accountTransactions = new ArrayList<>();
        List<CardArtInfo> cardArtInfo = new ArrayList<>();
        List<InsertItem> insertList = new ArrayList<>();

        // Act
        Statement statement = Statement.builder()
                .statementBalance(expectedBalance)
                .creditLimit(expectedCreditLimit)
                .minPaymentDue(expectedMinPaymentDue)
                .minPaymentDueDate(expectedMinPaymentDueDate)
                .statementClosingDate(expectedClosingDate)
                .accountTransactions(accountTransactions)
                .cardArtInfo(cardArtInfo)
                .showPaperlessLink(expectedShowPaperlessLink)
                .showPaperlessLinkNoEmail(expectedShowPaperlessLinkNoEmail)
                .nextStatementClosingDate(LocalDate.now())
                .statementAvailable(expectedStatementAvailable)
                .insertList(insertList)
                .dmsAvailable(expectedDmsAvailable)
                .multiCard(expectedMultiCard)
                .numActivitiesExceedMax(expectedNumActivitiesExceedMax)
                .pchUser(expectedPchUser)
                .statementCyclesAvailable(expectedCyclesAvailable)
                .activityAvailable(expectedActivityAvailable)
                .build();

        // Assert
        assertEquals(expectedBalance, statement.getStatementBalance());
        assertEquals(expectedCreditLimit, statement.getCreditLimit());
        assertEquals(expectedMinPaymentDue, statement.getMinPaymentDue());
        assertEquals(expectedMinPaymentDueDate, statement.getMinPaymentDueDate());
        assertEquals(expectedClosingDate, statement.getStatementClosingDate());
        assertEquals(accountTransactions, statement.getAccountTransactions());
        assertEquals(cardArtInfo, statement.getCardArtInfo());
        assertEquals(expectedShowPaperlessLink, statement.isShowPaperlessLink());
        assertEquals(expectedShowPaperlessLinkNoEmail, statement.isShowPaperlessLinkNoEmail());
        assertTrue(statement.getNextStatementClosingDate() != null);
        assertEquals(expectedStatementAvailable, statement.isStatementAvailable());
        assertEquals(insertList, statement.getInsertList());
        assertEquals(expectedDmsAvailable, statement.isDmsAvailable());
        assertEquals(expectedMultiCard, statement.isMultiCard());
        assertEquals(expectedNumActivitiesExceedMax, statement.isNumActivitiesExceedMax());
        assertEquals(expectedPchUser, statement.isPchUser());
        assertEquals(expectedCyclesAvailable, statement.isStatementCyclesAvailable());
        assertEquals(expectedActivityAvailable, statement.isActivityAvailable());
    }

    @Test
    public void testJsonSerialization() {
        // Arrange
        Statement statement = Statement.builder()
                .statementBalance(BigDecimal.valueOf(1000))
                .creditLimit(BigDecimal.valueOf(5000))
                .minPaymentDue(BigDecimal.valueOf(50))
                .minPaymentDueDate(LocalDate.of(2024, 10, 31))
                .statementClosingDate(LocalDate.of(2024, 10, 30))
                .showPaperlessLink(true)
                .showPaperlessLinkNoEmail(false)
                .statementAvailable(true)
                .dmsAvailable(false)
                .multiCard(false)
                .numActivitiesExceedMax(false)
                .pchUser(true)
                .statementCyclesAvailable(true)
                .activityAvailable(true)
                .build();

        // Act
        Gson gson = new GsonBuilder().create();
        String json = gson.toJson(statement);

        // Assert
        assertNotNull(json);
        assertTrue(json.contains("\"statementBalance\":1000"));
        assertTrue(json.contains("\"creditLimit\":5000"));
        assertTrue(json.contains("\"minPaymentDue\":50"));
        assertTrue(json.contains("\"minPaymentDueDate\":\"2024-10-31\""));
        assertTrue(json.contains("\"statementClosingDate\":\"2024-10-30\""));
        assertTrue(json.contains("\"showPaperlessLink\":true"));
        assertTrue(json.contains("\"showPaperlessLinkNoEmail\":false"));
        assertTrue(json.contains("\"statementAvailable\":true"));
        assertTrue(json.contains("\"dmsAvailable\":false"));
        assertTrue(json.contains("\"multiCard\":false"));
        assertTrue(json.contains("\"numActivitiesExceedMax\":false"));
        assertTrue(json.contains("\"pchUser\":true"));
        assertTrue(json.contains("\"statementCyclesAvailable\":true"));
        assertTrue(json.contains("\"activityAvailable\":true"));
    }

    @Test
    public void testEmptyList() {
        // Arrange
        Statement statement = Statement.builder().build();

        // Act
        List<AccountTransaction> transactions = statement.getAccountTransactions();
        List<CardArtInfo> cardArtInfos = statement.getCardArtInfo();
        List<InsertItem> insertItems = statement.getInsertList();

        // Assert
        assertNotNull(transactions);
        assertTrue(transactions.isEmpty());

        assertNotNull(cardArtInfos);
        assertTrue(cardArtInfos.isEmpty());

        assertNotNull(insertItems);
        assertTrue(insertItems.isEmpty());
    }

    @Test
    public void testDefaultValues() {
        // Act
        Statement statement = Statement.builder().build();

        // Assert
        assertNull(statement.getStatementBalance());
        assertNull(statement.getCreditLimit());
        assertNull(statement.getMinPaymentDue());
        assertNull(statement.getMinPaymentDueDate());
        assertNull(statement.getStatementClosingDate());
        assertFalse(statement.isShowPaperlessLink());
        assertFalse(statement.isShowPaperlessLinkNoEmail());
        assertNull(statement.getNextStatementClosingDate());
        assertFalse(statement.isStatementAvailable());
        assertFalse(statement.isDmsAvailable());
        assertFalse(statement.isMultiCard());
        assertFalse(statement.isNumActivitiesExceedMax());
        assertFalse(statement.isPchUser());
        assertFalse(statement.isStatementCyclesAvailable());
        assertFalse(statement.isActivityAvailable());
    }
}
