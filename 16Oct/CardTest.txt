import com.td.mbna.msec.account.domain.Card;
import com.td.mbna.msec.account.domain.CardArtInfo; // Assuming this class exists
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CardTest {

    @Test
    public void testDefaultConstructorAndGetters() {
        // Arrange
        Card card = new Card(); // Using default constructor

        // Act & Assert
        assertNull(card.getCardNumber(), "Card number should default to null");
        assertNull(card.getCardStartDate(), "Card start date should default to null");
        assertNull(card.getEndingIn(), "Ending in should default to null");
        assertNull(card.getAccountNumber(), "Account number should default to null");
        assertFalse(card.isEnroledForRewards(), "Enrolled for rewards should default to false");
        assertFalse(card.isRewardsInScope(), "Rewards in scope should default to false");
        assertNull(card.getCardArtInfo(), "Card Art Info should default to null");
        assertFalse(card.isMultiCard(), "Multi card should default to false");
    }

    @Test
    public void testSettersAndGetters() {
        // Arrange
        Card card = Card.builder()
                .cardNumber("1234567890123456")
                .cardStartDate("2024-01-01")
                .endingIn("3456")
                .accountNumber("AC123456")
                .enroledForRewards(true)
                .rewardsInScope(true)
                .cardArtInfo(new ArrayList<>()) // Assuming CardArtInfo is a list
                .multiCard(true)
                .build();

        // Act & Assert
        assertEquals("1234567890123456", card.getCardNumber());
        assertEquals("2024-01-01", card.getCardStartDate());
        assertEquals("3456", card.getEndingIn());
        assertEquals("AC123456", card.getAccountNumber());
        assertTrue(card.isEnroledForRewards());
        assertTrue(card.isRewardsInScope());
        assertNotNull(card.getCardArtInfo());
        assertTrue(card.isMultiCard());
    }

    @Test
    public void testCardArtInfoList() {
        // Arrange
        List<CardArtInfo> artInfoList = new ArrayList<>();
        CardArtInfo artInfo = new CardArtInfo(); // Assuming CardArtInfo has a no-args constructor
        artInfoList.add(artInfo);
        
        // Build the Card with cardArtInfo
        Card card = Card.builder()
                .cardNumber("1234567890123456")
                .cardArtInfo(artInfoList)
                .build();

        // Act & Assert
        assertEquals(1, card.getCardArtInfo().size(), "CardArtInfo list should have one element");
        assertEquals(artInfo, card.getCardArtInfo().get(0), "The cardArtInfo should match the added item");
    }
}
