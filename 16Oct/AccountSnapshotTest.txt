import com.td.mbna.msec.account.domain.AccountBalances;
import com.td.mbna.msec.account.domain.AccountSnapshot;
import com.td.mbna.msec.account.domain.AccountSnapshotBalances;
import com.td.mbna.msec.account.domain.AccountTransactions;
import com.td.mbna.msec.account.domain.CardArtInfo;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class AccountSnapshotTest {

    @Test
    public void testBuilderAndGetters() {
        // Arrange
        AccountSnapshotBalances snapshotBalances = new AccountSnapshotBalances();
        AccountBalances accountBalances = new AccountBalances();
        List<CardArtInfo> cardArtInfoList = Collections.singletonList(new CardArtInfo());
        List<String> eligibleOffers = Arrays.asList("offer1", "offer2");
        AccountTransactions accountTransactions = new AccountTransactions();

        // Act
        AccountSnapshot accountSnapshot = AccountSnapshot.builder()
                .accountSnapshotBalances(snapshotBalances)
                .accountBalances(accountBalances)
                .cardArtInfo(cardArtInfoList)
                .accountSnapshotEligibleOffers(eligibleOffers)
                .eligibleToDownloadStatements(true)
                .accountTransactions(accountTransactions)
                .eligibleToTransferToChequing(false)
                .eligibleToBalanceTransfer(true)
                .multiCard(true)
                .statementCyclesAvailable(false)
                .build();

        // Assert
        assertEquals(snapshotBalances, accountSnapshot.getAccountSnapshotBalances(), "Snapshot balances should match");
        assertEquals(accountBalances, accountSnapshot.getAccountBalances(), "Account balances should match");
        assertEquals(cardArtInfoList, accountSnapshot.getCardArtInfo(), "Card art info should match");
        assertEquals(eligibleOffers, accountSnapshot.getAccountSnapshotEligibleOffers(), "Eligible offers should match");
        assertTrue(accountSnapshot.isEligibleToDownloadStatements(), "Should be eligible to download statements");
        assertEquals(accountTransactions, accountSnapshot.getAccountTransactions(), "Account transactions should match");
        assertFalse(accountSnapshot.isEligibleToTransferToChequing(), "Should not be eligible to transfer to chequing");
        assertTrue(accountSnapshot.isEligibleToBalanceTransfer(), "Should be eligible to balance transfer");
        assertTrue(accountSnapshot.isMultiCard(), "Should be a multi card account");
        assertFalse(accountSnapshot.isStatementCyclesAvailable(), "Should not have statement cycles available");
    }

    @Test
    public void testWithNullValues() {
        // Act
        AccountSnapshot accountSnapshot = AccountSnapshot.builder()
                .accountSnapshotBalances(null)
                .accountBalances(null)
                .cardArtInfo(null)
                .accountSnapshotEligibleOffers(null)
                .eligibleToDownloadStatements(false)
                .accountTransactions(null)
                .eligibleToTransferToChequing(false)
                .eligibleToBalanceTransfer(false)
                .multiCard(false)
                .statementCyclesAvailable(false)
                .build();

        // Assert
        assertNull(accountSnapshot.getAccountSnapshotBalances(), "Snapshot balances should be null");
        assertNull(accountSnapshot.getAccountBalances(), "Account balances should be null");
        assertNull(accountSnapshot.getCardArtInfo(), "Card art info should be null");
        assertNull(accountSnapshot.getAccountSnapshotEligibleOffers(), "Eligible offers should be null");
        assertFalse(accountSnapshot.isEligibleToDownloadStatements(), "Should not be eligible to download statements");
        assertNull(accountSnapshot.getAccountTransactions(), "Account transactions should be null");
        assertFalse(accountSnapshot.isEligibleToTransferToChequing(), "Should not be eligible to transfer to chequing");
        assertFalse(accountSnapshot.isEligibleToBalanceTransfer(), "Should not be eligible to balance transfer");
        assertFalse(accountSnapshot.isMultiCard(), "Should not be a multi card account");
        assertFalse(accountSnapshot.isStatementCyclesAvailable(), "Should not have statement cycles available");
    }
}
