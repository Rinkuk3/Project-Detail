package com.td.mbna.msec.midtier.account.payload.deleteaccount;

import com.td.mbna.msec.midtier.types.common.DeliveryPreferenceType;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class RequestPayloadTest {

    @Test
    void testGettersAndSetters() {
        RequestPayload payload = new RequestPayload();

        // Test connectId setter and getter
        String connectId = "testConnectId";
        payload.setConnectId(connectId);
        assertEquals(connectId, payload.getConnectId());

        // Test acctDeliveryPreference setter and getter
        DeliveryPreferenceType deliveryPreference = DeliveryPreferenceType.EMAIL;
        payload.setAcctDeliveryPreference(deliveryPreference);
        assertEquals(deliveryPreference, payload.getAcctDeliveryPreference());

        // Test additionalProperties setter and getter
        payload.setAdditionalProperty("key1", "value1");
        payload.setAdditionalProperty("key2", 100);

        Map<String, Object> additionalProperties = payload.getAdditionalProperties();
        assertNotNull(additionalProperties);
        assertEquals(2, additionalProperties.size());
        assertEquals("value1", additionalProperties.get("key1"));
        assertEquals(100, additionalProperties.get("key2"));
    }

    @Test
    void testAdditionalPropertyOverride() {
        RequestPayload payload = new RequestPayload();

        // Add and override a property
        payload.setAdditionalProperty("key", "initialValue");
        assertEquals("initialValue", payload.getAdditionalProperties().get("key"));

        payload.setAdditionalProperty("key", "newValue");
        assertEquals("newValue", payload.getAdditionalProperties().get("key"));
    }

    @Test
    void testEmptyAdditionalProperties() {
        RequestPayload payload = new RequestPayload();

        // Verify that additionalProperties is initially empty
        assertTrue(payload.getAdditionalProperties().isEmpty());
    }

    @Test
    void testNullValues() {
        RequestPayload payload = new RequestPayload();

        // Set and retrieve null values
        payload.setConnectId(null);
        payload.setAcctDeliveryPreference(null);

        assertNull(payload.getConnectId());
        assertNull(payload.getAcctDeliveryPreference());
    }
}
