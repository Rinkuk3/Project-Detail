package com.td.mbna.msec.midtier.mbnaad;

import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardRequest;
import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardResponse;
import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ResponsePayload;
import com.td.mbna.msec.midtier.mbnaad.exception.MBNAException;
import com.td.mbna.msec.midtier.mbnaad.request.response.UserInformation;
import com.td.mbna.msec.midtier.mbnaad.request.response.DeliveryAddress;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class UserInfoSrvTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private UriComponentsBuilder uriComponentsBuilder;

    @InjectMocks
    private UserInfoSrv userInfoSrv;

    private String connectId = "connectId";
    private String cardNumber = "123456";
    private String token = "token";
    private ReplaceCardRequest replaceCardRequest;
    private com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserRequest addAuthorizedUserRequest;

    @BeforeEach
    public void setUp() {
        replaceCardRequest = mock(ReplaceCardRequest.class);
        addAuthorizedUserRequest = mock(com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserRequest.class);
    }

    @Test
    public void testIssueCardForAU_Success() {
        // Arrange
        com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse response = mock(com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse.class);
        UserInformation userInformation = mock(UserInformation.class);
        DeliveryAddress mockDeliveryAddress = new DeliveryAddress();

        ResponseEntity<DeliveryAddress> mockResponseEntity = new ResponseEntity<>(mockDeliveryAddress, HttpStatus.OK);
        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenReturn(mockResponseEntity);

        // Act
        Boolean result = userInfoSrv.issueCardForAU(addAuthorizedUserRequest, response, cardNumber, token);

        // Assert
        assertTrue(result);
        verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(DeliveryAddress.class));
    }

    @Test
    public void testIssueCardForAU_Failure() {
        // Arrange
        com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse response = mock(com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse.class);
        UserInformation userInformation = mock(UserInformation.class);
        ResponseEntity<DeliveryAddress> mockResponseEntity = new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenReturn(mockResponseEntity);

        // Act
        Boolean result = userInfoSrv.issueCardForAU(addAuthorizedUserRequest, response, cardNumber, token);

        // Assert
        assertFalse(result);
        verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(DeliveryAddress.class));
    }

    @Test
    public void testIssueCardForAU_Exception() {
        // Arrange
        com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse response = mock(com.mbnaweb.xsd.msgs.customerprofile.AddAuthorizedUserResponse.class);
        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenThrow(new RuntimeException("Test Exception"));

        // Act
        Boolean result = userInfoSrv.issueCardForAU(addAuthorizedUserRequest, response, cardNumber, token);

        // Assert
        assertFalse(result);
    }

    @Test
    public void testIssueCard_Success() throws MBNAException {
        // Arrange
        ReplaceCardRequest replaceCardRequest = mock(ReplaceCardRequest.class);
        ReplaceCardResponse expectedResponse = new ReplaceCardResponse();
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setStatus(true);
        expectedResponse.setResponsePayload(responsePayload);
        
        UserInformation userInformation = mock(UserInformation.class);
        ResponseEntity<DeliveryAddress> mockResponseEntity = new ResponseEntity<>(new DeliveryAddress(), HttpStatus.OK);

        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenReturn(mockResponseEntity);

        // Act
        ReplaceCardResponse result = userInfoSrv.issueCard(connectId, replaceCardRequest, token);

        // Assert
        assertNotNull(result);
        assertTrue(result.getResponsePayload().getStatus());
        verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(DeliveryAddress.class));
    }

    @Test
    public void testIssueCard_Failure() throws MBNAException {
        // Arrange
        ReplaceCardRequest replaceCardRequest = mock(ReplaceCardRequest.class);
        ReplaceCardResponse expectedResponse = new ReplaceCardResponse();
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setStatus(false);
        expectedResponse.setResponsePayload(responsePayload);
        
        UserInformation userInformation = mock(UserInformation.class);
        ResponseEntity<DeliveryAddress> mockResponseEntity = new ResponseEntity<>(HttpStatus.BAD_REQUEST);

        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenReturn(mockResponseEntity);

        // Act
        ReplaceCardResponse result = userInfoSrv.issueCard(connectId, replaceCardRequest, token);

        // Assert
        assertNotNull(result);
        assertFalse(result.getResponsePayload().getStatus());
        verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(DeliveryAddress.class));
    }

    @Test
    public void testIssueCard_Exception() {
        // Arrange
        ReplaceCardRequest replaceCardRequest = mock(ReplaceCardRequest.class);
        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Card Request is already outstanding."));

        // Act & Assert
        assertThrows(MBNAException.class, () -> userInfoSrv.issueCard(connectId, replaceCardRequest, token));
    }

    @Test
    public void testCallIssueCardService() {
        // Arrange
        UserInformation userInformation = mock(UserInformation.class);
        ResponseEntity<DeliveryAddress> mockResponseEntity = new ResponseEntity<>(new DeliveryAddress(), HttpStatus.OK);
        when(restTemplate.postForEntity(anyString(), any(), eq(DeliveryAddress.class)))
                .thenReturn(mockResponseEntity);

        // Act
        ResponseEntity<DeliveryAddress> result = userInfoSrv.callIssueCardService(connectId, userInformation, token);

        // Assert
        assertNotNull(result);
        verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(DeliveryAddress.class));
    }
}
