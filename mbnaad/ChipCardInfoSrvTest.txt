package com.td.mbna.msec.midtier.mbnaad;

import com.td.mbna.msec.midtier.mbnaad.request.response.RetrieveAccessCardListRs;
import com.td.mbna.msec.midtier.mbnaad.request.response.accesscard.RetrieveAccessCard;
import com.td.mbna.msec.midtier.pinmanagement.payload.getpin.GetPinResponse;
import com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinResponse;
import com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.UnblockPinResponse;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.jupiter.api.*;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class ChipCardInfoSrvTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private ChipCardInfoSrv chipCardInfoSrv;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRetrieveChipCardInfo() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String partyKey = "partyKey";
        String token = "token";
        
        RetrieveAccessCardListRs mockResponse = mock(RetrieveAccessCardListRs.class);
        ResponseEntity<RetrieveAccessCardListRs> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCardListRs.class)))
                .thenReturn(responseEntity);

        RetrieveAccessCardListRs result = chipCardInfoSrv.retrieveChipCardInfo(connectId, cardNumber, partyKey, token);
        assertNotNull(result);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCardListRs.class));
    }

    @Test
    void testRetrieveAccessCardList() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String token = "token";
        
        RetrieveAccessCard mockResponse = mock(RetrieveAccessCard.class);
        ResponseEntity<RetrieveAccessCard> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCard.class)))
                .thenReturn(responseEntity);

        RetrieveAccessCard result = chipCardInfoSrv.retrieveAccessCardList(connectId, cardNumber, token);
        assertNotNull(result);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCard.class));
    }

    @Test
    void testViewPin() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String partyKey = "partyKey";
        String token = "token";
        
        RetrievePinRs mockPinResponse = mock(RetrievePinRs.class);
        when(mockPinResponse.getPinNumEncrypted()).thenReturn("encryptedPin");
        ResponseEntity<RetrievePinRs> responseEntity = new ResponseEntity<>(mockPinResponse, HttpStatus.OK);
        
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrievePinRs.class)))
                .thenReturn(responseEntity);

        GetPinResponse result = chipCardInfoSrv.viewPin(connectId, cardNumber, partyKey, token);
        assertNotNull(result);
        assertEquals("encryptedPin", result.getResponsePayload().getEncryptedPinBlock());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrievePinRs.class));
    }

    @Test
    void testUpdatePin() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String encryptedPin = "encryptedPin";
        String partyKey = "partyKey";
        String token = "token";
        
        ResponseEntity<Object> responseEntity = new ResponseEntity<>(HttpStatus.OK);
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.PATCH), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(responseEntity);

        ChangePinResponse result = chipCardInfoSrv.updatePin(connectId, cardNumber, encryptedPin, partyKey, token);
        assertNotNull(result);
        assertTrue(result.getResponsePayload().getStatus());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.PATCH), any(HttpEntity.class), eq(Object.class));
    }

    @Test
    void testUnblockPin() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String partyKey = "partyKey";
        String token = "token";
        String seqNumber = "123";
        Boolean allowPinChangeInd = true;
        
        ResponseEntity<Object> responseEntity = new ResponseEntity<>(HttpStatus.OK);
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.PATCH), any(HttpEntity.class), eq(Object.class)))
                .thenReturn(responseEntity);

        UnblockPinResponse result = chipCardInfoSrv.unblockPin(connectId, cardNumber, partyKey, token, seqNumber, allowPinChangeInd);
        assertNotNull(result);
        assertTrue(result.getResponsePayload().getStatus());
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.PATCH), any(HttpEntity.class), eq(Object.class));
    }

    @Test
    void testVerifyCardExpiry() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String token = "token";
        
        RetrieveAccessCard mockResponse = mock(RetrieveAccessCard.class);
        ResponseEntity<RetrieveAccessCard> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        
        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl("http://mockurl");
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCard.class)))
                .thenReturn(responseEntity);

        RetrieveAccessCard result = chipCardInfoSrv.verifyCardExpiry(connectId, cardNumber, token);
        assertNotNull(result);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RetrieveAccessCard.class));
    }
}
