import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

class RetrieveAccessCardListRsTest {

    @Test
    void testSetAndGetCard() {
        RetrieveAccessCardListRs retrieveAccessCardListRs = new RetrieveAccessCardListRs();
        List<Card> cardList = new ArrayList<>();
        Card card = new Card();
        cardList.add(card);
        retrieveAccessCardListRs.setCard(cardList);
        assertEquals(cardList, retrieveAccessCardListRs.getCard());
    }

    @Test
    void testToString() {
        RetrieveAccessCardListRs retrieveAccessCardListRs = new RetrieveAccessCardListRs();
        List<Card> cardList = new ArrayList<>();
        Card card = new Card();
        cardList.add(card);
        retrieveAccessCardListRs.setCard(cardList);

        String expectedString = "com.td.mbna.msec.midtier.mbnaad.request.response.RetrieveAccessCardListRs@" +
                                Integer.toHexString(retrieveAccessCardListRs.hashCode()) +
                                "[card=" + cardList + "]";
        assertTrue(retrieveAccessCardListRs.toString().contains("card=" + cardList));
    }

    @Test
    void testHashCode() {
        RetrieveAccessCardListRs retrieveAccessCardListRs1 = new RetrieveAccessCardListRs();
        List<Card> cardList1 = new ArrayList<>();
        Card card1 = new Card();
        cardList1.add(card1);
        retrieveAccessCardListRs1.setCard(cardList1);

        RetrieveAccessCardListRs retrieveAccessCardListRs2 = new RetrieveAccessCardListRs();
        List<Card> cardList2 = new ArrayList<>();
        Card card2 = new Card();
        cardList2.add(card2);
        retrieveAccessCardListRs2.setCard(cardList2);

        RetrieveAccessCardListRs retrieveAccessCardListRs3 = new RetrieveAccessCardListRs();
        List<Card> cardList3 = new ArrayList<>();
        retrieveAccessCardListRs3.setCard(cardList3);

        assertEquals(retrieveAccessCardListRs1.hashCode(), retrieveAccessCardListRs2.hashCode());
        assertNotEquals(retrieveAccessCardListRs1.hashCode(), retrieveAccessCardListRs3.hashCode());
    }

    @Test
    void testEquals() {
        RetrieveAccessCardListRs retrieveAccessCardListRs1 = new RetrieveAccessCardListRs();
        List<Card> cardList1 = new ArrayList<>();
        Card card1 = new Card();
        cardList1.add(card1);
        retrieveAccessCardListRs1.setCard(cardList1);

        RetrieveAccessCardListRs retrieveAccessCardListRs2 = new RetrieveAccessCardListRs();
        List<Card> cardList2 = new ArrayList<>();
        Card card2 = new Card();
        cardList2.add(card2);
        retrieveAccessCardListRs2.setCard(cardList2);

        RetrieveAccessCardListRs retrieveAccessCardListRs3 = new RetrieveAccessCardListRs();
        List<Card> cardList3 = new ArrayList<>();
        retrieveAccessCardListRs3.setCard(cardList3);

        assertTrue(retrieveAccessCardListRs1.equals(retrieveAccessCardListRs2));
        assertFalse(retrieveAccessCardListRs1.equals(retrieveAccessCardListRs3));
    }

    @Test
    void testEqualsWithNull() {
        RetrieveAccessCardListRs retrieveAccessCardListRs1 = new RetrieveAccessCardListRs();
        assertFalse(retrieveAccessCardListRs1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        RetrieveAccessCardListRs retrieveAccessCardListRs1 = new RetrieveAccessCardListRs();
        String differentClassObject = "Different Class";
        assertFalse(retrieveAccessCardListRs1.equals(differentClassObject));
    }
}
