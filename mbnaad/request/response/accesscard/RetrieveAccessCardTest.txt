import com.td.mbna.msec.midtier.mbnaad.request.response.accesscard.Card;
import com.td.mbna.msec.midtier.mbnaad.request.response.accesscard.RetrieveAccessCard;
import com.td.mbna.msec.midtier.mbnaad.request.response.error.Status;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class RetrieveAccessCardTest {

    @Test
    void testSetAndGetStatus() {
        RetrieveAccessCard retrieveAccessCard = new RetrieveAccessCard();
        Status status = new Status();
        status.setCode("200");
        retrieveAccessCard.setStatus(status);
        assertEquals(status, retrieveAccessCard.getStatus());
    }

    @Test
    void testSetAndGetCard() {
        RetrieveAccessCard retrieveAccessCard = new RetrieveAccessCard();
        Card card = new Card();
        card.setCardNum("123456789");
        retrieveAccessCard.setCard(card);
        assertEquals(card, retrieveAccessCard.getCard());
    }

    @Test
    void testToString() {
        RetrieveAccessCard retrieveAccessCard = new RetrieveAccessCard();
        Status status = new Status();
        status.setCode("200");
        Card card = new Card();
        card.setCardNum("123456789");

        retrieveAccessCard.setStatus(status);
        retrieveAccessCard.setCard(card);

        String expectedString = "com.td.mbna.msec.midtier.mbnaad.request.response.accesscard.RetrieveAccessCard@" +
                                Integer.toHexString(retrieveAccessCard.hashCode()) +
                                "[status=200,card=123456789]";
        assertTrue(retrieveAccessCard.toString().contains("status=200"));
        assertTrue(retrieveAccessCard.toString().contains("card=123456789"));
    }

    @Test
    void testHashCode() {
        RetrieveAccessCard retrieveAccessCard1 = new RetrieveAccessCard();
        Status status1 = new Status();
        status1.setCode("200");
        Card card1 = new Card();
        card1.setCardNum("123456789");
        retrieveAccessCard1.setStatus(status1);
        retrieveAccessCard1.setCard(card1);

        RetrieveAccessCard retrieveAccessCard2 = new RetrieveAccessCard();
        Status status2 = new Status();
        status2.setCode("200");
        Card card2 = new Card();
        card2.setCardNum("123456789");
        retrieveAccessCard2.setStatus(status2);
        retrieveAccessCard2.setCard(card2);

        RetrieveAccessCard retrieveAccessCard3 = new RetrieveAccessCard();
        Status status3 = new Status();
        status3.setCode("500");
        Card card3 = new Card();
        card3.setCardNum("987654321");
        retrieveAccessCard3.setStatus(status3);
        retrieveAccessCard3.setCard(card3);

        assertEquals(retrieveAccessCard1.hashCode(), retrieveAccessCard2.hashCode());
        assertNotEquals(retrieveAccessCard1.hashCode(), retrieveAccessCard3.hashCode());
    }

    @Test
    void testEquals() {
        RetrieveAccessCard retrieveAccessCard1 = new RetrieveAccessCard();
        Status status1 = new Status();
        status1.setCode("200");
        Card card1 = new Card();
        card1.setCardNum("123456789");
        retrieveAccessCard1.setStatus(status1);
        retrieveAccessCard1.setCard(card1);

        RetrieveAccessCard retrieveAccessCard2 = new RetrieveAccessCard();
        Status status2 = new Status();
        status2.setCode("200");
        Card card2 = new Card();
        card2.setCardNum("123456789");
        retrieveAccessCard2.setStatus(status2);
        retrieveAccessCard2.setCard(card2);

        RetrieveAccessCard retrieveAccessCard3 = new RetrieveAccessCard();
        Status status3 = new Status();
        status3.setCode("500");
        Card card3 = new Card();
        card3.setCardNum("987654321");
        retrieveAccessCard3.setStatus(status3);
        retrieveAccessCard3.setCard(card3);

        assertTrue(retrieveAccessCard1.equals(retrieveAccessCard2));
        assertFalse(retrieveAccessCard1.equals(retrieveAccessCard3));
    }
}
