import com.td.mbna.msec.midtier.mbnaad.request.response.accesscard.Additionalstatus;
import com.td.mbna.msec.midtier.mbnaad.request.response.error.Status;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;

class StatusTest {

    @Test
    void testSetAndGetServerStatusCode() {
        Status status = new Status();
        status.setServerStatusCode("200");
        assertEquals("200", status.getServerStatusCode());
    }

    @Test
    void testSetAndGetSeverity() {
        Status status = new Status();
        Status.Severity severity = Status.Severity.ERROR;
        status.setSeverity(severity);
        assertEquals(severity, status.getSeverity());
    }

    @Test
    void testSetAndGetAdditionalStatus() {
        Status status = new Status();
        Additionalstatus additionalstatus = new Additionalstatus();
        status.setAdditionalStatus(Arrays.asList(additionalstatus));
        assertEquals(1, status.getAdditionalStatus().size());
    }

    @Test
    void testToString() {
        Status status = new Status();
        status.setServerStatusCode("200");
        status.setSeverity(Status.Severity.ERROR);
        Additionalstatus additionalstatus = new Additionalstatus();
        status.setAdditionalStatus(Arrays.asList(additionalstatus));

        String expectedString = "com.td.mbna.msec.midtier.mbnaad.request.response.error.Status@" +
                                Integer.toHexString(status.hashCode()) +
                                "[serverStatusCode=200,severity=Error,additionalStatus=[<null>]]";
        assertTrue(status.toString().contains("serverStatusCode=200"));
        assertTrue(status.toString().contains("severity=Error"));
    }

    @Test
    void testHashCode() {
        Status status1 = new Status();
        status1.setServerStatusCode("200");
        status1.setSeverity(Status.Severity.ERROR);

        Status status2 = new Status();
        status2.setServerStatusCode("200");
        status2.setSeverity(Status.Severity.ERROR);

        Status status3 = new Status();
        status3.setServerStatusCode("500");
        status3.setSeverity(Status.Severity.WARNING);

        assertEquals(status1.hashCode(), status2.hashCode());
        assertNotEquals(status1.hashCode(), status3.hashCode());
    }

    @Test
    void testEquals() {
        Status status1 = new Status();
        status1.setServerStatusCode("200");
        status1.setSeverity(Status.Severity.ERROR);

        Status status2 = new Status();
        status2.setServerStatusCode("200");
        status2.setSeverity(Status.Severity.ERROR);

        Status status3 = new Status();
        status3.setServerStatusCode("500");
        status3.setSeverity(Status.Severity.WARNING);

        assertTrue(status1.equals(status2));
        assertFalse(status1.equals(status3));
    }

    @Test
    void testSeverityEnumFromValue() {
        assertEquals(Status.Severity.ERROR, Status.Severity.fromValue("Error"));
        assertEquals(Status.Severity.WARNING, Status.Severity.fromValue("Warning"));
    }

    @Test
    void testSeverityEnumInvalidValue() {
        assertThrows(IllegalArgumentException.class, () -> Status.Severity.fromValue("INVALID"));
    }
}
