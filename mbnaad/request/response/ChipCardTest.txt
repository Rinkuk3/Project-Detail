import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ChipCardTest {

    @Test
    void testSetAndGetPartyKey() {
        ChipCard chipCard = new ChipCard();
        chipCard.setPartyKey("partyKey");
        assertEquals("partyKey", chipCard.getPartyKey());
    }

    @Test
    void testSetAndGetSequenceNum() {
        ChipCard chipCard = new ChipCard();
        chipCard.setSequenceNum("12345");
        assertEquals("12345", chipCard.getSequenceNum());
    }

    @Test
    void testSetAndGetFeatureClassificationCd() {
        ChipCard chipCard = new ChipCard();
        chipCard.setFeatureClassificationCd("featureCode");
        assertEquals("featureCode", chipCard.getFeatureClassificationCd());
    }

    @Test
    void testSetAndGetFeatureDesc() {
        ChipCard chipCard = new ChipCard();
        chipCard.setFeatureDesc("Feature Description");
        assertEquals("Feature Description", chipCard.getFeatureDesc());
    }

    @Test
    void testSetAndGetExpirationDt() {
        ChipCard chipCard = new ChipCard();
        chipCard.setExpirationDt("12/25/2024");
        assertEquals("12/25/2024", chipCard.getExpirationDt());
    }

    @Test
    void testSetAndGetBlockedInd() {
        ChipCard chipCard = new ChipCard();
        chipCard.setBlockedInd(true);
        assertTrue(chipCard.getBlockedInd());
    }

    @Test
    void testSetAndGetOutstandingScriptInd() {
        ChipCard chipCard = new ChipCard();
        chipCard.setOutstandingScriptInd(false);
        assertFalse(chipCard.getOutstandingScriptInd());
    }

    @Test
    void testToString() {
        ChipCard chipCard = new ChipCard();
        chipCard.setPartyKey("partyKey");
        chipCard.setSequenceNum("12345");
        chipCard.setFeatureClassificationCd("featureCode");
        chipCard.setFeatureDesc("Feature Description");
        chipCard.setExpirationDt("12/25/2024");
        chipCard.setBlockedInd(true);
        chipCard.setOutstandingScriptInd(false);

        String expectedString = "com.td.mbna.msec.midtier.mbnaad.request.response.ChipCard@" +
                                Integer.toHexString(chipCard.hashCode()) +
                                "[partyKey=partyKey,sequenceNum=12345,featureClassificationCd=featureCode,featureDesc=Feature Description,expirationDt=12/25/2024,blockedInd=true,outstandingScriptInd=false]";
        assertTrue(chipCard.toString().contains("partyKey=partyKey"));
        assertTrue(chipCard.toString().contains("sequenceNum=12345"));
    }

    @Test
    void testHashCode() {
        ChipCard chipCard1 = new ChipCard();
        chipCard1.setPartyKey("partyKey");
        chipCard1.setSequenceNum("12345");

        ChipCard chipCard2 = new ChipCard();
        chipCard2.setPartyKey("partyKey");
        chipCard2.setSequenceNum("12345");

        ChipCard chipCard3 = new ChipCard();
        chipCard3.setPartyKey("anotherPartyKey");

        assertEquals(chipCard1.hashCode(), chipCard2.hashCode());
        assertNotEquals(chipCard1.hashCode(), chipCard3.hashCode());
    }

    @Test
    void testEquals() {
        ChipCard chipCard1 = new ChipCard();
        chipCard1.setPartyKey("partyKey");
        chipCard1.setSequenceNum("12345");

        ChipCard chipCard2 = new ChipCard();
        chipCard2.setPartyKey("partyKey");
        chipCard2.setSequenceNum("12345");

        ChipCard chipCard3 = new ChipCard();
        chipCard3.setPartyKey("anotherPartyKey");

        assertTrue(chipCard1.equals(chipCard2));
        assertFalse(chipCard1.equals(chipCard3));
    }
}
