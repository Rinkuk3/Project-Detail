import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeRequest;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeResponse;
import com.td.mbna.msec.midtier.mbofp.MbnaOFP;
import com.td.mbna.msec.midtier.util.MidtierUtilHelper;
import com.td.mbna.msec.midtier.util.UuidUtil;
import com.td.mbna.msec.midtier.service.EmailInfo;
import com.td.mbna.msec.midtier.service.MsecValidator;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Map;
import java.util.HashMap;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RequestProductChangeOperationTest {

    @Mock
    private MbnaOFP mbnaOFP;

    @Mock
    private MsecValidator msecValidator;

    @InjectMocks
    private RequestProductChangeOperation requestProductChangeOperation;

    private RequestProductChangeRequest request;
    private String token = "test-token";

    @Before
    public void setUp() {
        request = mock(RequestProductChangeRequest.class);
    }

    @Test
    public void testInvokeService_Success() throws Exception {
        // Arrange
        when(request.getAcctNum()).thenReturn("123456");
        when(request.getRequestPayload()).thenReturn(mockRequestPayload());
        when(mbnaOFP.updateOfferDisposition(any(Map.class), eq(token))).thenReturn(null);
        when(mbnaOFP.requestProductChange(any(Map.class), eq(token))).thenReturn(mock(RequestProductChangeResponse.class));

        // Act
        RequestProductChangeResponse response = requestProductChangeOperation.invokeService(request, token);

        // Assert
        verify(mbnaOFP, times(1)).updateOfferDisposition(any(Map.class), eq(token));
        verify(mbnaOFP, times(1)).requestProductChange(any(Map.class), eq(token));
        assert(response != null);
    }

    @Test(expected = RuntimeException.class)
    public void testInvokeService_Exception() throws Exception {
        // Arrange
        when(mbnaOFP.updateOfferDisposition(any(Map.class), eq(token))).thenThrow(new RuntimeException("Error"));

        // Act
        requestProductChangeOperation.invokeService(request, token);
    }

    @Test
    public void testRequiresDisclosureConsent() {
        // Act
        boolean result = requestProductChangeOperation.requiresDisclosureConsent();

        // Assert
        assert(result == true);
    }

    @Test
    public void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = requestProductChangeOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assert(result.equals("MS542"));
    }

    @Test
    public void testGenerateAutoComment() {
        // Act
        boolean result = requestProductChangeOperation.generateAutoComment();

        // Assert
        assert(result == false);
    }

    @Test
    public void testCreateAutoComment() {
        // Arrange
        BaseRequest baseRequest = mock(BaseRequest.class);
        BaseResponse baseResponse = mock(BaseResponse.class);

        // Act
        List<String> result = requestProductChangeOperation.createAutoComment(baseRequest, baseResponse);

        // Assert
        assert(result == null);
    }

    @Test
    public void testGetEmailInfoBean() {
        // Act
        EmailInfo result = requestProductChangeOperation.getEmailInfoBean(null, null);

        // Assert
        assert(result == null);
    }

    @Test
    public void testGetValidator() {
        // Act
        MsecValidator result = requestProductChangeOperation.getValidator();

        // Assert
        assert(result != null);
    }

    private com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestPayload mockRequestPayload() {
        com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestPayload payload = mock(com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestPayload.class);
        com.td.mbna.msec.midtier.offers.payload.requestproductchange.SelectedOffer selectedOffer = mock(com.td.mbna.msec.midtier.offers.payload.requestproductchange.SelectedOffer.class);

        when(payload.getSelectedOffer()).thenReturn(selectedOffer);
        when(payload.getRoleCD()).thenReturn("role");
        when(selectedOffer.getOfferID()).thenReturn("offerId");
        when(selectedOffer.getSubProductId()).thenReturn("subProductId");
        when(payload.getLanguagePref()).thenReturn("EN");
        when(payload.getCardNumber()).thenReturn("1234");

        return payload;
    }
}
