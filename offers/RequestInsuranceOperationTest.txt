import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceRequest;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceResponse;
import com.td.mbna.msec.midtier.mbofp.MbnaOFP;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.UuidUtil;
import com.td.mbna.msec.midtier.util.tsys.TsysHelper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RequestInsuranceOperationTest {

    @Mock
    private MbnaOFP mbnaOFP;

    @InjectMocks
    private RequestInsuranceOperation requestInsuranceOperation;

    private RequestInsuranceRequest request;
    private String token = "test-token";

    @Before
    public void setUp() {
        request = mock(RequestInsuranceRequest.class);
    }

    @Test
    public void testInvokeService_Success() throws Exception {
        // Arrange
        when(request.getAcctNum()).thenReturn("123456");
        when(request.getRequestPayload()).thenReturn(mockRequestPayload());
        when(mbnaOFP.updateOfferDisposition(any(Map.class), eq(token))).thenReturn(null);
        when(mbnaOFP.insuranceEnrolment(any(Map.class), eq(token))).thenReturn(mock(RequestInsuranceResponse.class));

        // Act
        RequestInsuranceResponse response = requestInsuranceOperation.invokeService(request, token);

        // Assert
        verify(mbnaOFP, times(1)).updateOfferDisposition(any(Map.class), eq(token));
        verify(mbnaOFP, times(1)).insuranceEnrolment(any(Map.class), eq(token));
    }

    @Test(expected = RuntimeException.class)
    public void testInvokeService_Exception() throws Exception {
        // Arrange
        when(mbnaOFP.updateOfferDisposition(any(Map.class), eq(token))).thenThrow(new RuntimeException("Error"));

        // Act
        requestInsuranceOperation.invokeService(request, token);
    }

    @Test
    public void testRequiresDisclosureConsent() {
        // Act
        boolean result = requestInsuranceOperation.requiresDisclosureConsent();

        // Assert
        assert result == true;
    }

    @Test
    public void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = requestInsuranceOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assert result.equals("MS542");
    }

    @Test
    public void testGenerateAutoComment() {
        // Act
        boolean result = requestInsuranceOperation.generateAutoComment();

        // Assert
        assert result == false;
    }

    @Test
    public void testCreateAutoComment() {
        // Act
        List<String> result = requestInsuranceOperation.createAutoComment(null, null);

        // Assert
        assert result == null;
    }

    @Test
    public void testGetEmailInfoBean() {
        // Act
        EmailInfo result = requestInsuranceOperation.getEmailInfoBean(null, null);

        // Assert
        assert result == null;
    }

    @Test
    public void testGetValidator() {
        // Act
        MsecValidator result = requestInsuranceOperation.getValidator();

        // Assert
        assert result == null;
    }

    private com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestPayload mockRequestPayload() {
        com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestPayload payload = mock(com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestPayload.class);
        com.td.mbna.msec.midtier.offers.payload.requestinsurance.SelectedOffer selectedOffer = mock(com.td.mbna.msec.midtier.offers.payload.requestinsurance.SelectedOffer.class);

        when(payload.getSelectedOffer()).thenReturn(selectedOffer);
        when(payload.getCardNumber()).thenReturn("123456789");
        when(payload.getRoleCD()).thenReturn("role");
        when(selectedOffer.getOfferID()).thenReturn("offerId");
        when(selectedOffer.getSubProductId()).thenReturn("subProductId");

        return payload;
    }
}
