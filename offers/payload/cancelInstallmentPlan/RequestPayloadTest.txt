import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;

class RequestPayloadTest {

    @Test
    void testSetGetEventId() {
        RequestPayload payload = new RequestPayload();
        payload.setEventId("event123");
        assertEquals("event123", payload.getEventId());
    }

    @Test
    void testSetGetIpPaymentOptionFeatureDate() {
        RequestPayload payload = new RequestPayload();
        payload.setIpPaymentOptionFeatureDate("2024-12-01");
        assertEquals("2024-12-01", payload.getIpPaymentOptionFeatureDate());
    }

    @Test
    void testSetGetNickName() {
        RequestPayload payload = new RequestPayload();
        payload.setNickName("TestNickName");
        assertEquals("TestNickName", payload.getNickName());
    }

    @Test
    void testSetGetAmount() {
        RequestPayload payload = new RequestPayload();
        payload.setAmount(BigDecimal.valueOf(1000.50));
        assertEquals(BigDecimal.valueOf(1000.50), payload.getAmount());
    }

    @Test
    void testSetGetInterestRate() {
        RequestPayload payload = new RequestPayload();
        payload.setInterestRate(BigDecimal.valueOf(5.5));
        assertEquals(BigDecimal.valueOf(5.5), payload.getInterestRate());
    }

    @Test
    void testSetGetFee() {
        RequestPayload payload = new RequestPayload();
        payload.setFee(BigDecimal.valueOf(50.0));
        assertEquals(BigDecimal.valueOf(50.0), payload.getFee());
    }

    @Test
    void testSetGetBalanceOfIp() {
        RequestPayload payload = new RequestPayload();
        payload.setBalanceOfIp(BigDecimal.valueOf(2000.75));
        assertEquals(BigDecimal.valueOf(2000.75), payload.getBalanceOfIp());
    }

    @Test
    void testSetGetStatementDataDt() {
        RequestPayload payload = new RequestPayload();
        payload.setStatementDataDt("2024-12-01");
        assertEquals("2024-12-01", payload.getStatementDataDt());
    }

    @Test
    void testSetGetPostedDate() {
        RequestPayload payload = new RequestPayload();
        payload.setPostedDate("2024-12-02");
        assertEquals("2024-12-02", payload.getPostedDate());
    }

    @Test
    void testSetGetPostedTime() {
        RequestPayload payload = new RequestPayload();
        payload.setPostedTime(12345);
        assertEquals(12345, payload.getPostedTime());
    }

    @Test
    void testSetGetTxLevelProcessingFeatureId() {
        RequestPayload payload = new RequestPayload();
        payload.setTxLevelProcessingFeatureId("TX_FEATURE_123");
        assertEquals("TX_FEATURE_123", payload.getTxLevelProcessingFeatureId());
    }

    @Test
    void testSetGetCardType() {
        RequestPayload payload = new RequestPayload();
        CardType cardType = CardType.VISA;
        payload.setCardType(cardType);
        assertEquals(cardType, payload.getCardType());
    }

    @Test
    void testEqualsAndHashCode() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        
        payload1.setEventId("event123");
        payload2.setEventId("event123");
        
        assertEquals(payload1, payload2);
        assertEquals(payload1.hashCode(), payload2.hashCode());
    }

    @Test
    void testNotEquals() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        
        payload1.setEventId("event123");
        payload2.setEventId("event456");
        
        assertNotEquals(payload1, payload2);
    }

    @Test
    void testToString() {
        RequestPayload payload = new RequestPayload();
        payload.setEventId("event123");
        payload.setAmount(BigDecimal.valueOf(1000.50));
        
        String expectedString = "RequestPayload{" +
                "eventId='event123', " +
                "ipPaymentOptionFeatureDate='' " +
                ", nickName='' " +
                ", amount=1000.50, " +
                "interestRate=null, " +
                "fee=null, " +
                "balanceOfIp=null, " +
                "statementDataDt='' " +
                ", postedDate='' " +
                ", postedTime=0, " +
                "txLevelProcessingFeatureId='' " +
                ", cardType=null" +
                "}";
        assertEquals(expectedString, payload.toString());
    }
}
