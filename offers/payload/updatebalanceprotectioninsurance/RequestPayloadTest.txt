import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import com.td.mbna.msec.midtier.types.common.DisclosureInfoType;
import com.td.mbna.msec.midtier.types.common.EmailNotificationInfoType;
import com.td.mbna.msec.midtier.offers.payload.updatebalanceprotectioninsurance.RequestPayload;

import java.util.ArrayList;
import java.util.List;

class RequestPayloadTest {

    @Test
    void testSetGetDisclosureInfo() {
        RequestPayload payload = new RequestPayload();
        List<DisclosureInfoType> disclosureList = new ArrayList<>();
        DisclosureInfoType disclosure = new DisclosureInfoType();
        disclosureList.add(disclosure);

        payload.setDisclosureInfo(disclosureList);
        
        assertEquals(disclosureList, payload.getDisclosureInfo());

        payload.setDisclosureInfo(null);
        assertNull(payload.getDisclosureInfo());
    }

    @Test
    void testSetGetLanguagePref() {
        RequestPayload payload = new RequestPayload();
        
        String languagePref = "EN";
        payload.setLanguagePref(languagePref);
        
        assertEquals(languagePref, payload.getLanguagePref());
        
        payload.setLanguagePref(null);
        assertNull(payload.getLanguagePref());
    }

    @Test
    void testSetGetEmailNotificationInfo() {
        RequestPayload payload = new RequestPayload();
        EmailNotificationInfoType emailInfo = new EmailNotificationInfoType();
        
        payload.setEmailNotificationInfo(emailInfo);
        
        assertEquals(emailInfo, payload.getEmailNotificationInfo());

        payload.setEmailNotificationInfo(null);
        assertNull(payload.getEmailNotificationInfo());
    }

    @Test
    void testToString() {
        RequestPayload payload = new RequestPayload();
        List<DisclosureInfoType> disclosureList = new ArrayList<>();
        DisclosureInfoType disclosure = new DisclosureInfoType();
        disclosureList.add(disclosure);

        payload.setDisclosureInfo(disclosureList);
        payload.setLanguagePref("EN");
        payload.setEmailNotificationInfo(new EmailNotificationInfoType());

        String expectedString = "RequestPayload@" + Integer.toHexString(System.identityHashCode(payload)) + "[disclosureInfo=" + disclosureList + ",languagePref=EN,emailNotificationInfo=" + payload.getEmailNotificationInfo() + "]";
        
        assertEquals(expectedString, payload.toString());

        payload.setDisclosureInfo(null);
        payload.setLanguagePref(null);
        payload.setEmailNotificationInfo(null);

        expectedString = "RequestPayload@" + Integer.toHexString(System.identityHashCode(payload)) + "[disclosureInfo=<null>,languagePref=<null>,emailNotificationInfo=<null>]";
        
        assertEquals(expectedString, payload.toString());
    }

    @Test
    void testHashCode() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        
        List<DisclosureInfoType> disclosureList = new ArrayList<>();
        DisclosureInfoType disclosure = new DisclosureInfoType();
        disclosureList.add(disclosure);

        payload1.setDisclosureInfo(disclosureList);
        payload1.setLanguagePref("EN");
        payload1.setEmailNotificationInfo(new EmailNotificationInfoType());

        payload2.setDisclosureInfo(disclosureList);
        payload2.setLanguagePref("EN");
        payload2.setEmailNotificationInfo(new EmailNotificationInfoType());

        assertEquals(payload1.hashCode(), payload2.hashCode());

        payload2.setLanguagePref("FR");
        assertNotEquals(payload1.hashCode(), payload2.hashCode());
    }

    @Test
    void testEquals() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        
        List<DisclosureInfoType> disclosureList = new ArrayList<>();
        DisclosureInfoType disclosure = new DisclosureInfoType();
        disclosureList.add(disclosure);

        payload1.setDisclosureInfo(disclosureList);
        payload1.setLanguagePref("EN");
        payload1.setEmailNotificationInfo(new EmailNotificationInfoType());

        payload2.setDisclosureInfo(disclosureList);
        payload2.setLanguagePref("EN");
        payload2.setEmailNotificationInfo(new EmailNotificationInfoType());

        assertEquals(payload1, payload2);

        payload2.setLanguagePref("FR");
        assertNotEquals(payload1, payload2);

        payload1.setLanguagePref(null);
        payload2.setLanguagePref(null);
        assertEquals(payload1, payload2);
        
        assertNotEquals(payload1, new Object());
    }
}
