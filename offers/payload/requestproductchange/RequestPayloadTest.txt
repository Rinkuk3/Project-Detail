import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

class RequestPayloadTest {

    @Test
    void testSetGetDisclosureInfo() {
        RequestPayload requestPayload = new RequestPayload();
        DisclosureInfoType disclosureInfoType = new DisclosureInfoType(); // Assuming DisclosureInfoType is another class
        requestPayload.setDisclosureInfo(Arrays.asList(disclosureInfoType));
        
        assertNotNull(requestPayload.getDisclosureInfo());
        assertEquals(1, requestPayload.getDisclosureInfo().size());
        assertEquals(disclosureInfoType, requestPayload.getDisclosureInfo().get(0));
    }

    @Test
    void testSetGetLanguagePref() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setLanguagePref("English");
        
        assertEquals("English", requestPayload.getLanguagePref());
        
        requestPayload.setLanguagePref(null);
        assertNull(requestPayload.getLanguagePref());
    }

    @Test
    void testSetGetCardNumber() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCardNumber("1234567890123456");
        
        assertEquals("1234567890123456", requestPayload.getCardNumber());
        
        requestPayload.setCardNumber(null);
        assertNull(requestPayload.getCardNumber());
    }

    @Test
    void testSetGetRoleCD() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setRoleCD("Admin");
        
        assertEquals("Admin", requestPayload.getRoleCD());
        
        requestPayload.setRoleCD(null);
        assertNull(requestPayload.getRoleCD());
    }

    @Test
    void testSetGetSelectedOffer() {
        RequestPayload requestPayload = new RequestPayload();
        PromotionOfferType promotionOfferType = new PromotionOfferType(); // Assuming PromotionOfferType is another class
        requestPayload.setSelectedOffer(promotionOfferType);
        
        assertEquals(promotionOfferType, requestPayload.getSelectedOffer());
    }

    @Test
    void testSetGetEmailNotificationInfo() {
        RequestPayload requestPayload = new RequestPayload();
        EmailNotificationInfoType emailNotificationInfoType = new EmailNotificationInfoType(); // Assuming EmailNotificationInfoType is another class
        requestPayload.setEmailNotificationInfo(emailNotificationInfoType);
        
        assertEquals(emailNotificationInfoType, requestPayload.getEmailNotificationInfo());
    }

    @Test
    void testToString() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setLanguagePref("English");
        requestPayload.setCardNumber("1234567890123456");
        
        String expectedString = "RequestPayload@" + Integer.toHexString(System.identityHashCode(requestPayload)) + 
                "[disclosureInfo=<null>,languagePref=English,cardNumber=1234567890123456,roleCD=<null>,selectedOffer=<null>,emailNotificationInfo=<null>]";
        
        assertEquals(expectedString, requestPayload.toString());
    }

    @Test
    void testEquals() {
        RequestPayload requestPayload1 = new RequestPayload();
        RequestPayload requestPayload2 = new RequestPayload();
        
        requestPayload1.setLanguagePref("English");
        requestPayload2.setLanguagePref("English");
        
        assertEquals(requestPayload1, requestPayload2);
        
        requestPayload2.setLanguagePref("Spanish");
        assertNotEquals(requestPayload1, requestPayload2);
        
        requestPayload1.setLanguagePref(null);
        requestPayload2.setLanguagePref(null);
        assertEquals(requestPayload1, requestPayload2);
    }

    @Test
    void testHashCode() {
        RequestPayload requestPayload1 = new RequestPayload();
        RequestPayload requestPayload2 = new RequestPayload();
        
        requestPayload1.setLanguagePref("English");
        requestPayload2.setLanguagePref("English");
        
        assertEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
        
        requestPayload2.setLanguagePref("Spanish");
        assertNotEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
        
        requestPayload1.setLanguagePref(null);
        requestPayload2.setLanguagePref(null);
        
        assertEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
        
        requestPayload2.setLanguagePref("English");
        assertNotEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
    }
}
