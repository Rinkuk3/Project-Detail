import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

class ResponsePayloadTest {

    @Test
    void testSetGetDisclosureInfo() {
        ResponsePayload responsePayload = new ResponsePayload();
        List<DisclosureInfoType> disclosureList = new ArrayList<>();
        responsePayload.setDisclosureInfo(disclosureList);
        
        assertEquals(disclosureList, responsePayload.getDisclosureInfo());
    }

    @Test
    void testSetGetInstallmentPlanDetails() {
        ResponsePayload responsePayload = new ResponsePayload();
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        responsePayload.setInstallmentPlanDetails(installmentPlanDetails);
        
        assertEquals(installmentPlanDetails, responsePayload.getInstallmentPlanDetails());
    }

    @Test
    void testSetGetEventId() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setEventId("event123");
        
        assertEquals("event123", responsePayload.getEventId());
    }

    @Test
    void testSetGetDynamicDisclosureContent() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setDynamicDisclosureContent("Dynamic Content");
        
        assertEquals("Dynamic Content", responsePayload.getDynamicDisclosureContent());
    }

    @Test
    void testSetGetStaticDisclosureContent() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setStaticDisclosureContent("Static Content");
        
        assertEquals("Static Content", responsePayload.getStaticDisclosureContent());
    }

    @Test
    void testSetGetMoreIpEligibleTransactionsAvailable() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setMoreIpEligibleTransactionsAvailable(true);
        
        assertTrue(responsePayload.getMoreIpEligibleTransactionsAvailable());
    }

    @Test
    void testEquals() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();
        
        responsePayload1.setEventId("event123");
        responsePayload2.setEventId("event123");
        
        assertEquals(responsePayload1, responsePayload2);
        
        responsePayload2.setEventId("event456");
        assertNotEquals(responsePayload1, responsePayload2);
    }

    @Test
    void testHashCode() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();
        
        responsePayload1.setEventId("event123");
        responsePayload2.setEventId("event123");
        
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
        
        responsePayload2.setEventId("event456");
        assertNotEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
    }

    @Test
    void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setEventId("event123");
        responsePayload.setDynamicDisclosureContent("Dynamic Content");
        responsePayload.setStaticDisclosureContent("Static Content");
        responsePayload.setMoreIpEligibleTransactionsAvailable(true);

        String expectedString = "ResponsePayload{" +
                "disclosureInfo=[], installmentPlanDetails=null, eventId='event123', " +
                "dynamicDisclosureContent='Dynamic Content', staticDisclosureContent='Static Content', " +
                "moreIpEligibleTransactionsAvailable=true}";

        assertEquals(expectedString, responsePayload.toString());
    }
}
