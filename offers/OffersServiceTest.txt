package com.td.mbna.msec.midtier.offers;

import com.td.mbna.msec.midtier.offers.payload.cancelInstallmentPlan.CancelInstallmentPlanRequest;
import com.td.mbna.msec.midtier.offers.payload.cancelInstallmentPlan.CancelInstallmentPlanResponse;
import com.td.mbna.msec.midtier.offers.payload.requestcashadvanceregistration.RequestCashAdvanceRegistrationRequest;
import com.td.mbna.msec.midtier.offers.payload.requestcashadvanceregistration.RequestCashAdvanceRegistrationResponse;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceRequest;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceResponse;
import com.td.mbna.msec.midtier.offers.payload.requestminpaymentdeferral.RequestMinPaymentDeferralRequest;
import com.td.mbna.msec.midtier.offers.payload.requestminpaymentdeferral.RequestMinPaymentDeferralResponse;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeRequest;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeResponse;
import com.td.mbna.msec.midtier.offers.payload.requestretailregistration.RequestRetailRegistrationRequest;
import com.td.mbna.msec.midtier.offers.payload.requestretailregistration.RequestRetailRegistrationResponse;
import com.td.mbna.msec.midtier.offers.payload.retrieveoffers.RetrieveOffersRequest;
import com.td.mbna.msec.midtier.offers.payload.retrieveoffers.RetrieveOffersResponse;
import com.td.mbna.msec.midtier.offers.payload.retrieveoffersforaccounts.RetrieveOffersForAccountsRequest;
import com.td.mbna.msec.midtier.offers.payload.retrieveoffersforaccounts.RetrieveOffersForAccountsResponse;
import com.td.mbna.msec.midtier.offers.payload.updatebalanceprotectioninsurance.UpdateBalanceProtectionInsuranceRequest;
import com.td.mbna.msec.midtier.offers.payload.updatebalanceprotectioninsurance.UpdateBalanceProtectionInsuranceResponse;
import com.td.mbna.msec.midtier.offers.payload.requestInstallmentPlan.RequestInstallmentPlanRequest;
import com.td.mbna.msec.midtier.offers.payload.requestInstallmentPlan.RequestInstallmentPlanResponse;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.perf.ProfileLog;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class OffersServiceTest {

    @Mock
    private RequestCashAdvanceRegistrationOperation requestCashAdvanceRegistrationOperation;

    @Mock
    private RequestInsuranceOperation requestInsuranceOperation;

    @Mock
    private RequestProductChangeOperation requestProductChangeOperation;

    @Mock
    private RequestRetailRegistrationOperation requestRetailRegistrationOperation;

    @Mock
    private RetrieveOffersForAccountsOperation retrieveOffersForAccountsOperation;

    @Mock
    private RetrieveOffersOperation retrieveOffersOperation;

    @Mock
    private UpdateBalanceProtectionInsuranceOperation updateBalanceProtectionInsuranceOperation;

    @Mock
    private RequestMinPaymentDeferralPaymentOperation requestMinPaymentDeferralPaymentOperation;

    @Mock
    private RequestInstallmentPlanOperation requestInstallmentPlanOperation;

    @Mock
    private CancelInstallmentPlanOperation cancelInstallmentPlanOperation;

    @InjectMocks
    private OffersServiceImpl offersService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRetrieveOffers() {
        RetrieveOffersRequest request = mock(RetrieveOffersRequest.class);
        RetrieveOffersResponse response = mock(RetrieveOffersResponse.class);

        when(retrieveOffersOperation.invokeService(request, null)).thenReturn(response);

        RetrieveOffersResponse result = offersService.retrieveOffers(request);
        assertNotNull(result);
        verify(retrieveOffersOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testRetrieveOffersForAccounts() {
        RetrieveOffersForAccountsRequest request = mock(RetrieveOffersForAccountsRequest.class);
        RetrieveOffersForAccountsResponse response = mock(RetrieveOffersForAccountsResponse.class);

        when(retrieveOffersForAccountsOperation.invokeService(request, null)).thenReturn(response);

        RetrieveOffersForAccountsResponse result = offersService.retrieveOffersForAccounts(request);
        assertNotNull(result);
        verify(retrieveOffersForAccountsOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testUpdateBalanceProtectionInsurance() {
        UpdateBalanceProtectionInsuranceRequest request = mock(UpdateBalanceProtectionInsuranceRequest.class);
        UpdateBalanceProtectionInsuranceResponse response = mock(UpdateBalanceProtectionInsuranceResponse.class);

        when(updateBalanceProtectionInsuranceOperation.invokeService(request, null)).thenReturn(response);

        UpdateBalanceProtectionInsuranceResponse result = offersService.updateBalanceProtectionInsurance(request);
        assertNotNull(result);
        verify(updateBalanceProtectionInsuranceOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testRequestProductChange() {
        RequestProductChangeRequest request = mock(RequestProductChangeRequest.class);
        RequestProductChangeResponse response = mock(RequestProductChangeResponse.class);

        when(requestProductChangeOperation.invokeService(request, null)).thenReturn(response);

        RequestProductChangeResponse result = offersService.requestProductChange(request);
        assertNotNull(result);
        verify(requestProductChangeOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testRequestRetailRegistration() {
        RequestRetailRegistrationRequest request = mock(RequestRetailRegistrationRequest.class);
        RequestRetailRegistrationResponse response = mock(RequestRetailRegistrationResponse.class);

        when(requestRetailRegistrationOperation.invokeService(request)).thenReturn(response);

        RequestRetailRegistrationResponse result = offersService.requestRetailRegistration(request);
        assertNotNull(result);
        verify(requestRetailRegistrationOperation, times(1)).invokeService(request);
    }

    @Test
    void testRequestCashAdvanceRegistration() {
        RequestCashAdvanceRegistrationRequest request = mock(RequestCashAdvanceRegistrationRequest.class);
        RequestCashAdvanceRegistrationResponse response = mock(RequestCashAdvanceRegistrationResponse.class);

        when(requestCashAdvanceRegistrationOperation.invokeService(request)).thenReturn(response);

        RequestCashAdvanceRegistrationResponse result = offersService.requestCashAdvanceRegistration(request);
        assertNotNull(result);
        verify(requestCashAdvanceRegistrationOperation, times(1)).invokeService(request);
    }

    @Test
    void testRequestInsurance() {
        RequestInsuranceRequest request = mock(RequestInsuranceRequest.class);
        RequestInsuranceResponse response = mock(RequestInsuranceResponse.class);

        when(requestInsuranceOperation.invokeService(request, null)).thenReturn(response);

        RequestInsuranceResponse result = offersService.requestInsurance(request);
        assertNotNull(result);
        verify(requestInsuranceOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testRequestMinPaymentDeferral() {
        RequestMinPaymentDeferralRequest request = mock(RequestMinPaymentDeferralRequest.class);
        RequestMinPaymentDeferralResponse response = mock(RequestMinPaymentDeferralResponse.class);

        when(requestMinPaymentDeferralPaymentOperation.invokeService(request, null)).thenReturn(response);

        RequestMinPaymentDeferralResponse result = offersService.requestMinPaymentDeferral(request);
        assertNotNull(result);
        verify(requestMinPaymentDeferralPaymentOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testRequestInstallmentPlan() {
        RequestInstallmentPlanRequest request = mock(RequestInstallmentPlanRequest.class);
        RequestInstallmentPlanResponse response = mock(RequestInstallmentPlanResponse.class);

        when(requestInstallmentPlanOperation.invokeService(request, null)).thenReturn(response);

        RequestInstallmentPlanResponse result = offersService.requestInstallmentPlan(request);
        assertNotNull(result);
        verify(requestInstallmentPlanOperation, times(1)).invokeService(request, null);
    }

    @Test
    void testCancelInstallmentPlan() {
        CancelInstallmentPlanRequest request = mock(CancelInstallmentPlanRequest.class);
        CancelInstallmentPlanResponse response = mock(CancelInstallmentPlanResponse.class);

        when(cancelInstallmentPlanOperation.invokeService(request, null)).thenReturn(response);

        CancelInstallmentPlanResponse result = offersService.cancelInstallmentPlan(request);
        assertNotNull(result);
        verify(cancelInstallmentPlanOperation, times(1)).invokeService(request, null);
    }

}
