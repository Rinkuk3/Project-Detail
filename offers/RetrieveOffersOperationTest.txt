import com.td.mbna.msec.midtier.mbofp.MbnaOFP;
import com.td.mbna.msec.midtier.offers.RetrieveOffersRequest;
import com.td.mbna.msec.midtier.offers.RetrieveOffersResponse;
import com.td.mbna.msec.midtier.util.MidtierUtilHelper;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RetrieveOffersOperationTest {

    @Mock
    private MbnaOFP mbnaOFP;

    @InjectMocks
    private RetrieveOffersOperation retrieveOffersOperation;

    private RetrieveOffersRequest request;
    private String token = "test-token";

    @Before
    public void setUp() {
        request = mock(RetrieveOffersRequest.class);
        when(request.getAcctNum()).thenReturn("123456");
        when(request.getCustId()).thenReturn("test-customer-id");
    }

    @Test
    public void testInvokeService_Success() throws Exception {
        // Arrange
        Map<String, String> params = new HashMap<>();
        params.put(MSECConstants.TD_OFP_API_AGREEMENT_ID, "123456");
        params.put(MSECConstants.TD_OFP_API_PARTY_ID, "test-customer-id");

        RetrieveOffersResponse mockResponse = mock(RetrieveOffersResponse.class);
        when(mbnaOFP.retrieveOfferList(eq(params), eq(token))).thenReturn(mockResponse);

        // Act
        RetrieveOffersResponse response = retrieveOffersOperation.invokeService(request, token);

        // Assert
        verify(mbnaOFP, times(1)).retrieveOfferList(eq(params), eq(token));
        assert(response != null);
    }

    @Test(expected = RuntimeException.class)
    public void testInvokeService_Exception() throws Exception {
        // Arrange
        when(mbnaOFP.retrieveOfferList(any(), eq(token))).thenThrow(new RuntimeException("Error"));

        // Act
        retrieveOffersOperation.invokeService(request, token);
    }

    @Test
    public void testRequiresDisclosureConsent() {
        // Act
        boolean result = retrieveOffersOperation.requiresDisclosureConsent();

        // Assert
        assert(result == false);
    }

    @Test
    public void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = retrieveOffersOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assert(result == null);
    }

    @Test
    public void testGenerateAutoComment() {
        // Act
        boolean result = retrieveOffersOperation.generateAutoComment();

        // Assert
        assert(result == false);
    }

    @Test
    public void testCreateAutoComment() {
        // Arrange
        BaseRequest baseRequest = mock(BaseRequest.class);
        BaseResponse baseResponse = mock(BaseResponse.class);

        // Act
        List<String> result = retrieveOffersOperation.createAutoComment(baseRequest, baseResponse);

        // Assert
        assert(result == null);
    }

    @Test
    public void testGetEmailInfoBean() {
        // Act
        EmailInfo result = retrieveOffersOperation.getEmailInfoBean(null, null);

        // Assert
        assert(result == null);
    }

    @Test
    public void testGetValidator() {
        // Act
        MsecValidator result = retrieveOffersOperation.getValidator();

        // Assert
        assert(result == null);
    }
}
