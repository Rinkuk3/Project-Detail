import com.td.mbna.msec.core.service.CheckEligibility;
import com.td.mbna.msec.core.service.EligibilityAspectImpl;
import com.td.mbna.msec.core.service.EligibilityService;
import com.td.mbna.msec.midtier.exceptions.AuthorizationException;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class EligibilityAspectTest {

    private EligibilityAspectImpl eligibilityAspect;

    @Mock
    private EligibilityService eligibilityService;

    @Mock
    private ProceedingJoinPoint joinPoint;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        eligibilityAspect = new EligibilityAspectImpl();
    }

    @Test
    public void testCheckEligibility_AuthorizedWithStrategyId() throws Throwable {
        // Arrange
        CheckEligibility checkEligibility = mock(CheckEligibility.class);
        when(checkEligibility.strategyId()).thenReturn("validStrategyId");
        when(eligibilityService.isAuthorized("validStrategyId")).thenReturn(true);
        when(joinPoint.getTarget()).thenReturn(eligibilityService);
        when(joinPoint.proceed()).thenReturn("Success");

        // Act
        Object result = eligibilityAspect.checkEligibility(joinPoint, checkEligibility);

        // Assert
        assertEquals("Success", result);
        verify(eligibilityService).isAuthorized("validStrategyId");
        verify(joinPoint).proceed();
    }

    @Test
    public void testCheckEligibility_AuthorizedWithoutStrategyId() throws Throwable {
        // Arrange
        CheckEligibility checkEligibility = mock(CheckEligibility.class);
        when(checkEligibility.strategyId()).thenReturn("");
        when(eligibilityService.isAuthorized()).thenReturn(true);
        when(joinPoint.getTarget()).thenReturn(eligibilityService);
        when(joinPoint.proceed()).thenReturn("Success");

        // Act
        Object result = eligibilityAspect.checkEligibility(joinPoint, checkEligibility);

        // Assert
        assertEquals("Success", result);
        verify(eligibilityService).isAuthorized();
        verify(joinPoint).proceed();
    }

    @Test
    public void testCheckEligibility_NotAuthorizedWithStrategyId() throws Throwable {
        // Arrange
        CheckEligibility checkEligibility = mock(CheckEligibility.class);
        when(checkEligibility.strategyId()).thenReturn("invalidStrategyId");
        when(eligibilityService.isAuthorized("invalidStrategyId")).thenReturn(false);
        when(joinPoint.getTarget()).thenReturn(eligibilityService);

        // Act & Assert
        AuthorizationException exception = assertThrows(AuthorizationException.class, () -> {
            eligibilityAspect.checkEligibility(joinPoint, checkEligibility);
        });

        assertNotNull(exception);
        verify(eligibilityService).isAuthorized("invalidStrategyId");
        verify(joinPoint, never()).proceed();
    }

    @Test
    public void testCheckEligibility_NotAuthorizedWithoutStrategyId() throws Throwable {
        // Arrange
        CheckEligibility checkEligibility = mock(CheckEligibility.class);
        when(checkEligibility.strategyId()).thenReturn("");
        when(eligibilityService.isAuthorized()).thenReturn(false);
        when(joinPoint.getTarget()).thenReturn(eligibilityService);

        // Act & Assert
        AuthorizationException exception = assertThrows(AuthorizationException.class, () -> {
            eligibilityAspect.checkEligibility(joinPoint, checkEligibility);
        });

        assertNotNull(exception);
        verify(eligibilityService).isAuthorized();
        verify(joinPoint, never()).proceed();
    }

    @Test
    public void testCheckEligibility_NullStrategyId() throws Throwable {
        // Arrange
        CheckEligibility checkEligibility = mock(CheckEligibility.class);
        when(checkEligibility.strategyId()).thenReturn(null);
        when(eligibilityService.isAuthorized()).thenReturn(true);
        when(joinPoint.getTarget()).thenReturn(eligibilityService);
        when(joinPoint.proceed()).thenReturn("Success");

        // Act
        Object result = eligibilityAspect.checkEligibility(joinPoint, checkEligibility);

        // Assert
        assertEquals("Success", result);
        verify(eligibilityService).isAuthorized();
        verify(joinPoint).proceed();
    }
}
