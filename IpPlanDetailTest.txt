import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

class IpPlanDetailTest {

    private IpPlanDetail ipPlanDetail;

    @BeforeEach
    void setUp() {
        ipPlanDetail = new IpPlanDetail();
    }

    @Test
    void testSetGetId() {
        ipPlanDetail.setId("123");
        assertEquals("123", ipPlanDetail.getId());
    }

    @Test
    void testSetGetPlanName() {
        ipPlanDetail.setPlanName("Plan A");
        assertEquals("Plan A", ipPlanDetail.getPlanName());
    }

    @Test
    void testSetGetCreatedOn() {
        ipPlanDetail.setCreatedOn("2024-01-01");
        assertEquals("2024-01-01", ipPlanDetail.getCreatedOn());
    }

    @Test
    void testSetGetClosedOn() {
        ipPlanDetail.setClosedOn("2024-12-31");
        assertEquals("2024-12-31", ipPlanDetail.getClosedOn());
    }

    @Test
    void testSetGetTimeRemaining() {
        ipPlanDetail.setTimeRemaining(12);
        assertEquals(12, ipPlanDetail.getTimeRemaining());
    }

    @Test
    void testSetGetMonthlyPayment() {
        ipPlanDetail.setMonthlyPayment(new BigDecimal("100.50"));
        assertEquals(new BigDecimal("100.50"), ipPlanDetail.getMonthlyPayment());
    }

    @Test
    void testSetGetRemainingBalance() {
        ipPlanDetail.setRemainingBalance(new BigDecimal("500.75"));
        assertEquals(new BigDecimal("500.75"), ipPlanDetail.getRemainingBalance());
    }

    @Test
    void testSetGetStatus() {
        IpPlanStatus status = IpPlanStatus.ACTIVE; // assuming IpPlanStatus is an enum
        ipPlanDetail.setStatus(status);
        assertEquals(status, ipPlanDetail.getStatus());
    }

    @Test
    void testSetGetExpirationDate() {
        ipPlanDetail.setExpirationDate("2025-01-01");
        assertEquals("2025-01-01", ipPlanDetail.getExpirationDate());
    }

    @Test
    void testSetGetBalanceAtClosure() {
        ipPlanDetail.setBalanceAtClosure(new BigDecimal("300.00"));
        assertEquals(new BigDecimal("300.00"), ipPlanDetail.getBalanceAtClosure());
    }

    @Test
    void testSetGetOneTimeTransactionFee() {
        ipPlanDetail.setOneTimeTransactionFee(new BigDecimal("50.00"));
        assertEquals(new BigDecimal("50.00"), ipPlanDetail.getOneTimeTransactionFee());
    }

    @Test
    void testSetGetIpInterest() {
        ipPlanDetail.setIpInterest(new BigDecimal("5.00"));
        assertEquals(new BigDecimal("5.00"), ipPlanDetail.getIpInterest());
    }

    @Test
    void testSetGetTransactionAmt() {
        ipPlanDetail.setTransactionAmt(new BigDecimal("200.00"));
        assertEquals(new BigDecimal("200.00"), ipPlanDetail.getTransactionAmt());
    }

    @Test
    void testSetGetAnnualInterest() {
        ipPlanDetail.setAnnualInterest(new BigDecimal("7.50"));
        assertEquals(new BigDecimal("7.50"), ipPlanDetail.getAnnualInterest());
    }

    @Test
    void testSetGetPaymentDueOn() {
        ipPlanDetail.setPaymentDueOn("2024-02-01");
        assertEquals("2024-02-01", ipPlanDetail.getPaymentDueOn());
    }

    @Test
    void testSetGetEventId() {
        ipPlanDetail.setEventId("EVT123");
        assertEquals("EVT123", ipPlanDetail.getEventId());
    }

    @Test
    void testSetGetIpPaymentOptionFeatureDt() {
        ipPlanDetail.setIpPaymentOptionFeatureDt("2024-03-01");
        assertEquals("2024-03-01", ipPlanDetail.getIpPaymentOptionFeatureDt());
    }

    @Test
    void testSetGetStatementDataDt() {
        ipPlanDetail.setStatementDataDt("2024-03-15");
        assertEquals("2024-03-15", ipPlanDetail.getStatementDataDt());
    }

    @Test
    void testSetGetPostedTime() {
        ipPlanDetail.setPostedTime(100);
        assertEquals(100, ipPlanDetail.getPostedTime());
    }

    @Test
    void testSetGetTxLevelProcessingFeatureId() {
        ipPlanDetail.setTxLevelProcessingFeatureId("TX123");
        assertEquals("TX123", ipPlanDetail.getTxLevelProcessingFeatureId());
    }

    @Test
    void testEquals_SameObject() {
        assertTrue(ipPlanDetail.equals(ipPlanDetail));
    }

    @Test
    void testEquals_DifferentObjectType() {
        String str = "Different Object";
        assertFalse(ipPlanDetail.equals(str));
    }

    @Test
    void testEquals_NullObject() {
        assertFalse(ipPlanDetail.equals(null));
    }

    @Test
    void testEquals_EqualObjects() {
        IpPlanDetail anotherIpPlanDetail = new IpPlanDetail();
        anotherIpPlanDetail.setId("123");
        ipPlanDetail.setId("123");
        assertTrue(ipPlanDetail.equals(anotherIpPlanDetail));
    }

    @Test
    void testEquals_NotEqualObjects() {
        IpPlanDetail anotherIpPlanDetail = new IpPlanDetail();
        anotherIpPlanDetail.setId("124");
        ipPlanDetail.setId("123");
        assertFalse(ipPlanDetail.equals(anotherIpPlanDetail));
    }

    @Test
    void testHashCode() {
        ipPlanDetail.setId("123");
        IpPlanDetail anotherIpPlanDetail = new IpPlanDetail();
        anotherIpPlanDetail.setId("123");
        assertEquals(ipPlanDetail.hashCode(), anotherIpPlanDetail.hashCode());
    }

    @Test
    void testToString() {
        ipPlanDetail.setId("123");
        ipPlanDetail.setPlanName("Plan A");
        String expectedToString = "IpPlanDetail{id='123', planName='Plan A', createdOn='null', closedOn='null', " +
                "timeRemaining=null, monthlyPayment=null, remainingBalance=null, status=null, expirationDate='null', " +
                "balanceAtClosure=null, oneTimeTransactionFee=null, ipInterest=0, transactionAmt=null, annualInterest=null, " +
                "paymentDueOn='null', eventId='null', ipPaymentOptionFeatureDt='null', statementDataDt='null', " +
                "postedTime=null, txLevelProcessingFeatureId='null'}";
        assertEquals(expectedToString, ipPlanDetail.toString());
    }
}
