package com.td.mbna.msec.midtier.account.payload.deleteaccount;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class DeleteAccountResponseTest {

    private DeleteAccountResponse deleteAccountResponse;

    @BeforeEach
    public void setUp() {
        deleteAccountResponse = new DeleteAccountResponse();
    }

    @Test
    public void testGetResponsePayload() {
        // Test default state (null responsePayload)
        assertNull(deleteAccountResponse.getResponsePayload(), "Default responsePayload should be null");
        
        // Set a value and test it
        String payload = "test payload";
        deleteAccountResponse.setResponsePayload(payload);
        assertEquals(payload, deleteAccountResponse.getResponsePayload(), "Response payload should match the set value");
    }

    @Test
    public void testSetResponsePayload() {
        String payload = "test payload";
        deleteAccountResponse.setResponsePayload(payload);
        assertEquals(payload, deleteAccountResponse.getResponsePayload(), "Response payload should match the set value");
    }

    @Test
    public void testGetAdditionalProperties() {
        Map<String, Object> additionalProperties = deleteAccountResponse.getAdditionalProperties();
        assertNotNull(additionalProperties, "Additional properties map should not be null");
        assertTrue(additionalProperties.isEmpty(), "Additional properties map should be empty initially");
    }

    @Test
    public void testSetAdditionalProperty() {
        String key = "exampleKey";
        String value = "exampleValue";
        deleteAccountResponse.setAdditionalProperty(key, value);

        Map<String, Object> additionalProperties = deleteAccountResponse.getAdditionalProperties();
        assertEquals(1, additionalProperties.size(), "Additional properties map should contain one entry");
        assertEquals(value, additionalProperties.get(key), "The value of the additional property should match the set value");
    }

    @Test
    public void testSetMultipleAdditionalProperties() {
        deleteAccountResponse.setAdditionalProperty("key1", "value1");
        deleteAccountResponse.setAdditionalProperty("key2", "value2");

        Map<String, Object> additionalProperties = deleteAccountResponse.getAdditionalProperties();
        assertEquals(2, additionalProperties.size(), "Additional properties map should contain two entries");
        assertEquals("value1", additionalProperties.get("key1"), "Value for key1 should be 'value1'");
        assertEquals("value2", additionalProperties.get("key2"), "Value for key2 should be 'value2'");
    }
}
