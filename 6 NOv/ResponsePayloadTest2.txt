package com.td.mbna.msec.midtier.account.payload.getrewardsbalances;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    public void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testDefaultConstructor() {
        // Check if availableBalanceQty and loyaltyUnitOfMeasure are initialized correctly (should be null)
        assertNull(responsePayload.getAvailableBalanceQty(), "availableBalanceQty should be null by default");
        assertNull(responsePayload.getLoyaltyUnitOfMeasure(), "loyaltyUnitOfMeasure should be null by default");
    }

    @Test
    public void testGetAvailableBalanceQty() {
        Long availableBalance = 100L;
        responsePayload.setAvailableBalanceQty(availableBalance);

        assertEquals(availableBalance, responsePayload.getAvailableBalanceQty(), "Available balance should be set correctly");
    }

    @Test
    public void testSetAvailableBalanceQty() {
        Long availableBalance = 200L;
        responsePayload.setAvailableBalanceQty(availableBalance);

        assertEquals(availableBalance, responsePayload.getAvailableBalanceQty(), "Available balance should be set correctly");
    }

    @Test
    public void testGetLoyaltyUnitOfMeasure() {
        String loyaltyUnit = "Points";
        responsePayload.setLoyaltyUnitOfMeasure(loyaltyUnit);

        assertEquals(loyaltyUnit, responsePayload.getLoyaltyUnitOfMeasure(), "Loyalty unit of measure should be set correctly");
    }

    @Test
    public void testSetLoyaltyUnitOfMeasure() {
        String loyaltyUnit = "Miles";
        responsePayload.setLoyaltyUnitOfMeasure(loyaltyUnit);

        assertEquals(loyaltyUnit, responsePayload.getLoyaltyUnitOfMeasure(), "Loyalty unit of measure should be set correctly");
    }

    @Test
    public void testToString() {
        responsePayload.setAvailableBalanceQty(150L);
        responsePayload.setLoyaltyUnitOfMeasure("Points");

        String result = responsePayload.toString();
        assertNotNull(result, "toString() should return a non-null value");
        assertTrue(result.contains("availableBalanceQty"), "toString() should contain 'availableBalanceQty'");
        assertTrue(result.contains("loyaltyUnitOfMeasure"), "toString() should contain 'loyaltyUnitOfMeasure'");
    }

    @Test
    public void testHashCode() {
        responsePayload.setAvailableBalanceQty(150L);
        responsePayload.setLoyaltyUnitOfMeasure("Points");

        int hashCode = responsePayload.hashCode();
        assertNotEquals(0, hashCode, "hashCode should not be zero");
    }

    @Test
    public void testEquals() {
        ResponsePayload anotherResponse = new ResponsePayload();
        anotherResponse.setAvailableBalanceQty(150L);
        anotherResponse.setLoyaltyUnitOfMeasure("Points");

        // Test equality when values are the same
        assertTrue(responsePayload.equals(anotherResponse), "Two equal ResponsePayload instances should be equal");

        // Modify the values and check equality again
        anotherResponse.setAvailableBalanceQty(200L);
        assertFalse(responsePayload.equals(anotherResponse), "Two ResponsePayload instances with different availableBalanceQty should not be equal");

        anotherResponse.setAvailableBalanceQty(150L);
        anotherResponse.setLoyaltyUnitOfMeasure("Miles");
        assertFalse(responsePayload.equals(anotherResponse), "Two ResponsePayload instances with different loyaltyUnitOfMeasure should not be equal");

        // Test equality with a different type
        String nonResponse = "NonResponse";
        assertFalse(responsePayload.equals(nonResponse), "ResponsePayload should not be equal to an object of a different type");
    }

    @Test
    public void testEqualsWithNullValues() {
        ResponsePayload anotherResponse = new ResponsePayload();

        // Test equality when both objects have null values
        assertTrue(responsePayload.equals(anotherResponse), "Two ResponsePayload instances with null values should be equal");
    }

    @Test
    public void testSetAvailableBalanceQtyNull() {
        responsePayload.setAvailableBalanceQty(null);
        assertNull(responsePayload.getAvailableBalanceQty(), "availableBalanceQty should be null after being set to null");
    }

    @Test
    public void testSetLoyaltyUnitOfMeasureNull() {
        responsePayload.setLoyaltyUnitOfMeasure(null);
        assertNull(responsePayload.getLoyaltyUnitOfMeasure(), "loyaltyUnitOfMeasure should be null after being set to null");
    }
}
