import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.DisclosureService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.autopay.payload.addpad.AddPadResponse;
import com.td.mbna.msec.midtier.autopay.payload.checkpadenrolled.CheckPadEnrolledResponse;
import com.td.mbna.msec.midtier.autopay.payload.validatebankaccount.ValidateBankAccountResponse;
import com.td.mbna.msec.midtier.mbnaap.MbnaAP;
import com.td.mbna.msec.paymentoption.model.EnrolledForPAD;
import com.td.mbna.msec.paymentoption.model.PadInfo;
import com.td.mbna.msec.paymentoption.model.SubmitfPadInfoResponse;
import com.td.mbna.msec.paymentoption.service.impl.PaymentOptionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class PaymentOptionServiceImplTest {

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MbnaAP mbnaAP;

    @Mock
    private DisclosureService disclosureService;

    @InjectMocks
    private PaymentOptionServiceImpl paymentOptionService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testVerifyPadInfo_ThrowsExceptionIfPadInfoIsNull() {
        Exception exception = assertThrows(RuntimeException.class, () -> paymentOptionService.verifyPadInfo(null));
        assertTrue(exception.getMessage().contains("mock error"));
    }

    @Test
    void testVerifyPadInfo_ThrowsExceptionIfUserDidNotAgree() {
        PadInfo padInfo = new PadInfo();
        padInfo.setAgreed(false);
        Exception exception = assertThrows(RuntimeException.class, () -> paymentOptionService.verifyPadInfo(padInfo));
        assertTrue(exception.getMessage().contains("user didn't agree the terms"));
    }

    @Test
    void testHasEnrolledPAD_ReturnsResponseWithEnrolledFalseIfAccountNull() {
        EnrolledForPAD response = paymentOptionService.hasEnrolledPAD((AccountDetails) null);
        assertFalse(response.isEnrolledPAD());
    }

    @Test
    void testHasEnrolledPAD_ReturnsResponseWithEnrolledTrue() {
        AccountDetails account = mock(AccountDetails.class);
        CheckPadEnrolledResponse enrolledResponse = mock(CheckPadEnrolledResponse.class);
        when(mbnaAP.checkEnrolledForPad(anyString(), anyString())).thenReturn(enrolledResponse);
        EnrolledForPAD response = paymentOptionService.hasEnrolledPAD(account);
        assertTrue(response.isEnrolledPAD());
    }

    @Test
    void testSubmitPadInfo_ThrowsExceptionIfAccountAlreadyEnrolled() {
        AccountDetails account = mock(AccountDetails.class);
        PadInfo padInfo = new PadInfo();
        EnrolledForPAD enrolledForPAD = new EnrolledForPAD();
        enrolledForPAD.setEnrolledPAD(true);

        when(sessionProvider.getCurrentAccount()).thenReturn(account);
        when(paymentOptionService.hasEnrolledPAD(account)).thenReturn(enrolledForPAD);

        Exception exception = assertThrows(RuntimeException.class, () -> paymentOptionService.submitPadInfo(padInfo));
        assertTrue(exception.getMessage().contains("already enrolled in PAD"));
    }

    @Test
    void testSubmitPadInfo_SuccessfulSubmission() {
        AccountDetails account = mock(AccountDetails.class);
        PadInfo padInfo = new PadInfo();
        AddPadResponse addPadResponse = mock(AddPadResponse.class);

        when(sessionProvider.getCurrentAccount()).thenReturn(account);
        when(mbnaAP.addPad(any(), anyString())).thenReturn(addPadResponse);

        SubmitfPadInfoResponse response = paymentOptionService.submitPadInfo(padInfo);

        assertNotNull(response);
    }
}
