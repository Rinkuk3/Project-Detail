package com.td.mbna.msec.profile.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class PersonalInformationTest {

    private PersonalInformation personalInformation;
    private Address mailingAddress;
    private Address physicalAddress;
    private PhoneNumber phone;

    @BeforeEach
    public void setUp() {
        // Initialize the test objects
        personalInformation = new PersonalInformation();
        mailingAddress = new Address(); // Assume Address has default constructor or set fields manually
        physicalAddress = new Address(); // Same for physicalAddress
        phone = new PhoneNumber(); // Assume PhoneNumber has default constructor or set fields manually
    }

    @Test
    public void testGetName() {
        String name = "John Doe";
        personalInformation.setName(name);
        assertEquals(name, personalInformation.getName(), "The name should be set correctly.");
    }

    @Test
    public void testSetName() {
        String name = "Jane Smith";
        personalInformation.setName(name);
        assertEquals(name, personalInformation.getName(), "The name should be set correctly.");
    }

    @Test
    public void testGetDob() {
        String dob = "1990-01-01";
        personalInformation.setDob(dob);
        assertEquals(dob, personalInformation.getDob(), "The DOB should be set correctly.");
    }

    @Test
    public void testSetDob() {
        String dob = "1985-05-12";
        personalInformation.setDob(dob);
        assertEquals(dob, personalInformation.getDob(), "The DOB should be set correctly.");
    }

    @Test
    public void testGetMailingAddress() {
        personalInformation.setMailingAddress(mailingAddress);
        assertEquals(mailingAddress, personalInformation.getMailingAddress(), "Mailing address should be set correctly.");
    }

    @Test
    public void testSetMailingAddress() {
        personalInformation.setMailingAddress(mailingAddress);
        assertEquals(mailingAddress, personalInformation.getMailingAddress(), "Mailing address should be set correctly.");
    }

    @Test
    public void testGetPhone() {
        personalInformation.setPhone(phone);
        assertEquals(phone, personalInformation.getPhone(), "Phone number should be set correctly.");
    }

    @Test
    public void testSetPhone() {
        personalInformation.setPhone(phone);
        assertEquals(phone, personalInformation.getPhone(), "Phone number should be set correctly.");
    }

    @Test
    public void testIsSameAddress() {
        personalInformation.setSameAddress(true);
        assertTrue(personalInformation.isSameAddress(), "Same address should be set correctly.");
        
        personalInformation.setSameAddress(false);
        assertFalse(personalInformation.isSameAddress(), "Same address should be set correctly.");
    }

    @Test
    public void testSetSameAddress() {
        personalInformation.setSameAddress(true);
        assertTrue(personalInformation.isSameAddress(), "Same address should be true.");
        
        personalInformation.setSameAddress(false);
        assertFalse(personalInformation.isSameAddress(), "Same address should be false.");
    }

    @Test
    public void testGetPhysicalAddress() {
        personalInformation.setPhysicalAddress(physicalAddress);
        assertEquals(physicalAddress, personalInformation.getPhysicalAddress(), "Physical address should be set correctly.");
    }

    @Test
    public void testSetPhysicalAddress() {
        personalInformation.setPhysicalAddress(physicalAddress);
        assertEquals(physicalAddress, personalInformation.getPhysicalAddress(), "Physical address should be set correctly.");
    }

    @Test
    public void testEquals() {
        // Create another PersonalInformation instance with the same values
        PersonalInformation other = new PersonalInformation();
        other.setName("John Doe");
        other.setDob("1990-01-01");
        other.setMailingAddress(mailingAddress);
        other.setPhone(phone);
        other.setSameAddress(true);
        other.setPhysicalAddress(physicalAddress);

        assertTrue(personalInformation.equals(other), "Two PersonalInformation instances with the same values should be equal.");
    }

    @Test
    public void testNotEquals() {
        // Create another PersonalInformation instance with different values
        PersonalInformation other = new PersonalInformation();
        other.setName("Jane Doe");
        other.setDob("1985-05-12");
        other.setMailingAddress(mailingAddress);
        other.setPhone(phone);
        other.setSameAddress(false);
        other.setPhysicalAddress(physicalAddress);

        assertFalse(personalInformation.equals(other), "Two PersonalInformation instances with different values should not be equal.");
    }

    @Test
    public void testHashCode() {
        personalInformation.setName("John Doe");
        personalInformation.setDob("1990-01-01");
        personalInformation.setMailingAddress(mailingAddress);
        personalInformation.setPhone(phone);
        personalInformation.setSameAddress(true);
        personalInformation.setPhysicalAddress(physicalAddress);

        int hashCode = personalInformation.hashCode();
        assertNotEquals(0, hashCode, "hashCode should not be zero.");
    }

    @Test
    public void testToString() {
        personalInformation.setName("John Doe");
        personalInformation.setDob("1990-01-01");
        personalInformation.setMailingAddress(mailingAddress);
        personalInformation.setPhone(phone);
        personalInformation.setSameAddress(true);
        personalInformation.setPhysicalAddress(physicalAddress);

        String result = personalInformation.toString();
        assertNotNull(result, "toString() should return a non-null value.");
        assertTrue(result.contains("name"), "toString() should contain 'name'.");
        assertTrue(result.contains("dob"), "toString() should contain 'dob'.");
    }
}
