import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

public class EligibilityHandlerTest {

    private EligibilityHandler eligibilityHandler;
    private AccountDetails account;
    private CustEligType customerEligibility;
    private List<EligType> eligList;

    @Before
    public void setUp() {
        eligibilityHandler = new EligibilityHandler();
        account = mock(AccountDetails.class);
        customerEligibility = mock(CustEligType.class);
        eligList = new ArrayList<>();
    }

    @Test
    public void testSetEligibility_withNullCustomerEligibility() {
        eligibilityHandler.setEligibility(null, account);
        // No exception should be thrown
    }

    @Test
    public void testSetEligibility_withMatchingAccount() {
        // Mock the account ID
        when(account.getAccountId()).thenReturn("12345");
        AcctEligType acctElig = mock(AcctEligType.class);
        when(acctElig.getAcctId()).thenReturn("12345");

        List<AcctEligType> acctsElig = new ArrayList<>();
        acctsElig.add(acctElig);

        CustEligType custElig = mock(CustEligType.class);
        when(custElig.getAcctsElig()).thenReturn(acctsElig);

        eligibilityHandler.setEligibility(custElig, account);

        // Validate that the account's eligibility settings were updated, using mock validation
        verify(account).setAllowedAccountSummary(anyBoolean());
    }

    @Test
    public void testIsCustomerAllowed_withNullEligibility() {
        assertFalse(eligibilityHandler.isCustomerAllowed(null, EligIdType.CREDIT_LINE_INCREASE));
    }

    @Test
    public void testIsCustomerAllowed_withValidEligibility() {
        EligType eligibility = mock(EligType.class);
        when(eligibility.getEligId()).thenReturn(EligIdType.CREDIT_LINE_INCREASE);
        when(eligibility.isEligValue()).thenReturn(true);

        List<EligType> eligibilities = new ArrayList<>();
        eligibilities.add(eligibility);
        when(customerEligibility.getCustElig()).thenReturn(eligibilities);

        assertTrue(eligibilityHandler.isCustomerAllowed(customerEligibility, EligIdType.CREDIT_LINE_INCREASE));
    }

    @Test
    public void testIsAllowed_withMatchingEligibility() {
        EligType eligType = mock(EligType.class);
        when(eligType.getEligId()).thenReturn(EligIdType.CREDIT_LINE_INCREASE);
        when(eligType.isEligValue()).thenReturn(true);

        List<EligType> eligList = new ArrayList<>();
        eligList.add(eligType);

        boolean result = eligibilityHandler.isAllowed(eligList, EligIdType.CREDIT_LINE_INCREASE);
        assertTrue(result);
    }

    @Test
    public void testIsAllowed_withNonMatchingEligibility() {
        EligType eligType = mock(EligType.class);
        when(eligType.getEligId()).thenReturn(EligIdType.CREDIT_LINE_DECREASE);
        when(eligType.isEligValue()).thenReturn(false);

        List<EligType> eligList = new ArrayList<>();
        eligList.add(eligType);

        boolean result = eligibilityHandler.isAllowed(eligList, EligIdType.CREDIT_LINE_INCREASE);
        assertFalse(result);
    }

    @Test
    public void testSetAccountEligibility_withEmptyEligibilityList() {
        eligibilityHandler.setAccountEligibility(account, new ArrayList<EligType>());
        // Verify that no eligibility-related methods were called
        verify(account, never()).setAllowedAccountSummary(anyBoolean());
    }

    @Test
    public void testSetAccountLevelEligibility_withValidEligibility() {
        EligType eligType = mock(EligType.class);
        when(eligType.getEligId()).thenReturn(EligIdType.CREDIT_LINE_INCREASE);
        when(eligType.isEligValue()).thenReturn(true);

        List<EligType> eligList = new ArrayList<>();
        eligList.add(eligType);

        eligibilityHandler.setAccountLevelEligibility(account, eligList, EligIdType.CREDIT_LINE_INCREASE);

        verify(account).setAllowedCreditLimitIncrease(true);
    }

    @Test
    public void testGetAccountNumber_withOldStubData() {
        when(account.getAccountId()).thenReturn("12345");

        String accountNum = eligibilityHandler.getAccountNumer(account);
        assertEquals("12345", accountNum);
    }

    @Test
    public void testGetAccountNumber_withNewStubData() {
        when(account.getAccountId()).thenReturn("12345-67890");
        when(account.getAccountNumber()).thenReturn("67890");

        String accountNum = eligibilityHandler.getAccountNumer(account);
        assertEquals("67890", accountNum);
    }

    @Test
    public void testExtractEligibility() {
        when(account.getAccountId()).thenReturn("12345");
        when(account.isAllowedBalanceTransfer()).thenReturn(true);
        when(account.isAllowedTransferToChequing()).thenReturn(false);
        when(account.isAllowedCardActivation()).thenReturn(true);
        when(account.getProductCode()).thenReturn("VISA");

        String eligibility = eligibilityHandler.extractEligibility(account);
        assertTrue(eligibility.contains("Balance Transfer - true"));
        assertTrue(eligibility.contains("Transfer to Chequing - false"));
        assertTrue(eligibility.contains("Card Activation - true"));
        assertTrue(eligibility.contains("Card Brand - VISA"));
    }
}
