import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.offers.application.PaperlessOfferService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

class OffersEligibilityServiceImplTest {

    @InjectMocks
    private OffersEligibilityServiceImpl offersEligibilityService;

    @Mock
    private PaperlessOfferService paperlessOfferService;

    @Mock
    private AccountDetails accountDetails;

    @BeforeEach
    void setUp() {
        // Initialize mocks
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testIsAllowedForCreditLimitIncreaseOffer_whenAccountIsNull() {
        when(accountDetails).thenReturn(null);
        assertFalse(offersEligibilityService.isAllowedForCreditLimitIncreaseOffer(accountDetails));
    }

    @Test
    void testIsAllowedForCreditLimitIncreaseOffer_whenAllowed() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(true);
        assertTrue(offersEligibilityService.isAllowedForCreditLimitIncreaseOffer(accountDetails));
    }

    @Test
    void testIsAllowedForCreditLimitIncreaseOffer_whenNotAllowed() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(false);
        assertFalse(offersEligibilityService.isAllowedForCreditLimitIncreaseOffer(accountDetails));
    }

    @Test
    void testIsEligibleForAcliOffer_whenEligible() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(true);
        when(accountDetails.getTopCLIOffer()).thenReturn(new Object());
        assertTrue(offersEligibilityService.isEligibleForAcliOffer(accountDetails));
    }

    @Test
    void testIsEligibleForAcliOffer_whenNotEligible() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(false);
        when(accountDetails.getTopCLIOffer()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForAcliOffer(accountDetails));
    }

    @Test
    void testIsEligibleForCli_whenEligible() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(true);
        when(accountDetails.getTopCLIOffer()).thenReturn(null);
        assertTrue(offersEligibilityService.isEligibleForCli(accountDetails));
    }

    @Test
    void testIsEligibleForCli_whenNotEligible() {
        when(accountDetails.isAllowedCreditLimitIncrease()).thenReturn(false);
        when(accountDetails.getTopCLIOffer()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForCli(accountDetails));
    }

    @Test
    void testIsEligibleForProductUpgradeOffer_whenEligible() {
        when(accountDetails.isAllowedSpecialOffers()).thenReturn(true);
        when(accountDetails.getProductUpgradeOffers()).thenReturn(new ArrayList<>());
        assertTrue(offersEligibilityService.isEligibleForProductUpgradeOffer(accountDetails));
    }

    @Test
    void testIsEligibleForProductUpgradeOffer_whenNotEligible() {
        when(accountDetails.isAllowedSpecialOffers()).thenReturn(false);
        when(accountDetails.getProductUpgradeOffers()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForProductUpgradeOffer(accountDetails));
    }

    @Test
    void testIsEligibleForBalanceProtectionOffer_whenEligible() {
        when(accountDetails.isAllowedBalanceProtection()).thenReturn(true);
        when(accountDetails.getBpOffers()).thenReturn(new ArrayList<>());
        assertTrue(offersEligibilityService.isEligibleForBalanceProtectionOffer(accountDetails));
    }

    @Test
    void testIsEligibleForBalanceProtectionOffer_whenNotEligible() {
        when(accountDetails.isAllowedBalanceProtection()).thenReturn(false);
        when(accountDetails.getBpOffers()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForBalanceProtectionOffer(accountDetails));
    }

    @Test
    void testIsBalanceProtectionOfferAccepted_whenAccepted() {
        when(accountDetails.isBpiOfferAccepted()).thenReturn(true);
        assertTrue(offersEligibilityService.isBalanceProtectionOfferAccepted(accountDetails));
    }

    @Test
    void testIsBalanceProtectionOfferAccepted_whenNotAccepted() {
        when(accountDetails.isBpiOfferAccepted()).thenReturn(false);
        assertFalse(offersEligibilityService.isBalanceProtectionOfferAccepted(accountDetails));
    }

    @Test
    void testIsEligibleForMiniPaymentOffer_whenEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        when(accountDetails.isAllowedMiniPayment()).thenReturn(true);
        when(accountDetails.getMpdOffers()).thenReturn(new ArrayList<>());
        assertTrue(offersEligibilityService.isEligibleForMiniPaymentOffer(accountDetails));
    }

    @Test
    void testIsEligibleForMiniPaymentOffer_whenNotEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(false);
        when(accountDetails.isAllowedMiniPayment()).thenReturn(true);
        when(accountDetails.getMpdOffers()).thenReturn(new ArrayList<>());
        assertFalse(offersEligibilityService.isEligibleForMiniPaymentOffer(accountDetails));
    }

    @Test
    void testIsMinimumPaymentOfferAccepted_whenAccepted() {
        when(accountDetails.isMpdOfferAccepted()).thenReturn(true);
        assertTrue(offersEligibilityService.isMinimumPaymentOfferAccepted(accountDetails));
    }

    @Test
    void testIsMinimumPaymentOfferAccepted_whenNotAccepted() {
        when(accountDetails.isMpdOfferAccepted()).thenReturn(false);
        assertFalse(offersEligibilityService.isMinimumPaymentOfferAccepted(accountDetails));
    }

    @Test
    void testIsEligibleForBTOffers_whenEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(true);
        assertTrue(offersEligibilityService.isEligibleForBTOffers(accountDetails));
    }

    @Test
    void testIsEligibleForBTOffers_whenNotEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(false);
        assertFalse(offersEligibilityService.isEligibleForBTOffers(accountDetails));
    }

    @Test
    void testIsEligibleForIPOffer_whenEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        when(accountDetails.hasIPOffers()).thenReturn(true);
        when(accountDetails.isAllowedIp()).thenReturn(true);
        assertTrue(offersEligibilityService.isEligibleForIPOffer(accountDetails));
    }

    @Test
    void testIsEligibleForIPOffer_whenNotEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(false);
        when(accountDetails.hasIPOffers()).thenReturn(false);
        when(accountDetails.isAllowedIp()).thenReturn(false);
        assertFalse(offersEligibilityService.isEligibleForIPOffer(accountDetails));
    }

    @Test
    void testIsEligibleForIPTransaction_whenEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        when(accountDetails.hasIPOffers()).thenReturn(true);
        when(accountDetails.isAllowedIp()).thenReturn(true);
        when(accountDetails.getActivePlans().size()).thenReturn(0);
        assertTrue(offersEligibilityService.isEligibleForIPTransaction(accountDetails));
    }

    @Test
    void testIsEligibleForIPTransaction_whenNotEligible() {
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        when(accountDetails.hasIPOffers()).thenReturn(true);
        when(accountDetails.isAllowedIp()).thenReturn(true);
        when(accountDetails.getActivePlans().size()).thenReturn(2);
        assertFalse(offersEligibilityService.isEligibleForIPTransaction(accountDetails));
    }

    @Test
    void testIsEligibleForBTPromoOffer_whenEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(true);
        when(accountDetails.getTopBTOffer()).thenReturn(new Object());
        assertTrue(offersEligibilityService.isEligibleForBTPromoOffer(accountDetails));
    }

    @Test
    void testIsEligibleForBTPromoOffer_whenNotEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(true);
        when(accountDetails.getTopBTOffer()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForBTPromoOffer(accountDetails));
    }

    @Test
    void testIsEligibleForBTContractOffer_whenEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(true);
        when(accountDetails.getContractRateBanner()).thenReturn(new Object());
        assertTrue(offersEligibilityService.isEligibleForBTContractOffer(accountDetails));
    }

    @Test
    void testIsEligibleForBTContractOffer_whenNotEligible() {
        when(accountDetails.isAllowedBalanceTransfer()).thenReturn(true);
        when(accountDetails.getContractRateBanner()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForBTContractOffer(accountDetails));
    }

    @Test
    void testIsEligibleForPaperlessOffer_whenEligible() {
        when(paperlessOfferService.hasPaperlessOffer(accountDetails)).thenReturn(true);
        assertTrue(offersEligibilityService.isEligibleForPaperlessOffer(accountDetails));
    }

    @Test
    void testIsEligibleForPaperlessOffer_whenNotEligible() {
        when(paperlessOfferService.hasPaperlessOffer(accountDetails)).thenReturn(false);
        assertFalse(offersEligibilityService.isEligibleForPaperlessOffer(accountDetails));
    }

    @Test
    void testIsEligibleForAddAuthorizedUserOffer_whenEligible() {
        when(accountDetails.isAllowedAddAuthorizedUser()).thenReturn(true);
        when(accountDetails.getAddAuthorizedUserOffers()).thenReturn(new ArrayList<>());
        assertTrue(offersEligibilityService.isEligibleForAddAuthorizedUserOffer(accountDetails));
    }

    @Test
    void testIsEligibleForAddAuthorizedUserOffer_whenNotEligible() {
        when(accountDetails.isAllowedAddAuthorizedUser()).thenReturn(false);
        when(accountDetails.getAddAuthorizedUserOffers()).thenReturn(null);
        assertFalse(offersEligibilityService.isEligibleForAddAuthorizedUserOffer(accountDetails));
    }

    @Test
    void testIsEligibleForFreeStatementOffer_whenEligible() {
        when(accountDetails.isEligibleForFreeStatement()).thenReturn(true);
        assertTrue(offersEligibilityService.isEligibleForFreeStatementOffer(accountDetails));
    }

    @Test
    void testIsEligibleForFreeStatementOffer_whenNotEligible() {
        when(accountDetails.isEligibleForFreeStatement()).thenReturn(false);
        assertFalse(offersEligibilityService.isEligibleForFreeStatementOffer(accountDetails));
    }
}
