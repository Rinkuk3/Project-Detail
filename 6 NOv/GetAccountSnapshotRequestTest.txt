package com.td.mbna.msec.midtier.account.payload.getaccountsnapshot;

import com.td.mbna.msec.midtier.types.common.CardHolderInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class GetAccountSnapshotRequestTest {

    private GetAccountSnapshotRequest getAccountSnapshotRequest;

    @BeforeEach
    public void setUp() {
        getAccountSnapshotRequest = new GetAccountSnapshotRequest();
    }

    @Test
    public void testGetCardHolderInfos_EmptyList() {
        List<CardHolderInfo> cardHolderInfos = getAccountSnapshotRequest.getCardHolderInfos();
        assertNotNull(cardHolderInfos, "CardHolderInfos should not be null");
        assertTrue(cardHolderInfos.isEmpty(), "CardHolderInfos should be empty initially");
    }

    @Test
    public void testSetCardHolderInfos() {
        List<CardHolderInfo> cardHolderInfos = new ArrayList<>();
        CardHolderInfo cardHolderInfo = new CardHolderInfo();
        cardHolderInfos.add(cardHolderInfo);
        
        getAccountSnapshotRequest.setCardHolderInfos(cardHolderInfos);
        assertEquals(cardHolderInfos, getAccountSnapshotRequest.getCardHolderInfos(), "CardHolderInfos should match the set value");
    }

    @Test
    public void testSetCardHolderInfos_NullList() {
        getAccountSnapshotRequest.setCardHolderInfos(null);
        assertNull(getAccountSnapshotRequest.getCardHolderInfos(), "CardHolderInfos should be null after setting it to null");
    }

    @Test
    public void testSetCardHolderInfos_EmptyList() {
        List<CardHolderInfo> cardHolderInfos = new ArrayList<>();
        getAccountSnapshotRequest.setCardHolderInfos(cardHolderInfos);
        
        assertTrue(getAccountSnapshotRequest.getCardHolderInfos().isEmpty(), "CardHolderInfos should be empty after setting it to an empty list");
    }

    @Test
    public void testSetCardHolderInfos_ListWithElements() {
        List<CardHolderInfo> cardHolderInfos = new ArrayList<>();
        CardHolderInfo cardHolderInfo1 = new CardHolderInfo();
        CardHolderInfo cardHolderInfo2 = new CardHolderInfo();
        cardHolderInfos.add(cardHolderInfo1);
        cardHolderInfos.add(cardHolderInfo2);
        
        getAccountSnapshotRequest.setCardHolderInfos(cardHolderInfos);
        
        assertEquals(2, getAccountSnapshotRequest.getCardHolderInfos().size(), "CardHolderInfos list should have two elements");
    }

}
