package com.td.mbna.msec.midtier.account.payload.getaccountsnapshot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class SequenceNumberTest {

    private SequenceNumber sequenceNumber;

    @BeforeEach
    public void setUp() {
        sequenceNumber = new SequenceNumber();
    }

    @Test
    public void testGetName() {
        String name = "Sequence1";
        sequenceNumber.setName(name);
        assertEquals(name, sequenceNumber.getName(), "Name should match the set value");
    }

    @Test
    public void testSetName() {
        String name = "Sequence1";
        sequenceNumber.setName(name);
        assertEquals(name, sequenceNumber.getName(), "Name should match the set value");
    }

    @Test
    public void testGetDeclaredType() {
        String declaredType = "Integer";
        sequenceNumber.setDeclaredType(declaredType);
        assertEquals(declaredType, sequenceNumber.getDeclaredType(), "Declared type should match the set value");
    }

    @Test
    public void testSetDeclaredType() {
        String declaredType = "String";
        sequenceNumber.setDeclaredType(declaredType);
        assertEquals(declaredType, sequenceNumber.getDeclaredType(), "Declared type should match the set value");
    }

    @Test
    public void testGetScope() {
        String scope = "Local";
        sequenceNumber.setScope(scope);
        assertEquals(scope, sequenceNumber.getScope(), "Scope should match the set value");
    }

    @Test
    public void testSetScope() {
        String scope = "Global";
        sequenceNumber.setScope(scope);
        assertEquals(scope, sequenceNumber.getScope(), "Scope should match the set value");
    }

    @Test
    public void testGetValue() {
        Integer value = 10;
        sequenceNumber.setValue(value);
        assertEquals(value, sequenceNumber.getValue(), "Value should match the set value");
    }

    @Test
    public void testSetValue() {
        Integer value = 20;
        sequenceNumber.setValue(value);
        assertEquals(value, sequenceNumber.getValue(), "Value should match the set value");
    }

    @Test
    public void testGetNil() {
        Boolean nil = true;
        sequenceNumber.setNil(nil);
        assertEquals(nil, sequenceNumber.getNil(), "Nil should match the set value");
    }

    @Test
    public void testSetNil() {
        Boolean nil = false;
        sequenceNumber.setNil(nil);
        assertEquals(nil, sequenceNumber.getNil(), "Nil should match the set value");
    }

    @Test
    public void testGetGlobalScope() {
        Boolean globalScope = true;
        sequenceNumber.setGlobalScope(globalScope);
        assertEquals(globalScope, sequenceNumber.getGlobalScope(), "GlobalScope should match the set value");
    }

    @Test
    public void testSetGlobalScope() {
        Boolean globalScope = false;
        sequenceNumber.setGlobalScope(globalScope);
        assertEquals(globalScope, sequenceNumber.getGlobalScope(), "GlobalScope should match the set value");
    }

    @Test
    public void testGetTypeSubstituted() {
        Boolean typeSubstituted = true;
        sequenceNumber.setTypeSubstituted(typeSubstituted);
        assertEquals(typeSubstituted, sequenceNumber.getTypeSubstituted(), "TypeSubstituted should match the set value");
    }

    @Test
    public void testSetTypeSubstituted() {
        Boolean typeSubstituted = false;
        sequenceNumber.setTypeSubstituted(typeSubstituted);
        assertEquals(typeSubstituted, sequenceNumber.getTypeSubstituted(), "TypeSubstituted should match the set value");
    }

    @Test
    public void testGetAdditionalProperties() {
        Map<String, Object> additionalProperties = sequenceNumber.getAdditionalProperties();
        assertNotNull(additionalProperties, "Additional properties map should not be null");
    }

    @Test
    public void testSetAdditionalProperty() {
        String key = "property1";
        Object value = "value1";
        sequenceNumber.setAdditionalProperty(key, value);
        assertTrue(sequenceNumber.getAdditionalProperties().containsKey(key), "Property key should exist");
        assertEquals(value, sequenceNumber.getAdditionalProperties().get(key), "Property value should match the set value");
    }

    @Test
    public void testAdditionalPropertiesEmptyOnInit() {
        Map<String, Object> additionalProperties = sequenceNumber.getAdditionalProperties();
        assertTrue(additionalProperties.isEmpty(), "Additional properties map should be empty initially");
    }
}
