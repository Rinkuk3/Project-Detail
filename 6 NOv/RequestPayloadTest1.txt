package com.td.mbna.msec.midtier.account.payload.deleteaccount;

import com.td.mbna.msec.midtier.types.common.DeliveryPreferenceType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class RequestPayloadTest {

    private RequestPayload requestPayload;

    @BeforeEach
    public void setUp() {
        requestPayload = new RequestPayload();
    }

    @Test
    public void testGetConnectId() {
        // Test default state (null connectId)
        assertNull(requestPayload.getConnectId(), "Default connectId should be null");

        // Set a value and test it
        String connectId = "connect123";
        requestPayload.setConnectId(connectId);
        assertEquals(connectId, requestPayload.getConnectId(), "Connect ID should match the set value");
    }

    @Test
    public void testSetConnectId() {
        String connectId = "connect456";
        requestPayload.setConnectId(connectId);
        assertEquals(connectId, requestPayload.getConnectId(), "Connect ID should match the set value");
    }

    @Test
    public void testGetAcctDeliveryPreference() {
        // Test default state (null acctDeliveryPreference)
        assertNull(requestPayload.getAcctDeliveryPreference(), "Default acctDeliveryPreference should be null");

        // Set a value and test it
        DeliveryPreferenceType deliveryPreference = DeliveryPreferenceType.EMAIL;
        requestPayload.setAcctDeliveryPreference(deliveryPreference);
        assertEquals(deliveryPreference, requestPayload.getAcctDeliveryPreference(), "Account delivery preference should match the set value");
    }

    @Test
    public void testSetAcctDeliveryPreference() {
        DeliveryPreferenceType deliveryPreference = DeliveryPreferenceType.PAPER;
        requestPayload.setAcctDeliveryPreference(deliveryPreference);
        assertEquals(deliveryPreference, requestPayload.getAcctDeliveryPreference(), "Account delivery preference should match the set value");
    }

    @Test
    public void testGetAdditionalProperties() {
        // Ensure the additional properties map is initialized and empty by default
        assertNotNull(requestPayload.getAdditionalProperties(), "Additional properties map should not be null");
        assertTrue(requestPayload.getAdditionalProperties().isEmpty(), "Additional properties map should be empty initially");
    }

    @Test
    public void testSetAdditionalProperty() {
        String key = "exampleKey";
        String value = "exampleValue";
        requestPayload.setAdditionalProperty(key, value);

        assertEquals(1, requestPayload.getAdditionalProperties().size(), "Additional properties map should contain one entry");
        assertEquals(value, requestPayload.getAdditionalProperties().get(key), "The value of the additional property should match the set value");
    }

    @Test
    public void testToString() {
        // Test the toString method for coverage
        String result = requestPayload.toString();
        assertNotNull(result, "toString() should return a non-null value");
        assertTrue(result.contains("RequestPayload"), "toString() should contain the class name");
    }

    @Test
    public void testHashCode() {
        // Test hashCode method for coverage
        int hashCode = requestPayload.hashCode();
        assertNotEquals(0, hashCode, "hashCode should not be zero");
    }

    @Test
    public void testEquals() {
        // Create a new instance and test equals
        RequestPayload anotherRequestPayload = new RequestPayload();
        assertTrue(requestPayload.equals(anotherRequestPayload), "Two equal RequestPayload instances should be equal");

        // Set different values and test equals
        requestPayload.setConnectId("connect123");
        anotherRequestPayload.setConnectId("connect123");
        assertTrue(requestPayload.equals(anotherRequestPayload), "Two instances with the same connectId should be equal");

        // Test equality with a different type
        String nonRequestPayload = "NonRequestPayload";
        assertFalse(requestPayload.equals(nonRequestPayload), "RequestPayload should not be equal to an object of a different type");
    }
}
