package com.td.mbna.msec.midtier.account.payload.getrewardsbalances;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class GetRewardsBalancesResponseTest {

    private GetRewardsBalancesResponse getRewardsBalancesResponse;

    @BeforeEach
    public void setUp() {
        getRewardsBalancesResponse = new GetRewardsBalancesResponse();
    }

    @Test
    public void testDefaultConstructor() {
        // Check if responsePayload is initialized
        assertNotNull(getRewardsBalancesResponse.getResponsePayload(), "ResponsePayload should not be null");
    }

    @Test
    public void testGetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        getRewardsBalancesResponse.setResponsePayload(payload);
        
        assertEquals(payload, getRewardsBalancesResponse.getResponsePayload(), "ResponsePayload should match the set value");
    }

    @Test
    public void testSetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        getRewardsBalancesResponse.setResponsePayload(payload);
        
        assertEquals(payload, getRewardsBalancesResponse.getResponsePayload(), "ResponsePayload should be set correctly");
    }

    @Test
    public void testToString() {
        String result = getRewardsBalancesResponse.toString();
        assertNotNull(result, "toString() should return a non-null value");
        assertTrue(result.contains("GetRewardsBalancesResponse"), "toString() should contain the class name");
    }

    @Test
    public void testHashCode() {
        int hashCode = getRewardsBalancesResponse.hashCode();
        assertNotEquals(0, hashCode, "hashCode should not be zero");
    }

    @Test
    public void testEquals() {
        // Create another instance with the same values
        GetRewardsBalancesResponse anotherResponse = new GetRewardsBalancesResponse();
        assertTrue(getRewardsBalancesResponse.equals(anotherResponse), "Two equal GetRewardsBalancesResponse instances should be equal");

        // Modify the responsePayload and test equality again
        ResponsePayload payload = new ResponsePayload();
        getRewardsBalancesResponse.setResponsePayload(payload);
        anotherResponse.setResponsePayload(payload);

        assertTrue(getRewardsBalancesResponse.equals(anotherResponse), "Two instances with the same responsePayload should be equal");

        // Test equality with a different type
        String nonResponse = "NonResponse";
        assertFalse(getRewardsBalancesResponse.equals(nonResponse), "GetRewardsBalancesResponse should not be equal to an object of a different type");
    }

    @Test
    public void testEqualsWithDifferentValues() {
        // Modify errorMessages and test equality
        getRewardsBalancesResponse.setErrorMessages("Error");
        GetRewardsBalancesResponse anotherResponse = new GetRewardsBalancesResponse();
        anotherResponse.setErrorMessages("Error");

        assertTrue(getRewardsBalancesResponse.equals(anotherResponse), "Two instances with the same error messages should be equal");

        // Modify status and test equality
        getRewardsBalancesResponse.setStatus("Success");
        anotherResponse.setStatus("Success");

        assertTrue(getRewardsBalancesResponse.equals(anotherResponse), "Two instances with the same status should be equal");
    }

    @Test
    public void testEqualsWithDifferentValuesNegative() {
        // Create an instance with different values for errorMessages
        GetRewardsBalancesResponse differentResponse = new GetRewardsBalancesResponse();
        differentResponse.setErrorMessages("Different Error");
        
        assertFalse(getRewardsBalancesResponse.equals(differentResponse), "Instances with different error messages should not be equal");
    }

    @Test
    public void testResponsePayloadNull() {
        getRewardsBalancesResponse.setResponsePayload(null);
        assertNull(getRewardsBalancesResponse.getResponsePayload(), "ResponsePayload should be null after being set to null");
    }

    @Test
    public void testStatusNull() {
        getRewardsBalancesResponse.setStatus(null);
        assertNull(getRewardsBalancesResponse.getStatus(), "Status should be null after being set to null");
    }

    @Test
    public void testErrorMessagesNull() {
        getRewardsBalancesResponse.setErrorMessages(null);
        assertNull(getRewardsBalancesResponse.getErrorMessages(), "Error messages should be null after being set to null");
    }
}
