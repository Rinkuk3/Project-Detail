package com.td.mbna.msec.midtier.types.eligibility;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class AcctEligTypeTest {

    private AcctEligType acctEligType;
    private List<EligType> eligTypeList;
    private EligType eligType1;
    private EligType eligType2;

    @BeforeEach
    void setUp() {
        acctEligType = new AcctEligType();
        
        // Prepare mock EligType objects
        eligType1 = new EligType();
        eligType1.setSomeField("value1");
        
        eligType2 = new EligType();
        eligType2.setSomeField("value2");
        
        eligTypeList = new ArrayList<>();
        eligTypeList.add(eligType1);
        eligTypeList.add(eligType2);
    }

    @Test
    void testSetAndGetAcctId() {
        acctEligType.setAcctId("12345");
        assertEquals("12345", acctEligType.getAcctId());
    }

    @Test
    void testSetAndGetAcctElig() {
        acctEligType.setAcctElig(eligTypeList);
        assertNotNull(acctEligType.getAcctElig());
        assertEquals(2, acctEligType.getAcctElig().size());
    }

    @Test
    void testToString() {
        acctEligType.setAcctId("12345");
        acctEligType.setAcctElig(eligTypeList);

        String expectedString = "com.td.mbna.msec.midtier.types.eligibility.AcctEligType@" +
                Integer.toHexString(System.identityHashCode(acctEligType)) +
                "[acctId=12345,acctElig=" + eligTypeList + "]";
        assertEquals(expectedString, acctEligType.toString());
    }

    @Test
    void testHashCode() {
        acctEligType.setAcctId("12345");
        acctEligType.setAcctElig(eligTypeList);

        int expectedHashCode = 31 * (31 + "12345".hashCode()) + eligTypeList.hashCode();
        assertEquals(expectedHashCode, acctEligType.hashCode());
    }

    @Test
    void testEquals_withSameFields() {
        AcctEligType other = new AcctEligType();
        other.setAcctId("12345");
        other.setAcctElig(eligTypeList);

        assertTrue(acctEligType.equals(other));
    }

    @Test
    void testEquals_withDifferentFields() {
        AcctEligType other = new AcctEligType();
        other.setAcctId("67890");
        other.setAcctElig(new ArrayList<>());

        assertFalse(acctEligType.equals(other));
    }

    @Test
    void testEquals_withNull() {
        assertFalse(acctEligType.equals(null));
    }

    @Test
    void testHashCode_withEmptyFields() {
        acctEligType.setAcctId(null);
        acctEligType.setAcctElig(null);

        assertEquals(1, acctEligType.hashCode());
    }

    @Test
    void testEquals_withNullFields() {
        AcctEligType other = new AcctEligType();
        other.setAcctId(null);
        other.setAcctElig(null);

        assertTrue(acctEligType.equals(other));
    }

    @Test
    void testToString_withEmptyFields() {
        String expectedString = "com.td.mbna.msec.midtier.types.eligibility.AcctEligType@" +
                Integer.toHexString(System.identityHashCode(acctEligType)) +
                "[acctId=<null>,acctElig=<null>]";
        assertEquals(expectedString, acctEligType.toString());
    }
}
