package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class UnformattedAddressTest {

    private UnformattedAddress unformattedAddress;

    @BeforeEach
    void setUp() {
        unformattedAddress = new UnformattedAddress();
    }

    @Test
    void testGetAndSetAddrLine1() {
        unformattedAddress.setAddrLine1("123 Main St");
        assertEquals("123 Main St", unformattedAddress.getAddrLine1());
    }

    @Test
    void testGetAndSetAddrLine2() {
        unformattedAddress.setAddrLine2("Apt 4B");
        assertEquals("Apt 4B", unformattedAddress.getAddrLine2());
    }

    @Test
    void testGetAndSetCity() {
        unformattedAddress.setCity("Toronto");
        assertEquals("Toronto", unformattedAddress.getCity());
    }

    @Test
    void testGetAndSetProvince() {
        unformattedAddress.setProvince("Ontario");
        assertEquals("Ontario", unformattedAddress.getProvince());
    }

    @Test
    void testGetAndSetPostalCode() {
        unformattedAddress.setPostalCode("M5A 1A1");
        assertEquals("M5A 1A1", unformattedAddress.getPostalCode());
    }

    @Test
    void testGetAndSetLastUpdatedTS() {
        unformattedAddress.setLastUpdatedTS(1639341234000L);
        assertEquals(1639341234000L, unformattedAddress.getLastUpdatedTS());
    }

    @Test
    void testToString() {
        unformattedAddress.setAddrLine1("123 Main St");
        unformattedAddress.setAddrLine2("Apt 4B");
        unformattedAddress.setCity("Toronto");
        unformattedAddress.setProvince("Ontario");
        unformattedAddress.setPostalCode("M5A 1A1");
        unformattedAddress.setLastUpdatedTS(1639341234000L);

        String expectedToString = "com.td.mbna.msec.midtier.types.common.UnformattedAddress@" +
                                  Integer.toHexString(System.identityHashCode(unformattedAddress)) + 
                                  "[addrLine1=123 Main St,addrLine2=Apt 4B,city=Toronto,province=Ontario,postalCode=M5A 1A1,lastUpdatedTS=1639341234000]";

        assertTrue(unformattedAddress.toString().contains("addrLine1"));
    }

    @Test
    void testHashCode() {
        UnformattedAddress address1 = new UnformattedAddress();
        address1.setAddrLine1("123 Main St");
        address1.setAddrLine2("Apt 4B");
        address1.setCity("Toronto");
        address1.setProvince("Ontario");
        address1.setPostalCode("M5A 1A1");
        address1.setLastUpdatedTS(1639341234000L);

        UnformattedAddress address2 = new UnformattedAddress();
        address2.setAddrLine1("123 Main St");
        address2.setAddrLine2("Apt 4B");
        address2.setCity("Toronto");
        address2.setProvince("Ontario");
        address2.setPostalCode("M5A 1A1");
        address2.setLastUpdatedTS(1639341234000L);

        assertEquals(address1.hashCode(), address2.hashCode());
    }

    @Test
    void testEquals() {
        UnformattedAddress address1 = new UnformattedAddress();
        address1.setAddrLine1("123 Main St");
        address1.setAddrLine2("Apt 4B");
        address1.setCity("Toronto");
        address1.setProvince("Ontario");
        address1.setPostalCode("M5A 1A1");
        address1.setLastUpdatedTS(1639341234000L);

        UnformattedAddress address2 = new UnformattedAddress();
        address2.setAddrLine1("123 Main St");
        address2.setAddrLine2("Apt 4B");
        address2.setCity("Toronto");
        address2.setProvince("Ontario");
        address2.setPostalCode("M5A 1A1");
        address2.setLastUpdatedTS(1639341234000L);

        assertTrue(address1.equals(address2));

        address2.setAddrLine1("456 Elm St");
        assertFalse(address1.equals(address2));
    }
}
