package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class IpCalculationTest {

    private IpCalculation ipCalculation;

    @BeforeEach
    void setUp() {
        ipCalculation = new IpCalculation();
    }

    @Test
    void testGettersAndSetters() {
        ipCalculation.setOfferId("IP56100002");
        ipCalculation.setDuration(3);
        ipCalculation.setInterest(BigDecimal.valueOf(150.50));
        ipCalculation.setSetupFees(BigDecimal.valueOf(50.25));
        ipCalculation.setMonthlyPayment(BigDecimal.valueOf(100.00));
        ipCalculation.setTotalSaving(BigDecimal.valueOf(200.00));
        ipCalculation.setTotalInterestPaid(BigDecimal.valueOf(75.75));
        ipCalculation.setOldCost(BigDecimal.valueOf(1200.00));
        ipCalculation.setOneTimeTransactionFee(BigDecimal.valueOf(25.00));
        ipCalculation.setTotalCost(BigDecimal.valueOf(1300.00));

        assertEquals("IP56100002", ipCalculation.getOfferId());
        assertEquals(Integer.valueOf(3), ipCalculation.getDuration());
        assertEquals(BigDecimal.valueOf(150.50), ipCalculation.getInterest());
        assertEquals(BigDecimal.valueOf(50.25), ipCalculation.getSetupFees());
        assertEquals(BigDecimal.valueOf(100.00), ipCalculation.getMonthlyPayment());
        assertEquals(BigDecimal.valueOf(200.00), ipCalculation.getTotalSaving());
        assertEquals(BigDecimal.valueOf(75.75), ipCalculation.getTotalInterestPaid());
        assertEquals(BigDecimal.valueOf(1200.00), ipCalculation.getOldCost());
        assertEquals(BigDecimal.valueOf(25.00), ipCalculation.getOneTimeTransactionFee());
        assertEquals(BigDecimal.valueOf(1300.00), ipCalculation.getTotalCost());
    }

    @Test
    void testConstructor() {
        ipCalculation = new IpCalculation();
        assertNotNull(ipCalculation);
    }

    @Test
    void testSetAndGetOfferId() {
        ipCalculation.setOfferId("IP12345");
        assertEquals("IP12345", ipCalculation.getOfferId());
    }

    @Test
    void testSetAndGetDuration() {
        ipCalculation.setDuration(6);
        assertEquals(Integer.valueOf(6), ipCalculation.getDuration());
    }

    @Test
    void testSetAndGetInterest() {
        ipCalculation.setInterest(BigDecimal.valueOf(200.75));
        assertEquals(BigDecimal.valueOf(200.75), ipCalculation.getInterest());
    }

    @Test
    void testSetAndGetSetupFees() {
        ipCalculation.setSetupFees(BigDecimal.valueOf(75.50));
        assertEquals(BigDecimal.valueOf(75.50), ipCalculation.getSetupFees());
    }

    @Test
    void testSetAndGetMonthlyPayment() {
        ipCalculation.setMonthlyPayment(BigDecimal.valueOf(150.00));
        assertEquals(BigDecimal.valueOf(150.00), ipCalculation.getMonthlyPayment());
    }

    @Test
    void testSetAndGetTotalSaving() {
        ipCalculation.setTotalSaving(BigDecimal.valueOf(250.00));
        assertEquals(BigDecimal.valueOf(250.00), ipCalculation.getTotalSaving());
    }

    @Test
    void testSetAndGetTotalInterestPaid() {
        ipCalculation.setTotalInterestPaid(BigDecimal.valueOf(100.00));
        assertEquals(BigDecimal.valueOf(100.00), ipCalculation.getTotalInterestPaid());
    }

    @Test
    void testSetAndGetOldCost() {
        ipCalculation.setOldCost(BigDecimal.valueOf(1000.00));
        assertEquals(BigDecimal.valueOf(1000.00), ipCalculation.getOldCost());
    }

    @Test
    void testSetAndGetOneTimeTransactionFee() {
        ipCalculation.setOneTimeTransactionFee(BigDecimal.valueOf(30.00));
        assertEquals(BigDecimal.valueOf(30.00), ipCalculation.getOneTimeTransactionFee());
    }

    @Test
    void testSetAndGetTotalCost() {
        ipCalculation.setTotalCost(BigDecimal.valueOf(1400.00));
        assertEquals(BigDecimal.valueOf(1400.00), ipCalculation.getTotalCost());
    }
}
