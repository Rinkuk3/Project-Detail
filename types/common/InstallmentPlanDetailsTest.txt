package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class InstallmentPlanDetailsTest {

    @Test
    void testGettersAndSetters() {
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();

        installmentPlanDetails.setMinPayOptionSetID("ID123");
        installmentPlanDetails.setAnnualInterestRate(BigDecimal.valueOf(15.5));
        installmentPlanDetails.setPromotionFeatureAmt(BigDecimal.valueOf(1000));
        installmentPlanDetails.setPromotionFeatureStartDt(123456789L);
        installmentPlanDetails.setPromotionFeatureAnnualInterestRate(BigDecimal.valueOf(12.5));
        installmentPlanDetails.setPromotionFeatureDurationTypeCd("Months");
        installmentPlanDetails.setPromotionFeatureDuration(12);
        installmentPlanDetails.setPromotionFeatureEarlyExpiryDt(987654321L);
        installmentPlanDetails.setPromotionFeatureEndDate(123987654L);
        installmentPlanDetails.setPromotionOfferId("Offer123");
        installmentPlanDetails.setPercentageFee(BigDecimal.valueOf(5.0));
        installmentPlanDetails.setFixedAmtFee(BigDecimal.valueOf(50));
        installmentPlanDetails.setMinAmtFee(BigDecimal.valueOf(10));
        installmentPlanDetails.setMaxAmtFee(BigDecimal.valueOf(500));
        installmentPlanDetails.setPurchaseAmt(BigDecimal.valueOf(1500));
        installmentPlanDetails.setNickName("Test Plan");
        installmentPlanDetails.setTotalEstimatedInterestAmt(BigDecimal.valueOf(200));
        installmentPlanDetails.setTotalPaymentPlanAmt(BigDecimal.valueOf(1700));
        installmentPlanDetails.setCostOfBorrowingAmt(BigDecimal.valueOf(200));
        installmentPlanDetails.setMonthlyPaymentAmt(BigDecimal.valueOf(140));

        assertEquals("ID123", installmentPlanDetails.getMinPayOptionSetID());
        assertEquals(BigDecimal.valueOf(15.5), installmentPlanDetails.getAnnualInterestRate());
        assertEquals(BigDecimal.valueOf(1000), installmentPlanDetails.getPromotionFeatureAmt());
        assertEquals(123456789L, installmentPlanDetails.getPromotionFeatureStartDt());
        assertEquals(BigDecimal.valueOf(12.5), installmentPlanDetails.getPromotionFeatureAnnualInterestRate());
        assertEquals("Months", installmentPlanDetails.getPromotionFeatureDurationTypeCd());
        assertEquals(12, installmentPlanDetails.getPromotionFeatureDuration());
        assertEquals(987654321L, installmentPlanDetails.getPromotionFeatureEarlyExpiryDt());
        assertEquals(123987654L, installmentPlanDetails.getPromotionFeatureEndDate());
        assertEquals("Offer123", installmentPlanDetails.getPromotionOfferId());
        assertEquals(BigDecimal.valueOf(5.0), installmentPlanDetails.getPercentageFee());
        assertEquals(BigDecimal.valueOf(50), installmentPlanDetails.getFixedAmtFee());
        assertEquals(BigDecimal.valueOf(10), installmentPlanDetails.getMinAmtFee());
        assertEquals(BigDecimal.valueOf(500), installmentPlanDetails.getMaxAmtFee());
        assertEquals(BigDecimal.valueOf(1500), installmentPlanDetails.getPurchaseAmt());
        assertEquals("Test Plan", installmentPlanDetails.getNickName());
        assertEquals(BigDecimal.valueOf(200), installmentPlanDetails.getTotalEstimatedInterestAmt());
        assertEquals(BigDecimal.valueOf(1700), installmentPlanDetails.getTotalPaymentPlanAmt());
        assertEquals(BigDecimal.valueOf(200), installmentPlanDetails.getCostOfBorrowingAmt());
        assertEquals(BigDecimal.valueOf(140), installmentPlanDetails.getMonthlyPaymentAmt());
    }

    @Test
    void testToString() {
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        installmentPlanDetails.setMinPayOptionSetID("ID123");
        installmentPlanDetails.setAnnualInterestRate(BigDecimal.valueOf(15.5));
        installmentPlanDetails.setPromotionFeatureAmt(BigDecimal.valueOf(1000));
        installmentPlanDetails.setPromotionFeatureStartDt(123456789L);
        installmentPlanDetails.setPromotionFeatureAnnualInterestRate(BigDecimal.valueOf(12.5));
        installmentPlanDetails.setPromotionFeatureDurationTypeCd("Months");
        installmentPlanDetails.setPromotionFeatureDuration(12);
        installmentPlanDetails.setPromotionFeatureEarlyExpiryDt(987654321L);
        installmentPlanDetails.setPromotionFeatureEndDate(123987654L);
        installmentPlanDetails.setPromotionOfferId("Offer123");
        installmentPlanDetails.setPercentageFee(BigDecimal.valueOf(5.0));
        installmentPlanDetails.setFixedAmtFee(BigDecimal.valueOf(50));
        installmentPlanDetails.setMinAmtFee(BigDecimal.valueOf(10));
        installmentPlanDetails.setMaxAmtFee(BigDecimal.valueOf(500));
        installmentPlanDetails.setPurchaseAmt(BigDecimal.valueOf(1500));
        installmentPlanDetails.setNickName("Test Plan");
        installmentPlanDetails.setTotalEstimatedInterestAmt(BigDecimal.valueOf(200));
        installmentPlanDetails.setTotalPaymentPlanAmt(BigDecimal.valueOf(1700));
        installmentPlanDetails.setCostOfBorrowingAmt(BigDecimal.valueOf(200));
        installmentPlanDetails.setMonthlyPaymentAmt(BigDecimal.valueOf(140));

        String expectedString = "InstallmentPlanDetails{" +
                "minPayOptionSetID='ID123',annualInterestRate=15.5,promotionFeatureAmt=1000," +
                "promotionFeatureStartDt=123456789,promotionFeatureAnnualInterestRate=12.5," +
                "promotionFeatureDurationTypeCd='Months',promotionFeatureDuration=12," +
                "promotionFeatureEarlyExpiryDt=987654321,promotionFeatureEndDate=123987654," +
                "promotionOfferId='Offer123',percentageFee=5.0,fixedAmtFee=50.0," +
                "minAmtFee=10.0,maxAmtFee=500.0,purchaseAmt=1500.0,nickName='Test Plan'," +
                "totalEstimatedInterestAmt=200.0,totalPaymentPlanAmt=1700.0,costOfBorrowingAmt=200.0," +
                "monthlyPaymentAmt=140.0}";

        assertEquals(expectedString, installmentPlanDetails.toString());
    }

    @Test
    void testEquals() {
        InstallmentPlanDetails installmentPlanDetails1 = new InstallmentPlanDetails();
        installmentPlanDetails1.setMinPayOptionSetID("ID123");
        installmentPlanDetails1.setAnnualInterestRate(BigDecimal.valueOf(15.5));

        InstallmentPlanDetails installmentPlanDetails2 = new InstallmentPlanDetails();
        installmentPlanDetails2.setMinPayOptionSetID("ID123");
        installmentPlanDetails2.setAnnualInterestRate(BigDecimal.valueOf(15.5));

        assertTrue(installmentPlanDetails1.equals(installmentPlanDetails2));
    }

    @Test
    void testEqualsDifferentObjects() {
        InstallmentPlanDetails installmentPlanDetails1 = new InstallmentPlanDetails();
        installmentPlanDetails1.setMinPayOptionSetID("ID123");

        InstallmentPlanDetails installmentPlanDetails2 = new InstallmentPlanDetails();
        installmentPlanDetails2.setMinPayOptionSetID("ID124");

        assertFalse(installmentPlanDetails1.equals(installmentPlanDetails2));
    }

    @Test
    void testEqualsNull() {
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        assertFalse(installmentPlanDetails.equals(null));
    }

    @Test
    void testEqualsSameObject() {
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        assertTrue(installmentPlanDetails.equals(installmentPlanDetails));
    }

    @Test
    void testEqualsDifferentClass() {
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        String someOtherClass = "some string";
        assertFalse(installmentPlanDetails.equals(someOtherClass));
    }

    @Test
    void testHashCode() {
        InstallmentPlanDetails installmentPlanDetails1 = new InstallmentPlanDetails();
        installmentPlanDetails1.setMinPayOptionSetID("ID123");

        InstallmentPlanDetails installmentPlanDetails2 = new InstallmentPlanDetails();
        installmentPlanDetails2.setMinPayOptionSetID("ID123");

        assertEquals(installmentPlanDetails1.hashCode(), installmentPlanDetails2.hashCode());
    }
}
