package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class DisclosureInputTypeTest {

    @Test
    void testGetAndSetOfferId() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setOfferId("Offer123");
        assertEquals("Offer123", disclosureInput.getOfferId());
    }

    @Test
    void testGetAndSetCustomerPhysicalProvince() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setCustomerPhysicalProvince("ON");
        assertEquals("ON", disclosureInput.getCustomerPhysicalProvince());
    }

    @Test
    void testGetAndSetDuration() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setDuration(12);
        assertEquals(12, disclosureInput.getDuration());
    }

    @Test
    void testGetAndSetTransactionFeeRate() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setTransactionFeeRate(BigDecimal.valueOf(0.05));
        assertEquals(BigDecimal.valueOf(0.05), disclosureInput.getTransactionFeeRate());
    }

    @Test
    void testGetAndSetFixedFee() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setFixedFee(BigDecimal.valueOf(10.0));
        assertEquals(BigDecimal.valueOf(10.0), disclosureInput.getFixedFee());
    }

    @Test
    void testGetAndSetMinimumFee() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setMinimumFee(BigDecimal.valueOf(5.0));
        assertEquals(BigDecimal.valueOf(5.0), disclosureInput.getMinimumFee());
    }

    @Test
    void testGetAndSetMaximumFee() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setMaximumFee(BigDecimal.valueOf(20.0));
        assertEquals(BigDecimal.valueOf(20.0), disclosureInput.getMaximumFee());
    }

    @Test
    void testGetAndSetInterestRate() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setInterestRate(BigDecimal.valueOf(10.0));
        assertEquals(BigDecimal.valueOf(10.0), disclosureInput.getInterestRate());
    }

    @Test
    void testGetAndSetPromoInterestRate() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setPromoInterestRate(BigDecimal.valueOf(5.0));
        assertEquals(BigDecimal.valueOf(5.0), disclosureInput.getPromoInterestRate());
    }

    @Test
    void testGetAndSetAuFee() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setAuFee(BigDecimal.valueOf(2.0));
        assertEquals(BigDecimal.valueOf(2.0), disclosureInput.getAuFee());
    }

    @Test
    void testGetAndSetIsEarlyExpired() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setIsEarlyExpired(true);
        assertTrue(disclosureInput.getIsEarlyExpired());
    }

    @Test
    void testGetAndSetTransactionEndDate() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setTransactionEndDate(1631796734000L);
        assertEquals(1631796734000L, disclosureInput.getTransactionEndDate());
    }

    @Test
    void testGetAndSetProductChangeVariables() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        ProductChangeDisclosureType productChange = new ProductChangeDisclosureType();
        disclosureInput.setProductChangeVariables(productChange);
        assertEquals(productChange, disclosureInput.getProductChangeVariables());
    }

    @Test
    void testGetAndSetEmailNotificationInfo() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        EmailNotificationInfoType emailNotificationInfo = new EmailNotificationInfoType();
        disclosureInput.setEmailNotificationInfo(emailNotificationInfo);
        assertEquals(emailNotificationInfo, disclosureInput.getEmailNotificationInfo());
    }

    @Test
    void testGetAndSetInstallmentPlanDetails() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        InstallmentPlanDetails installmentPlanDetails = new InstallmentPlanDetails();
        disclosureInput.setInstallmentPlanDetails(installmentPlanDetails);
        assertEquals(installmentPlanDetails, disclosureInput.getInstallmentPlanDetails());
    }

    @Test
    void testEqualsAndHashCode() {
        DisclosureInputType disclosureInput1 = new DisclosureInputType();
        disclosureInput1.setOfferId("Offer123");
        DisclosureInputType disclosureInput2 = new DisclosureInputType();
        disclosureInput2.setOfferId("Offer123");
        assertTrue(disclosureInput1.equals(disclosureInput2));
        assertEquals(disclosureInput1.hashCode(), disclosureInput2.hashCode());

        disclosureInput2.setOfferId("Offer456");
        assertFalse(disclosureInput1.equals(disclosureInput2));
    }

    @Test
    void testToString() {
        DisclosureInputType disclosureInput = new DisclosureInputType();
        disclosureInput.setOfferId("Offer123");
        disclosureInput.setCustomerPhysicalProvince("ON");
        disclosureInput.setTransactionFeeRate(BigDecimal.valueOf(0.05));

        String expectedString = "DisclosureInputType{" +
                "offerId='Offer123', customerPhysicalProvince='ON', transactionFeeRate=0.05, " +
                "fixedFee=null, minimumFee=null, maximumFee=null, interestRate=null, promoInterestRate=null, " +
                "isEarlyExpired=null, transactionEndDate=null, duration=null, productChangeVariables=null, " +
                "emailNotificationInfo=null, auFee=null, installmentPlanDetails=null}";

        assertEquals(expectedString, disclosureInput.toString());
    }
}
