package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class EligIdTypeTest {

    @Test
    void testToString() {
        assertEquals("Balance Transfer", EligIdType.BALANCE_TRANSFER.toString());
        assertEquals("Transfer to Chequing", EligIdType.TRANSFER_TO_CHEQUING.toString());
        assertEquals("Order Access Cheque", EligIdType.ORDER_ACCESS_CHEQUE.toString());
        assertEquals("Credit Line Increase", EligIdType.CREDIT_LINE_INCREASE.toString());
        assertEquals("Credit Line Decrease", EligIdType.CREDIT_LINE_DECREASE.toString());
        assertEquals("PIN Management", EligIdType.PIN_MANAGEMENT.toString());
        assertEquals("Card Activation", EligIdType.CARD_ACTIVATION.toString());
        assertEquals("Account Summary", EligIdType.ACCOUNT_SUMMARY.toString());
        assertEquals("E-statement Display", EligIdType.E_STATEMENT_DISPLAY.toString());
        assertEquals("Enrollment", EligIdType.ENROLLMENT.toString());
        assertEquals("Installment Plan", EligIdType.INSTALLMENT_PLAN.toString());
        assertEquals("Value Added Offer", EligIdType.VALUE_ADDED_OFFER.toString());
        assertEquals("Paper Suppression", EligIdType.PAPER_SUPPRESSION.toString());
        assertEquals("Standard E-Forms", EligIdType.STANDARD_E_FORMS.toString());
        assertEquals("Order Replacement Card", EligIdType.ORDER_REPLACEMENT_CARD.toString());
        assertEquals("KYC Refresh", EligIdType.KYC_REFRESH.toString());
        assertEquals("Re-Open Request", EligIdType.RE_OPEN_REQUEST.toString());
        assertEquals("Chat", EligIdType.CHAT.toString());
        assertEquals("Paper Statements", EligIdType.PAPER_STATEMENTS.toString());
        assertEquals("Hardcopy Statements", EligIdType.HARDCOPY_STATEMENTS.toString());
        assertEquals("Electronic Access Agreement", EligIdType.ELECTRONIC_ACCESS_AGREEMENT.toString());
        assertEquals("Electronic Access Agreement First Time", EligIdType.ELECTRONIC_ACCESS_AGREEMENT_FIRST_TIME.toString());
    }

    @Test
    void testValue() {
        assertEquals("Balance Transfer", EligIdType.BALANCE_TRANSFER.value());
        assertEquals("Transfer to Chequing", EligIdType.TRANSFER_TO_CHEQUING.value());
        assertEquals("Order Access Cheque", EligIdType.ORDER_ACCESS_CHEQUE.value());
        assertEquals("Credit Line Increase", EligIdType.CREDIT_LINE_INCREASE.value());
        assertEquals("Credit Line Decrease", EligIdType.CREDIT_LINE_DECREASE.value());
        assertEquals("PIN Management", EligIdType.PIN_MANAGEMENT.value());
        assertEquals("Card Activation", EligIdType.CARD_ACTIVATION.value());
        assertEquals("Account Summary", EligIdType.ACCOUNT_SUMMARY.value());
        assertEquals("E-statement Display", EligIdType.E_STATEMENT_DISPLAY.value());
        assertEquals("Enrollment", EligIdType.ENROLLMENT.value());
        assertEquals("Installment Plan", EligIdType.INSTALLMENT_PLAN.value());
        assertEquals("Value Added Offer", EligIdType.VALUE_ADDED_OFFER.value());
        assertEquals("Paper Suppression", EligIdType.PAPER_SUPPRESSION.value());
        assertEquals("Standard E-Forms", EligIdType.STANDARD_E_FORMS.value());
        assertEquals("Order Replacement Card", EligIdType.ORDER_REPLACEMENT_CARD.value());
        assertEquals("KYC Refresh", EligIdType.KYC_REFRESH.value());
        assertEquals("Re-Open Request", EligIdType.RE_OPEN_REQUEST.value());
        assertEquals("Chat", EligIdType.CHAT.value());
        assertEquals("Paper Statements", EligIdType.PAPER_STATEMENTS.value());
        assertEquals("Hardcopy Statements", EligIdType.HARDCOPY_STATEMENTS.value());
        assertEquals("Electronic Access Agreement", EligIdType.ELECTRONIC_ACCESS_AGREEMENT.value());
        assertEquals("Electronic Access Agreement First Time", EligIdType.ELECTRONIC_ACCESS_AGREEMENT_FIRST_TIME.value());
    }

    @Test
    void testFromValue() {
        assertEquals(EligIdType.BALANCE_TRANSFER, EligIdType.fromValue("Balance Transfer"));
        assertEquals(EligIdType.TRANSFER_TO_CHEQUING, EligIdType.fromValue("Transfer to Chequing"));
        assertEquals(EligIdType.ORDER_ACCESS_CHEQUE, EligIdType.fromValue("Order Access Cheque"));
        assertEquals(EligIdType.CREDIT_LINE_INCREASE, EligIdType.fromValue("Credit Line Increase"));
        assertEquals(EligIdType.CREDIT_LINE_DECREASE, EligIdType.fromValue("Credit Line Decrease"));
        assertEquals(EligIdType.PIN_MANAGEMENT, EligIdType.fromValue("PIN Management"));
        assertEquals(EligIdType.CARD_ACTIVATION, EligIdType.fromValue("Card Activation"));
        assertEquals(EligIdType.ACCOUNT_SUMMARY, EligIdType.fromValue("Account Summary"));
        assertEquals(EligIdType.E_STATEMENT_DISPLAY, EligIdType.fromValue("E-statement Display"));
        assertEquals(EligIdType.ENROLLMENT, EligIdType.fromValue("Enrollment"));
        assertEquals(EligIdType.INSTALLMENT_PLAN, EligIdType.fromValue("Installment Plan"));
        assertEquals(EligIdType.VALUE_ADDED_OFFER, EligIdType.fromValue("Value Added Offer"));
        assertEquals(EligIdType.PAPER_SUPPRESSION, EligIdType.fromValue("Paper Suppression"));
        assertEquals(EligIdType.STANDARD_E_FORMS, EligIdType.fromValue("Standard E-Forms"));
        assertEquals(EligIdType.ORDER_REPLACEMENT_CARD, EligIdType.fromValue("Order Replacement Card"));
        assertEquals(EligIdType.KYC_REFRESH, EligIdType.fromValue("KYC Refresh"));
        assertEquals(EligIdType.RE_OPEN_REQUEST, EligIdType.fromValue("Re-Open Request"));
        assertEquals(EligIdType.CHAT, EligIdType.fromValue("Chat"));
        assertEquals(EligIdType.PAPER_STATEMENTS, EligIdType.fromValue("Paper Statements"));
        assertEquals(EligIdType.HARDCOPY_STATEMENTS, EligIdType.fromValue("Hardcopy Statements"));
        assertEquals(EligIdType.ELECTRONIC_ACCESS_AGREEMENT, EligIdType.fromValue("Electronic Access Agreement"));
        assertEquals(EligIdType.ELECTRONIC_ACCESS_AGREEMENT_FIRST_TIME, EligIdType.fromValue("Electronic Access Agreement First Time"));
    }

    @Test
    void testFromValueThrowsExceptionForInvalidValue() {
        assertThrows(IllegalArgumentException.class, () -> EligIdType.fromValue("INVALID"));
    }
}
