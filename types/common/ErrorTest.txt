package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ErrorTest {

    private Error error;

    @BeforeEach
    void setUp() {
        error = new Error();
    }

    @Test
    void testGetAndSetErrorCode() {
        String errorCode = "404";
        error.setErrorCode(errorCode);
        assertEquals(errorCode, error.getErrorCode());
    }

    @Test
    void testGetAndSetErrorDescription() {
        String errorDescription = "Not Found";
        error.setErrorDescription(errorDescription);
        assertEquals(errorDescription, error.getErrorDescription());
    }

    @Test
    void testGetAndSetSeverity() {
        String severity = "High";
        error.setSeverity(severity);
        assertEquals(severity, error.getSeverity());
    }

    @Test
    void testToString() {
        error.setErrorCode("404");
        error.setSeverity("High");
        error.setErrorDescription("Not Found");

        String result = error.toString();
        assertNotNull(result);
        assertTrue(result.contains("errorCode=404"));
        assertTrue(result.contains("severity=High"));
        assertTrue(result.contains("errorDescription=Not Found"));
    }

    @Test
    void testHashCode() {
        error.setErrorCode("404");
        error.setSeverity("High");
        error.setErrorDescription("Not Found");

        int hashCode1 = error.hashCode();

        Error error2 = new Error();
        error2.setErrorCode("404");
        error2.setSeverity("High");
        error2.setErrorDescription("Not Found");

        int hashCode2 = error2.hashCode();

        assertEquals(hashCode1, hashCode2);
    }

    @Test
    void testEquals() {
        error.setErrorCode("404");
        error.setSeverity("High");
        error.setErrorDescription("Not Found");

        Error error2 = new Error();
        error2.setErrorCode("404");
        error2.setSeverity("High");
        error2.setErrorDescription("Not Found");

        assertTrue(error.equals(error2));

        error2.setErrorCode("500");
        assertFalse(error.equals(error2));
    }
}
