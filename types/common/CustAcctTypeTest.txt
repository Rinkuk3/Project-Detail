package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;

class CustAcctTypeTest {

    @Test
    void testGetAcctNum() {
        CustAcctType acct = new CustAcctType();
        acct.setAcctNum("12345");
        assertEquals("12345", acct.getAcctNum());
    }

    @Test
    void testSetAcctNum() {
        CustAcctType acct = new CustAcctType();
        acct.setAcctNum("12345");
        assertEquals("12345", acct.getAcctNum());
    }

    @Test
    void testGetCardNum() {
        CustAcctType acct = new CustAcctType();
        acct.setCardNum("98765");
        assertEquals("98765", acct.getCardNum());
    }

    @Test
    void testSetCardNum() {
        CustAcctType acct = new CustAcctType();
        acct.setCardNum("98765");
        assertEquals("98765", acct.getCardNum());
    }

    @Test
    void testGetCardNumList() {
        CustAcctType acct = new CustAcctType();
        List<CardNumHistoryType> list = new ArrayList<>();
        list.add(new CardNumHistoryType());
        acct.setCardNumList(list);
        assertEquals(list, acct.getCardNumList());
    }

    @Test
    void testSetCardNumList() {
        CustAcctType acct = new CustAcctType();
        List<CardNumHistoryType> list = new ArrayList<>();
        list.add(new CardNumHistoryType());
        acct.setCardNumList(list);
        assertEquals(list, acct.getCardNumList());
    }

    @Test
    void testGetCardHolder() {
        CustAcctType acct = new CustAcctType();
        CardHolderType holder = new CardHolderType();
        acct.setCardHolder(holder);
        assertEquals(holder, acct.getCardHolder());
    }

    @Test
    void testSetCardHolder() {
        CustAcctType acct = new CustAcctType();
        CardHolderType holder = new CardHolderType();
        acct.setCardHolder(holder);
        assertEquals(holder, acct.getCardHolder());
    }

    @Test
    void testGetRoleCD() {
        CustAcctType acct = new CustAcctType();
        acct.setRoleCD("role1");
        assertEquals("role1", acct.getRoleCD());
    }

    @Test
    void testSetRoleCD() {
        CustAcctType acct = new CustAcctType();
        acct.setRoleCD("role1");
        assertEquals("role1", acct.getRoleCD());
    }

    @Test
    void testGetProductCodes() {
        CustAcctType acct = new CustAcctType();
        acct.setProductCodes("productCode1");
        assertEquals("productCode1", acct.getProductCodes());
    }

    @Test
    void testSetProductCodes() {
        CustAcctType acct = new CustAcctType();
        acct.setProductCodes("productCode1");
        assertEquals("productCode1", acct.getProductCodes());
    }

    @Test
    void testGetPoCode() {
        CustAcctType acct = new CustAcctType();
        acct.setPoCode("poCode1");
        assertEquals("poCode1", acct.getPoCode());
    }

    @Test
    void testSetPoCode() {
        CustAcctType acct = new CustAcctType();
        acct.setPoCode("poCode1");
        assertEquals("poCode1", acct.getPoCode());
    }

    @Test
    void testGetArqCode() {
        CustAcctType acct = new CustAcctType();
        acct.setArqCode("arqCode1");
        assertEquals("arqCode1", acct.getArqCode());
    }

    @Test
    void testSetArqCode() {
        CustAcctType acct = new CustAcctType();
        acct.setArqCode("arqCode1");
        assertEquals("arqCode1", acct.getArqCode());
    }

    @Test
    void testGetAffinitySpec() {
        CustAcctType acct = new CustAcctType();
        AffinitySpecType affinitySpec = new AffinitySpecType();
        acct.setAffinitySpec(affinitySpec);
        assertEquals(affinitySpec, acct.getAffinitySpec());
    }

    @Test
    void testSetAffinitySpec() {
        CustAcctType acct = new CustAcctType();
        AffinitySpecType affinitySpec = new AffinitySpecType();
        acct.setAffinitySpec(affinitySpec);
        assertEquals(affinitySpec, acct.getAffinitySpec());
    }

    @Test
    void testGetAffinity() {
        CustAcctType acct = new CustAcctType();
        AffinityInfoType affinity = new AffinityInfoType();
        acct.setAffinity(affinity);
        assertEquals(affinity, acct.getAffinity());
    }

    @Test
    void testSetAffinity() {
        CustAcctType acct = new CustAcctType();
        AffinityInfoType affinity = new AffinityInfoType();
        acct.setAffinity(affinity);
        assertEquals(affinity, acct.getAffinity());
    }

    @Test
    void testToString() {
        CustAcctType acct = new CustAcctType();
        acct.setAcctNum("12345");
        acct.setCardNum("98765");
        acct.setRoleCD("role1");
        String expected = "com.td.mbna.msec.midtier.types.common.CustAcctType@" +
                Integer.toHexString(System.identityHashCode(acct)) + "[acctNum=12345,cardNum=98765,roleCD=role1]";
        assertTrue(acct.toString().contains("acctNum=12345"));
        assertTrue(acct.toString().contains("cardNum=98765"));
        assertTrue(acct.toString().contains("roleCD=role1"));
    }

    @Test
    void testHashCode() {
        CustAcctType acct1 = new CustAcctType();
        CustAcctType acct2 = new CustAcctType();
        acct1.setAcctNum("12345");
        acct2.setAcctNum("12345");
        assertEquals(acct1.hashCode(), acct2.hashCode());
    }

    @Test
    void testEquals() {
        CustAcctType acct1 = new CustAcctType();
        CustAcctType acct2 = new CustAcctType();
        acct1.setAcctNum("12345");
        acct2.setAcctNum("12345");
        assertTrue(acct1.equals(acct2));

        acct2.setAcctNum("67890");
        assertFalse(acct1.equals(acct2));
    }

    @Test
    void testEqualsNull() {
        CustAcctType acct = new CustAcctType();
        assertFalse(acct.equals(null));
    }

    @Test
    void testEqualsDifferentClass() {
        CustAcctType acct = new CustAcctType();
        assertFalse(acct.equals(new Object()));
    }
}
