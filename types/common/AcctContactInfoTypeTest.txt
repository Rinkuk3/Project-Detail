package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AcctContactInfoTypeTest {

    @Test
    void testGetSetEmailAddr() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        contactInfo.setEmailAddr("test@example.com");
        assertEquals("test@example.com", contactInfo.getEmailAddr());
        
        contactInfo.setEmailAddr(null);
        assertNull(contactInfo.getEmailAddr());
        
        contactInfo.setEmailAddr("");
        assertNull(contactInfo.getEmailAddr());
        
        contactInfo.setEmailAddr("abc");
        assertNull(contactInfo.getEmailAddr());
    }

    @Test
    void testGetSetBusinessPhoneNum() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        PhoneNumber phone = new PhoneNumber();
        contactInfo.setBusinessPhoneNum(phone);
        assertEquals(phone, contactInfo.getBusinessPhoneNum());
    }

    @Test
    void testGetSetHomePhoneNum() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        PhoneNumber phone = new PhoneNumber();
        contactInfo.setHomePhoneNum(phone);
        assertEquals(phone, contactInfo.getHomePhoneNum());
    }

    @Test
    void testGetSetMobilePhoneNum() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        PhoneNumber phone = new PhoneNumber();
        contactInfo.setMobilePhoneNum(phone);
        assertEquals(phone, contactInfo.getMobilePhoneNum());
    }

    @Test
    void testGetSetMailingAddress() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        UnformattedAddress address = new UnformattedAddress();
        contactInfo.setMailingAddress(address);
        assertEquals(address, contactInfo.getMailingAddress());
    }

    @Test
    void testGetSetPhysicalAddress() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        UnformattedAddress address = new UnformattedAddress();
        contactInfo.setPhysicalAddress(address);
        assertEquals(address, contactInfo.getPhysicalAddress());
    }

    @Test
    void testGetSetPhysicalAddressSameAsMailing() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        contactInfo.setPhysicalAddressSameAsMailing(true);
        assertTrue(contactInfo.getPhysicalAddressSameAsMailing());
    }

    @Test
    void testToString() {
        AcctContactInfoType contactInfo = new AcctContactInfoType();
        contactInfo.setEmailAddr("test@example.com");
        contactInfo.setPhysicalAddressSameAsMailing(true);

        String expected = AcctContactInfoType.class.getName() + '@' +
                          Integer.toHexString(System.identityHashCode(contactInfo)) +
                          "[emailAddr=test@example.com,businessPhoneNum=<null>,homePhoneNum=<null>,mobilePhoneNum=<null>,mailingAddress=<null>,physicalAddress=<null>,physicalAddressSameAsMailing=true]";
        assertEquals(expected, contactInfo.toString());
    }

    @Test
    void testHashCode() {
        AcctContactInfoType contactInfo1 = new AcctContactInfoType();
        AcctContactInfoType contactInfo2 = new AcctContactInfoType();

        contactInfo1.setEmailAddr("test@example.com");
        contactInfo2.setEmailAddr("test@example.com");

        assertEquals(contactInfo1.hashCode(), contactInfo2.hashCode());
    }

    @Test
    void testEquals() {
        AcctContactInfoType contactInfo1 = new AcctContactInfoType();
        AcctContactInfoType contactInfo2 = new AcctContactInfoType();

        contactInfo1.setEmailAddr("test@example.com");
        contactInfo2.setEmailAddr("test@example.com");

        assertTrue(contactInfo1.equals(contactInfo2));
        assertTrue(contactInfo1.equals(contactInfo1));
        assertFalse(contactInfo1.equals(null));
        assertFalse(contactInfo1.equals(new Object()));
    }
}
