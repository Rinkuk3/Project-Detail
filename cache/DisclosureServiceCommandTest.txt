package com.td.mbna.msec.midtier.cache;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.util.Date;
import java.util.Locale;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.mbnaweb.xsd.msgs.disclosure.GetDisclosureResponse;
import com.mbnaweb.xsd.msgs.disclosure.ResponsePayload;
import com.mbnaweb.xsd.msgs.disclosure.DisclosureInfo;
import com.td.mbna.msec.midtier.util.BackEndSrvcUtil;
import com.td.mbna.msec.midtier.util.JaxbUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.ExceptionUtil;

import javax.xml.bind.JAXBContext;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.GregorianCalendar;

@RunWith(MockitoJUnitRunner.class)
public class DisclosureServiceCommandTest {

    @InjectMocks
    private DisclosureServiceCommand disclosureServiceCommand;

    @Mock
    private MbnaLogger logger;

    @Mock
    private BackEndSrvcUtil backEndSrvcUtil;

    @Mock
    private JaxbUtil jaxbUtil;

    @Mock
    private ReentrantReadWriteLock lock;

    @Before
    public void setUp() {
        disclosureServiceCommand = new DisclosureServiceCommand();
    }

    @Test
    public void testIsReadyToCallExecute() {
        disclosureServiceCommand.setLanguageId("en");
        assertTrue(disclosureServiceCommand.isReadyToCallExecute());

        disclosureServiceCommand.setLanguageId(null);
        assertFalse(disclosureServiceCommand.isReadyToCallExecute());
    }

    @Test
    public void testPerformExecute_Success() throws Exception {
        String languageId = "en";
        disclosureServiceCommand.setLanguageId(languageId);

        GetDisclosureResponse mockResponse = mock(GetDisclosureResponse.class);
        ResponsePayload mockPayload = mock(ResponsePayload.class);
        DisclosureInfo mockDisclosureInfo = mock(DisclosureInfo.class);

        GregorianCalendar gCal = new GregorianCalendar();
        XMLGregorianCalendar xgCal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gCal);
        Date expectedDate = xgCal.toGregorianCalendar().getTime();

        when(mockResponse.getResponsePayload()).thenReturn(mockPayload);
        when(mockPayload.getDisclosureInfo()).thenReturn(mockDisclosureInfo);
        when(mockDisclosureInfo.getDisclosureDocPublishedDate()).thenReturn(xgCal);

        JAXBContext mockContext = mock(JAXBContext.class);
        when(JaxbUtil.getJaxbContext(anyString())).thenReturn(mockContext);
        when(BackEndSrvcUtil.invokeService(anyString(), anyString(), anyString(), anyString(),
                anyString(), any(), any(), any(), any(), any(), eq(JAXBContext.class)))
                .thenReturn(mockResponse);

        disclosureServiceCommand.performExecute();
        assertEquals(expectedDate, disclosureServiceCommand.getEaaPublishedDT());
    }

    @Test
    public void testPerformExecute_FailureWithFallback() throws Exception {
        String languageId = "en";
        disclosureServiceCommand.setLanguageId(languageId);

        // Simulate failure scenario
        when(BackEndSrvcUtil.invokeService(anyString(), anyString(), anyString(), anyString(),
                anyString(), any(), any(), any(), any(), any(), any()))
                .thenThrow(new RuntimeException("Service failure"));

        Date fallbackDate = new Date();
        DisclosureServiceCommand.saveEnEaaPublishedDT = fallbackDate;

        disclosureServiceCommand.performExecute();
        assertEquals(fallbackDate, disclosureServiceCommand.getEaaPublishedDT());
    }

    @Test(expected = RuntimeException.class)
    public void testPerformExecute_FailureWithoutFallback() throws Exception {
        String languageId = "fr";
        disclosureServiceCommand.setLanguageId(languageId);

        // Simulate failure scenario
        when(BackEndSrvcUtil.invokeService(anyString(), anyString(), anyString(), anyString(),
                anyString(), any(), any(), any(), any(), any(), any()))
                .thenThrow(new RuntimeException("Service failure"));

        DisclosureServiceCommand.saveFrEaaPublishedDT = null;
        disclosureServiceCommand.performExecute();
    }

    @Test
    public void testGetPublishedDT() throws Exception {
        String languageId = "en";
        String loginId = "testUser";

        DisclosureServiceCommand commandSpy = spy(new DisclosureServiceCommand());
        doNothing().when(commandSpy).performExecute();

        Date expectedDate = new Date();
        commandSpy.setLanguageId(languageId);
        commandSpy.loginId = loginId;
        commandSpy.eaaPublishedDT = expectedDate;

        Date actualDate = DisclosureServiceCommand.getPublishedDT(languageId, loginId);
        assertEquals(expectedDate, actualDate);
    }
}
