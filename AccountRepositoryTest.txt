import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.exceptions.BusinessException;
import com.td.mbna.msec.midtier.util.MbnaLogger;

class AccountRepositoryTest {

    @InjectMocks
    private AccountRepositoryImpl accountRepository;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MbnaLogger logger;

    @Mock
    private HttpServletRequest request;

    private AccountDetails mockAccountDetails;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockAccountDetails = new AccountDetails();
        mockAccountDetails.setAccountId("12345");
    }

    @Test
    void testGetAccount_Success() {
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(SessionProvider.class));
        when(sessionProvider.getSessionCustomer().getAccount("12345")).thenReturn(mockAccountDetails);

        AccountDetails result = accountRepository.getAccount("12345");

        assertNotNull(result);
        assertEquals("12345", result.getAccountId());
        verify(sessionProvider).setCurrentAccount("12345");
    }

    @Test
    void testGetAccount_NullSessionCustomer_ThrowsBusinessException() {
        when(sessionProvider.getSessionCustomer()).thenReturn(null);

        BusinessException exception = assertThrows(BusinessException.class, () -> {
            accountRepository.getAccount("12345");
        });

        assertEquals("MS601", exception.getFaultInfo().getErrorCode());
        verify(logger).error("getAccount", "SessionCustomer is null");
    }

    @Test
    void testGetAccount_AccountNull_ThrowsBusinessException() {
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(SessionProvider.class));
        when(sessionProvider.getSessionCustomer().getAccount("12345")).thenReturn(null);
        when(sessionProvider.getCurrentAccount()).thenReturn(null);

        BusinessException exception = assertThrows(BusinessException.class, () -> {
            accountRepository.getAccount("12345");
        });

        assertEquals("MS601", exception.getFaultInfo().getErrorCode());
        verify(logger).error("AccountRepository.getAccount: 12345", "Unable to retrieve account for a customer from session");
    }

    @Test
    void testGetAccount_FallbackToCurrentAccount() {
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(SessionProvider.class));
        when(sessionProvider.getSessionCustomer().getAccount("12345")).thenReturn(null);
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccountDetails);

        AccountDetails result = accountRepository.getAccount("12345");

        assertNotNull(result);
        assertEquals("12345", result.getAccountId());
        verify(sessionProvider).setCurrentAccount("12345");
    }

    @Test
    void testGetRequestedAccount_Success() {
        when(request.getParameter("USER_ACCTID")).thenReturn("12345");
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(SessionProvider.class));
        when(sessionProvider.getSessionCustomer().getAccount("12345")).thenReturn(mockAccountDetails);

        AccountDetails result = accountRepository.getRequestedAccount(request);

        assertNotNull(result);
        assertEquals("12345", result.getAccountId());
    }

    @Test
    void testGetRequestedAccount_NullRequest() {
        AccountDetails result = accountRepository.getRequestedAccount(null);
        assertNull(result);
    }

    @Test
    void testGetRequestedAccount_AccountNotFound() {
        when(request.getParameter("USER_ACCTID")).thenReturn("12345");
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(SessionProvider.class));
        when(sessionProvider.getSessionCustomer().getAccount("12345")).thenReturn(null);

        AccountDetails result = accountRepository.getRequestedAccount(request);
        assertNull(result);
    }

    @Test
    void testHasExceededMaxActivateAttempts() {
        when(sessionProvider.getAccount("12345")).thenReturn(mockAccountDetails);
        when(sessionProvider.hasExceededMaxActivateAttempts(mockAccountDetails)).thenReturn(true);

        boolean result = accountRepository.hasExceededMaxActivateAttempts("12345");

        assertTrue(result);
        verify(sessionProvider).hasExceededMaxActivateAttempts(mockAccountDetails);
    }

    @Test
    void testGetCurrentAccount_Success() {
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccountDetails);

        AccountDetails result = accountRepository.getCurrentAccount();

        assertNotNull(result);
        assertEquals("12345", result.getAccountId());
    }

    @Test
    void testGenBusinessException() {
        BusinessException exception = accountRepository.genBusinessException("MS601", "Error occurred");

        assertEquals("MS601", exception.getFaultInfo().getErrorCode());
        assertEquals("Error occurred", exception.getFaultInfo().getErrorDescription());
    }
}
