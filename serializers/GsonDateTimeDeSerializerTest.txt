package com.td.mbna.msec.midtier.serializers;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.lang.reflect.Type;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GsonDateTimeDeSerializerTest {

    @Test
    void testDeserializeWithValidNumericString() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);
        
        when(jsonElement.getAsString()).thenReturn("1638291000000"); // Example timestamp

        // Act
        Long result = deserializer.deserialize(jsonElement, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertEquals(1638291000000L, result.longValue());
    }

    @Test
    void testDeserializeWithValidDateString() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);
        
        when(jsonElement.getAsString()).thenReturn("2023-12-10"); // A valid date string

        // Act
        Long result = deserializer.deserialize(jsonElement, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertEquals(GsonDateTimeSerializer.FORMAT.get().parse("2023-12-10").getTime(), result.longValue());
    }

    @Test
    void testDeserializeWithNullInput() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);

        // Act
        Long result = deserializer.deserialize(null, Long.class, mockContext);

        // Assert
        assertNull(result);
    }

    @Test
    void testDeserializeWithEmptyString() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);

        when(jsonElement.getAsString()).thenReturn("");

        // Act
        Long result = deserializer.deserialize(jsonElement, Long.class, mockContext);

        // Assert
        assertNull(result);
    }

    @Test
    void testDeserializeWhenStringIsNegative() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);

        when(jsonElement.getAsString()).thenReturn("-1000");

        // Act
        Long result = deserializer.deserialize(jsonElement, Long.class, mockContext);

        // Assert
        assertNull(result);
    }

    @Test
    void testDeserializeWithInvalidDateString() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);

        when(jsonElement.getAsString()).thenReturn("invalid-date");

        // Act & Assert
        assertThrows(RuntimeException.class, () -> {
            deserializer.deserialize(jsonElement, Long.class, mockContext);
        });
    }

    @Test
    void testDeserializeWithJsonObjectFallback() {
        // Arrange
        GsonDateTimeDeSerializer deserializer = new GsonDateTimeDeSerializer();
        JsonDeserializationContext mockContext = mock(JsonDeserializationContext.class);
        JsonElement jsonElement = mock(JsonElement.class);
        JsonObject mockJsonObject = mock(JsonObject.class);

        when(jsonElement.getAsJsonObject()).thenReturn(mockJsonObject);
        when(mockJsonObject.get("value")).thenReturn(mock(JsonElement.class));
        when(mockJsonObject.get("value").getAsString()).thenReturn("1638291000000");

        // Act
        Long result = deserializer.deserialize(jsonElement, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertEquals(1638291000000L, result.longValue());
    }
}
