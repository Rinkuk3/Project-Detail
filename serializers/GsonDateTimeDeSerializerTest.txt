package com.td.mbna.msec.midtier.serializers;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Type;

import static org.junit.jupiter.api.Assertions.*;

class GsonDateTimeDeSerializerTest {

    private final GsonDateTimeDeSerializer gsonDateTimeDeSerializer = new GsonDateTimeDeSerializer();

    @Test
    void testDeserializeWithValidDateString() {
        JsonElement jsonElement = new JsonPrimitive("2025-03-03T00:00:00Z");  // Valid date in string format
        Long expected = 1677801600000L; // Corresponding time in milliseconds

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithNullJsonElement() {
        JsonElement jsonElement = null;

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null);

        assertNull(actual);
    }

    @Test
    void testDeserializeWithEmptyDateString() {
        JsonElement jsonElement = new JsonPrimitive("");  // Empty date string

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null);

        assertNull(actual);
    }

    @Test
    void testDeserializeWithInvalidDateString() {
        JsonElement jsonElement = new JsonPrimitive("invalid-date");  // Invalid date string

        assertThrows(RuntimeException.class, () -> gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null));
    }

    @Test
    void testDeserializeWithJsonObjectHavingValueField() {
        JsonObject jsonObject = new JsonObject();
        JsonObject innerObject = new JsonObject();
        innerObject.add("value", new JsonPrimitive("2025-03-03T00:00:00Z"));
        jsonObject.add("innerObject", innerObject);

        Long expected = 1677801600000L; // Corresponding time in milliseconds

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonObject, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithNumericString() {
        JsonElement jsonElement = new JsonPrimitive("1677801600000");  // Numeric string representing timestamp
        Long expected = 1677801600000L;

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithNullOrNegativeDate() {
        JsonElement jsonElement = new JsonPrimitive("-");  // Negative or invalid date string

        Long actual = gsonDateTimeDeSerializer.deserialize(jsonElement, Long.class, null);

        assertNull(actual);
    }
}
