package com.td.mbna.msec.midtier.serializers;

import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Type;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GsonDateSerializerTest {

    @Test
    void testSerializeWithValidLong() {
        // Arrange
        GsonDateSerializer dateSerializer = new GsonDateSerializer();
        JsonSerializationContext mockContext = mock(JsonSerializationContext.class);
        Long timestamp = 1638291000000L; // Example timestamp

        // Act
        JsonElement result = dateSerializer.serialize(timestamp, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertTrue(result instanceof JsonPrimitive);

        String expectedDate = "2021-11-30"; // Expected date string
        assertEquals(expectedDate, result.getAsString());
    }

    @Test
    void testSerializeWithNull() {
        // Arrange
        GsonDateSerializer dateSerializer = new GsonDateSerializer();
        JsonSerializationContext mockContext = mock(JsonSerializationContext.class);

        // Act
        JsonElement result = dateSerializer.serialize(null, Long.class, mockContext);

        // Assert
        assertNull(result);
    }

    @Test
    void testDateSerializationEdgeCase() {
        // Arrange
        GsonDateSerializer dateSerializer = new GsonDateSerializer();
        JsonSerializationContext mockContext = mock(JsonSerializationContext.class);

        Long timestamp = 0L; // Epoch time (January 1, 1970)

        // Act
        JsonElement result = dateSerializer.serialize(timestamp, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertTrue(result instanceof JsonPrimitive);
        assertEquals("1970-01-01", result.getAsString());
    }

    @Test
    void testInvalidTypeHandling() {
        // Arrange
        GsonDateSerializer dateSerializer = new GsonDateSerializer();
        JsonSerializationContext mockContext = mock(JsonSerializationContext.class);

        Long invalidTimestamp = -1000000000L; // Arbitrary negative timestamp

        // Act
        JsonElement result = dateSerializer.serialize(invalidTimestamp, Long.class, mockContext);

        // Assert
        assertNotNull(result);
        assertTrue(result instanceof JsonPrimitive);
        assertEquals("1936-04-24", result.getAsString());
    }
}
