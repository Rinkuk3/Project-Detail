package com.td.mbna.msec.midtier.serializers;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import org.junit.jupiter.api.Test;

import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class GsonDateDeSerializerTest {

    @Test
    void testDeserializeWithValidTimestamp() {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();
        JsonElement jsonElement = new JsonPrimitive("1638291000000");

        // Act
        Long result = deSerializer.deserialize(jsonElement, Long.class, null);

        // Assert
        assertNotNull(result);
        assertEquals(1638291000000L, result);
    }

    @Test
    void testDeserializeWithValidDateString() throws Exception {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();
        String validDateString = "2021-11-30T15:30:00.000";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        Date expectedDate = sdf.parse(validDateString);
        JsonElement jsonElement = new JsonPrimitive(validDateString);

        // Act
        Long result = deSerializer.deserialize(jsonElement, Long.class, null);

        // Assert
        assertNotNull(result);
        assertEquals(expectedDate.getTime(), result);
    }

    @Test
    void testDeserializeWithNullElement() {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();

        // Act
        Long result = deSerializer.deserialize(null, Long.class, null);

        // Assert
        assertNull(result);
    }

    @Test
    void testDeserializeWithEmptyString() {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();
        JsonElement jsonElement = new JsonPrimitive("");

        // Act
        Exception exception = assertThrows(RuntimeException.class, () ->
                deSerializer.deserialize(jsonElement, Long.class, null));

        // Assert
        assertNotNull(exception);
    }

    @Test
    void testDeserializeWithJsonObjectContainingValue() {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();
        JsonObject jsonObject = new JsonObject();
        jsonObject.addProperty("value", "1638291000000");

        // Act
        Long result = deSerializer.deserialize(jsonObject, Long.class, null);

        // Assert
        assertNotNull(result);
        assertEquals(1638291000000L, result);
    }

    @Test
    void testDeserializeWithInvalidDateString() {
        // Arrange
        GsonDateDeSerializer deSerializer = new GsonDateDeSerializer();
        JsonElement jsonElement = new JsonPrimitive("InvalidDate");

        // Act & Assert
        assertThrows(RuntimeException.class, () -> 
            deSerializer.deserialize(jsonElement, Long.class, null));
    }
}
