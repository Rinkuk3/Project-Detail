package com.td.mbna.msec.midtier.serializers;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GsonDateDeSerializerTest {

    private final GsonDateDeSerializer gsonDateDeSerializer = new GsonDateDeSerializer();

    @Test
    void testDeserializeWithValidDateString() {
        String dateString = "\"2025-03-03T00:00:00Z\"";
        JsonElement jsonElement = JsonParser.parseString(dateString);

        Long expected = 1677801600000L;  // Expected timestamp for the given date
        Long actual = gsonDateDeSerializer.deserialize(jsonElement, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithValidNumberString() {
        String dateString = "\"1677801600000\"";
        JsonElement jsonElement = JsonParser.parseString(dateString);

        Long expected = 1677801600000L;
        Long actual = gsonDateDeSerializer.deserialize(jsonElement, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithJsonObject() {
        String jsonString = "{\"value\": \"1677801600000\"}";
        JsonElement jsonElement = JsonParser.parseString(jsonString);

        Long expected = 1677801600000L;
        Long actual = gsonDateDeSerializer.deserialize(jsonElement, Long.class, null);

        assertEquals(expected, actual);
    }

    @Test
    void testDeserializeWithInvalidDateString() {
        String invalidDateString = "\"invalid-date\"";
        JsonElement jsonElement = JsonParser.parseString(invalidDateString);

        assertThrows(RuntimeException.class, () -> gsonDateDeSerializer.deserialize(jsonElement, Long.class, null));
    }

    @Test
    void testDeserializeWithNullJsonElement() {
        JsonElement jsonElement = null;

        Long actual = gsonDateDeSerializer.deserialize(jsonElement, Long.class, null);

        assertNull(actual);
    }

    @Test
    void testDeserializeWithEmptyJsonElement() {
        JsonElement jsonElement = JsonParser.parseString("\"\"");

        Long actual = gsonDateDeSerializer.deserialize(jsonElement, Long.class, null);

        assertNull(actual);
    }
}
