package com.td.api.mbcca.shared;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AdditionalstatusTest {

    @Test
    void testSetAndGetStatusCode() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setStatusCode(200);
        assertEquals(200, additionalstatus.getStatusCode());
    }

    @Test
    void testSetAndGetServerStatusCode() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setServerStatusCode("200OK");
        assertEquals("200OK", additionalstatus.getServerStatusCode());
    }

    @Test
    void testSetAndGetSeverity() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setSeverity(Additionalstatus.Severity.INFO);
        assertEquals(Additionalstatus.Severity.INFO, additionalstatus.getSeverity());
    }

    @Test
    void testSetAndGetStatusDesc() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setStatusDesc("Description of the status");
        assertEquals("Description of the status", additionalstatus.getStatusDesc());
    }

    @Test
    void testToString() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setStatusCode(200);
        additionalstatus.setServerStatusCode("200OK");
        additionalstatus.setSeverity(Additionalstatus.Severity.INFO);
        additionalstatus.setStatusDesc("Description");

        String expectedString = "com.td.api.mbcca.shared.Additionalstatus@" + Integer.toHexString(additionalstatus.hashCode()) + 
                "[statusCode=200,serverStatusCode=200OK,severity=Info,statusDesc=Description]";
        
        assertTrue(additionalstatus.toString().contains("statusCode=200"));
    }

    @Test
    void testHashCode() {
        Additionalstatus additionalstatus1 = new Additionalstatus();
        additionalstatus1.setStatusCode(200);
        additionalstatus1.setServerStatusCode("200OK");
        additionalstatus1.setSeverity(Additionalstatus.Severity.INFO);
        additionalstatus1.setStatusDesc("Description");

        Additionalstatus additionalstatus2 = new Additionalstatus();
        additionalstatus2.setStatusCode(200);
        additionalstatus2.setServerStatusCode("200OK");
        additionalstatus2.setSeverity(Additionalstatus.Severity.INFO);
        additionalstatus2.setStatusDesc("Description");

        assertEquals(additionalstatus1.hashCode(), additionalstatus2.hashCode());
    }

    @Test
    void testEquals() {
        Additionalstatus additionalstatus1 = new Additionalstatus();
        additionalstatus1.setStatusCode(200);
        additionalstatus1.setServerStatusCode("200OK");
        additionalstatus1.setSeverity(Additionalstatus.Severity.INFO);
        additionalstatus1.setStatusDesc("Description");

        Additionalstatus additionalstatus2 = new Additionalstatus();
        additionalstatus2.setStatusCode(200);
        additionalstatus2.setServerStatusCode("200OK");
        additionalstatus2.setSeverity(Additionalstatus.Severity.INFO);
        additionalstatus2.setStatusDesc("Description");

        assertTrue(additionalstatus1.equals(additionalstatus2));
    }

    @Test
    void testSeverityEnum() {
        assertEquals(Additionalstatus.Severity.INFO, Additionalstatus.Severity.fromValue("Info"));
        assertEquals(Additionalstatus.Severity.WARNING, Additionalstatus.Severity.fromValue("Warning"));
        assertThrows(IllegalArgumentException.class, () -> Additionalstatus.Severity.fromValue("Invalid"));
    }
}
