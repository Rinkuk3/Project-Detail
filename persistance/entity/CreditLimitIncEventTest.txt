package com.td.mbna.msec.midtier.persistance.entity;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

public class CreditLimitIncEventTest {

    @Test
    public void testGetOfferId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setOfferId("Offer123");
        assertEquals("Offer123", event.getOfferId());
    }

    @Test
    public void testSetOfferId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setOfferId("Offer123");
        assertEquals("Offer123", event.getOfferId());
    }

    @Test
    public void testGetCustId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setCustId("Cust123");
        assertEquals("Cust123", event.getCustId());
    }

    @Test
    public void testSetCustId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setCustId("Cust123");
        assertEquals("Cust123", event.getCustId());
    }

    @Test
    public void testGetAliasCustId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setAliasCustId("Alias123");
        assertEquals("Alias123", event.getAliasCustId());
    }

    @Test
    public void testSetAliasCustId() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setAliasCustId("Alias123");
        assertEquals("Alias123", event.getAliasCustId());
    }

    @Test
    public void testGetCurrentCreditLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setCurrentCreditLimit(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), event.getCurrentCreditLimit());
    }

    @Test
    public void testSetCurrentCreditLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setCurrentCreditLimit(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), event.getCurrentCreditLimit());
    }

    @Test
    public void testGetPreApprovalLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setPreApprovalLimit(new BigDecimal("2000.00"));
        assertEquals(new BigDecimal("2000.00"), event.getPreApprovalLimit());
    }

    @Test
    public void testSetPreApprovalLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setPreApprovalLimit(new BigDecimal("2000.00"));
        assertEquals(new BigDecimal("2000.00"), event.getPreApprovalLimit());
    }

    @Test
    public void testGetPreApprovalPercent() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setPreApprovalPercent(new BigDecimal("50.00"));
        assertEquals(new BigDecimal("50.00"), event.getPreApprovalPercent());
    }

    @Test
    public void testSetPreApprovalPercent() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setPreApprovalPercent(new BigDecimal("50.00"));
        assertEquals(new BigDecimal("50.00"), event.getPreApprovalPercent());
    }

    @Test
    public void testGetReqCreditLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setReqCreditLimit(new BigDecimal("5000.00"));
        assertEquals(new BigDecimal("5000.00"), event.getReqCreditLimit());
    }

    @Test
    public void testSetReqCreditLimit() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setReqCreditLimit(new BigDecimal("5000.00"));
        assertEquals(new BigDecimal("5000.00"), event.getReqCreditLimit());
    }

    @Test
    public void testGetHousingStatus() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setHousingStatus("Own");
        assertEquals("Own", event.getHousingStatus());
    }

    @Test
    public void testSetHousingStatus() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setHousingStatus("Own");
        assertEquals("Own", event.getHousingStatus());
    }

    @Test
    public void testGetHousingPayment() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setHousingPayment(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), event.getHousingPayment());
    }

    @Test
    public void testSetHousingPayment() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setHousingPayment(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), event.getHousingPayment());
    }

    @Test
    public void testGetAccountNumber() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setAccountNumber("123456");
        assertEquals("123456", event.getAccountNumber());
    }

    @Test
    public void testSetAccountNumber() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setAccountNumber("123456");
        assertEquals("123456", event.getAccountNumber());
    }

    @Test
    public void testGetLengthOfService() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setLengthOfService("5 years");
        assertEquals("5 years", event.getLengthOfService());
    }

    @Test
    public void testSetLengthOfService() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setLengthOfService("5 years");
        assertEquals("5 years", event.getLengthOfService());
    }

    @Test
    public void testGetEventID() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setEventID(123);
        assertEquals(123, event.getEventID());
    }

    @Test
    public void testSetEventID() {
        CreditLimitIncEvent event = new CreditLimitIncEvent();
        event.setEventID(123);
        assertEquals(123, event.getEventID());
    }

    @Test
    public void testEquals() {
        CreditLimitIncEvent event1 = new CreditLimitIncEvent();
        event1.setOfferId("Offer123");
        event1.setCustId("Cust123");

        CreditLimitIncEvent event2 = new CreditLimitIncEvent();
        event2.setOfferId("Offer123");
        event2.setCustId("Cust123");

        assertTrue(event1.equals(event2));

        CreditLimitIncEvent event3 = new CreditLimitIncEvent();
        event3.setOfferId("Offer456");
        event3.setCustId("Cust456");

        assertFalse(event1.equals(event3));
    }

    @Test
    public void testHashCode() {
        CreditLimitIncEvent event1 = new CreditLimitIncEvent();
        event1.setOfferId("Offer123");
        event1.setCustId("Cust123");

        CreditLimitIncEvent event2 = new CreditLimitIncEvent();
        event2.setOfferId("Offer123");
        event2.setCustId("Cust123");

        assertEquals(event1.hashCode(), event2.hashCode());
    }
}
