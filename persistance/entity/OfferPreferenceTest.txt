package com.td.mbna.msec.midtier.persistance.entity;

import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

public class OfferPreferenceTest {

    @Test
    public void testSetAndGetUcid() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setUcid("UCID123");
        assertEquals("UCID123", offerPreference.getUcid());
    }

    @Test
    public void testSetAndGetConnectId() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setConnectId("ConnectId123");
        assertEquals("ConnectId123", offerPreference.getConnectId());
    }

    @Test
    public void testSetAndGetCardRole() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setCardRole("CardRole123");
        assertEquals("CardRole123", offerPreference.getCardRole());
    }

    @Test
    public void testSetAndGetOfferType() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setOfferType("OfferType123");
        assertEquals("OfferType123", offerPreference.getOfferType());
    }

    @Test
    public void testSetAndGetEnabled() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setEnabled("true");
        assertEquals("true", offerPreference.getEnabled());
    }

    @Test
    public void testSetAndGetEnabledTS() {
        OfferPreference offerPreference = new OfferPreference();
        Date date = new Date();
        offerPreference.setEnabledTS(date);
        assertEquals(date, offerPreference.getEnabledTS());
    }

    @Test
    public void testSetAndGetDisabled() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setDisabled("false");
        assertEquals("false", offerPreference.getDisabled());
    }

    @Test
    public void testSetAndGetDisabledTS() {
        OfferPreference offerPreference = new OfferPreference();
        Date date = new Date();
        offerPreference.setDisabledTS(date);
        assertEquals(date, offerPreference.getDisabledTS());
    }

    @Test
    public void testEqualsWithSameObject() {
        OfferPreference offerPreference = new OfferPreference();
        assertTrue(offerPreference.equals(offerPreference));
    }

    @Test
    public void testEqualsWithNullObject() {
        OfferPreference offerPreference = new OfferPreference();
        assertFalse(offerPreference.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        OfferPreference offerPreference = new OfferPreference();
        String otherClassObject = "String Object";
        assertFalse(offerPreference.equals(otherClassObject));
    }

    @Test
    public void testEqualsWithDifferentUcid() {
        OfferPreference offerPreference1 = new OfferPreference();
        OfferPreference offerPreference2 = new OfferPreference();
        
        offerPreference1.setUcid("UCID123");
        offerPreference2.setUcid("UCID124");
        
        assertFalse(offerPreference1.equals(offerPreference2));
    }

    @Test
    public void testEqualsWithSameValues() {
        OfferPreference offerPreference1 = new OfferPreference();
        OfferPreference offerPreference2 = new OfferPreference();
        
        offerPreference1.setUcid("UCID123");
        offerPreference1.setConnectId("ConnectId123");
        offerPreference1.setCardRole("CardRole123");
        offerPreference1.setOfferType("OfferType123");
        offerPreference1.setEnabled("true");
        offerPreference1.setEnabledTS(new Date());
        offerPreference1.setDisabled("false");
        offerPreference1.setDisabledTS(new Date());
        
        offerPreference2.setUcid("UCID123");
        offerPreference2.setConnectId("ConnectId123");
        offerPreference2.setCardRole("CardRole123");
        offerPreference2.setOfferType("OfferType123");
        offerPreference2.setEnabled("true");
        offerPreference2.setEnabledTS(offerPreference1.getEnabledTS());
        offerPreference2.setDisabled("false");
        offerPreference2.setDisabledTS(offerPreference1.getDisabledTS());
        
        assertTrue(offerPreference1.equals(offerPreference2));
    }

    @Test
    public void testHashCode() {
        OfferPreference offerPreference1 = new OfferPreference();
        offerPreference1.setUcid("UCID123");
        offerPreference1.setConnectId("ConnectId123");
        offerPreference1.setCardRole("CardRole123");
        offerPreference1.setOfferType("OfferType123");
        offerPreference1.setEnabled("true");
        offerPreference1.setEnabledTS(new Date());
        offerPreference1.setDisabled("false");
        offerPreference1.setDisabledTS(new Date());
        
        OfferPreference offerPreference2 = new OfferPreference();
        offerPreference2.setUcid("UCID123");
        offerPreference2.setConnectId("ConnectId123");
        offerPreference2.setCardRole("CardRole123");
        offerPreference2.setOfferType("OfferType123");
        offerPreference2.setEnabled("true");
        offerPreference2.setEnabledTS(offerPreference1.getEnabledTS());
        offerPreference2.setDisabled("false");
        offerPreference2.setDisabledTS(offerPreference1.getDisabledTS());
        
        assertEquals(offerPreference1.hashCode(), offerPreference2.hashCode());
    }

    @Test
    public void testHashCodeWithNullValues() {
        OfferPreference offerPreference = new OfferPreference();
        offerPreference.setUcid(null);
        offerPreference.setConnectId(null);
        offerPreference.setCardRole(null);
        offerPreference.setOfferType(null);
        offerPreference.setEnabled(null);
        offerPreference.setEnabledTS(null);
        offerPreference.setDisabled(null);
        offerPreference.setDisabledTS(null);
        
        assertNotNull(offerPreference.hashCode());
    }
}
