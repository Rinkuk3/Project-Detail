package com.td.mbna.msec.midtier.persistance.entity;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

public class TransactionFeeTest {

    @Test
    public void testConstructor() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        assertEquals("TF001", transactionFee.getTransaction_fee_no());
        assertEquals("TypeA", transactionFee.getSubtype());
    }

    @Test
    public void testDefaultConstructor() {
        TransactionFee transactionFee = new TransactionFee();
        assertNull(transactionFee.getTransaction_fee_no());
        assertNull(transactionFee.getSubtype());
    }

    @Test
    public void testSetAndGetTransactionFeeNo() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        transactionFee.setTransaction_fee_no("TF002");
        assertEquals("TF002", transactionFee.getTransaction_fee_no());
    }

    @Test
    public void testSetAndGetSubtype() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        transactionFee.setSubtype("TypeB");
        assertEquals("TypeB", transactionFee.getSubtype());
    }

    @Test
    public void testSetAndGetFixedAmount() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        BigDecimal fixedAmount = new BigDecimal("100.50");
        transactionFee.setFixed_amount(fixedAmount);
        assertEquals(fixedAmount, transactionFee.getFixed_amount());
    }

    @Test
    public void testSetAndGetMaximumAmount() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        BigDecimal maxAmount = new BigDecimal("500.75");
        transactionFee.setMaximum_amount(maxAmount);
        assertEquals(maxAmount, transactionFee.getMaximum_amount());
    }

    @Test
    public void testSetAndGetMinimumAmount() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        BigDecimal minAmount = new BigDecimal("50.25");
        transactionFee.setMinimum_amount(minAmount);
        assertEquals(minAmount, transactionFee.getMinimum_amount());
    }

    @Test
    public void testSetAndGetPercentage() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        BigDecimal percentage = new BigDecimal("10.5");
        transactionFee.setPercentage(percentage);
        assertEquals(percentage, transactionFee.getPercentage());
    }

    @Test
    public void testToString() {
        TransactionFee transactionFee = new TransactionFee("TF001", "TypeA");
        String expectedString = "TF001|TypeA";
        assertEquals(expectedString, transactionFee.toString());
    }

    @Test
    public void testEquals() {
        TransactionFee transactionFee1 = new TransactionFee("TF001", "TypeA");
        TransactionFee transactionFee2 = new TransactionFee("TF001", "TypeA");
        assertTrue(transactionFee1.equals(transactionFee2));
    }

    @Test
    public void testEqualsWithDifferentTransactionFeeNo() {
        TransactionFee transactionFee1 = new TransactionFee("TF001", "TypeA");
        TransactionFee transactionFee2 = new TransactionFee("TF002", "TypeA");
        assertFalse(transactionFee1.equals(transactionFee2));
    }

    @Test
    public void testEqualsWithDifferentSubtype() {
        TransactionFee transactionFee1 = new TransactionFee("TF001", "TypeA");
        TransactionFee transactionFee2 = new TransactionFee("TF001", "TypeB");
        assertFalse(transactionFee1.equals(transactionFee2));
    }

    @Test
    public void testHashCode() {
        TransactionFee transactionFee1 = new TransactionFee("TF001", "TypeA");
        TransactionFee transactionFee2 = new TransactionFee("TF001", "TypeA");
        assertEquals(transactionFee1.hashCode(), transactionFee2.hashCode());
    }

    @Test
    public void testHashCodeWithDifferentValues() {
        TransactionFee transactionFee1 = new TransactionFee("TF001", "TypeA");
        TransactionFee transactionFee2 = new TransactionFee("TF002", "TypeB");
        assertNotEquals(transactionFee1.hashCode(), transactionFee2.hashCode());
    }
}
