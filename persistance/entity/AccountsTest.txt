package com.td.mbna.msec.midtier.persistance.entity;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class AccountsTest {

    @Test
    public void testGetCustomerId() {
        Accounts accounts = new Accounts();
        accounts.setCustomerId("C12345");
        assertEquals("C12345", accounts.getCustomerId());
    }

    @Test
    public void testSetCustomerId() {
        Accounts accounts = new Accounts();
        accounts.setCustomerId("C12345");
        assertEquals("C12345", accounts.getCustomerId());
    }

    @Test
    public void testGetEmailPreference() {
        Accounts accounts = new Accounts();
        accounts.setEmailPreference("YES");
        assertEquals("YES", accounts.getEmailPreference());
    }

    @Test
    public void testSetEmailPreference() {
        Accounts accounts = new Accounts();
        accounts.setEmailPreference("YES");
        assertEquals("YES", accounts.getEmailPreference());
    }

    @Test
    public void testGetAccountNumber() {
        Accounts accounts = new Accounts();
        accounts.setAccountNumber("1234567890");
        assertEquals("1234567890", accounts.getAccountNumber());
    }

    @Test
    public void testSetAccountNumber() {
        Accounts accounts = new Accounts();
        accounts.setAccountNumber("1234567890");
        assertEquals("1234567890", accounts.getAccountNumber());
    }

    @Test
    public void testToString() {
        Accounts accounts = new Accounts();
        accounts.setCustomerId("C12345");
        accounts.setEmailPreference("YES");
        accounts.setAccountNumber("1234567890");

        String result = accounts.toString();
        assertNotNull(result);
        assertTrue(result.contains("customerId"));
        assertTrue(result.contains("emailPreference"));
        assertTrue(result.contains("accountNumber"));
    }

    @Test
    public void testEquals_SameObject() {
        Accounts accounts = new Accounts();
        accounts.setCustomerId("C12345");
        accounts.setEmailPreference("YES");
        accounts.setAccountNumber("1234567890");

        assertTrue(accounts.equals(accounts));
    }

    @Test
    public void testEquals_Null() {
        Accounts accounts = new Accounts();
        assertFalse(accounts.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        Accounts accounts = new Accounts();
        assertFalse(accounts.equals(new Object()));
    }

    @Test
    public void testEquals_SameValues() {
        Accounts accounts1 = new Accounts();
        accounts1.setCustomerId("C12345");
        accounts1.setEmailPreference("YES");
        accounts1.setAccountNumber("1234567890");

        Accounts accounts2 = new Accounts();
        accounts2.setCustomerId("C12345");
        accounts2.setEmailPreference("YES");
        accounts2.setAccountNumber("1234567890");

        assertTrue(accounts1.equals(accounts2));
    }

    @Test
    public void testEquals_DifferentValues() {
        Accounts accounts1 = new Accounts();
        accounts1.setCustomerId("C12345");
        accounts1.setEmailPreference("YES");
        accounts1.setAccountNumber("1234567890");

        Accounts accounts2 = new Accounts();
        accounts2.setCustomerId("C12346");
        accounts2.setEmailPreference("NO");
        accounts2.setAccountNumber("1234567891");

        assertFalse(accounts1.equals(accounts2));
    }

    @Test
    public void testHashCode() {
        Accounts accounts = new Accounts();
        accounts.setCustomerId("C12345");
        accounts.setEmailPreference("YES");
        accounts.setAccountNumber("1234567890");

        int hashCode = accounts.hashCode();
        assertNotEquals(0, hashCode);
    }
}
