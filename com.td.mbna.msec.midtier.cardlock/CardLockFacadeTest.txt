package com.td.mbna.msec.midtier.cardlock;

import com.td.mbna.msec.midtier.cardlock.payload.*;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Unit test class for CardLockFacade.
 */
public class CardLockFacadeTest {

    @InjectMocks
    private CardLockFacade cardLockFacade;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    public void setUp() {
        Mockito.openMocks(this);
    }

    @Test
    public void testGetCardStatus_Success() {
        String token = "validToken";
        CardLockRequest request = new CardLockRequest();
        request.setRequestPayload(new CardLockRequestPayload());
        request.getRequestPayload().setAccountId("accountId");
        request.getRequestPayload().setCustId("custId");
        request.setSessionInfo(new SessionInfo());
        request.getSessionInfo().setConnectId("connectId");

        String url = UriComponentsBuilder.fromHttpUrl("http://mocked-endpoint")
            .path(request.getRequestPayload().getAccountId())
            .path("/customers/")
            .path(request.getRequestPayload().getCustId())
            .path("/controls")
            .toUriString();

        CardControlResponse cardControlResponse = new CardControlResponse();
        cardControlResponse.setCardAuthorizationStatus("AUTHORIZED");

        ResponseEntity<CardControlResponse> responseEntity = ResponseEntity.ok(cardControlResponse);

        when(restTemplate.exchange(
            eq(url),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(CardControlResponse.class)
        )).thenReturn(responseEntity);

        CardLockResponse response = cardLockFacade.getCardStatus(request, token);

        assertNotNull(response);
        assertEquals("200", response.getStatus());
        assertEquals("AUTHORIZED", response.getResponsePayload().getCardAuthorizationStatus());

        verify(restTemplate, times(1)).exchange(
            eq(url),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(CardControlResponse.class)
        );
    }

    @Test
    public void testGetCardStatus_Exception() {
        String token = "validToken";
        CardLockRequest request = new CardLockRequest();
        request.setRequestPayload(new CardLockRequestPayload());
        request.getRequestPayload().setAccountId("accountId");
        request.getRequestPayload().setCustId("custId");
        request.setSessionInfo(new SessionInfo());
        request.getSessionInfo().setConnectId("connectId");

        String url = UriComponentsBuilder.fromHttpUrl("http://mocked-endpoint")
            .path(request.getRequestPayload().getAccountId())
            .path("/customers/")
            .path(request.getRequestPayload().getCustId())
            .path("/controls")
            .toUriString();

        when(restTemplate.exchange(
            eq(url),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(CardControlResponse.class)
        )).thenThrow(new HttpStatusCodeException(HttpStatus.BAD_REQUEST) {
            @Override
            public String getResponseBodyAsString() {
                return "BAD_REQUEST";
            }
        });

        CardLockResponse response = cardLockFacade.getCardStatus(request, token);

        assertNotNull(response);
        assertEquals("400", response.getStatus());
        assertEquals(Collections.singletonList("BAD_REQUEST"), response.getErrorMsgs());

        verify(restTemplate, times(1)).exchange(
            eq(url),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(CardControlResponse.class)
        );
    }

    @Test
    public void testUpdateCardStatus_Success() {
        String token = "validToken";
        CardLockRequest request = new CardLockRequest();
        request.setAcctNum("12345");
        request.setAliasCustId("custId");
        request.setRequestPayload(new CardLockRequestPayload());
        request.getRequestPayload().setCardAuthorizationStatus("LOCKED");
        request.setSessionInfo(new SessionInfo());
        request.getSessionInfo().setConnectId("connectId");

        String url = UriComponentsBuilder.fromHttpUrl("http://mocked-endpoint")
            .path(request.getAcctNum())
            .path("/customers/")
            .path(request.getAliasCustId())
            .path("/controls")
            .toUriString();

        Map<String, String> responseBody = new HashMap<>();
        responseBody.put("confirmationNumber", "12345");

        ResponseEntity<Object> responseEntity = ResponseEntity.ok(responseBody);

        when(restTemplate.exchange(
            eq(url),
            eq(HttpMethod.PUT),
            any(HttpEntity.class),
            eq(Object.class)
        )).thenReturn(responseEntity);

        CardLockResponse response = cardLockFacade.updateCardStatus(request, token);

        assertNotNull(response);
        assertEquals("200", response.getStatus());
        assertEquals("12345", response.getResponsePayload().getConfirmationNumber());

        verify(restTemplate, times(1)).exchange(
            eq(url),
            eq(HttpMethod.PUT),
            any(HttpEntity.class),
            eq(Object.class)
        );
    }

    @Test
    public void testUpdateCardStatus_Exception() {
        String token = "validToken";
        CardLockRequest request = new CardLockRequest();
        request.setAcctNum("12345");
        request.setAliasCustId("custId");
        request.setRequestPayload(new CardLockRequestPayload());
        request.getRequestPayload().setCardAuthorizationStatus("LOCKED");
        request.setSessionInfo(new SessionInfo());
        request.getSessionInfo().setConnectId("connectId");

        String url = UriComponentsBuilder.fromHttpUrl("http://mocked-endpoint")
            .path(request.getAcctNum())
            .path("/customers/")
            .path(request.getAliasCustId())
            .path("/controls")
            .toUriString();

        when(restTemplate.exchange(
            eq(url),
            eq(HttpMethod.PUT),
            any(HttpEntity.class),
            eq(Object.class)
        )).thenThrow(new HttpStatusCodeException(HttpStatus.BAD_REQUEST) {
            @Override
            public String getResponseBodyAsString() {
                return "BAD_REQUEST";
            }
        });

        CardLockResponse response = cardLockFacade.updateCardStatus(request, token);

        assertNotNull(response);
        assertEquals("400", response.getStatus());
        assertEquals(Collections.singletonList("BAD_REQUEST"), response.getErrorMsgs());

        verify(restTemplate, times(1)).exchange(
            eq(url),
            eq(HttpMethod.PUT),
            any(HttpEntity.class),
            eq(Object.class)
        );
    }
}
