package com.td.mbna.msec.midtier.cardlock;

import com.td.mbna.msec.midtier.cardlock.payload.CardLockRequest;
import com.td.mbna.msec.midtier.cardlock.payload.CardLockResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * Unit test class for CardLockServiceImpl.
 */
public class CardLockServiceTest {

    @InjectMocks
    private CardLockServiceImpl cardLockServiceImpl;

    @Mock
    private CardLockFacade cardLockFacade;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testUpdateCardLockStatus_Success() {
        // Mock request and token
        CardLockRequest cardLockRequest = new CardLockRequest();
        String token = "validToken";
        CardLockResponse mockResponse = new CardLockResponse();
        mockResponse.setStatus("200");

        // Mock behavior
        when(cardLockFacade.updateCardStatus(any(CardLockRequest.class), eq(token))).thenReturn(mockResponse);

        // Call service method
        CardLockResponse response = cardLockServiceImpl.updateCardLockStatus(cardLockRequest, token);

        // Assertions
        assertNotNull(response);
        assertEquals("200", response.getStatus());
        verify(cardLockFacade, times(1)).updateCardStatus(cardLockRequest, token);
    }

    @Test
    public void testRetrieveCardLockStatus_Success() {
        // Mock request and token
        CardLockRequest cardLockRequest = new CardLockRequest();
        String token = "validToken";
        CardLockResponse mockResponse = new CardLockResponse();
        mockResponse.setStatus("200");

        // Mock behavior
        when(cardLockFacade.getCardStatus(any(CardLockRequest.class), eq(token))).thenReturn(mockResponse);

        // Call service method
        CardLockResponse response = cardLockServiceImpl.retrieveCardLockStatus(cardLockRequest, token);

        // Assertions
        assertNotNull(response);
        assertEquals("200", response.getStatus());
        verify(cardLockFacade, times(1)).getCardStatus(cardLockRequest, token);
    }

    @Test
    public void testUpdateCardLockStatus_Exception() {
        // Mock request and token
        CardLockRequest cardLockRequest = new CardLockRequest();
        String token = "invalidToken";

        // Mock behavior
        when(cardLockFacade.updateCardStatus(any(CardLockRequest.class), eq(token)))
            .thenThrow(new RuntimeException("Error during card lock status update"));

        // Call service method
        Exception exception = assertThrows(RuntimeException.class, () -> {
            cardLockServiceImpl.updateCardLockStatus(cardLockRequest, token);
        });

        // Assertions
        assertEquals("Error during card lock status update", exception.getMessage());
        verify(cardLockFacade, times(1)).updateCardStatus(cardLockRequest, token);
    }

    @Test
    public void testRetrieveCardLockStatus_Exception() {
        // Mock request and token
        CardLockRequest cardLockRequest = new CardLockRequest();
        String token = "invalidToken";

        // Mock behavior
        when(cardLockFacade.getCardStatus(any(CardLockRequest.class), eq(token)))
            .thenThrow(new RuntimeException("Error during card lock status retrieval"));

        // Call service method
        Exception exception = assertThrows(RuntimeException.class, () -> {
            cardLockServiceImpl.retrieveCardLockStatus(cardLockRequest, token);
        });

        // Assertions
        assertEquals("Error during card lock status retrieval", exception.getMessage());
        verify(cardLockFacade, times(1)).getCardStatus(cardLockRequest, token);
    }
}
