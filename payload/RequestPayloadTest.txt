package com.td.mbna.msec.midtier.cardlock.payload;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class RequestPayloadTest {

    @Test
    void testGetSetCardAuthorizationStatus() {
        RequestPayload requestPayload = new RequestPayload();

        // Initially, the cardAuthorizationStatus should be null
        assertNull(requestPayload.getCardAuthorizationStatus(), "Initial cardAuthorizationStatus should be null");

        // Set a new CardAuthorizationStatus
        CardAuthorizationStatus cardAuthorizationStatus = new CardAuthorizationStatus();
        cardAuthorizationStatus.setActive(true);
        requestPayload.setCardAuthorizationStatus(cardAuthorizationStatus);

        // Verify the getter returns the correct object
        assertNotNull(requestPayload.getCardAuthorizationStatus(), "cardAuthorizationStatus should not be null after being set");
        assertEquals(cardAuthorizationStatus, requestPayload.getCardAuthorizationStatus(), "Getter should return the set CardAuthorizationStatus");
    }

    @Test
    void testGetSetAccountId() {
        RequestPayload requestPayload = new RequestPayload();

        // Initially, the accountId should be null
        assertNull(requestPayload.getAccountId(), "Initial accountId should be null");

        // Set an accountId
        String accountId = "12345";
        requestPayload.setAccountId(accountId);

        // Verify the getter returns the correct value
        assertNotNull(requestPayload.getAccountId(), "accountId should not be null after being set");
        assertEquals(accountId, requestPayload.getAccountId(), "Getter should return the set accountId");
    }

    @Test
    void testEquals() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();

        // Both are default instances
        assertEquals(payload1, payload2, "Two default instances should be equal");

        // Set different fields
        CardAuthorizationStatus status1 = new CardAuthorizationStatus();
        CardAuthorizationStatus status2 = new CardAuthorizationStatus();
        status1.setActive(true);
        status2.setActive(false);

        payload1.setCardAuthorizationStatus(status1);
        payload1.setAccountId("12345");

        payload2.setCardAuthorizationStatus(status2);
        payload2.setAccountId("67890");

        // Objects should not be equal
        assertNotEquals(payload1, payload2, "Instances with different fields should not be equal");

        // Set same fields
        payload2.setCardAuthorizationStatus(status1);
        payload2.setAccountId("12345");

        // Objects should be equal now
        assertEquals(payload1, payload2, "Instances with the same fields should be equal");
    }

    @Test
    void testHashCode() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();

        // Hash codes should match for default instances
        assertEquals(payload1.hashCode(), payload2.hashCode(), "Hash codes should match for default instances");

        // Set different fields
        CardAuthorizationStatus status = new CardAuthorizationStatus();
        status.setActive(true);

        payload1.setCardAuthorizationStatus(status);
        payload1.setAccountId("12345");

        assertNotEquals(payload1.hashCode(), payload2.hashCode(), "Hash codes should differ for instances with different fields");

        // Set same fields
        payload2.setCardAuthorizationStatus(status);
        payload2.setAccountId("12345");

        assertEquals(payload1.hashCode(), payload2.hashCode(), "Hash codes should match for instances with the same fields");
    }

    @Test
    void testToString() {
        RequestPayload requestPayload = new RequestPayload();

        // Verify toString output contains default fields
        String toStringOutput = requestPayload.toString();
        assertTrue(toStringOutput.contains("cardAuthorizationStatus=null"), "toString should indicate null cardAuthorizationStatus initially");
        assertTrue(toStringOutput.contains("accountId=null"), "toString should indicate null accountId initially");

        // Set fields and verify toString
        CardAuthorizationStatus status = new CardAuthorizationStatus();
        status.setActive(true);
        requestPayload.setCardAuthorizationStatus(status);
        requestPayload.setAccountId("12345");

        toStringOutput = requestPayload.toString();
        assertTrue(toStringOutput.contains("cardAuthorizationStatus="), "toString should include cardAuthorizationStatus after being set");
        assertTrue(toStringOutput.contains("accountId=12345"), "toString should include accountId after being set");
    }
}
