package com.td.mbna.msec.midtier.disclosure.payload;

import com.td.mbna.msec.midtier.types.common.BusinessException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class BusinessExceptionTest {

    @Test
    public void testGetFaultInfo() {
        BusinessException businessException = new BusinessException();
        BusinessException faultInfo = new BusinessException();
        businessException.setFaultInfo(faultInfo);
        assertEquals(faultInfo, businessException.getFaultInfo());
    }

    @Test
    public void testSetFaultInfo() {
        BusinessException businessException = new BusinessException();
        BusinessException faultInfo = new BusinessException();
        businessException.setFaultInfo(faultInfo);
        assertEquals(faultInfo, businessException.getFaultInfo());
    }

    @Test
    public void testToString() {
        BusinessException businessException = new BusinessException();
        BusinessException faultInfo = new BusinessException();
        businessException.setFaultInfo(faultInfo);

        String result = businessException.toString();
        assertNotNull(result);
        assertTrue(result.contains("faultInfo"));
    }

    @Test
    public void testHashCode() {
        BusinessException businessException = new BusinessException();
        businessException.setFaultInfo(new BusinessException());
        int hashCode = businessException.hashCode();
        assertNotEquals(0, hashCode);
    }

    @Test
    public void testEquals_SameObject() {
        BusinessException businessException = new BusinessException();
        businessException.setFaultInfo(new BusinessException());
        assertTrue(businessException.equals(businessException));
    }

    @Test
    public void testEquals_Null() {
        BusinessException businessException = new BusinessException();
        assertFalse(businessException.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        BusinessException businessException = new BusinessException();
        assertFalse(businessException.equals(new Object()));
    }

    @Test
    public void testEquals_SameValues() {
        BusinessException businessException1 = new BusinessException();
        BusinessException businessException2 = new BusinessException();
        BusinessException faultInfo = new BusinessException();
        businessException1.setFaultInfo(faultInfo);
        businessException2.setFaultInfo(faultInfo);

        assertTrue(businessException1.equals(businessException2));
    }

    @Test
    public void testEquals_DifferentValues() {
        BusinessException businessException1 = new BusinessException();
        BusinessException businessException2 = new BusinessException();
        BusinessException faultInfo1 = new BusinessException();
        BusinessException faultInfo2 = new BusinessException();

        businessException1.setFaultInfo(faultInfo1);
        businessException2.setFaultInfo(faultInfo2);

        assertFalse(businessException1.equals(businessException2));
    }

    @Test
    public void testEquals_DifferentFaultInfo() {
        BusinessException businessException1 = new BusinessException();
        BusinessException businessException2 = new BusinessException();
        businessException1.setFaultInfo(null);
        businessException2.setFaultInfo(new BusinessException());

        assertFalse(businessException1.equals(businessException2));
    }
}
