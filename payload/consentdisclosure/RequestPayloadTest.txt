package com.td.mbna.msec.midtier.disclosure.payload.consentdisclosure;

import com.td.mbna.msec.midtier.types.common.DisclosureInfoType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

public class RequestPayloadTest {

    private RequestPayload requestPayload;
    private List<DisclosureInfoType> disclosureInfoList;
    private DisclosureInfoType disclosureInfoType;

    @BeforeEach
    public void setUp() {
        requestPayload = new RequestPayload();
        disclosureInfoList = new ArrayList<>();
        disclosureInfoType = new DisclosureInfoType();
    }

    @Test
    public void testGetDisclosureInfo() {
        requestPayload.setDisclosureInfo(disclosureInfoList);
        assertNotNull(requestPayload.getDisclosureInfo());
    }

    @Test
    public void testSetDisclosureInfo() {
        disclosureInfoList.add(disclosureInfoType);
        requestPayload.setDisclosureInfo(disclosureInfoList);
        assertEquals(disclosureInfoList, requestPayload.getDisclosureInfo());
    }

    @Test
    public void testGetConnectId() {
        requestPayload.setConnectId("12345");
        assertEquals("12345", requestPayload.getConnectId());
    }

    @Test
    public void testSetConnectId() {
        requestPayload.setConnectId("12345");
        assertEquals("12345", requestPayload.getConnectId());
    }

    @Test
    public void testToString() {
        requestPayload.setConnectId("12345");
        disclosureInfoList.add(disclosureInfoType);
        requestPayload.setDisclosureInfo(disclosureInfoList);

        String result = requestPayload.toString();
        assertNotNull(result);
        assertTrue(result.contains("disclosureInfo"));
        assertTrue(result.contains("connectId"));
    }

    @Test
    public void testHashCode() {
        requestPayload.setConnectId("12345");
        disclosureInfoList.add(disclosureInfoType);
        requestPayload.setDisclosureInfo(disclosureInfoList);
        
        int hashCode = requestPayload.hashCode();
        assertTrue(hashCode != 0);
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(requestPayload.equals(requestPayload));
    }

    @Test
    public void testEquals_Null() {
        assertFalse(requestPayload.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(requestPayload.equals(new Object()));
    }

    @Test
    public void testEquals_DifferentValues() {
        RequestPayload another = new RequestPayload();
        assertFalse(requestPayload.equals(another));
    }

    @Test
    public void testEquals_SameValues() {
        RequestPayload another = new RequestPayload();
        requestPayload.setConnectId("12345");
        another.setConnectId("12345");
        disclosureInfoList.add(disclosureInfoType);
        requestPayload.setDisclosureInfo(disclosureInfoList);
        another.setDisclosureInfo(disclosureInfoList);
        
        assertTrue(requestPayload.equals(another));
    }
}
