package com.td.mbna.msec.midtier.cardlock.payload;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    @Test
    void testGettersAndSetters() {
        // Arrange
        ResponsePayload responsePayload = new ResponsePayload();
        CardAuthorizationStatus cardAuthorizationStatus = new CardAuthorizationStatus();
        String confirmationNumber = "12345";
        String status = "Success";
        String customerId = "Cust123";

        // Act
        responsePayload.setCardAuthorizationStatus(cardAuthorizationStatus);
        responsePayload.setConfirmationNumber(confirmationNumber);
        responsePayload.setStatus(status);
        responsePayload.setCustomerId(customerId);

        // Assert
        assertEquals(cardAuthorizationStatus, responsePayload.getCardAuthorizationStatus());
        assertEquals(confirmationNumber, responsePayload.getConfirmationNumber());
        assertEquals(status, responsePayload.getStatus());
        assertEquals(customerId, responsePayload.getCustomerId());
    }

    @Test
    void testEqualsSameObject() {
        // Arrange
        ResponsePayload responsePayload = new ResponsePayload();

        // Assert
        assertEquals(responsePayload, responsePayload);
    }

    @Test
    void testEqualsDifferentObject() {
        // Arrange
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        CardAuthorizationStatus cardAuthorizationStatus = new CardAuthorizationStatus();
        responsePayload1.setCardAuthorizationStatus(cardAuthorizationStatus);
        responsePayload2.setCardAuthorizationStatus(cardAuthorizationStatus);

        responsePayload1.setConfirmationNumber("12345");
        responsePayload2.setConfirmationNumber("12345");

        // Assert
        assertEquals(responsePayload1, responsePayload2);
    }

    @Test
    void testNotEqualsDifferentValues() {
        // Arrange
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        responsePayload1.setConfirmationNumber("12345");
        responsePayload2.setConfirmationNumber("54321");

        // Assert
        assertNotEquals(responsePayload1, responsePayload2);
    }

    @Test
    void testHashCode() {
        // Arrange
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        CardAuthorizationStatus cardAuthorizationStatus = new CardAuthorizationStatus();
        responsePayload1.setCardAuthorizationStatus(cardAuthorizationStatus);
        responsePayload2.setCardAuthorizationStatus(cardAuthorizationStatus);

        responsePayload1.setConfirmationNumber("12345");
        responsePayload2.setConfirmationNumber("12345");

        // Assert
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
    }

    @Test
    void testToString() {
        // Arrange
        ResponsePayload responsePayload = new ResponsePayload();
        CardAuthorizationStatus cardAuthorizationStatus = new CardAuthorizationStatus();
        responsePayload.setCardAuthorizationStatus(cardAuthorizationStatus);
        responsePayload.setConfirmationNumber("12345");

        // Act
        String result = responsePayload.toString();

        // Assert
        assertTrue(result.contains("cardAuthorizationStatus"));
        assertTrue(result.contains("confirmationNumber"));
    }
}
