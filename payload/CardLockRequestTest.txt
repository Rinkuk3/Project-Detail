package com.td.mbna.msec.midtier.cardlock.payload;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class CardLockRequestTest {

    @Test
    void testGetSetRequestPayload() {
        CardLockRequest cardLockRequest = new CardLockRequest();

        // Initially, the requestPayload should be null
        assertNull(cardLockRequest.getRequestPayload(), "Initial requestPayload should be null");

        // Set a new RequestPayload
        RequestPayload payload = new RequestPayload(); // Assume RequestPayload is a valid class
        cardLockRequest.setRequestPayload(payload);

        // Verify the getter returns the correct object
        assertNotNull(cardLockRequest.getRequestPayload(), "requestPayload should not be null after being set");
        assertEquals(payload, cardLockRequest.getRequestPayload(), "Getter should return the set RequestPayload");
    }

    @Test
    void testEquals() {
        CardLockRequest request1 = new CardLockRequest();
        CardLockRequest request2 = new CardLockRequest();

        // Both are default instances
        assertEquals(request1, request2, "Two default instances should be equal");

        // Set different RequestPayloads
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        request1.setRequestPayload(payload1);
        request2.setRequestPayload(payload2);

        // Same payload instance
        request2.setRequestPayload(payload1);
        assertEquals(request1, request2, "Instances with the same payload should be equal");

        // Different payload instances
        request2.setRequestPayload(payload2);
        assertNotEquals(request1, request2, "Instances with different payloads should not be equal");
    }

    @Test
    void testHashCode() {
        CardLockRequest request1 = new CardLockRequest();
        CardLockRequest request2 = new CardLockRequest();

        // Hash codes should match for default instances
        assertEquals(request1.hashCode(), request2.hashCode(), "Hash codes should match for default instances");

        // Set a RequestPayload
        RequestPayload payload = new RequestPayload();
        request1.setRequestPayload(payload);
        assertNotEquals(request1.hashCode(), request2.hashCode(), "Hash codes should differ for instances with different payloads");

        // Set same RequestPayload
        request2.setRequestPayload(payload);
        assertEquals(request1.hashCode(), request2.hashCode(), "Hash codes should match for instances with the same payload");
    }

    @Test
    void testToString() {
        CardLockRequest cardLockRequest = new CardLockRequest();

        // Verify toString output contains default fields
        String toStringOutput = cardLockRequest.toString();
        assertTrue(toStringOutput.contains("requestPayload=null"), "toString should indicate null requestPayload initially");

        // Set a RequestPayload and verify toString
        RequestPayload payload = new RequestPayload();
        cardLockRequest.setRequestPayload(payload);
        toStringOutput = cardLockRequest.toString();
        assertTrue(toStringOutput.contains("requestPayload="), "toString should include requestPayload after being set");
    }
}
