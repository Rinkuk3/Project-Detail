package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class TrackingInfoTypeTest {

    private TrackingInfoType trackingInfo;

    @BeforeEach
    void setUp() {
        trackingInfo = new TrackingInfoType();
    }

    @Test
    void testGetAndSetConnectId() {
        trackingInfo.setConnectId("connectId123");
        assertEquals("connectId123", trackingInfo.getConnectId());
    }

    @Test
    void testGetAndSetLoginId() {
        trackingInfo.setLoginId("loginId123");
        assertEquals("loginId123", trackingInfo.getLoginId());
    }

    @Test
    void testGetAndSetToken() {
        trackingInfo.setToken("token123");
        assertEquals("token123", trackingInfo.getToken());
    }

    @Test
    void testGetAndSetSessionId() {
        trackingInfo.setSessionId("sessionId123");
        assertEquals("sessionId123", trackingInfo.getSessionId());
    }

    @Test
    void testGetAndSetIpAddr() {
        trackingInfo.setIpAddr("192.168.1.1");
        assertEquals("192.168.1.1", trackingInfo.getIpAddr());
    }

    @Test
    void testGetAndSetClientAction() {
        trackingInfo.setClientAction("login");
        assertEquals("login", trackingInfo.getClientAction());
    }

    @Test
    void testGetAndSetFirstName() {
        trackingInfo.setFirstName("John");
        assertEquals("John", trackingInfo.getFirstName());
    }

    @Test
    void testGetAndSetLastName() {
        trackingInfo.setLastName("Doe");
        assertEquals("Doe", trackingInfo.getLastName());
    }

    @Test
    void testNotNullSessionId() {
        trackingInfo.setSessionId("sessionId123");
        assertNotNull(trackingInfo.getSessionId());
    }

    @Test
    void testNotBlankSessionId() {
        trackingInfo.setSessionId(" ");
        assertNotNull(trackingInfo.getSessionId(), "can not be null or blank");
    }

    @Test
    void testNullSessionIdThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> {
            trackingInfo.setSessionId(null);
        });
    }

    @Test
    void testHashCode() {
        TrackingInfoType trackingInfo1 = new TrackingInfoType();
        trackingInfo1.setSessionId("sessionId123");

        TrackingInfoType trackingInfo2 = new TrackingInfoType();
        trackingInfo2.setSessionId("sessionId123");

        assertEquals(trackingInfo1.hashCode(), trackingInfo2.hashCode());
    }

    @Test
    void testEquals() {
        TrackingInfoType trackingInfo1 = new TrackingInfoType();
        trackingInfo1.setSessionId("sessionId123");

        TrackingInfoType trackingInfo2 = new TrackingInfoType();
        trackingInfo2.setSessionId("sessionId123");

        assertTrue(trackingInfo1.equals(trackingInfo2));

        trackingInfo2.setSessionId("sessionId456");

        assertFalse(trackingInfo1.equals(trackingInfo2));
    }

    @Test
    void testToString() {
        trackingInfo.setSessionId("sessionId123");
        trackingInfo.setFirstName("John");
        trackingInfo.setLastName("Doe");
        
        String expectedToString = "com.td.mbna.msec.midtier.types.common.TrackingInfoType@" + 
                                  Integer.toHexString(System.identityHashCode(trackingInfo)) + 
                                  "[sessionId=sessionId123,firstName=John,lastName=Doe]";

        assertTrue(trackingInfo.toString().contains("sessionId"));
    }
}
