package com.td.mbna.msec.midtier.types.common;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class StmtActivityTypeTest {

    private StmtActivityType stmtActivityType;

    @BeforeEach
    void setUp() {
        stmtActivityType = new StmtActivityType();
    }

    @Test
    void testSettersAndGetters() {
        stmtActivityType.setAcctId("12345");
        stmtActivityType.setTransactionDate(1627879200000L);
        stmtActivityType.setPostingDate(1627882800000L);
        stmtActivityType.setPostingTime("12:30");
        stmtActivityType.setDescription("Purchase at Store");
        stmtActivityType.setPromotionalOfferId("PROMO123");
        stmtActivityType.setReferenceNumber("REF12345");
        stmtActivityType.setAmount(new BigDecimal("99.99"));
        stmtActivityType.setCurrencyCode("USD");
        stmtActivityType.setTransactionType("Purchase");
        stmtActivityType.setTransactionCode("T001");
        stmtActivityType.setMerchantName("StoreName");
        stmtActivityType.setMerchantCity("City");
        stmtActivityType.setMerchantStateProvince("State");
        stmtActivityType.setCardHolderName("John Doe");
        stmtActivityType.setIpEligibility(true);
        stmtActivityType.setStatementDataDt("2024-12-01");

        assertEquals("12345", stmtActivityType.getAcctId());
        assertEquals(1627879200000L, stmtActivityType.getTransactionDate());
        assertEquals(1627882800000L, stmtActivityType.getPostingDate());
        assertEquals("12:30", stmtActivityType.getPostingTime());
        assertEquals("Purchase at Store", stmtActivityType.getDescription());
        assertEquals("PROMO123", stmtActivityType.getPromotionalOfferId());
        assertEquals("REF12345", stmtActivityType.getReferenceNumber());
        assertEquals(new BigDecimal("99.99"), stmtActivityType.getAmount());
        assertEquals("USD", stmtActivityType.getCurrencyCode());
        assertEquals("Purchase", stmtActivityType.getTransactionType());
        assertEquals("T001", stmtActivityType.getTransactionCode());
        assertEquals("StoreName", stmtActivityType.getMerchantName());
        assertEquals("City", stmtActivityType.getMerchantCity());
        assertEquals("State", stmtActivityType.getMerchantStateProvince());
        assertEquals("John Doe", stmtActivityType.getCardHolderName());
        assertTrue(stmtActivityType.getIpEligibility());
        assertEquals("2024-12-01", stmtActivityType.getStatementDataDt());
    }

    @Test
    void testNullValues() {
        stmtActivityType.setAcctId(null);
        stmtActivityType.setTransactionDate(null);
        stmtActivityType.setPostingDate(null);
        stmtActivityType.setPostingTime(null);
        stmtActivityType.setDescription(null);
        stmtActivityType.setPromotionalOfferId(null);
        stmtActivityType.setReferenceNumber(null);
        stmtActivityType.setAmount(null);
        stmtActivityType.setCurrencyCode(null);
        stmtActivityType.setTransactionType(null);
        stmtActivityType.setTransactionCode(null);
        stmtActivityType.setMerchantName(null);
        stmtActivityType.setMerchantCity(null);
        stmtActivityType.setMerchantStateProvince(null);
        stmtActivityType.setCardHolderName(null);
        stmtActivityType.setIpEligibility(null);
        stmtActivityType.setStatementDataDt(null);

        assertNull(stmtActivityType.getAcctId());
        assertNull(stmtActivityType.getTransactionDate());
        assertNull(stmtActivityType.getPostingDate());
        assertNull(stmtActivityType.getPostingTime());
        assertNull(stmtActivityType.getDescription());
        assertNull(stmtActivityType.getPromotionalOfferId());
        assertNull(stmtActivityType.getReferenceNumber());
        assertNull(stmtActivityType.getAmount());
        assertNull(stmtActivityType.getCurrencyCode());
        assertNull(stmtActivityType.getTransactionType());
        assertNull(stmtActivityType.getTransactionCode());
        assertNull(stmtActivityType.getMerchantName());
        assertNull(stmtActivityType.getMerchantCity());
        assertNull(stmtActivityType.getMerchantStateProvince());
        assertNull(stmtActivityType.getCardHolderName());
        assertNull(stmtActivityType.getIpEligibility());
        assertNull(stmtActivityType.getStatementDataDt());
    }

    @Test
    void testToString() {
        stmtActivityType.setAcctId("12345");
        stmtActivityType.setTransactionDate(1627879200000L);
        stmtActivityType.setPostingDate(1627882800000L);
        stmtActivityType.setPostingTime("12:30");
        stmtActivityType.setDescription("Purchase at Store");
        stmtActivityType.setPromotionalOfferId("PROMO123");
        stmtActivityType.setReferenceNumber("REF12345");
        stmtActivityType.setAmount(new BigDecimal("99.99"));
        stmtActivityType.setCurrencyCode("USD");
        stmtActivityType.setTransactionType("Purchase");
        stmtActivityType.setTransactionCode("T001");
        stmtActivityType.setMerchantName("StoreName");
        stmtActivityType.setMerchantCity("City");
        stmtActivityType.setMerchantStateProvince("State");
        stmtActivityType.setCardHolderName("John Doe");
        stmtActivityType.setIpEligibility(true);
        stmtActivityType.setStatementDataDt("2024-12-01");

        String expectedToString = "StmtActivityType(acctId=12345, transactionDate=1627879200000, postingDate=1627882800000, " +
                                  "postingTime=12:30, description=Purchase at Store, promotionalOfferId=PROMO123, " +
                                  "referenceNumber=REF12345, amount=99.99, currencyCode=USD, transactionType=Purchase, " +
                                  "transactionCode=T001, merchantName=StoreName, merchantCity=City, merchantStateProvince=State, " +
                                  "cardHolderName=John Doe, ipEligibility=true, statementDataDt=2024-12-01)";
        assertEquals(expectedToString, stmtActivityType.toString());
    }

    @Test
    void testHashCode() {
        stmtActivityType.setAcctId("12345");
        stmtActivityType.setTransactionDate(1627879200000L);
        stmtActivityType.setPostingDate(1627882800000L);
        stmtActivityType.setPostingTime("12:30");
        stmtActivityType.setDescription("Purchase at Store");
        stmtActivityType.setPromotionalOfferId("PROMO123");
        stmtActivityType.setReferenceNumber("REF12345");
        stmtActivityType.setAmount(new BigDecimal("99.99"));
        stmtActivityType.setCurrencyCode("USD");
        stmtActivityType.setTransactionType("Purchase");
        stmtActivityType.setTransactionCode("T001");
        stmtActivityType.setMerchantName("StoreName");
        stmtActivityType.setMerchantCity("City");
        stmtActivityType.setMerchantStateProvince("State");
        stmtActivityType.setCardHolderName("John Doe");
        stmtActivityType.setIpEligibility(true);
        stmtActivityType.setStatementDataDt("2024-12-01");

        int expectedHashCode = stmtActivityType.getAcctId().hashCode() + stmtActivityType.getTransactionDate().hashCode() +
                               stmtActivityType.getPostingDate().hashCode() + stmtActivityType.getPostingTime().hashCode() +
                               stmtActivityType.getDescription().hashCode() + stmtActivityType.getPromotionalOfferId().hashCode() +
                               stmtActivityType.getReferenceNumber().hashCode() + stmtActivityType.getAmount().hashCode() +
                               stmtActivityType.getCurrencyCode().hashCode() + stmtActivityType.getTransactionType().hashCode() +
                               stmtActivityType.getTransactionCode().hashCode() + stmtActivityType.getMerchantName().hashCode() +
                               stmtActivityType.getMerchantCity().hashCode() + stmtActivityType.getMerchantStateProvince().hashCode() +
                               stmtActivityType.getCardHolderName().hashCode() + stmtActivityType.getIpEligibility().hashCode() +
                               stmtActivityType.getStatementDataDt().hashCode();
        assertEquals(expectedHashCode, stmtActivityType.hashCode());
    }

    @Test
    void testEquals() {
        StmtActivityType stmt1 = new StmtActivityType();
        StmtActivityType stmt2 = new StmtActivityType();

        stmt1.setAcctId("12345");
        stmt1.setTransactionDate(1627879200000L);
        stmt1.setPostingDate(1627882800000L);
        stmt1.setPostingTime("12:30");
        stmt1.setDescription("Purchase at Store");
        stmt1.setPromotionalOfferId("PROMO123");
        stmt1.setReferenceNumber("REF12345");
        stmt1.setAmount(new BigDecimal("99.99"));
        stmt1.setCurrencyCode("USD");
        stmt1.setTransactionType("Purchase");
        stmt1.setTransactionCode("T001");
        stmt1.setMerchantName("StoreName");
        stmt1.setMerchantCity("City");
        stmt1.setMerchantStateProvince("State");
        stmt1.setCardHolderName("John Doe");
        stmt1.setIpEligibility(true);
        stmt1.setStatementDataDt("2024-12-01");

        stmt2.setAcctId("12345");
        stmt2.setTransactionDate(1627879200000L);
        stmt2.setPostingDate(1627882800000L);
        stmt2.setPostingTime("12:30");
        stmt2.setDescription("Purchase at Store");
        stmt2.setPromotionalOfferId("PROMO123");
        stmt2.setReferenceNumber("REF12345");
        stmt2.setAmount(new BigDecimal("99.99"));
        stmt2.setCurrencyCode("USD");
        stmt2.setTransactionType("Purchase");
        stmt2.setTransactionCode("T001");
        stmt2.setMerchantName("StoreName");
        stmt2.setMerchantCity("City");
        stmt2.setMerchantStateProvince("State");
        stmt2.setCardHolderName("John Doe");
        stmt2.setIpEligibility(true);
        stmt2.setStatementDataDt("2024-12-01");

        assertTrue(stmt1.equals(stmt2));

        stmt2.setPostingTime("14:30");
        assertFalse(stmt1.equals(stmt2));

        stmt1.setAcctId(null);
        assertFalse(stmt1.equals(stmt2));

        stmt2.setAcctId(null);
        assertTrue(stmt1.equals(stmt2));
    }
}
