package com.td.mbna.msec.midtier.types.common;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class BTOfferTypeTest {

    @Test
    void testGetSetRate() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setRate(new BigDecimal("12.5"));
        assertEquals(new BigDecimal("12.5"), btOfferType.getRate());
    }

    @Test
    void testGetSetExpiryDate() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setExpiryDate(1659984000000L);
        assertEquals(1659984000000L, btOfferType.getExpiryDate());
    }

    @Test
    void testGetSetEarlyExpired() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setEarlyExpired(true);
        assertTrue(btOfferType.getEarlyExpired());
    }

    @Test
    void testGetSetDuration() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setDuration(12);
        assertEquals(12, btOfferType.getDuration());
    }

    @Test
    void testGetSetFixedFeeAmount() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setFixedFeeAmount(new BigDecimal("50.0"));
        assertEquals(new BigDecimal("50.0"), btOfferType.getFixedFeeAmount());
    }

    @Test
    void testGetSetMinimumFeeAmount() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setMinimumFeeAmount(new BigDecimal("10.0"));
        assertEquals(new BigDecimal("10.0"), btOfferType.getMinimumFeeAmount());
    }

    @Test
    void testGetSetMaximumFeeAmount() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setMaximumFeeAmount(new BigDecimal("100.0"));
        assertEquals(new BigDecimal("100.0"), btOfferType.getMaximumFeeAmount());
    }

    @Test
    void testGetSetFeePercentage() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setFeePercentage(new BigDecimal("5.5"));
        assertEquals(new BigDecimal("5.5"), btOfferType.getFeePercentage());
    }

    @Test
    void testGetSetEligibleNegotiatedType() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setEligibleNegotiatedType("Negotiated Type A");
        assertEquals("Negotiated Type A", btOfferType.getEligibleNegotiatedType());
    }

    @Test
    void testToString() {
        BTOfferType btOfferType = new BTOfferType();
        btOfferType.setRate(new BigDecimal("15.5"));
        btOfferType.setExpiryDate(1659984000000L);
        btOfferType.setEarlyExpired(false);
        btOfferType.setDuration(24);
        btOfferType.setFixedFeeAmount(new BigDecimal("75.0"));
        btOfferType.setMinimumFeeAmount(new BigDecimal("5.0"));
        btOfferType.setMaximumFeeAmount(new BigDecimal("200.0"));
        btOfferType.setFeePercentage(new BigDecimal("7.5"));
        btOfferType.setEligibleNegotiatedType("Negotiated Type B");

        String expectedToString = "com.td.mbna.msec.midtier.types.common.BTOfferType@" +
                Integer.toHexString(System.identityHashCode(btOfferType)) +
                "[rate=15.5,expiryDate=1659984000000,earlyExpired=false,duration=24,fixedFeeAmount=75.0,minimumFeeAmount=5.0,maximumFeeAmount=200.0,feePercentage=7.5,eligibleNegotiatedType=Negotiated Type B]";
        assertTrue(btOfferType.toString().contains("rate=15.5"));
        assertTrue(btOfferType.toString().contains("expiryDate=1659984000000"));
        assertTrue(btOfferType.toString().contains("eligibleNegotiatedType=Negotiated Type B"));
    }

    @Test
    void testHashCode() {
        BTOfferType btOfferType1 = new BTOfferType();
        btOfferType1.setRate(new BigDecimal("12.5"));
        btOfferType1.setExpiryDate(1659984000000L);

        BTOfferType btOfferType2 = new BTOfferType();
        btOfferType2.setRate(new BigDecimal("12.5"));
        btOfferType2.setExpiryDate(1659984000000L);

        assertEquals(btOfferType1.hashCode(), btOfferType2.hashCode());
    }

    @Test
    void testEquals() {
        BTOfferType btOfferType1 = new BTOfferType();
        btOfferType1.setRate(new BigDecimal("12.5"));
        btOfferType1.setExpiryDate(1659984000000L);

        BTOfferType btOfferType2 = new BTOfferType();
        btOfferType2.setRate(new BigDecimal("12.5"));
        btOfferType2.setExpiryDate(1659984000000L);

        assertTrue(btOfferType1.equals(btOfferType2));

        btOfferType2.setRate(new BigDecimal("15.5"));
        assertFalse(btOfferType1.equals(btOfferType2));
    }
}
