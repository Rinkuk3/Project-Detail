package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class IPOfferTypeTest {

    private IPOfferType ipoOfferType;

    @BeforeEach
    void setUp() {
        ipoOfferType = new IPOfferType();
    }

    @Test
    void testSetAndGetExpiryDate() {
        ipoOfferType.setExpiryDate(1632967200000L); // Some example timestamp
        assertEquals(1632967200000L, ipoOfferType.getExpiryDate());
    }

    @Test
    void testSetAndGetEarlyExpired() {
        ipoOfferType.setEarlyExpired(true);
        assertTrue(ipoOfferType.getEarlyExpired());
    }

    @Test
    void testSetAndGetDuration() {
        ipoOfferType.setDuration(12);
        assertEquals(Integer.valueOf(12), ipoOfferType.getDuration());
    }

    @Test
    void testSetAndGetEligibleNegotiatedType() {
        ipoOfferType.setEligibleNegotiatedType("NEGOTIATED");
        assertEquals("NEGOTIATED", ipoOfferType.getEligibleNegotiatedType());
    }

    @Test
    void testSetAndGetFixedFeeAmount() {
        ipoOfferType.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        assertEquals(BigDecimal.valueOf(50.75), ipoOfferType.getFixedFeeAmount());
    }

    @Test
    void testSetAndGetMinimumFeeAmount() {
        ipoOfferType.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        assertEquals(BigDecimal.valueOf(25.50), ipoOfferType.getMinimumFeeAmount());
    }

    @Test
    void testSetAndGetMaximumFeeAmount() {
        ipoOfferType.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        assertEquals(BigDecimal.valueOf(100.00), ipoOfferType.getMaximumFeeAmount());
    }

    @Test
    void testSetAndGetFeePercentage() {
        ipoOfferType.setFeePercentage(BigDecimal.valueOf(15.25));
        assertEquals(BigDecimal.valueOf(15.25), ipoOfferType.getFeePercentage());
    }

    @Test
    void testSetAndGetRate() {
        IPRate rate1 = new IPRate();
        IPRate rate2 = new IPRate();
        ipoOfferType.setRate(Arrays.asList(rate1, rate2));
        assertEquals(2, ipoOfferType.getRate().size());
    }

    @Test
    void testToString() {
        ipoOfferType.setExpiryDate(1632967200000L);
        ipoOfferType.setEarlyExpired(true);
        ipoOfferType.setDuration(12);
        ipoOfferType.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        ipoOfferType.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        ipoOfferType.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        ipoOfferType.setFeePercentage(BigDecimal.valueOf(15.25));
        ipoOfferType.setEligibleNegotiatedType("NEGOTIATED");

        String result = ipoOfferType.toString();
        assertTrue(result.contains("rate"));
        assertTrue(result.contains("expiryDate"));
        assertTrue(result.contains("earlyExpired"));
        assertTrue(result.contains("duration"));
        assertTrue(result.contains("fixedFeeAmount"));
        assertTrue(result.contains("minimumFeeAmount"));
        assertTrue(result.contains("maximumFeeAmount"));
        assertTrue(result.contains("feePercentage"));
        assertTrue(result.contains("eligibleNegotiatedType"));
    }

    @Test
    void testHashCode() {
        ipoOfferType.setExpiryDate(1632967200000L);
        ipoOfferType.setEarlyExpired(true);
        ipoOfferType.setDuration(12);
        ipoOfferType.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        ipoOfferType.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        ipoOfferType.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        ipoOfferType.setFeePercentage(BigDecimal.valueOf(15.25));
        ipoOfferType.setEligibleNegotiatedType("NEGOTIATED");

        int hashCode = ipoOfferType.hashCode();
        assertNotNull(hashCode);
    }

    @Test
    void testEquals() {
        IPOfferType ipoOfferType2 = new IPOfferType();
        ipoOfferType.setExpiryDate(1632967200000L);
        ipoOfferType.setEarlyExpired(true);
        ipoOfferType.setDuration(12);
        ipoOfferType.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        ipoOfferType.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        ipoOfferType.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        ipoOfferType.setFeePercentage(BigDecimal.valueOf(15.25));
        ipoOfferType.setEligibleNegotiatedType("NEGOTIATED");

        ipoOfferType2.setExpiryDate(1632967200000L);
        ipoOfferType2.setEarlyExpired(true);
        ipoOfferType2.setDuration(12);
        ipoOfferType2.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        ipoOfferType2.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        ipoOfferType2.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        ipoOfferType2.setFeePercentage(BigDecimal.valueOf(15.25));
        ipoOfferType2.setEligibleNegotiatedType("NEGOTIATED");

        assertTrue(ipoOfferType.equals(ipoOfferType2));
    }

    @Test
    void testNotEquals() {
        IPOfferType ipoOfferType2 = new IPOfferType();
        ipoOfferType.setExpiryDate(1632967200000L);
        ipoOfferType.setEarlyExpired(true);
        ipoOfferType.setDuration(12);
        ipoOfferType.setFixedFeeAmount(BigDecimal.valueOf(50.75));
        ipoOfferType.setMinimumFeeAmount(BigDecimal.valueOf(25.50));
        ipoOfferType.setMaximumFeeAmount(BigDecimal.valueOf(100.00));
        ipoOfferType.setFeePercentage(BigDecimal.valueOf(15.25));
        ipoOfferType.setEligibleNegotiatedType("NEGOTIATED");

        ipoOfferType2.setExpiryDate(1632967200001L); // Different expiry date
        assertFalse(ipoOfferType.equals(ipoOfferType2));
    }
}
