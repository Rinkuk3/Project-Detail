package com.td.mbna.msec.midtier.types.common;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;

class CLIOfferTypeTest {

    @Test
    void testGetCliAmount() {
        CLIOfferType offer = new CLIOfferType();
        BigDecimal amount = new BigDecimal("1000.00");
        offer.setCliAmount(amount);
        assertEquals(amount, offer.getCliAmount());
    }

    @Test
    void testSetCliAmount() {
        CLIOfferType offer = new CLIOfferType();
        BigDecimal amount = new BigDecimal("1000.00");
        offer.setCliAmount(amount);
        assertEquals(amount, offer.getCliAmount());
    }

    @Test
    void testToString() {
        CLIOfferType offer = new CLIOfferType();
        offer.setCliAmount(new BigDecimal("1000.00"));
        String expected = "com.td.mbna.msec.midtier.types.common.CLIOfferType@" +
                Integer.toHexString(System.identityHashCode(offer)) + "[cliAmount=1000.00]";
        assertEquals(expected, offer.toString());
    }

    @Test
    void testHashCode() {
        CLIOfferType offer1 = new CLIOfferType();
        CLIOfferType offer2 = new CLIOfferType();
        offer1.setCliAmount(new BigDecimal("1000.00"));
        offer2.setCliAmount(new BigDecimal("1000.00"));
        assertEquals(offer1.hashCode(), offer2.hashCode());
    }

    @Test
    void testEquals() {
        CLIOfferType offer1 = new CLIOfferType();
        CLIOfferType offer2 = new CLIOfferType();
        offer1.setCliAmount(new BigDecimal("1000.00"));
        offer2.setCliAmount(new BigDecimal("1000.00"));
        assertTrue(offer1.equals(offer2));

        offer2.setCliAmount(new BigDecimal("2000.00"));
        assertFalse(offer1.equals(offer2));
    }

    @Test
    void testEqualsNull() {
        CLIOfferType offer = new CLIOfferType();
        assertFalse(offer.equals(null));
    }

    @Test
    void testEqualsDifferentClass() {
        CLIOfferType offer = new CLIOfferType();
        assertFalse(offer.equals(new Object()));
    }
}
