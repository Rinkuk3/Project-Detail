package com.td.mbna.msec.profile.controller;

import com.td.mbna.msec.profile.model.*;
import com.td.mbna.msec.profile.service.CustomerProfileService;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerProfileControllerTest {

    @InjectMocks
    private CustomerProfileController customerProfileController;

    @Mock
    private CustomerProfileService customerProfileService;

    private MockHttpServletRequest request;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        request = new MockHttpServletRequest();
    }

    @Test
    void testGetPersonalInfo_Success() {
        // Given
        CustomerProfileDTO profileDTO = new CustomerProfileDTO();
        when(customerProfileService.retrievePchAndAuProfileInfo(any())).thenReturn(profileDTO);

        // When
        CustomerProfileDTO result = customerProfileController.getPersonalInfo(request);

        // Then
        assertNotNull(result);
        verify(customerProfileService, times(1)).retrievePchAndAuProfileInfo(any());
    }

    @Test
    void testGetPersonalInfo_Exception() {
        // Given - Simulate exception when UCP_TESTING_ERROR_EDIT_CONTACT is true
        boolean UCP_TESTING_ERROR_EDIT_CONTACT = true;
        if (UCP_TESTING_ERROR_EDIT_CONTACT) {
            assertThrows(RuntimeException.class, () -> {
                throw ExceptionUtil.genRuntimeException(new Exception());
            });
        }
    }

    @Test
    void testUpdatePersonalInfo_Success() {
        // Given
        CustomerProfileDTO profileDTO = new CustomerProfileDTO();
        when(customerProfileService.updateProfile(any())).thenReturn(true);

        // When
        Map<String, Object> result = customerProfileController.updatePersonalInfo(profileDTO, request);

        // Then
        assertNotNull(result);
        assertTrue((Boolean) result.get("UpdateCustomerProfile"));
        assertTrue((Boolean) result.get("success"));
        verify(customerProfileService, times(1)).updateProfile(profileDTO);
    }

    @Test
    void testHandleUpdatePersonalInfo() {
        // When
        ModelAndView result = customerProfileController.handleUpdatePersonalInfo(request);

        // Then
        assertNotNull(result);
        assertEquals("redirect:index.html#/account/personalInformation/entry", result.getViewName());
    }

    @Test
    void testGetOfferSettings_Success() {
        // Given
        LoginOfferSettings offerSettings = new LoginOfferSettings();
        when(customerProfileService.getOffersSetting()).thenReturn(offerSettings);

        // When
        LoginOfferSettings result = customerProfileController.getOfferSettings();

        // Then
        assertNotNull(result);
        verify(customerProfileService, times(1)).getOffersSetting();
    }

    @Test
    void testUpdateOfferSetting_Success() {
        // Given
        OfferSettingRequest offerSettingRequest = new OfferSettingRequest();
        LoginOfferSettings updatedSettings = new LoginOfferSettings();
        when(customerProfileService.updateOfferSetting(any(), any())).thenReturn(updatedSettings);

        // When
        LoginOfferSettings result = customerProfileController.updateOfferSetting(offerSettingRequest, request);

        // Then
        assertNotNull(result);
        verify(customerProfileService, times(1)).updateOfferSetting(offerSettingRequest, request);
    }

    @Test
    void testGetMyProfileEligibility_Success() {
        // Given
        MyProfileSettings myProfileSettings = new MyProfileSettings();
        when(customerProfileService.getProfileLinksEligibility()).thenReturn(myProfileSettings);

        // When
        MyProfileSettings result = customerProfileController.getMyProfileEligibility(request);

        // Then
        assertNotNull(result);
        verify(customerProfileService, times(1)).getProfileLinksEligibility();
    }
}
