import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.infrastructure.util.TextProvider;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.AffinityHelper;
import com.td.mbna.msec.kyc.dto.AccountInformation;
import com.td.mbna.msec.kyc.dto.Address;
import com.td.mbna.msec.kyc.dto.AuthorizedUser;
import com.td.mbna.msec.kyc.dto.EmploymentInfo;
import com.td.mbna.msec.kyc.dto.KycInfo;
import com.td.mbna.msec.kyc.dto.PersonalInformation;
import com.td.mbna.msec.midtier.customerprofile.payload.AccountKycInfoType;
import com.td.mbna.msec.midtier.customerprofile.payload.CustomerInfoType;
import com.td.mbna.msec.midtier.types.common.CustAcctType;

public class KycAdaptorTest {

    @InjectMocks
    private KycAdaptor kycAdaptor;

    @Mock
    private TextProvider textProvider;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private AffinityHelper affinityHelper;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetKycInfo() {
        // Setup mock data
        CustomerInfoType kycCustInfo = mock(CustomerInfoType.class);
        List<AccountKycInfoType> kycAcctsInfo = new ArrayList<>();
        AccountKycInfoType accountKycInfoType = mock(AccountKycInfoType.class);
        kycAcctsInfo.add(accountKycInfoType);

        CustAcctType custAcctType = mock(CustAcctType.class);
        when(custAcctType.getAcctNum()).thenReturn("12345");
        when(accountKycInfoType.getKycAcct()).thenReturn(custAcctType);
        when(sessionProvider.getSessionCustomer()).thenReturn(new SessionCustomer());
        
        when(kycCustInfo.getName()).thenReturn(mock(NameType.class));
        when(kycCustInfo.getBirthDate()).thenReturn("01-01-1990");
        when(kycCustInfo.getPhysicalAddressLine1()).thenReturn("123 Main St");
        when(kycCustInfo.getPhysicalCity()).thenReturn("Toronto");
        when(kycCustInfo.getPhysicalProvince()).thenReturn("ON");
        when(kycCustInfo.getPhysicalPostalCode()).thenReturn("A1B2C3");
        when(kycCustInfo.getNatureOfBusiness()).thenReturn("Business");
        when(kycCustInfo.getPosition()).thenReturn("Manager");
        when(kycCustInfo.getEmploymentStatus()).thenReturn("Employed");
        when(kycCustInfo.getOccupation()).thenReturn("Occupation");

        // Call the method under test
        KycInfo kycInfo = kycAdaptor.getKycInfo(kycCustInfo, kycAcctsInfo);

        // Verify results
        assertNotNull(kycInfo);
        assertNotNull(kycInfo.getPersonalInformation());
        assertEquals("123 Main St", kycInfo.getPersonalInformation().getAddress().getStreet());
    }

    @Test
    public void testGetDobValidDate() {
        // Valid birth date
        List<Integer> dob = kycAdaptor.getDob("01-01-1990");
        assertNotNull(dob);
        assertEquals(1990, dob.get(0));
        assertEquals(1, dob.get(1)); // January
        assertEquals(1, dob.get(2)); // 1st
    }

    @Test
    public void testGetDobInvalidDate() {
        // Invalid birth date
        List<Integer> dob = kycAdaptor.getDob("invalid-date");
        assertNull(dob);
    }

    @Test
    public void testIsAllAccountsEnrolled() {
        // Setup mock data
        List<AccountDetails> enrolledAccounts = new ArrayList<>();
        AccountDetails account = mock(AccountDetails.class);
        when(account.getAccountNumber()).thenReturn("12345");
        enrolledAccounts.add(account);

        List<CustAcctType> allAccts = new ArrayList<>();
        CustAcctType custAcctType = mock(CustAcctType.class);
        when(custAcctType.getAcctNum()).thenReturn("12345");
        allAccts.add(custAcctType);

        // Call the method under test
        boolean result = kycAdaptor.isAllAccountsEnrolled(enrolledAccounts, allAccts);

        // Verify results
        assertTrue(result);
    }

    @Test
    public void testIsAllAccountsEnrolledAccountNotEnrolled() {
        // Setup mock data
        List<AccountDetails> enrolledAccounts = new ArrayList<>();
        AccountDetails account = mock(AccountDetails.class);
        when(account.getAccountNumber()).thenReturn("12345");
        enrolledAccounts.add(account);

        List<CustAcctType> allAccts = new ArrayList<>();
        CustAcctType custAcctType = mock(CustAcctType.class);
        when(custAcctType.getAcctNum()).thenReturn("54321");
        allAccts.add(custAcctType);

        // Call the method under test
        boolean result = kycAdaptor.isAllAccountsEnrolled(enrolledAccounts, allAccts);

        // Verify results
        assertFalse(result);
    }

    @Test
    public void testGetCustomerInfoType() {
        // Setup mock data
        KycInfo kycInfo = mock(KycInfo.class);
        CustomerInfoType kycCustInfo = mock(CustomerInfoType.class);
        
        Address address = new Address();
        address.setStreet("123 Main St");
        address.setLine2("Apt 1");
        address.setCity("Toronto");
        address.setProvince("ON");
        address.setPostalCode("A1B2C3");
        
        EmploymentInfo employmentInfo = new EmploymentInfo();
        employmentInfo.setDescribeYourBusiness("Business");
        employmentInfo.setOccupation("Occupation");
        employmentInfo.setJobDescription("Manager");
        employmentInfo.setEmployerStatus("Employed");

        when(kycInfo.getPersonalInformation()).thenReturn(new PersonalInformation());
        when(kycInfo.getPersonalInformation().getAddress()).thenReturn(address);
        when(kycInfo.getPersonalInformation().getEmploymentInfo()).thenReturn(employmentInfo);

        // Call the method under test
        CustomerInfoType result = kycAdaptor.getCustomerInfoType(kycInfo, kycCustInfo);

        // Verify results
        assertNotNull(result);
        assertEquals("123 Main St Apt 1", result.getPhysicalAddressLine1());
        assertEquals("Toronto", result.getPhysicalCity());
        assertEquals("ON", result.getPhysicalProvince());
        assertEquals("A1B2C3", result.getPhysicalPostalCode());
    }

    @Test
    public void testGetKycAcctsInfo() {
        // Setup mock data
        KycInfo kycInfo = mock(KycInfo.class);
        List<AccountKycInfoType> kycAcctsInfo = new ArrayList<>();
        AccountKycInfoType accountKycInfoType = mock(AccountKycInfoType.class);
        kycAcctsInfo.add(accountKycInfoType);

        CustAcctType custAcctType = mock(CustAcctType.class);
        when(custAcctType.getAcctNum()).thenReturn("12345");
        when(accountKycInfoType.getKycAcct()).thenReturn(custAcctType);

        when(kycInfo.getAccountInformation()).thenReturn(Arrays.asList(new AccountInformation()));

        // Call the method under test
        List<AccountKycInfoType> result = kycAdaptor.getKycAcctsInfo(kycInfo, kycAcctsInfo);

        // Verify results
        assertNotNull(result);
        assertEquals(1, result.size());
    }
}
