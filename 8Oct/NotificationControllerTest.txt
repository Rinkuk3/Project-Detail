package com.td.mbna.msec.notification.controller;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.notification.model.CustomerNotificationAlerts;
import com.td.mbna.msec.notification.model.UpdateCustomerNotificationAlertsRequest;
import com.td.mbna.msec.notification.model.UpdateCustomerNotificationAlertsResponse;
import com.td.mbna.msec.notification.service.NotificationService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.ModelAndView;

public class NotificationControllerTest {

    @InjectMocks
    private NotificationController notificationController;

    @Mock
    private NotificationService notificationService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private HttpServletRequest httpRequest;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetNotificationAlerts() {
        CustomerNotificationAlerts alerts = new CustomerNotificationAlerts();
        when(notificationService.getNotificationAlerts(null)).thenReturn(alerts);
        when(sessionProvider.getSessionAttribute(SESSION_CPF_MOCK_CONFIRM_DONE)).thenReturn(null);

        CustomerNotificationAlerts result = notificationController.getNotificationAlerts();

        assertNotNull(result);
        verify(sessionProvider).setSessionAttribute(SESSION_CPF_VIEW_NOTIFICATION, alerts);
    }

    @Test
    public void testGetCurrentNotificationAlerts() {
        CustomerNotificationAlerts alerts = new CustomerNotificationAlerts();
        when(notificationService.getNotificationAlerts(anyString())).thenReturn(alerts);
        when(sessionProvider.getSessionAttribute(SESSION_CPF_MOCK_CONFIRM_DONE)).thenReturn(null);

        CustomerNotificationAlerts result = notificationController.getCurrentNotificationAlerts("123456");

        assertNotNull(result);
        verify(sessionProvider).setSessionAttribute(SESSION_CPF_VIEW_NOTIFICATION, alerts);
    }

    @Test
    public void testUpdateNotificationAlerts() {
        UpdateCustomerNotificationAlertsRequest request = new UpdateCustomerNotificationAlertsRequest();
        UpdateCustomerNotificationAlertsResponse response = new UpdateCustomerNotificationAlertsResponse();
        when(notificationService.updateNotificationAlertsAlerts(eq(request), eq(httpRequest))).thenReturn(response);

        UpdateCustomerNotificationAlertsResponse result = notificationController.updateNotificationAlerts(request, httpRequest);

        assertEquals(response, result);
    }

    @Test
    public void testGetConfirmation() {
        CustomerNotificationAlerts alerts = new CustomerNotificationAlerts();
        when(notificationService.getConfirmation()).thenReturn(alerts);

        CustomerNotificationAlerts result = notificationController.getConfirmation();

        assertNotNull(result);
    }

    @Test
    public void testEditConfirmation() {
        UpdateCustomerNotificationAlertsResponse response = new UpdateCustomerNotificationAlertsResponse();
        when(notificationService.editConfirmation(httpRequest)).thenReturn(response);

        UpdateCustomerNotificationAlertsResponse result = notificationController.editConfirmation(httpRequest);

        assertEquals(response, result);
    }

    @Test
    public void testHandleUcpSuccess() throws Exception {
        UcpBackRequest request = new UcpBackRequest();
        when(sessionProvider.getSessionAttribute(SESSION_CPF_CONFIRM)).thenReturn("successPage");
        when(notificationService.validateUcp(request)).thenReturn(true);

        ModelAndView result = notificationController.handleUcpSuccess(request, httpRequest);

        assertEquals("redirect:successPage", result.getViewName());
    }

    @Test
    public void testHandleUcpCancel() throws Exception {
        UcpBackRequest request = new UcpBackRequest();
        when(sessionProvider.getSessionAttribute(SESSION_CPF_CANCEL)).thenReturn("cancelPage");
        when(notificationService.validateUcp(request)).thenReturn(true);

        ModelAndView result = notificationController.handleUcpCancel(request, httpRequest);

        assertEquals("redirect:cancelPage", result.getViewName());
    }

    @Test
    public void testExceptionHandlingForGetNotificationAlerts() {
        when(sessionProvider.getSessionAttribute(SESSION_CPF_MOCK_CONFIRM_DONE)).thenReturn(true);

        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.getNotificationAlerts();
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForGetCurrentNotificationAlerts() {
        when(sessionProvider.getSessionAttribute(SESSION_CPF_MOCK_CONFIRM_DONE)).thenReturn(true);

        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.getCurrentNotificationAlerts("123456");
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForUpdateNotificationAlerts() {
        UpdateCustomerNotificationAlertsRequest request = new UpdateCustomerNotificationAlertsRequest();

        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.updateNotificationAlerts(request, httpRequest);
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForGetConfirmation() {
        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.getConfirmation();
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForEditConfirmation() {
        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.editConfirmation(httpRequest);
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForHandleUcpSuccess() {
        UcpBackRequest request = new UcpBackRequest();
        when(notificationService.validateUcp(request)).thenReturn(false);

        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.handleUcpSuccess(request, httpRequest);
        });

        assertNotNull(exception);
    }

    @Test
    public void testExceptionHandlingForHandleUcpCancel() {
        UcpBackRequest request = new UcpBackRequest();
        when(notificationService.validateUcp(request)).thenReturn(false);

        Exception exception = assertThrows(Exception.class, () -> {
            notificationController.handleUcpCancel(request, httpRequest);
        });

        assertNotNull(exception);
    }
}
