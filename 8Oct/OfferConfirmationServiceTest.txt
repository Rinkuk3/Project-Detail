package com.td.mbna.msec.offers.application.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.exception.BusinessException;
import com.td.mbna.msec.profile.model.CustomerProfile;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceResponse;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestPayload;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeResponse;
import com.td.mbna.msec.midtier.types.common.CardHolderType;
import com.td.mbna.msec.midtier.types.common.PhoneNumber;
import com.td.mbna.msec.midtier.types.common.UnformattedAddress;
import com.td.mbna.msec.offers.domain.ConfirmOfferRequest;
import com.td.mbna.msec.offers.domain.OfferConfirmationResponse;
import com.td.mbna.msec.offers.domain.OfferDetails;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class OfferConfirmationServiceImplTest {

    @InjectMocks
    private OfferConfirmationServiceImpl offerConfirmationService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private SessionService sessionService;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    private AccountDetails accountDetails;
    private ConfirmOfferRequest confirmOfferRequest;
    private OfferDetails offerDetails;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        accountDetails = new AccountDetails();
        confirmOfferRequest = new ConfirmOfferRequest();
        offerDetails = new OfferDetails();

        // Mocking common session data
        Map<String, Object> sessionMap = new HashMap<>();
        sessionMap.put(SESSION_PCOFFER_KEY, "offerId123");
        when(sessionService.getSession()).thenReturn(sessionMap);
    }

    @Test
    public void testConfirmOffer_SuccessProductUpgrade() {
        accountDetails.setCardNumber("123456");
        accountDetails.setAllowedBalanceProtection(true);
        offerDetails.setPcOffer(new OfferDetails());
        offerDetails.setAsPromotionOfferType("promotionType");
        accountDetails.setMarketingOffers(new ArrayList<>());
        accountDetails.getMarketingOffers().add(offerDetails);

        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(midTierServiceHelper.requestProductChange(any(), anyString())).thenReturn(new RequestProductChangeResponse());

        confirmOfferRequest.setOfferType("pc");
        
        OfferConfirmationResponse response = offerConfirmationService.confirmOffer(confirmOfferRequest, httpServletRequest);

        assertEquals("SUCCESS", response.getStatus());
    }

    @Test
    public void testConfirmOffer_SuccessBalanceProtection() {
        accountDetails.setCardNumber("123456");
        accountDetails.setAllowedBalanceProtection(true);
        offerDetails.setBpiOfferType("bpi");
        accountDetails.setBpOffers(new ArrayList<>());
        accountDetails.getBpOffers().add(offerDetails);

        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(midTierServiceHelper.requestInsurance(any(), any())).thenReturn(new RequestInsuranceResponse());

        confirmOfferRequest.setOfferType("bpi");
        
        OfferConfirmationResponse response = offerConfirmationService.confirmOffer(confirmOfferRequest, httpServletRequest);

        assertEquals("SUCCESS", response.getStatus());
    }

    @Test
    public void testConfirmOffer_AccountNull() {
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        
        BusinessException thrown = assertThrows(BusinessException.class, () -> {
            offerConfirmationService.confirmOffer(confirmOfferRequest, httpServletRequest);
        });
        assertEquals("MS601: Current account doesn't exist", thrown.getMessage());
    }

    @Test
    public void testConfirmOffer_ErrorInProcessing() {
        when(sessionProvider.getCurrentAccount()).thenThrow(new RuntimeException("Exception occurred"));
        
        ExceptionUtil.ExceptionWrapper thrown = assertThrows(ExceptionUtil.ExceptionWrapper.class, () -> {
            offerConfirmationService.confirmOffer(confirmOfferRequest, httpServletRequest);
        });
        assertNotNull(thrown);
    }

    @Test
    public void testConfirmProductUpgrade_Success() {
        // Setting up successful response from midTierServiceHelper
        when(midTierServiceHelper.requestProductChange(any(), anyString())).thenReturn(new RequestProductChangeResponse());

        String result = offerConfirmationService.confirmProductUpgrade(accountDetails, offerDetails);
        
        assertEquals("SUCCESS", result);
    }

    @Test
    public void testConfirmProductUpgrade_Error() {
        when(midTierServiceHelper.requestProductChange(any(), anyString())).thenThrow(new RuntimeException("Request failed"));

        String result = offerConfirmationService.confirmProductUpgrade(accountDetails, offerDetails);
        
        assertEquals("ERROR", result);
    }

    @Test
    public void testConfirmBalanceProtectionInsurance_Success() throws Exception {
        CustomerProfile customerProfile = new CustomerProfile();
        customerProfile.setFirstName("John");
        customerProfile.setLastName("Doe");
        customerProfile.setLanguagePref("en");
        accountDetails.setProfile(customerProfile);
        accountDetails.setCardNumber("123456");
        accountDetails.setAccountId("accountId");

        offerDetails.setAsPromotionOfferType("bpi");

        when(midTierServiceHelper.requestInsurance(any(), any())).thenReturn(new RequestInsuranceResponse());

        String result = offerConfirmationService.confirmBalanceProtectionInsurance(accountDetails, offerDetails);

        assertEquals("SUCCESS", result);
    }

    @Test
    public void testConfirmBalanceProtectionInsurance_Error() {
        CustomerProfile customerProfile = new CustomerProfile();
        accountDetails.setProfile(customerProfile);
        accountDetails.setCardNumber("123456");

        when(midTierServiceHelper.requestInsurance(any(), any())).thenThrow(new RuntimeException("Request failed"));

        assertThrows(RuntimeException.class, () -> {
            offerConfirmationService.confirmBalanceProtectionInsurance(accountDetails, offerDetails);
        });
    }
}
