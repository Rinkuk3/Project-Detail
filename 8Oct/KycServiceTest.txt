package com.td.mbna.msec.kyc.application.impl;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.WcmContentService;
import com.td.mbna.msec.core.service.CheckEligibility;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.kyc.adapter.KycAdaptor;
import com.td.mbna.msec.kyc.dto.KycBanner;
import com.td.mbna.msec.kyc.dto.KycEligibilityRequest;
import com.td.mbna.msec.kyc.dto.KycEligibilityResponse;
import com.td.mbna.msec.kyc.dto.KycInfo;
import com.td.mbna.msec.midtier.customerprofile.payload.getkycacctsinfo.GetKycAcctsInfoResponse;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;
import java.util.Collections;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class KycServiceImplTest {

    @InjectMocks
    private KycServiceImpl kycService;

    @Mock
    private WcmContentService wcmContentService;
    
    @Mock
    private SessionProvider sessionProvider;
    
    @Mock
    private KycAdaptor kycAdaptor;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private HttpServletRequest request;

    @Mock
    private MbnaLogger logger;

    private AccountDetails accountDetails;
    private GetKycAcctsInfoResponse getKycAcctsInfoResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        accountDetails = new AccountDetails();
        getKycAcctsInfoResponse = new GetKycAcctsInfoResponse();
    }

    @Test
    void testRetrieveKycInfo_LoginPage() {
        // Setup
        String pageId = "LOGIN";
        when(sessionProvider.getSessionCustomer().getKycNeededAccts()).thenReturn(Collections.singletonList(new CustAcctType()));
        when(midTierServiceHelper.getKycAcctsInfo(any(), any())).thenReturn(getKycAcctsInfoResponse);
        when(kycAdaptor.getKycInfo(any(), any())).thenReturn(new KycInfo());

        // Execution
        KycInfo kycInfo = kycService.retrieveKycInfo(pageId);

        // Assertions
        assertNotNull(kycInfo);
        verify(sessionProvider).setSessionAttribute(KYC_RESPONSE, getKycAcctsInfoResponse);
    }

    @Test
    void testRetrieveKycInfo_CLIPage() {
        // Setup
        String pageId = "CLI";
        when(sessionProvider.getSessionCustomer().getCliAccts()).thenReturn(Collections.singletonList(new CustAcctType()));
        when(midTierServiceHelper.getKycAcctsInfo(any(), any())).thenReturn(getKycAcctsInfoResponse);
        when(kycAdaptor.getKycInfo(any(), any())).thenReturn(new KycInfo());

        // Execution
        KycInfo kycInfo = kycService.retrieveKycInfo(pageId);

        // Assertions
        assertNotNull(kycInfo);
        verify(sessionProvider).setSessionAttribute(KYC_RESPONSE, getKycAcctsInfoResponse);
    }

    @Test
    void testUpdateKycInfo_Success() {
        // Setup
        KycInfo kycInfo = new KycInfo();
        when(sessionProvider.getSessionAttribute(KYC_RESPONSE)).thenReturn(getKycAcctsInfoResponse);
        when(midTierServiceHelper.setKycAcctsInfo(any(), any())).thenReturn(new SetKycAcctsInfoResponse());

        // Execution
        KycInfo result = kycService.updateKycInfo(kycInfo);

        // Assertions
        assertNotNull(result);
        verify(sessionProvider).setSessionAttribute(KYC_RESPONSE, getKycAcctsInfoResponse);
    }

    @Test
    void testUpdateKycInfo_Failure() {
        // Setup
        KycInfo kycInfo = new KycInfo();
        when(sessionProvider.getSessionAttribute(KYC_RESPONSE)).thenReturn(getKycAcctsInfoResponse);
        when(midTierServiceHelper.setKycAcctsInfo(any(), any())).thenReturn(null);

        // Execution and Assertions
        assertThrows(BusinessException.class, () -> kycService.updateKycInfo(kycInfo));
    }

    @Test
    void testEligibility_CLIPage_Eligible() {
        // Setup
        KycEligibilityRequest request = new KycEligibilityRequest();
        request.setPageId("CLI");
        when(sessionProvider.getSessionCustomer().getCliAccts()).thenReturn(Collections.singletonList(new CustAcctType()));

        // Execution
        KycEligibilityResponse response = kycService.eligibility(request);

        // Assertions
        assertTrue(response.isEligibility());
        verify(midTierServiceHelper).createAuditLog(anyString(), any(), anyBoolean());
    }

    @Test
    void testEligibility_LoginPage_NotEligible() {
        // Setup
        KycEligibilityRequest request = new KycEligibilityRequest();
        request.setPageId("LOGIN");
        when(sessionProvider.getSessionCustomer().getKycNeededAccts()).thenReturn(Collections.emptyList());

        // Execution
        KycEligibilityResponse response = kycService.eligibility(request);

        // Assertions
        assertFalse(response.isEligibility());
        verify(midTierServiceHelper, never()).createAuditLog(anyString(), any(), anyBoolean());
    }

    @Test
    void testRetrieveKycBanner_Success() {
        // Setup
        String accountId = "12345";
        when(sessionProvider.getAccount(accountId)).thenReturn(accountDetails);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en");
        when(wcmContentService.getContentByID(any(), any())).thenReturn("json-content");

        // Execution
        KycBanner kycBanner = kycService.retrieveKycBanner(accountId, request);

        // Assertions
        assertNotNull(kycBanner);
    }

    @Test
    void testRetrieveKycBanner_NoAccount() {
        // Setup
        String accountId = "12345";
        when(sessionProvider.getAccount(accountId)).thenReturn(null);

        // Execution
        KycBanner kycBanner = kycService.retrieveKycBanner(accountId, request);

        // Assertions
        assertNull(kycBanner);
    }

    @Test
    void testRetrieveKycBanner_WCMContentError() {
        // Setup
        String accountId = "12345";
        when(sessionProvider.getAccount(accountId)).thenReturn(accountDetails);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en");
        when(wcmContentService.getContentByID(any(), any())).thenThrow(new RuntimeException("WCM Error"));

        // Execution
        KycBanner kycBanner = kycService.retrieveKycBanner(accountId, request);

        // Assertions
        assertNull(kycBanner);
    }

    // Additional tests for edge cases can be added here
}
