import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;

import java.util.Date;

import javax.crypto.SecretKey;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.common.infrastructure.util.PinUtil;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.midtier.persistance.entity.KmsKeys;
import com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinResponse;
import com.td.mbna.msec.midtier.pinmanagement.payload.changepin.RequestPayload;
import com.td.mbna.msec.midtier.util.ValidateUtil;

public class ChangePinServiceImplTest {

    @InjectMocks
    private ChangePinServiceImpl changePinService;

    @Mock
    private PinUtil pinUtil;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private KmsKeys kmsKeys;

    @Mock
    private CustomerDetails customerDetails;

    @Mock
    private ChangePinResponse changePinResponse;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testChangePinValidateSuccess() {
        when(pinUtil.isNameModifiedRecently(any(AccountDetails.class), anyInt())).thenReturn(false);
        when(pinUtil.isAddressModifiedRecently(any(AccountDetails.class), anyInt())).thenReturn(false);
        when(pinUtil.checkPinSessionExpired(anyLong(), anyString())).thenReturn(false);
        when(accountDetails.getAccountId()).thenReturn("12345");
        when(changePinService.isUAPAuthenticated("12345")).thenReturn(true);

        BaseMsecbffResponse response = changePinService.changePinValidate();
        assertNotNull(response);
        assertEquals(SUCCESS, response.getStatus());
    }

    @Test
    public void testChangePinValidateNullAccount() {
        when(changePinService.getSessionProvider().getCurrentAccount()).thenReturn(null);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            changePinService.changePinValidate();
        });

        assertEquals(INVALID_ACCOUNT_ERROR, exception.getMessage());
    }

    @Test
    public void testChangePinSubmitSuccess() throws Exception {
        when(pinUtil.genRandomKey()).thenReturn(mock(SecretKey.class));
        when(pinUtil.genPinBlock(anyString(), any(SecretKey.class))).thenReturn("pinBlock");
        when(pinUtil.getCDV(any(SecretKey.class))).thenReturn("CDV123456");
        when(pinUtil.encryptSingleUseKey(any(SecretKey.class), anyString(), anyString(), anyString()))
                .thenReturn("encryptedKey");

        when(accountDetails.getAccountId()).thenReturn("12345");
        when(customerDetails.getId()).thenReturn("cust123");

        when(changePinResponse.getErrorMsgs()).thenReturn(null);
        when(changePinService.getSessionProvider().getSessionCustomer()).thenReturn(customerDetails);

        BaseMsecbffResponse response = changePinService.changePinSubmit("1234", "1234");
        assertNotNull(response);
        assertEquals(SUCCESS, response.getStatus());
    }

    @Test
    public void testChangePinSubmitInvalidPin() {
        Exception exception = assertThrows(ValidateUtil.ValidationException.class, () -> {
            changePinService.changePinSubmit("0123", "0123");
        });

        assertEquals("MS122", exception.getMessage());
    }

    @Test
    public void testChangePinSubmitSessionExpired() {
        when(pinUtil.checkPinSessionExpired(anyLong(), anyString())).thenReturn(true);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            changePinService.changePinSubmit("1234", "1234");
        });

        assertEquals(PINEXPIRED, exception.getMessage());
    }

    @Test
    public void testChangePinSubmitException() throws Exception {
        when(pinUtil.genRandomKey()).thenThrow(new Exception("Key generation failed"));

        Exception exception = assertThrows(ValidateUtil.ValidationException.class, () -> {
            changePinService.changePinSubmit("1234", "1234");
        });

        assertEquals(GENERAL_ERROR, exception.getMessage());
    }

    @Test
    public void testHandleChangePinRedirect() {
        ModelAndView modelAndView = changePinService.handelChangePin();
        assertEquals("redirect:index.html#/pin/change-pin", modelAndView.getViewName());
    }

    @Test
    public void testHandleChangePinServlet() {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        when(mockRequest.getParameter("pinNumber")).thenReturn("1234");
        when(mockRequest.getParameter("retryPinNumber")).thenReturn("1234");

        ModelAndView modelAndView = changePinService.handelChangePinServlet(mockRequest, mockResponse);
        assertEquals("redirect:index.html#/pin/change-pin", modelAndView.getViewName());
    }

    @Test
    public void testIsAuthorizedTrue() {
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);
        assertTrue(changePinService.isAuthorized());
    }

    @Test
    public void testIsAuthorizedFalse() {
        when(accountDetails.isAllowedPinManagement()).thenReturn(false);
        assertFalse(changePinService.isAuthorized());
    }
}
