import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.infrastructure.util.MsecbffConstants;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.AccountHelper;
import com.td.mbna.msec.deeplink.model.DeepLinkBtData;
import com.td.mbna.msec.offers.domain.OfferDetails;

@RunWith(MockitoJUnitRunner.class)
public class DeepLinkServiceImplTest {

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @InjectMocks
    private DeepLinkServiceImpl deepLinkService;

    private AccountDetails account;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        account = new AccountDetails();
        account.setAccountId("12345");
        account.setTopBTOffer(new OfferDetails());

        when(sessionProvider.getAccounts()).thenReturn(Collections.singletonList(account));
    }

    @Test
    public void testHandleDL_nullTarget() {
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn(null);

        String result = deepLinkService.handleDL(request, response);

        assertNull(result);
    }

    @Test
    public void testHandleDL_eligibleForPaperless() {
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn(MsecbffConstants.DL_PAPERLESS);
        when(sessionProvider.getAccounts()).thenReturn(Collections.singletonList(account));
        when(sessionProvider.getSessionCustomer()).thenReturn(new AccountDetails());
        when(sessionProvider.getCurrentAccount()).thenReturn(account);

        String result = deepLinkService.handleDL(request, response);

        assertNotNull(result);
    }

    @Test
    public void testGetDLTargetAction_nullDlTarget() {
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn(null);

        String result = deepLinkService.getDLTargetAction(request);

        assertEquals(MsecbffConstants.FORWARDTO_ACCOUNT_OVERVIEW, result);
    }

    @Test
    public void testGetBtData_nullAccount() {
        when(sessionProvider.getCurrentAccount()).thenReturn(null);

        DeepLinkBtData btData = deepLinkService.getBtData();

        assertNotNull(btData);
        assertNull(btData.getTopBTOfferId());
    }

    @Test
    public void testGetAnualInterestRate_withBtOffers() {
        when(account.getBtOffers()).thenReturn(null);

        BigDecimal result = deepLinkService.getAnualInterestRate(account);

        assertNull(result);
    }

    @Test
    public void testIsDeepLinkEligibleForPaperless() {
        when(sessionProvider.getAccounts()).thenReturn(Collections.singletonList(account));
        boolean result = deepLinkService.isDeepLinkEligibleForPaperless();
        assertTrue(result);
    }

    @Test
    public void testIsDeepLinkEligible_withDLTarget() {
        when(account.getAccountId()).thenReturn("12345");
        boolean result = deepLinkService.isDeepLinkEligible(MsecbffConstants.DL_ACTIVECARD, account);
        assertTrue(result);
    }

    // Add more tests for all the other private methods through public methods
}
