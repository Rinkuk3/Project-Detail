package com.td.mbna.msec.kyc.resource;

import com.td.mbna.msec.kyc.application.KycService;
import com.td.mbna.msec.kyc.dto.KycBanner;
import com.td.mbna.msec.kyc.dto.KycEligibilityRequest;
import com.td.mbna.msec.kyc.dto.KycEligibilityResponse;
import com.td.mbna.msec.kyc.dto.KycInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import javax.servlet.http.HttpServletRequest;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class KycResourceTest {

    @InjectMocks
    private KycResource kycResource;

    @Mock
    private KycService kycService;

    private HttpServletRequest request;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        request = mock(HttpServletRequest.class);
    }

    @Test
    void testEligibility() {
        KycEligibilityRequest kycEligibilityRequest = new KycEligibilityRequest();
        KycEligibilityResponse kycEligibilityResponse = new KycEligibilityResponse();

        when(kycService.eligibility(any(KycEligibilityRequest.class))).thenReturn(kycEligibilityResponse);

        KycEligibilityResponse response = kycResource.eligibility(kycEligibilityRequest);

        verify(kycService, times(1)).eligibility(kycEligibilityRequest);
        assert response.equals(kycEligibilityResponse);
    }

    @Test
    void testInfo() {
        String pageId = "testPage";
        KycInfo kycInfo = new KycInfo();

        when(kycService.retrieveKycInfo(pageId)).thenReturn(kycInfo);

        KycInfo response = kycResource.info(pageId);

        verify(kycService, times(1)).retrieveKycInfo(pageId);
        assert response.equals(kycInfo);
    }

    @Test
    void testUpdate() {
        KycInfo kycUpdateRequest = new KycInfo();
        KycInfo kycUpdatedInfo = new KycInfo();

        when(kycService.updateKycInfo(any(KycInfo.class))).thenReturn(kycUpdatedInfo);

        KycInfo response = kycResource.update(kycUpdateRequest);

        verify(kycService, times(1)).updateKycInfo(kycUpdateRequest);
        assert response.equals(kycUpdatedInfo);
    }

    @Test
    void testKycbanner() {
        String accountId = "12345";
        KycBanner kycBanner = new KycBanner();

        when(kycService.retrieveKycBanner(anyString(), any(HttpServletRequest.class))).thenReturn(kycBanner);

        KycBanner response = kycResource.kycbanner(accountId, request);

        verify(kycService, times(1)).retrieveKycBanner(accountId, request);
        assert response.equals(kycBanner);
    }
}
