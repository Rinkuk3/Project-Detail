package com.td.mbna.msec.midtier.pinmanagement;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import com.td.api.kms.response.AddEncryptionJobRs;
import com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinRequest;
import com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinResponse;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import com.td.mbna.msec.midtier.service.EmailInfo;
import com.td.mbna.msec.midtier.service.MsecValidator;
import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.util.BackEndSrvcUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.TDRestServiceUtil;
import com.td.mbna.msec.midtier.service.MbnaAd;

public class ChangePinOperationTest {

    @InjectMocks
    private ChangePinOperationImpl changePinOperation;

    @Mock
    private TDRestServiceUtil tdRestServiceUtil;
    
    @Mock
    private MbnaAd mbnaAd;
    
    @Mock
    private ChangePinRequest request;
    
    @Mock
    private ChangePinResponse changePinResponse;

    private String token;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        token = "sampleToken";

        // Mock the request and necessary fields
        when(request.getRequestPayload()).thenReturn(mock(ChangePinRequest.Payload.class));
        when(request.getRequestPayload().getSingleUseKey()).thenReturn("singleUseKey");
        when(request.getRequestPayload().getCdv()).thenReturn("cdv");
        when(request.getRequestPayload().getZpkAlias()).thenReturn("zpkAlias");
        when(request.getRequestPayload().getWtkAlias()).thenReturn("wtkAlias");
        when(request.getRequestPayload().getEncryptedPinBlock()).thenReturn("encryptedPinBlock");
        when(request.getCardNum()).thenReturn("1234567890");
        when(request.isMultiCard()).thenReturn(false);
    }

    @Test
    public void testInvokeService() throws Exception {
        // Mocking the response for encryption request
        AddEncryptionJobRs encryptedResponse = mock(AddEncryptionJobRs.class);
        when(encryptedResponse.getCipherData()).thenReturn(mock(AddEncryptionJobRs.CipherData.class));
        when(encryptedResponse.getCipherData().getCipherTxt()).thenReturn("encryptedPin");

        when(tdRestServiceUtil.invokeRestService(any(), any(), eq(AddEncryptionJobRs.class), eq(token))).thenReturn(encryptedResponse);

        // Mock the response from MbnaAd updatePin
        when(mbnaAd.updatePin(any(), any(), any(), any(), eq(token))).thenReturn(changePinResponse);

        // Call the method
        ChangePinResponse response = changePinOperation.invokeService(request, token);

        // Assertions
        assertNotNull(response);
        verify(tdRestServiceUtil).invokeRestService(any(), any(), eq(AddEncryptionJobRs.class), eq(token));
        verify(mbnaAd).updatePin(any(), any(), eq("encryptedPin"), any(), eq(token));
    }

    @Test
    public void testRequiresDisclosureConsent() {
        assertFalse(changePinOperation.requiresDisclosureConsent());
    }

    @Test
    public void testGenerateAutoComment() {
        BaseRequest baseRequest = mock(BaseRequest.class);
        BaseResponse baseResponse = mock(BaseResponse.class);

        // Mock CustomerNotesUtil.getHeaderContent()
        when(CustomerNotesUtil.getHeaderContent(baseRequest, "Change PIN")).thenReturn("Test Header");

        List<String> comments = changePinOperation.createAutoComment(baseRequest, baseResponse);

        assertEquals(1, comments.size());
        assertEquals("Test Header", comments.get(0));
    }

    @Test
    public void testGetEmailInfoBean() {
        assertNull(changePinOperation.getEmailInfoBean(mock(BaseRequest.class), mock(BaseResponse.class)));
    }

    @Test
    public void testGetValidator() {
        assertNull(changePinOperation.getValidator());
    }
}
