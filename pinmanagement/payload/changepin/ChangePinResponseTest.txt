package com.td.mbna.msec.midtier.pinmanagement.payload.changepin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ChangePinResponseTest {

    @Test
    public void testConstructor() {
        ChangePinResponse response = new ChangePinResponse();
        assertNotNull(response.getResponsePayload());
        assertNull(response.getStatus());
        assertNull(response.getErrorMessages());
    }

    @Test
    public void testSetAndGetResponsePayload() {
        ChangePinResponse response = new ChangePinResponse();
        ResponsePayload payload = new ResponsePayload();  // Assuming ResponsePayload is a valid class
        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    public void testToString() {
        ChangePinResponse response = new ChangePinResponse();
        response.setStatus("status");
        response.setErrorMessages("errorMessages");
        response.setResponsePayload(new ResponsePayload());  // Assuming ResponsePayload is a valid class

        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinResponse@" + 
                                Integer.toHexString(System.identityHashCode(response)) + 
                                "[status=status,errorMsgs=errorMessages,responsePayload=" + response.getResponsePayload() + "]";
        assertEquals(expectedString, response.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        ChangePinResponse response1 = new ChangePinResponse();
        response1.setStatus("status");
        response1.setErrorMessages("errorMessages");
        response1.setResponsePayload(new ResponsePayload());  // Assuming ResponsePayload is a valid class

        ChangePinResponse response2 = new ChangePinResponse();
        response2.setStatus("status");
        response2.setErrorMessages("errorMessages");
        response2.setResponsePayload(new ResponsePayload());  // Assuming ResponsePayload is a valid class

        assertTrue(response1.equals(response2));
        assertEquals(response1.hashCode(), response2.hashCode());
    }

    @Test
    public void testEqualsWithNull() {
        ChangePinResponse response1 = new ChangePinResponse();
        ChangePinResponse response2 = null;
        assertFalse(response1.equals(response2));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        ChangePinResponse response1 = new ChangePinResponse();
        String nonResponseObject = "NonResponseObject";
        assertFalse(response1.equals(nonResponseObject));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        ChangePinResponse response1 = new ChangePinResponse();
        response1.setStatus("status");

        ChangePinResponse response2 = new ChangePinResponse();
        response2.setStatus("otherStatus");

        assertFalse(response1.equals(response2));
    }

    @Test
    public void testHashCodeWithDifferentObjects() {
        ChangePinResponse response1 = new ChangePinResponse();
        response1.setStatus("status");

        ChangePinResponse response2 = new ChangePinResponse();
        response2.setStatus("otherStatus");

        assertNotEquals(response1.hashCode(), response2.hashCode());
    }
}
