package com.td.mbna.msec.midtier.pinmanagement.payload.changepin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class RequestPayloadTest {

    @Test
    public void testSetAndGetCustId() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCustId("custId123");
        assertEquals("custId123", requestPayload.getCustId());
    }

    @Test
    public void testSetAndGetAcctId() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setAcctId("acctId123");
        assertEquals("acctId123", requestPayload.getAcctId());
    }

    @Test
    public void testSetAndGetEncryptedPinBlock() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setEncryptedPinBlock("encryptedPinBlock123");
        assertEquals("encryptedPinBlock123", requestPayload.getEncryptedPinBlock());
    }

    @Test
    public void testSetAndGetSingleUseKey() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setSingleUseKey("singleUseKey123");
        assertEquals("singleUseKey123", requestPayload.getSingleUseKey());
    }

    @Test
    public void testSetAndGetZpkAlias() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setZpkAlias("zpkAlias123");
        assertEquals("zpkAlias123", requestPayload.getZpkAlias());
    }

    @Test
    public void testSetAndGetWtkAlias() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setWtkAlias("wtkAlias123");
        assertEquals("wtkAlias123", requestPayload.getWtkAlias());
    }

    @Test
    public void testSetAndGetCdv() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCdv("cdv123");
        assertEquals("cdv123", requestPayload.getCdv());
    }

    @Test
    public void testSetAndGetConfirmed() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setConfirmed(true);
        assertTrue(requestPayload.getConfirmed());
    }

    @Test
    public void testSetAndGetPartyKey() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setPartyKey("partyKey123");
        assertEquals("partyKey123", requestPayload.getPartyKey());
    }

    @Test
    public void testToString() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCustId("custId123");
        requestPayload.setAcctId("acctId123");
        requestPayload.setEncryptedPinBlock("encryptedPinBlock123");
        requestPayload.setSingleUseKey("singleUseKey123");
        requestPayload.setZpkAlias("zpkAlias123");
        requestPayload.setWtkAlias("wtkAlias123");
        requestPayload.setCdv("cdv123");
        requestPayload.setConfirmed(true);
        requestPayload.setPartyKey("partyKey123");

        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.changepin.RequestPayload@" + 
                                Integer.toHexString(System.identityHashCode(requestPayload)) + 
                                "[custId=custId123,acctId=acctId123,encryptedPinBlock=encryptedPinBlock123,singleUseKey=singleUseKey123,zpkAlias=zpkAlias123,wtkAlias=wtkAlias123,cdv=cdv123,confirmed=true]";
        assertEquals(expectedString, requestPayload.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("custId123");
        requestPayload1.setAcctId("acctId123");
        requestPayload1.setEncryptedPinBlock("encryptedPinBlock123");
        requestPayload1.setSingleUseKey("singleUseKey123");
        requestPayload1.setZpkAlias("zpkAlias123");
        requestPayload1.setWtkAlias("wtkAlias123");
        requestPayload1.setCdv("cdv123");
        requestPayload1.setConfirmed(true);
        requestPayload1.setPartyKey("partyKey123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("custId123");
        requestPayload2.setAcctId("acctId123");
        requestPayload2.setEncryptedPinBlock("encryptedPinBlock123");
        requestPayload2.setSingleUseKey("singleUseKey123");
        requestPayload2.setZpkAlias("zpkAlias123");
        requestPayload2.setWtkAlias("wtkAlias123");
        requestPayload2.setCdv("cdv123");
        requestPayload2.setConfirmed(true);
        requestPayload2.setPartyKey("partyKey123");

        assertTrue(requestPayload1.equals(requestPayload2));
        assertEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
    }

    @Test
    public void testEqualsWithNull() {
        RequestPayload requestPayload = new RequestPayload();
        assertFalse(requestPayload.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        RequestPayload requestPayload = new RequestPayload();
        String nonRequestPayload = "NonRequestPayload";
        assertFalse(requestPayload.equals(nonRequestPayload));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("custId123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("otherCustId");

        assertFalse(requestPayload1.equals(requestPayload2));
    }

    @Test
    public void testHashCodeWithDifferentObjects() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("custId123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("otherCustId");

        assertNotEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
    }
}
