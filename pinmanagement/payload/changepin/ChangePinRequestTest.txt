package com.td.mbna.msec.midtier.pinmanagement.payload.changepin;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ChangePinRequestTest {

    @Test
    public void testConstructor() {
        ChangePinRequest request = new ChangePinRequest();
        assertNull(request.getSessionInfo());
        assertNull(request.getCustId());
        assertNull(request.getAliasCustId());
        assertNull(request.getAcctNum());
        assertNull(request.getAcctType());
        assertNull(request.getLanguagePref());
        assertNull(request.getAuditInfo());
        assertNull(request.getIsPrimaryUser());
        assertNull(request.getReserved1());
        assertNull(request.getCustInterface());
        assertNull(request.getRequestPayload());
    }

    @Test
    public void testSetAndGetRequestPayload() {
        ChangePinRequest request = new ChangePinRequest();
        RequestPayload payload = new RequestPayload();  // Assuming RequestPayload is a valid class
        request.setRequestPayload(payload);
        assertEquals(payload, request.getRequestPayload());
    }

    @Test
    public void testToString() {
        ChangePinRequest request = new ChangePinRequest();
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("en");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser("true");
        request.setReserved1("reserved1");
        request.setCustInterface("web");
        request.setRequestPayload(new RequestPayload());  // Assuming RequestPayload is a valid class

        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.changepin.ChangePinRequest@" + 
                                Integer.toHexString(System.identityHashCode(request)) + 
                                "[sessionInfo=sessionInfo,custId=custId,aliasCustId=aliasCustId,acctNum=acctNum," +
                                "acctType=acctType,languagePref=en,auditInfo=auditInfo,isPrimaryUser=true,reserved1=reserved1," +
                                "custInterface=web,requestPayload=" + request.getRequestPayload() + "]";
        assertEquals(expectedString, request.toString());
    }

    @Test
    public void testEqualsAndHashCode() {
        ChangePinRequest request1 = new ChangePinRequest();
        request1.setSessionInfo("sessionInfo");
        request1.setCustId("custId");
        request1.setAliasCustId("aliasCustId");
        request1.setAcctNum("acctNum");
        request1.setAcctType("acctType");
        request1.setLanguagePref("en");
        request1.setAuditInfo("auditInfo");
        request1.setIsPrimaryUser("true");
        request1.setReserved1("reserved1");
        request1.setCustInterface("web");
        request1.setRequestPayload(new RequestPayload());  // Assuming RequestPayload is a valid class

        ChangePinRequest request2 = new ChangePinRequest();
        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");
        request2.setAliasCustId("aliasCustId");
        request2.setAcctNum("acctNum");
        request2.setAcctType("acctType");
        request2.setLanguagePref("en");
        request2.setAuditInfo("auditInfo");
        request2.setIsPrimaryUser("true");
        request2.setReserved1("reserved1");
        request2.setCustInterface("web");
        request2.setRequestPayload(new RequestPayload());  // Assuming RequestPayload is a valid class

        assertTrue(request1.equals(request2));
        assertEquals(request1.hashCode(), request2.hashCode());
    }

    @Test
    public void testEqualsWithNull() {
        ChangePinRequest request1 = new ChangePinRequest();
        ChangePinRequest request2 = null;
        assertFalse(request1.equals(request2));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        ChangePinRequest request1 = new ChangePinRequest();
        String nonRequestObject = "NonRequestObject";
        assertFalse(request1.equals(nonRequestObject));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        ChangePinRequest request1 = new ChangePinRequest();
        request1.setSessionInfo("sessionInfo");

        ChangePinRequest request2 = new ChangePinRequest();
        request2.setSessionInfo("otherSessionInfo");

        assertFalse(request1.equals(request2));
    }

    @Test
    public void testHashCodeWithDifferentObjects() {
        ChangePinRequest request1 = new ChangePinRequest();
        request1.setSessionInfo("sessionInfo");

        ChangePinRequest request2 = new ChangePinRequest();
        request2.setSessionInfo("otherSessionInfo");

        assertNotEquals(request1.hashCode(), request2.hashCode());
    }
}
