package com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class UnblockPinRequestTest {

    @Test
    public void testSetAndGetRequestPayload() {
        UnblockPinRequest unblockPinRequest = new UnblockPinRequest();
        RequestPayload requestPayload = new RequestPayload();
        unblockPinRequest.setRequestPayload(requestPayload);

        assertEquals(requestPayload, unblockPinRequest.getRequestPayload());
    }

    @Test
    public void testToString() {
        UnblockPinRequest unblockPinRequest = new UnblockPinRequest();
        RequestPayload requestPayload = new RequestPayload();
        unblockPinRequest.setRequestPayload(requestPayload);
        
        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.UnblockPinRequest@" +
                                Integer.toHexString(System.identityHashCode(unblockPinRequest)) + 
                                "[sessionInfo=<null>,custId=<null>,aliasCustId=<null>,acctNum=<null>,acctType=<null>,languagePref=<null>,auditInfo=<null>,isPrimaryUser=<null>,reserved1=<null>,custInterface=<null>,requestPayload=" + requestPayload + "]";
        assertEquals(expectedString, unblockPinRequest.toString());
    }

    @Test
    public void testHashCode() {
        UnblockPinRequest unblockPinRequest1 = new UnblockPinRequest();
        UnblockPinRequest unblockPinRequest2 = new UnblockPinRequest();
        
        RequestPayload requestPayload1 = new RequestPayload();
        unblockPinRequest1.setRequestPayload(requestPayload1);
        unblockPinRequest2.setRequestPayload(requestPayload1);

        assertEquals(unblockPinRequest1.hashCode(), unblockPinRequest2.hashCode());

        RequestPayload requestPayload2 = new RequestPayload();
        unblockPinRequest2.setRequestPayload(requestPayload2);

        assertNotEquals(unblockPinRequest1.hashCode(), unblockPinRequest2.hashCode());
    }

    @Test
    public void testEquals() {
        UnblockPinRequest unblockPinRequest1 = new UnblockPinRequest();
        UnblockPinRequest unblockPinRequest2 = new UnblockPinRequest();

        RequestPayload requestPayload1 = new RequestPayload();
        unblockPinRequest1.setRequestPayload(requestPayload1);
        unblockPinRequest2.setRequestPayload(requestPayload1);

        assertTrue(unblockPinRequest1.equals(unblockPinRequest2));

        RequestPayload requestPayload2 = new RequestPayload();
        unblockPinRequest2.setRequestPayload(requestPayload2);

        assertFalse(unblockPinRequest1.equals(unblockPinRequest2));
    }

    @Test
    public void testEqualsWithNull() {
        UnblockPinRequest unblockPinRequest = new UnblockPinRequest();

        assertFalse(unblockPinRequest.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        UnblockPinRequest unblockPinRequest = new UnblockPinRequest();

        assertFalse(unblockPinRequest.equals("NonUnblockPinRequest"));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        UnblockPinRequest unblockPinRequest1 = new UnblockPinRequest();
        UnblockPinRequest unblockPinRequest2 = new UnblockPinRequest();

        RequestPayload requestPayload1 = new RequestPayload();
        unblockPinRequest1.setRequestPayload(requestPayload1);

        RequestPayload requestPayload2 = new RequestPayload();
        unblockPinRequest2.setRequestPayload(requestPayload2);

        assertFalse(unblockPinRequest1.equals(unblockPinRequest2));
    }

    @Test
    public void testEqualsWithSameObject() {
        UnblockPinRequest unblockPinRequest = new UnblockPinRequest();
        
        assertTrue(unblockPinRequest.equals(unblockPinRequest));
    }
}
