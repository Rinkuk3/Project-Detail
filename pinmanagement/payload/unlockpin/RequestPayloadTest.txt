package com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class RequestPayloadTest {

    @Test
    public void testSetAndGetCustId() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCustId("cust123");
        assertEquals("cust123", requestPayload.getCustId());
    }

    @Test
    public void testSetAndGetAcctId() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setAcctId("acct123");
        assertEquals("acct123", requestPayload.getAcctId());
    }

    @Test
    public void testSetAndGetSequenceNumber() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setSequenceNumber("seq123");
        assertEquals("seq123", requestPayload.getSequenceNumber());
    }

    @Test
    public void testSetAndGetSendPINChgScript() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setSendPINChgScript(true);
        assertTrue(requestPayload.getSendPINChgScript());
        
        requestPayload.setSendPINChgScript(false);
        assertFalse(requestPayload.getSendPINChgScript());
    }

    @Test
    public void testSetAndGetPartyKey() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setPartyKey("partyKey123");
        assertEquals("partyKey123", requestPayload.getPartyKey());
    }

    @Test
    public void testToString() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCustId("cust123");
        requestPayload.setAcctId("acct123");
        requestPayload.setSequenceNumber("seq123");
        requestPayload.setSendPINChgScript(true);
        requestPayload.setPartyKey("partyKey123");

        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.RequestPayload@" +
                                Integer.toHexString(System.identityHashCode(requestPayload)) + 
                                "[custId=cust123,acctId=acct123,sequenceNumber=seq123,sendPINChgScript=true]";
        assertEquals(expectedString, requestPayload.toString());
    }

    @Test
    public void testHashCode() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("cust123");
        requestPayload1.setAcctId("acct123");
        requestPayload1.setSequenceNumber("seq123");
        requestPayload1.setSendPINChgScript(true);
        requestPayload1.setPartyKey("partyKey123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("cust123");
        requestPayload2.setAcctId("acct123");
        requestPayload2.setSequenceNumber("seq123");
        requestPayload2.setSendPINChgScript(true);
        requestPayload2.setPartyKey("partyKey123");

        assertEquals(requestPayload1.hashCode(), requestPayload2.hashCode());

        requestPayload2.setCustId("cust456");
        assertNotEquals(requestPayload1.hashCode(), requestPayload2.hashCode());
    }

    @Test
    public void testEquals() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("cust123");
        requestPayload1.setAcctId("acct123");
        requestPayload1.setSequenceNumber("seq123");
        requestPayload1.setSendPINChgScript(true);
        requestPayload1.setPartyKey("partyKey123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("cust123");
        requestPayload2.setAcctId("acct123");
        requestPayload2.setSequenceNumber("seq123");
        requestPayload2.setSendPINChgScript(true);
        requestPayload2.setPartyKey("partyKey123");

        assertTrue(requestPayload1.equals(requestPayload2));

        requestPayload2.setCustId("cust456");
        assertFalse(requestPayload1.equals(requestPayload2));
    }

    @Test
    public void testEqualsWithNull() {
        RequestPayload requestPayload = new RequestPayload();
        requestPayload.setCustId("cust123");

        assertFalse(requestPayload.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        RequestPayload requestPayload = new RequestPayload();

        assertFalse(requestPayload.equals("NonRequestPayload"));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        RequestPayload requestPayload1 = new RequestPayload();
        requestPayload1.setCustId("cust123");
        requestPayload1.setAcctId("acct123");

        RequestPayload requestPayload2 = new RequestPayload();
        requestPayload2.setCustId("cust123");
        requestPayload2.setAcctId("acct456");

        assertFalse(requestPayload1.equals(requestPayload2));
    }
}
