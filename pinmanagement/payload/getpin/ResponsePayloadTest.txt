package com.td.mbna.msec.midtier.pinmanagement.payload.getpin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ResponsePayloadTest {

    @Test
    public void testSetAndGetEncryptedPinBlock() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setEncryptedPinBlock("encryptedPinBlock123");
        assertEquals("encryptedPinBlock123", responsePayload.getEncryptedPinBlock());
    }

    @Test
    public void testSetAndGetKmsSingleUseKey() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setKmsSingleUseKey("singleUseKey123");
        assertEquals("singleUseKey123", responsePayload.getKmsSingleUseKey());
    }

    @Test
    public void testSetAndGetKmsCDV() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setKmsCDV("kmsCDV123");
        assertEquals("kmsCDV123", responsePayload.getKmsCDV());
    }

    @Test
    public void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload.setKmsSingleUseKey("singleUseKey123");
        responsePayload.setKmsCDV("kmsCDV123");

        String expectedString = "com.td.mbna.msec.midtier.pinmanagement.payload.getpin.ResponsePayload@" +
                                Integer.toHexString(System.identityHashCode(responsePayload)) + 
                                "[encryptedPinBlock=encryptedPinBlock123,kmsSingleUseKey=singleUseKey123,kmsCDV=kmsCDV123]";
        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    public void testHashCode() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload1.setKmsSingleUseKey("singleUseKey123");
        responsePayload1.setKmsCDV("kmsCDV123");

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload2.setKmsSingleUseKey("singleUseKey123");
        responsePayload2.setKmsCDV("kmsCDV123");

        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        responsePayload2.setEncryptedPinBlock("differentPinBlock");
        assertNotEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
    }

    @Test
    public void testEquals() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload1.setKmsSingleUseKey("singleUseKey123");
        responsePayload1.setKmsCDV("kmsCDV123");

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload2.setKmsSingleUseKey("singleUseKey123");
        responsePayload2.setKmsCDV("kmsCDV123");

        assertTrue(responsePayload1.equals(responsePayload2));

        responsePayload2.setEncryptedPinBlock("differentPinBlock");
        assertFalse(responsePayload1.equals(responsePayload2));
    }

    @Test
    public void testEqualsWithNull() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setEncryptedPinBlock("encryptedPinBlock123");

        assertFalse(responsePayload.equals(null));
    }

    @Test
    public void testEqualsWithDifferentClass() {
        ResponsePayload responsePayload = new ResponsePayload();

        assertFalse(responsePayload.equals("NonResponsePayload"));
    }

    @Test
    public void testEqualsWithDifferentValues() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setEncryptedPinBlock("encryptedPinBlock123");
        responsePayload1.setKmsSingleUseKey("singleUseKey123");

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setEncryptedPinBlock("differentPinBlock");
        responsePayload2.setKmsSingleUseKey("singleUseKey123");

        assertFalse(responsePayload1.equals(responsePayload2));
    }
}
