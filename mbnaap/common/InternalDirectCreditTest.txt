package com.td.api.mbnaap.common;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class InternalDirectCreditTest {

    @Test
    void testGettersAndSetters() {
        InternalDirectCredit internalDirectCredit = new InternalDirectCredit();

        // Create mock objects for the fields
        CreditCardAgreementAltkey creditCardAgreementAltkey = new CreditCardAgreementAltkey();
        creditCardAgreementAltkey.setCardNum("123456789");
        
        GenericAgreementAltkey genericAgreementAltkey = new GenericAgreementAltkey();
        genericAgreementAltkey.setAccountNum("987654321");

        GenericAccountAltkey genericAccountAltkey = new GenericAccountAltkey();
        genericAccountAltkey.setAccountNum("567890123");

        MbpdExtension mbpdExtension = new MbpdExtension();
        mbpdExtension.setChequingAgreementHolderFullName("John Doe");

        // Set values using setters
        internalDirectCredit.setCreditCardAgreementAltkey(creditCardAgreementAltkey);
        internalDirectCredit.setGenericAgreementAltkey(genericAgreementAltkey);
        internalDirectCredit.setTimePeriodCd("MONTHLY");
        internalDirectCredit.setTimePeriodNum("12");
        internalDirectCredit.setPaymentTypeName("Credit");
        internalDirectCredit.setCycleNum("1");
        internalDirectCredit.setFrequencyCd("WEEKLY");
        internalDirectCredit.setDueDayNum("5");
        internalDirectCredit.setDueAmt(500.0);
        internalDirectCredit.setRecurrenceCnt(10);
        internalDirectCredit.setArrangementHoldInd(true);
        internalDirectCredit.setTelephoneChannelInd(false);
        internalDirectCredit.setArrangementStartDt("2024-01-01");
        internalDirectCredit.setConfirmationLetterRequiredInd(true);
        internalDirectCredit.setCreditCardAgreementCycleDateNum("25");
        internalDirectCredit.setRecurrenceEndDt("2025-01-01");
        internalDirectCredit.setMbpdExtension(mbpdExtension);
        internalDirectCredit.setBranchAddressTxt("123 Bank Street");
        internalDirectCredit.setGenericAccountAltkey(genericAccountAltkey);

        // Assertions to check getter values
        assertEquals("123456789", internalDirectCredit.getCreditCardAgreementAltkey().getCardNum());
        assertEquals("987654321", internalDirectCredit.getGenericAgreementAltkey().getAccountNum());
        assertEquals("MONTHLY", internalDirectCredit.getTimePeriodCd());
        assertEquals("12", internalDirectCredit.getTimePeriodNum());
        assertEquals("Credit", internalDirectCredit.getPaymentTypeName());
        assertEquals("1", internalDirectCredit.getCycleNum());
        assertEquals("WEEKLY", internalDirectCredit.getFrequencyCd());
        assertEquals("5", internalDirectCredit.getDueDayNum());
        assertEquals(500.0, internalDirectCredit.getDueAmt());
        assertEquals(10, internalDirectCredit.getRecurrenceCnt());
        assertTrue(internalDirectCredit.getArrangementHoldInd());
        assertFalse(internalDirectCredit.getTelephoneChannelInd());
        assertEquals("2024-01-01", internalDirectCredit.getArrangementStartDt());
        assertTrue(internalDirectCredit.getConfirmationLetterRequiredInd());
        assertEquals("25", internalDirectCredit.getCreditCardAgreementCycleDateNum());
        assertEquals("2025-01-01", internalDirectCredit.getRecurrenceEndDt());
        assertEquals("123 Bank Street", internalDirectCredit.getBranchAddressTxt());
        assertEquals("567890123", internalDirectCredit.getGenericAccountAltkey().getAccountNum());
    }

    @Test
    void testToString() {
        InternalDirectCredit internalDirectCredit = new InternalDirectCredit();
        internalDirectCredit.setTimePeriodCd("MONTHLY");
        internalDirectCredit.setTimePeriodNum("12");
        internalDirectCredit.setPaymentTypeName("Credit");

        String expected = "InternalDirectCredit(creditCardAgreementAltkey=null, genericAgreementAltkey=null, " +
                "timePeriodCd=MONTHLY, timePeriodNum=12, paymentTypeName=Credit, cycleNum=null, frequencyCd=null, " +
                "dueDayNum=null, dueAmt=null, recurrenceCnt=null, arrangementHoldInd=null, telephoneChannelInd=null, " +
                "arrangementStartDt=null, confirmationLetterRequiredInd=null, creditCardAgreementCycleDateNum=null, " +
                "recurrenceEndDt=null, mbpdExtension=null, branchAddressTxt=null, genericAccountAltkey=null)";
        assertEquals(expected, internalDirectCredit.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        InternalDirectCredit internalDirectCredit1 = new InternalDirectCredit();
        internalDirectCredit1.setTimePeriodCd("MONTHLY");
        internalDirectCredit1.setTimePeriodNum("12");
        internalDirectCredit1.setPaymentTypeName("Credit");

        InternalDirectCredit internalDirectCredit2 = new InternalDirectCredit();
        internalDirectCredit2.setTimePeriodCd("MONTHLY");
        internalDirectCredit2.setTimePeriodNum("12");
        internalDirectCredit2.setPaymentTypeName("Credit");

        assertTrue(internalDirectCredit1.equals(internalDirectCredit2));
        assertEquals(internalDirectCredit1.hashCode(), internalDirectCredit2.hashCode());

        internalDirectCredit2.setPaymentTypeName("Debit");
        assertFalse(internalDirectCredit1.equals(internalDirectCredit2));
    }
}
