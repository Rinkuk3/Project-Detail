package com.td.mbna.msec.midtier.mbnaap.adaptor;

import com.td.api.mbnaap.common.*;
import com.td.api.mbpad.request.addconsent.AddConsentRequest;
import com.td.api.mbpad.request.addconsent.CreditCardAgreementPaymentInstruction;
import com.td.api.mbpad.request.adddirectcredit.AddDirectCreditRequest;
import com.td.api.mbpad.response.adddirectcredit.AddDirectCreditResponse;
import com.td.api.mbpad.response.retrievedirectcredit.RetrieveDirectCreditResponse;
import com.td.api.mbpad.response.retrievedirectcreditlist.RetrieveDirectCreditListResponse;
import com.td.mbna.msec.midtier.autopay.payload.addpad.AddPadRequest;
import com.td.mbna.msec.midtier.autopay.payload.addpad.AddPadResponse;
import com.td.mbna.msec.midtier.autopay.payload.checkpadenrolled.CheckPadEnrolledResponse;
import com.td.mbna.msec.midtier.autopay.payload.retrievepad.RetrievePadResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class MbnaAPAdaptorTest {

    @InjectMocks
    private MbnaAPAdaptor mbnaAPAdaptor;

    @Mock
    private RetrieveDirectCreditListResponse retrieveDirectCreditListResponse;

    @Mock
    private RetrieveDirectCreditResponse retrieveDirectCreditResponse;

    @Mock
    private AddPadRequest addPadRequest;

    @Mock
    private AddDirectCreditResponse addDirectCreditResponse;

    @Mock
    private DirectCredit directCredit;

    @Mock
    private InternalDirectCredit internalDirectCredit;

    @Mock
    private CreditCardAgreementAltkey creditCardAgreementAltkey;

    @Mock
    private GenericAgreementAltkey genericAgreementAltkey;

    @Mock
    private MbpdExtension mbpdExtension;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testCheckPadEnrolled_noDirectCredits() {
        when(retrieveDirectCreditListResponse.getDirectCredit()).thenReturn(null);
        CheckPadEnrolledResponse response = mbnaAPAdaptor.checkPadEnrolled(retrieveDirectCreditListResponse);
        assertFalse(response.getResponsePayload().isEnrolledForPad());
    }

    @Test
    void testCheckPadEnrolled_noActiveDirectCredits() {
        RetrieveDirectCredit directCredit = new RetrieveDirectCredit();
        directCredit.setStatusCd("INACTIVE");
        ArrayList<DirectCredit> directCredits = new ArrayList<>();
        directCredits.add(directCredit);
        when(retrieveDirectCreditListResponse.getDirectCredit()).thenReturn(directCredits);
        CheckPadEnrolledResponse response = mbnaAPAdaptor.checkPadEnrolled(retrieveDirectCreditListResponse);
        assertFalse(response.getResponsePayload().isEnrolledForPad());
    }

    @Test
    void testCheckPadEnrolled_activeDirectCredit() {
        DirectCredit dc = new DirectCredit();
        dc.setStatusCd("ACTIVE");
        dc.setArrangementId("12345");
        dc.setStatusStartDttm(new Date());
        ArrayList<DirectCredit> directCredits = new ArrayList<>();
        directCredits.add(dc);
        when(retrieveDirectCreditListResponse.getDirectCredit()).thenReturn(directCredits);
        CheckPadEnrolledResponse response = mbnaAPAdaptor.checkPadEnrolled(retrieveDirectCreditListResponse);
        assertTrue(response.getResponsePayload().isEnrolledForPad());
        assertEquals("12345", response.getResponsePayload().getArrangementId());
    }

    @Test
    void testGetRetrivePadResponse_noDirectCredit() {
        when(retrieveDirectCreditResponse.getDirectCredit()).thenReturn(null);
        RetrievePadResponse response = mbnaAPAdaptor.getRetrivePadResponse(retrieveDirectCreditResponse);
        assertNull(response.getResponsePayload().getStatusCd());
    }

    @Test
    void testGetRetrivePadResponse_withDirectCredit() {
        when(retrieveDirectCreditResponse.getDirectCredit()).thenReturn(directCredit);
        when(directCredit.getInternalDirectCredit()).thenReturn(internalDirectCredit);
        when(internalDirectCredit.getTimePeriodCd()).thenReturn("monthly");
        when(internalDirectCredit.getPaymentTypeName()).thenReturn("type");
        RetrievePadResponse response = mbnaAPAdaptor.getRetrivePadResponse(retrieveDirectCreditResponse);
        assertNotNull(response.getResponsePayload().getStatusCd());
    }

    @Test
    void testGetAddConsentRequest_nullAddPadRequest() {
        AddConsentRequest response = mbnaAPAdaptor.getAddConsentRequest(null, true);
        assertNull(response);
    }

    @Test
    void testGetAddConsentRequest_withAddPadRequest() {
        when(addPadRequest.getRequestPayload()).thenReturn(new AddPadRequest.Payload());
        AddConsentRequest response = mbnaAPAdaptor.getAddConsentRequest(addPadRequest, true);
        assertNotNull(response);
    }

    @Test
    void testGetAddDirectCreditRequest_nullAddPadRequest() {
        AddDirectCreditRequest response = mbnaAPAdaptor.getAddDirectCreditRequest(null);
        assertNull(response);
    }

    @Test
    void testGetAddDirectCreditRequest_withAddPadRequest() {
        when(addPadRequest.getRequestPayload()).thenReturn(new AddPadRequest.Payload());
        AddDirectCreditRequest response = mbnaAPAdaptor.getAddDirectCreditRequest(addPadRequest);
        assertNotNull(response);
    }

    @Test
    void testGetAddPadResponse() {
        when(addDirectCreditResponse.getArrangementId()).thenReturn("12345");
        AddPadResponse response = mbnaAPAdaptor.getAddPadResponse(addDirectCreditResponse);
        assertEquals("12345", response.getResponsePayload().getArrangementId());
    }
}
