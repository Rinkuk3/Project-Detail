package com.td.mbna.msec.midtier.autopay.payload.deletepad;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class DeletePadRequestTest {

    private DeletePadRequest deletePadRequest;
    private RequestPayload requestPayload;

    @BeforeEach
    void setUp() {
        deletePadRequest = new DeletePadRequest();
        requestPayload = new RequestPayload();
        requestPayload.setCardNum("1234567890");
        deletePadRequest.setRequestPayload(requestPayload);
    }

    @Test
    void testGetRequestPayload() {
        // Assertion
        assertEquals(requestPayload, deletePadRequest.getRequestPayload());
    }

    @Test
    void testSetRequestPayload() {
        // Setup
        RequestPayload newRequestPayload = new RequestPayload();
        newRequestPayload.setCardNum("0987654321");

        // Execution
        deletePadRequest.setRequestPayload(newRequestPayload);

        // Assertion
        assertEquals(newRequestPayload, deletePadRequest.getRequestPayload());
    }

    @Test
    void testToString() {
        // Execution
        String result = deletePadRequest.toString();

        // Assertion (Check if the string contains relevant fields)
        assertTrue(result.contains("sessionInfo"));
        assertTrue(result.contains("custId"));
        assertTrue(result.contains("requestPayload"));
    }

    @Test
    void testHashCode() {
        // Setup
        int expectedHashCode = deletePadRequest.hashCode();

        // Assertion (Check if hashCode is consistent)
        assertEquals(expectedHashCode, deletePadRequest.hashCode());
    }

    @Test
    void testEquals_SameObject() {
        // Assertion (Check equality with the same object)
        assertTrue(deletePadRequest.equals(deletePadRequest));
    }

    @Test
    void testEquals_DifferentObjectType() {
        // Setup
        Object obj = new Object();

        // Assertion (Check equality with an object of different type)
        assertFalse(deletePadRequest.equals(obj));
    }

    @Test
    void testEquals_NullObject() {
        // Assertion (Check equality with null)
        assertFalse(deletePadRequest.equals(null));
    }

    @Test
    void testEquals_EqualObjects() {
        // Setup
        DeletePadRequest anotherDeletePadRequest = new DeletePadRequest();
        anotherDeletePadRequest.setRequestPayload(requestPayload);

        // Assertion (Check equality with another object having same state)
        assertTrue(deletePadRequest.equals(anotherDeletePadRequest));
    }

    @Test
    void testEquals_DifferentRequestPayload() {
        // Setup
        RequestPayload newRequestPayload = new RequestPayload();
        newRequestPayload.setCardNum("0987654321");
        DeletePadRequest differentDeletePadRequest = new DeletePadRequest();
        differentDeletePadRequest.setRequestPayload(newRequestPayload);

        // Assertion (Check equality with an object having different requestPayload)
        assertFalse(deletePadRequest.equals(differentDeletePadRequest));
    }

    @Test
    void testEquals_DifferentSessionInfo() {
        // Setup
        deletePadRequest.setSessionInfo("session123");
        DeletePadRequest differentDeletePadRequest = new DeletePadRequest();
        differentDeletePadRequest.setSessionInfo("session456");

        // Assertion (Check equality with different sessionInfo)
        assertFalse(deletePadRequest.equals(differentDeletePadRequest));
    }
}
