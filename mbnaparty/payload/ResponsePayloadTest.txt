package com.td.api.mbna.msec.midtier.mbnaparty.payload;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    public void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testGetSetPagination() {
        Pagination pagination = new Pagination();
        responsePayload.setPagination(pagination);
        assertEquals(pagination, responsePayload.getPagination());
    }

    @Test
    public void testGetSetIndividual() {
        ArrayList<Individual> individualList = new ArrayList<>();
        individualList.add(new Individual());
        responsePayload.setIndividual(individualList);
        assertEquals(individualList, responsePayload.getIndividual());
    }

    @Test
    public void testToString() {
        Pagination pagination = new Pagination();
        ArrayList<Individual> individualList = new ArrayList<>();
        individualList.add(new Individual());

        responsePayload.setPagination(pagination);
        responsePayload.setIndividual(individualList);

        String str = responsePayload.toString();
        assertTrue(str.contains("pagination"));
        assertTrue(str.contains("individual"));
    }

    @Test
    public void testEqualsAndHashCode() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        Pagination pagination = new Pagination();
        ArrayList<Individual> individualList = new ArrayList<>();
        individualList.add(new Individual());

        responsePayload1.setPagination(pagination);
        responsePayload1.setIndividual(individualList);

        responsePayload2.setPagination(pagination);
        responsePayload2.setIndividual(individualList);

        assertEquals(responsePayload1, responsePayload2);
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        responsePayload2.setPagination(new Pagination());
        assertNotEquals(responsePayload1, responsePayload2);
    }
}
