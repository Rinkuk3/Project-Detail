package com.td.api.mbna.msec.midtier.mbnaparty.payload;

import com.td.mbna.msec.midtier.types.common.BaseResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class VerifyCardPartyResponseTest {

    private VerifyCardPartyResponse verifyCardPartyResponse;

    @BeforeEach
    public void setUp() {
        verifyCardPartyResponse = VerifyCardPartyResponse.builder().build();
    }

    @Test
    public void testGetSetResponsePayload() {
        ResponsePayload responsePayload = new ResponsePayload();
        verifyCardPartyResponse.setResponsePayload(responsePayload);
        assertEquals(responsePayload, verifyCardPartyResponse.getResponsePayload());
    }

    @Test
    public void testBuilder() {
        ResponsePayload responsePayload = new ResponsePayload();
        verifyCardPartyResponse = VerifyCardPartyResponse.builder()
                .responsePayload(responsePayload)
                .build();

        assertNotNull(verifyCardPartyResponse);
        assertEquals(responsePayload, verifyCardPartyResponse.getResponsePayload());
    }

    @Test
    public void testInheritance() {
        assertTrue(verifyCardPartyResponse instanceof BaseResponse);
    }

    @Test
    public void testEqualsAndHashCode() {
        ResponsePayload responsePayload = new ResponsePayload();
        VerifyCardPartyResponse response1 = VerifyCardPartyResponse.builder()
                .responsePayload(responsePayload)
                .build();
        VerifyCardPartyResponse response2 = VerifyCardPartyResponse.builder()
                .responsePayload(responsePayload)
                .build();

        assertEquals(response1, response2);
        assertEquals(response1.hashCode(), response2.hashCode());

        ResponsePayload differentPayload = new ResponsePayload();
        response2.setResponsePayload(differentPayload);

        assertNotEquals(response1, response2);
    }

    @Test
    public void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        verifyCardPartyResponse.setResponsePayload(responsePayload);

        String str = verifyCardPartyResponse.toString();
        assertTrue(str.contains("responsePayload"));
    }
}
