package com.td.api.mbna.msec.midtier.mbnaparty.payload;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class IndividualTest {

    private Individual individual;

    @BeforeEach
    public void setUp() {
        individual = new Individual();
    }

    @Test
    public void testGetSetKey() {
        String key = "12345";
        individual.setKey(key);
        
        assertEquals(key, individual.getKey());
    }

    @Test
    public void testGetSetBirthDt() {
        String birthDt = "1990-01-01";
        individual.setBirthDt(birthDt);
        
        assertEquals(birthDt, individual.getBirthDt());
    }

    @Test
    public void testGetSetGenderCd() {
        String genderCd = "M";
        individual.setGenderCd(genderCd);
        
        assertEquals(genderCd, individual.getGenderCd());
    }

    @Test
    public void testGetSetPartyToPartyGroup() {
        ArrayList<PartyToPartyGroup> partyToPartyGroup = new ArrayList<>();
        partyToPartyGroup.add(new PartyToPartyGroup());
        individual.setPartyToPartyGroup(partyToPartyGroup);
        
        assertEquals(partyToPartyGroup, individual.getPartyToPartyGroup());
    }

    @Test
    public void testGetSetName() {
        ArrayList<Name> name = new ArrayList<>();
        name.add(new Name());
        individual.setName(name);
        
        assertEquals(name, individual.getName());
    }

    @Test
    public void testGetSetIdentification() {
        ArrayList<Identification> identification = new ArrayList<>();
        identification.add(new Identification());
        individual.setIdentification(identification);
        
        assertEquals(identification, individual.getIdentification());
    }

    @Test
    public void testGetSetContact() {
        ArrayList<Contact> contact = new ArrayList<>();
        contact.add(new Contact());
        individual.setContact(contact);
        
        assertEquals(contact, individual.getContact());
    }

    @Test
    public void testGetSetIndividualToAgreement() {
        ArrayList<IndividualToAgreement> individualToAgreement = new ArrayList<>();
        individualToAgreement.add(new IndividualToAgreement());
        individual.setIndividualToAgreement(individualToAgreement);
        
        assertEquals(individualToAgreement, individual.getIndividualToAgreement());
    }

    @Test
    public void testToString() {
        individual.setKey("12345");
        individual.setBirthDt("1990-01-01");
        individual.setGenderCd("M");
        individual.setPartyToPartyGroup(new ArrayList<>());
        individual.setName(new ArrayList<>());
        individual.setIdentification(new ArrayList<>());
        individual.setContact(new ArrayList<>());
        individual.setIndividualToAgreement(new ArrayList<>());
        
        String str = individual.toString();
        assertTrue(str.contains("key=12345"));
        assertTrue(str.contains("birthDt=1990-01-01"));
        assertTrue(str.contains("genderCd=M"));
    }

    @Test
    public void testEqualsAndHashCode() {
        Individual ind1 = new Individual();
        Individual ind2 = new Individual();

        ind1.setKey("12345");
        ind1.setBirthDt("1990-01-01");
        ind1.setGenderCd("M");
        ind1.setPartyToPartyGroup(new ArrayList<>());
        ind1.setName(new ArrayList<>());
        ind1.setIdentification(new ArrayList<>());
        ind1.setContact(new ArrayList<>());
        ind1.setIndividualToAgreement(new ArrayList<>());
        
        ind2.setKey("12345");
        ind2.setBirthDt("1990-01-01");
        ind2.setGenderCd("M");
        ind2.setPartyToPartyGroup(new ArrayList<>());
        ind2.setName(new ArrayList<>());
        ind2.setIdentification(new ArrayList<>());
        ind2.setContact(new ArrayList<>());
        ind2.setIndividualToAgreement(new ArrayList<>());
        
        assertEquals(ind1, ind2);
        assertEquals(ind1.hashCode(), ind2.hashCode());

        ind2.setKey("67890");
        assertNotEquals(ind1, ind2);
    }
}
