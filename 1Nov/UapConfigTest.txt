import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.td.coreapi.common.config.ApiConfig;
import com.td.coreapi.common.oauthsdk.model.OAuthConstants;
import org.junit.Before;
import org.junit.Test;

import java.util.*;

public class UapConfigTest {

    private UapConfig uapConfig;
    private ApiConfig apiConfig;

    @Before
    public void setUp() {
        // Mocking ApiConfig to return a predefined structure
        apiConfig = mock(ApiConfig.class);
        uapConfig = UapConfig.getInstance();
    }

    @Test
    public void testSingletonInstance() {
        UapConfig anotherInstance = UapConfig.getInstance();
        assertSame(uapConfig, anotherInstance);
    }

    @Test
    public void testInitWithValidConfig() {
        Map<String, Object> sampleConfig = new HashMap<>();
        Map<String, Object> oauthRequest1Node = new HashMap<>();
        oauthRequest1Node.put(OAuthConstants.AUTHENTICATION_SERVER_URL, "https://auth.server.com");
        oauthRequest1Node.put(OAuthConstants.CLIENT_ID, "client-id");
        oauthRequest1Node.put(OAuthConstants.CLIENT_SECRET, "client-secret");
        oauthRequest1Node.put(OAuthConstants.SCOPE, Arrays.asList("scope1", "scope2"));

        Map<String, Object> authCodeGrant = new HashMap<>();
        authCodeGrant.put(OAuthConstants.REDIRECT_URI, "https://redirect.uri");
        authCodeGrant.put(OAuthConstants.PFID_PADAPTER_ID, "pfidpadapterid");
        oauthRequest1Node.put(OAuthConstants.JSON_AUTHORIZATION_CODE_GRANT_NAME, authCodeGrant);

        Map<String, Object> samlGrant = new HashMap<>();
        samlGrant.put(OAuthConstants.URI, "https://saml.uri");
        samlGrant.put(OAuthConstants.APPLIES_TO, "saml-applies-to");
        oauthRequest1Node.put(OAuthConstants.JSON_SAML_VALIDATE_BEARER_GRANT_NAME, samlGrant);

        sampleConfig.put(UAP_OAUTH_REQUEST_1, oauthRequest1Node);
        
        when(apiConfig.getJsonMapConfig(OAuthConstants.CONFIG_FILE_NAME)).thenReturn(sampleConfig);
        
        // Invoke the init method
        uapConfig.init();

        // Verify that all properties are set correctly
        assertEquals("https://auth.server.com", uapConfig.getAuthenticationServerUrl());
        assertEquals("client-id", uapConfig.getClientId());
        assertEquals("client-secret", uapConfig.getClientSecret());
        assertEquals(Arrays.asList("scope1", "scope2"), uapConfig.getScopes());
        assertEquals("https://redirect.uri", uapConfig.getRedirectUri());
        assertEquals("pfidpadapterid", uapConfig.getPfidpadapterid());
        assertEquals("https://saml.uri", uapConfig.getSamlUri());
        assertEquals("saml-applies-to", uapConfig.getSamlAppliesTo());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInitThrowsExceptionWhenConfigMissing() {
        when(apiConfig.getJsonMapConfig(OAuthConstants.CONFIG_FILE_NAME)).thenReturn(null);
        uapConfig.init();
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInitThrowsExceptionWhenUapOauthRequest1Missing() {
        Map<String, Object> sampleConfig = new HashMap<>();
        when(apiConfig.getJsonMapConfig(OAuthConstants.CONFIG_FILE_NAME)).thenReturn(sampleConfig);
        uapConfig.init();
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInitThrowsExceptionWhenRedirectUriMissing() {
        Map<String, Object> sampleConfig = new HashMap<>();
        Map<String, Object> oauthRequest1Node = new HashMap<>();
        oauthRequest1Node.put(OAuthConstants.JSON_AUTHORIZATION_CODE_GRANT_NAME, new HashMap<>());
        sampleConfig.put(UAP_OAUTH_REQUEST_1, oauthRequest1Node);
        when(apiConfig.getJsonMapConfig(OAuthConstants.CONFIG_FILE_NAME)).thenReturn(sampleConfig);
        uapConfig.init();
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInitThrowsExceptionWhenSamlAppliesToMissing() {
        Map<String, Object> sampleConfig = new HashMap<>();
        Map<String, Object> oauthRequest1Node = new HashMap<>();
        oauthRequest1Node.put(OAuthConstants.JSON_AUTHORIZATION_CODE_GRANT_NAME, new HashMap<>());

        Map<String, Object> samlGrant = new HashMap<>();
        samlGrant.put(OAuthConstants.URI, "https://saml.uri");
        oauthRequest1Node.put(OAuthConstants.JSON_SAML_VALIDATE_BEARER_GRANT_NAME, samlGrant);
        sampleConfig.put(UAP_OAUTH_REQUEST_1, oauthRequest1Node);
        
        when(apiConfig.getJsonMapConfig(OAuthConstants.CONFIG_FILE_NAME)).thenReturn(sampleConfig);
        uapConfig.init();
    }
}
