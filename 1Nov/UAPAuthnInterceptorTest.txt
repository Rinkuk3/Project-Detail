package com.td.mbna.msec.core.interceptor;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.net.URI;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.td.coreapi.common.oauthsdk.model.OAuthResponse;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.core.service.OAuthTokenService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.common.infrastructure.util.UIGeneralUtil;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class UAPAuthnInterceptorTest {

    @InjectMocks
    private UAPAuthnInterceptor uapAuthnInterceptor;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private OAuthTokenService tokenService;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private OAuthResponse oauthResponse;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPreHandle_ValidSamlToken() throws Exception {
        // Arrange
        when(request.getRequestURI()).thenReturn("/some/uri");
        when(request.getParameter(UAP_SSO_TOKEN)).thenReturn("validSamlToken");
        when(sessionProvider.getConnectId()).thenReturn("connectID");
        when(tokenService.isValidSaml("validSamlToken", "connectID")).thenReturn(true);
        
        // Act
        boolean result = uapAuthnInterceptor.preHandle(request, response, new Object());

        // Assert
        assertTrue(result);
    }

    @Test
    public void testPreHandle_InvalidSamlToken() throws Exception {
        // Arrange
        when(request.getRequestURI()).thenReturn("/some/uri");
        when(request.getParameter(UAP_SSO_TOKEN)).thenReturn("invalidSamlToken");
        when(sessionProvider.getConnectId()).thenReturn("connectID");
        when(tokenService.isValidSaml("invalidSamlToken", "connectID")).thenReturn(false);
        
        // Act
        boolean result = uapAuthnInterceptor.preHandle(request, response, new Object());

        // Assert
        verify(response).sendRedirect("stepUpTtc"); // Should redirect to step up
        assertFalse(result);
    }

    @Test
    public void testPreHandle_AccountNullStepUpValidation() throws Exception {
        // Arrange
        when(request.getParameter(UAP_AUTH_CODE)).thenReturn("authCode");
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(null);
        
        // Act
        boolean result = uapAuthnInterceptor.preHandle(request, response, new Object());

        // Assert
        verify(response).sendRedirect("error.html"); // Should redirect to error page
        assertFalse(result);
    }

    @Test
    public void testPreHandle_ValidStepUpValidation() throws Exception {
        // Arrange
        when(request.getParameter(UAP_AUTH_CODE)).thenReturn("authCode");
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(accountDetails);
        when(accountDetails.getAccountId()).thenReturn("accountId");
        when(tokenService.getTokenAuthResponse("authCode", UAP_OAUTH_REQUEST_1, "http://example.com/stepUpTtc")).thenReturn(oauthResponse);
        when(oauthResponse.getAccessToken()).thenReturn("validAccessToken");
        when(sessionProvider.getConnectId()).thenReturn("connectID");
        when(tokenService.isValidAccessToken(oauthResponse, "connectID")).thenReturn(true);

        // Act
        boolean result = uapAuthnInterceptor.preHandle(request, response, new Object());

        // Assert
        assertTrue(result);
        verify(sessionProvider).setSessionAttribute(FIRST_TIME_UAPPA_AUTHENTICATED, true);
    }

    @Test
    public void testPreHandle_InvalidAccessToken() throws Exception {
        // Arrange
        when(request.getParameter(UAP_AUTH_CODE)).thenReturn("authCode");
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(accountDetails);
        when(accountDetails.getAccountId()).thenReturn("accountId");
        when(tokenService.getTokenAuthResponse("authCode", UAP_OAUTH_REQUEST_1, "http://example.com/stepUpTtc")).thenReturn(oauthResponse);
        when(oauthResponse.getAccessToken()).thenReturn("invalidAccessToken");
        when(sessionProvider.getConnectId()).thenReturn("connectID");
        when(tokenService.isValidAccessToken(oauthResponse, "connectID")).thenReturn(false);

        // Act
        boolean result = uapAuthnInterceptor.preHandle(request, response, new Object());

        // Assert
        verify(response).sendRedirect("stepUpTtc"); // Should redirect to step up
        assertFalse(result);
    }

    @Test
    public void testRedirectStepUp_PinAuthServlet() throws IOException {
        // Arrange
        when(request.getRequestURL()).thenReturn(new StringBuffer("http://example.com/pinAuthServlet"));

        // Act
        uapAuthnInterceptor.redirectStepUp(request, response);

        // Assert
        verify(response).sendRedirect("stepUpPin"); // Should redirect to step up pin
    }

    @Test
    public void testRedirectStepUp_OtherServlet() throws IOException {
        // Arrange
        when(request.getRequestURL()).thenReturn(new StringBuffer("http://example.com/otherServlet"));

        // Act
        uapAuthnInterceptor.redirectStepUp(request, response);

        // Assert
        verify(response).sendRedirect("stepUpTtc"); // Should redirect to step up ttc
    }

    @Test
    public void testIsSamlValidationRequired_WithToken() {
        // Arrange
        when(request.getParameterMap()).thenReturn(Map.of(UAP_SSO_TOKEN, new String[]{"token"}));

        // Act
        boolean result = uapAuthnInterceptor.isSamlValidationRequired(request);

        // Assert
        assertTrue(result);
    }

    @Test
    public void testIsSamlValidationRequired_WithoutToken() {
        // Arrange
        when(request.getParameterMap()).thenReturn(Map.of());

        // Act
        boolean result = uapAuthnInterceptor.isSamlValidationRequired(request);

        // Assert
        assertFalse(result);
    }

    @Test
    public void testIsStepUpValidationRequired_WithAuthCode() {
        // Arrange
        when(request.getParameterMap()).thenReturn(Map.of(UAP_AUTH_CODE, new String[]{"code"}));

        // Act
        boolean result = uapAuthnInterceptor.isStepUpValidationRequired(request);

        // Assert
        assertTrue(result);
    }

    @Test
    public void testIsStepUpValidationRequired_WithoutAuthCode() {
        // Arrange
        when(request.getParameterMap()).thenReturn(Map.of());

        // Act
        boolean result = uapAuthnInterceptor.isStepUpValidationRequired(request);

        // Assert
        assertFalse(result);
    }
}
