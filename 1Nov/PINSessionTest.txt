package com.td.mbna.msec.core.session;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class PINSessionTest {

    private PINSession pinSession;

    @BeforeEach
    void setUp() {
        // Initialize the PINSession object with default values
        pinSession = new PINSession(false, new Date(), 5000);
    }

    @Test
    void testConstructor() {
        PINSession session = new PINSession(true, new Date(), 10000);
        assertTrue(session.isPinSessionExpried());
        assertNotNull(session.getStartTime());
        assertEquals(10000, session.getTimeout());
    }

    @Test
    void testIsPinSessionExpried() {
        assertFalse(pinSession.isPinSessionExpried());
        pinSession.setPinSessionExpried(true);
        assertTrue(pinSession.isPinSessionExpried());
    }

    @Test
    void testGetStartTime() {
        Date startTime = pinSession.getStartTime();
        assertNotNull(startTime);
    }

    @Test
    void testSetStartTime() {
        Date newStartTime = new Date();
        pinSession.setStartTime(newStartTime);
        assertEquals(newStartTime, pinSession.getStartTime());
    }

    @Test
    void testGetTimeout() {
        assertEquals(5000, pinSession.getTimeout());
    }

    @Test
    void testSetTimeout() {
        pinSession.setTimeout(10000);
        assertEquals(10000, pinSession.getTimeout());
    }

    @Test
    void testCheckPinSessionExpired_NullStartTime() {
        pinSession.setStartTime(null);
        assertTrue(pinSession.checkPinSessionExpired());
    }

    @Test
    void testCheckPinSessionExpired_ZeroTimeout() {
        pinSession.setTimeout(0);
        assertTrue(pinSession.checkPinSessionExpired());
    }

    @Test
    void testCheckPinSessionExpired_SessionExpired() {
        pinSession.setPinSessionExpried(true);
        assertTrue(pinSession.checkPinSessionExpired());
    }

    @Test
    void testCheckPinSessionExpired_NotExpired() {
        pinSession.setStartTime(new Date(System.currentTimeMillis() - 2000)); // 2 seconds ago
        assertFalse(pinSession.checkPinSessionExpired());
    }

    @Test
    void testCheckPinSessionExpired_Expired() throws InterruptedException {
        pinSession.setStartTime(new Date(System.currentTimeMillis() - 6000)); // 6 seconds ago
        assertTrue(pinSession.checkPinSessionExpired());
    }
}
