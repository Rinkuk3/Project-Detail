package com.td.mbna.msec.core.support;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import com.google.gson.JsonSyntaxException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class JaxbJsonUtilTest {

    private JaxbJsonUtil jaxbJsonUtil;

    @BeforeEach
    void setUp() {
        jaxbJsonUtil = new JaxbJsonUtil();
    }

    @Test
    void testConvertJaxb2Json_NullInput() {
        // Arrange
        Object jaxbObj = null;
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Act
        TestJsonInterface result = jaxbJsonUtil.convertJaxb2Json(jaxbObj, jsonInterface);

        // Assert
        assertNull(result);
    }

    @Test
    void testConvertJaxb2Json_ValidInput() throws Exception {
        // Arrange
        TestJaxbObject jaxbObj = new TestJaxbObject("testValue");
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Act
        TestJsonInterface result = jaxbJsonUtil.convertJaxb2Json(jaxbObj, jsonInterface);

        // Assert
        assertNotNull(result);
        assertEquals("testValue", result.getValue());
    }

    @Test
    void testConvertJaxb2Json_ExceptionThrown() throws Exception {
        // Arrange
        TestJaxbObject jaxbObj = new TestJaxbObject("testValue");
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Simulate an exception being thrown in the converter method
        doThrow(new IOException("Mocked exception")).when(jaxbJsonUtil).convertoJAXBToJsonInterface(any(), any());

        // Act
        TestJsonInterface result = jaxbJsonUtil.convertJaxb2Json(jaxbObj, jsonInterface);

        // Assert
        assertNull(result);
    }

    @Test
    void testConvertoJAXBToJsonInterface_NullInput() throws Exception {
        // Arrange
        Object jaxbObj = null;
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Act
        TestJsonInterface result = jaxbJsonUtil.convertoJAXBToJsonInterface(jaxbObj, jsonInterface);

        // Assert
        assertNull(result);
    }

    @Test
    void testConvertoJAXBToJsonInterface_ValidInput() throws Exception {
        // Arrange
        TestJaxbObject jaxbObj = new TestJaxbObject("testValue");
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Act
        TestJsonInterface result = jaxbJsonUtil.convertoJAXBToJsonInterface(jaxbObj, jsonInterface);

        // Assert
        assertNotNull(result);
        assertEquals("testValue", result.getValue());
    }

    @Test
    void testConvertoJAXBToJsonInterface_ExceptionThrown() throws Exception {
        // Arrange
        TestJaxbObject jaxbObj = new TestJaxbObject("testValue");
        Class<TestJsonInterface> jsonInterface = TestJsonInterface.class;

        // Simulate an exception
        Gson gson = mock(Gson.class);
        when(gson.toJson(any())).thenThrow(new JsonSyntaxException("Mocked exception"));

        // Act & Assert
        assertThrows(JsonSyntaxException.class, () -> {
            jaxbJsonUtil.convertoJAXBToJsonInterface(jaxbObj, jsonInterface);
        });
    }

    // Define a test JAXB object class for testing
    private static class TestJaxbObject {
        private String value;

        public TestJaxbObject(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    // Define a test JSON interface for testing
    private interface TestJsonInterface {
        String getValue();
    }
}
