package com.td.mbna.msec.core.controller;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.common.infrastructure.util.SwitchLanguageService;

class LogoffControllerTest {

    @InjectMocks
    private LogoffController logoffController;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private SwitchLanguageService switchLanguageService;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testLogoff_UgoApp() {
        when(HttpUtil.isUgoApp(request)).thenReturn(true);
        ModelAndView modelAndView = logoffController.logoff(request, response);
        assertEquals("redirect:/logon.action", modelAndView.getViewName());
        verify(response).addCookie(any());
    }

    @Test
    void testLogoff_NullLangId() {
        when(request.getParameter("langId")).thenReturn(null);
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en");
        when(switchLanguageService.handleRequestLocale(request)).thenReturn(null);
        when(logoffController.execute(request, response)).thenReturn("logoff");

        ModelAndView modelAndView = logoffController.logoff(request, response);
        assertEquals("logoff", modelAndView.getViewName());
    }

    @Test
    void testLogoff_LanguageHandling() {
        when(request.getParameter("langId")).thenReturn("fr");
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en");
        when(switchLanguageService.handleRequestLocale(request)).thenReturn(null);
        when(logoffController.execute(request, response)).thenReturn("logoff");

        ModelAndView modelAndView = logoffController.logoff(request, response);
        assertEquals("logoff", modelAndView.getViewName());
        assertEquals("fr", modelAndView.getModel().get("lang"));
    }

    @Test
    void testLogoff_ErrorView() {
        when(request.getParameter("langId")).thenReturn("en");
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en");
        when(logoffController.execute(request, response)).thenReturn("err");

        ModelAndView modelAndView = logoffController.logoff(request, response);
        assertEquals("redirect:/error", modelAndView.getViewName());
    }

    @Test
    void testExecute_CIPLogoutCompleted() {
        when(sessionProvider.getSessionMap()).thenReturn(new HashMap<>());
        when(request.getParameter("completed")).thenReturn("true");

        String result = logoffController.execute(request, response);
        assertEquals("logoff", result);
    }

    @Test
    void testExecute_MBNALogoutFailed() {
        when(sessionProvider.getSessionMap()).thenThrow(new RuntimeException("Session error"));

        String result = logoffController.execute(request, response);
        assertEquals("err", result);
    }

    @Test
    void testInvalidateMBNASession_Success() {
        when(sessionProvider.getSessionMap()).thenReturn(new HashMap<>());

        boolean result = logoffController.invalidateMBNASession(request);
        assertFalse(result);
    }

    @Test
    void testInvalidateMBNASession_Failure() {
        when(sessionProvider.getSessionMap()).thenThrow(new RuntimeException("Session error"));

        boolean result = logoffController.invalidateMBNASession(request);
        assertTrue(result);
    }

    @Test
    void testGetMDMKey_NoSessionCustomer() {
        when(sessionProvider.getSessionCustomer()).thenReturn(null);
        String mdmKey = logoffController.getMDMKey();
        assertEquals("0", mdmKey);
    }

    @Test
    void testGetMDMKey_WithSessionCustomer() {
        when(sessionProvider.getSessionCustomer()).thenReturn(mock(Customer.class));
        when(sessionProvider.getSessionCustomer().getId()).thenReturn("123");

        String mdmKey = logoffController.getMDMKey();
        assertEquals("123", mdmKey);
    }
}
