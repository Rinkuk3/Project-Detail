package com.td.mbna.msec.core.interceptor;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import com.td.mbna.msec.common.infrastructure.util.MsecbffConstants;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;

public class DeeplinkInterceptorTest {

    @InjectMocks
    private DeeplinkInterceptor deeplinkInterceptor;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private ModelAndView modelAndView;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPreHandle_WithDlValue() {
        // Arrange
        Cookie dlCookie = new Cookie(MsecbffConstants.DL_TARGET, "someValue");
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn("someValue");

        // Act
        boolean result = deeplinkInterceptor.preHandle(request, response, new Object());

        // Assert
        assertTrue(result);
        verify(request).setAttribute(anyString(), any());
        verify(HttpUtil).removeCookie(response, MsecbffConstants.DL_TARGET);
    }

    @Test
    public void testPreHandle_WithoutDlValue() {
        // Arrange
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn(null);

        // Act
        boolean result = deeplinkInterceptor.preHandle(request, response, new Object());

        // Assert
        assertTrue(result);
        verify(HttpUtil, never()).removeCookie(response, MsecbffConstants.DL_TARGET);
    }

    @Test
    public void testPostHandle_WithDlValue() {
        // Arrange
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn("someValue");

        // Act
        deeplinkInterceptor.postHandle(request, response, new Object(), modelAndView);

        // Assert
        verify(HttpUtil).removeCookie(response, MsecbffConstants.DL_TARGET);
    }

    @Test
    public void testPostHandle_WithoutDlValue() {
        // Arrange
        when(HttpUtil.getCookieValue(MsecbffConstants.DL_TARGET, request)).thenReturn(null);

        // Act
        deeplinkInterceptor.postHandle(request, response, new Object(), modelAndView);

        // Assert
        verify(HttpUtil, never()).removeCookie(response, MsecbffConstants.DL_TARGET);
    }
}
