package com.td.mbna.msec.core.controller;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import com.td.mbna.msec.core.service.OAuthTokenService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.HttpUtil;

public class UapMaintenanceControllerTest {

    @InjectMocks
    private UapMaintenanceController uapMaintenanceController;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private OAuthTokenService tokenService;

    @Mock
    private HttpServletRequest request;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testUapMaintenanceRedirect_Success() {
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn("mockJwtToken");
        when(HttpUtil.isUgoApp(request)).thenReturn(false);
        when(tokenService.getChannelID(anyBoolean())).thenReturn("mockChannelId");
        when(tokenService.getTsnConsumerAppID()).thenReturn("mockConsumerAppId");
        
        ModelAndView result = uapMaintenanceController.uapMaintenanceRedirect(request);

        assertEquals("uapMaintenance", result.getViewName());
    }

    @Test
    public void testUapMaintenanceRedirect_ExceptionHandling() {
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn("mockJwtToken");
        when(HttpUtil.isUgoApp(request)).thenReturn(false);
        when(tokenService.getChannelID(anyBoolean())).thenThrow(new RuntimeException("Channel ID Error"));

        ModelAndView result = uapMaintenanceController.uapMaintenanceRedirect(request);

        assertEquals("redirect:/error", result.getViewName());
    }

    @Test
    public void testGenerateMV_SsoSamlNull_UseUAP() {
        when(sessionProvider.getSessionAttribute(SSO_SAML_ASSERTION)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn("mockJwtToken");
        when(tokenService.getSAMLforJWT("mockJwtToken")).thenReturn("mockSamlToken");
        when(HttpUtil.isUgoApp(request)).thenReturn(false);
        when(tokenService.getChannelID(anyBoolean())).thenReturn("mockChannelId");
        when(tokenService.getTsnConsumerAppID()).thenReturn("mockConsumerAppId");
        
        ModelAndView result = uapMaintenanceController.uapMaintenanceRedirect(request);

        assertEquals("uapMaintenance", result.getViewName());
        assertEquals("mockSamlToken", result.getModel().get("samlToken"));
    }

    @Test
    public void testGenerateMV_SsoSamlNull_UseMockToken() {
        when(sessionProvider.getSessionAttribute(SSO_SAML_ASSERTION)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn("mockJwtToken");
        when(HttpUtil.isUgoApp(request)).thenReturn(true);
        when(MockTokenUtil.generateSamlToken("mockJwtToken")).thenReturn("mockSamlToken");
        
        ModelAndView result = uapMaintenanceController.uapMaintenanceRedirect(request);

        assertEquals("uapMaintenance", result.getViewName());
        assertEquals("mockSamlToken", result.getModel().get("samlToken"));
    }

    @Test
    public void testGenerateMV_SsoSamlExists() {
        when(sessionProvider.getSessionAttribute(SSO_SAML_ASSERTION)).thenReturn("existingSamlToken");
        
        ModelAndView result = uapMaintenanceController.uapMaintenanceRedirect(request);

        assertEquals("uapMaintenance", result.getViewName());
        assertEquals("existingSamlToken", result.getModel().get("samlToken"));
    }
}
