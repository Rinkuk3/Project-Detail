package com.td.mbna.msec.core.controller;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.ModelAndView;

import com.td.mbna.msec.common.infrastructure.util.SwitchLanguageService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.common.infrastructure.util.TextProvider;

public class NotFoundControllerTest {

    @InjectMocks
    private NotFoundController notFoundController;

    @Mock
    private TextProvider textProvider;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private SwitchLanguageService switchLanguageService;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testNotfoundRedirect_Success() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(null);
        when(textProvider.getText("mbna.navigation.main.ariaLabel")).thenReturn("Main Navigation");
        when(textProvider.getText("link.home")).thenReturn("Home Link");
        when(textProvider.getText("mbna.logo.title")).thenReturn("Logo Title");

        // Act
        ModelAndView modelAndView = notFoundController.notfoundRedirect(request, response);

        // Assert
        assertNotNull(modelAndView);
        assertEquals("notfound", modelAndView.getViewName());
        assertEquals("Main Navigation", modelAndView.getModel().get("navigationLabel"));
        assertEquals("Home Link", modelAndView.getModel().get("homeLink"));
        assertEquals("Logo Title", modelAndView.getModel().get("logoTitle"));
        assertEquals("404", modelAndView.getModel().get("error"));
    }

    @Test
    public void testNotfoundRedirect_WithLanguageParam() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenReturn("fr");
        when(textProvider.getText("mbna.navigation.main.ariaLabel")).thenReturn("Main Navigation");
        when(textProvider.getText("link.home")).thenReturn("Home Link");
        when(textProvider.getText("mbna.logo.title")).thenReturn("Logo Title");

        // Act
        ModelAndView modelAndView = notFoundController.notfoundRedirect(request, response);

        // Assert
        assertNotNull(modelAndView);
        assertEquals("notfound", modelAndView.getViewName());
        assertEquals("fr", modelAndView.getModel().get("lang"));
    }

    @Test
    public void testNotfoundRedirect_HandlesException() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenThrow(new RuntimeException("Error"));

        // Act
        ModelAndView modelAndView = notFoundController.notfoundRedirect(request, response);

        // Assert
        assertNotNull(modelAndView);
        assertEquals("redirect:/error", modelAndView.getViewName());
    }

    @Test
    public void testGenerateMV_WithSessionLanguage() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en");
        when(textProvider.getText("mbna.navigation.main.ariaLabel")).thenReturn("Main Navigation");
        when(textProvider.getText("link.home")).thenReturn("Home Link");
        when(textProvider.getText("mbna.logo.title")).thenReturn("Logo Title");

        // Act
        ModelAndView mav = notFoundController.generateMV(request);

        // Assert
        assertEquals("notfound", mav.getViewName());
        assertEquals("Main Navigation", mav.getModel().get("navigationLabel"));
        assertEquals("Home Link", mav.getModel().get("homeLink"));
        assertEquals("Logo Title", mav.getModel().get("logoTitle"));
        assertEquals("en", mav.getModel().get("lang"));
        assertEquals("404", mav.getModel().get("error"));
    }

    @Test
    public void testGenerateMV_WithDefaultLanguage() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(null);
        when(textProvider.getText("mbna.navigation.main.ariaLabel")).thenReturn("Main Navigation");
        when(textProvider.getText("link.home")).thenReturn("Home Link");
        when(textProvider.getText("mbna.logo.title")).thenReturn("Logo Title");
        when(HttpUtil.getPreferredLang(request)).thenReturn("en");

        // Act
        ModelAndView mav = notFoundController.generateMV(request);

        // Assert
        assertEquals("notfound", mav.getViewName());
        assertEquals("Main Navigation", mav.getModel().get("navigationLabel"));
        assertEquals("Home Link", mav.getModel().get("homeLink"));
        assertEquals("Logo Title", mav.getModel().get("logoTitle"));
        assertEquals("en", mav.getModel().get("lang"));
    }

    @Test
    public void testGenerateMV_WithFrenchLanguage() {
        // Arrange
        when(request.getParameter(PARAMETER_LANGUAGE)).thenReturn(null);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(null);
        when(HttpUtil.getPreferredLang(request)).thenReturn("fr");

        // Act
        ModelAndView mav = notFoundController.generateMV(request);

        // Assert
        assertEquals("notfound", mav.getViewName());
        assertEquals("fr", mav.getModel().get("lang"));
        assertEquals(LANGID_FRENCH, mav.getModel().get("locale"));
    }
}
