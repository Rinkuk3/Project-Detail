package com.td.mbna.msec.core.support;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;

import com.td.mbna.msec.offers.domain.OfferDetails;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OfferComparatorTest {

    private OfferComparator offerComparator;

    @BeforeEach
    void setUp() {
        offerComparator = new OfferComparator();
    }

    @Test
    void testCompare_BothOffersAccepted_FirstLowerPriority() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(1, OFFER_DISPOSITION_ACCEPTED);
        OfferDetails offer2 = createOfferDetails(2, OFFER_DISPOSITION_ACCEPTED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(-1, result); // offer1 should come before offer2
    }

    @Test
    void testCompare_BothOffersAccepted_FirstHigherPriority() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(2, OFFER_DISPOSITION_ACCEPTED);
        OfferDetails offer2 = createOfferDetails(1, OFFER_DISPOSITION_ACCEPTED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(1, result); // offer1 should come after offer2
    }

    @Test
    void testCompare_FirstOfferDeclined_SecondAccepted() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(1, OFFER_DISPOSITION_DECLINED);
        OfferDetails offer2 = createOfferDetails(2, OFFER_DISPOSITION_ACCEPTED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(-1, result); // declined offer1 should come after accepted offer2
    }

    @Test
    void testCompare_FirstAccepted_SecondDeclined() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(2, OFFER_DISPOSITION_ACCEPTED);
        OfferDetails offer2 = createOfferDetails(1, OFFER_DISPOSITION_DECLINED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(1, result); // accepted offer1 should come before declined offer2
    }

    @Test
    void testCompare_BothOffersDeclined() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(1, OFFER_DISPOSITION_DECLINED);
        OfferDetails offer2 = createOfferDetails(2, OFFER_DISPOSITION_DECLINED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(0, result); // if both are declined, they should be considered equal
    }

    @Test
    void testCompare_BothOffersHaveSamePriority() {
        // Arrange
        OfferDetails offer1 = createOfferDetails(1, OFFER_DISPOSITION_ACCEPTED);
        OfferDetails offer2 = createOfferDetails(1, OFFER_DISPOSITION_ACCEPTED);

        // Act
        int result = offerComparator.compare(offer1, offer2);

        // Assert
        assertEquals(0, result); // if both have the same priority, they should be considered equal
    }

    private OfferDetails createOfferDetails(int priority, String disposition) {
        OfferDetails offer = new OfferDetails();
        offer.setPriority(priority);
        offer.setDisposition(disposition);
        return offer;
    }
}
