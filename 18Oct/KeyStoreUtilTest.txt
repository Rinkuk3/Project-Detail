package com.td.mbna.msec.common.infrastructure.util;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.crypto.SecretKey;
import java.io.FileInputStream;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class KeyStoreUtilTest {

    private KeyStoreUtil keyStoreUtil;

    @BeforeEach
    public void setUp() {
        keyStoreUtil = new KeyStoreUtil();
    }

    @Test
    public void testGetKeyFromKeyStore_ValidKeyAlias() throws Exception {
        String keyAlias = "testAlias";
        SecretKey secretKey = Mockito.mock(SecretKey.class);

        KeyStore keyStoreMock = mock(KeyStore.class);
        KeyStore.SecretKeyEntry secretKeyEntryMock = mock(KeyStore.SecretKeyEntry.class);
        
        when(secretKeyEntryMock.getSecretKey()).thenReturn(secretKey);
        when(keyStoreMock.getEntry(keyAlias, any(KeyStore.PasswordProtection.class))).thenReturn(secretKeyEntryMock);
        
        // Mock loadKeyStore method to return the keyStoreMock
        KeyStoreUtil keyStoreUtilSpy = Mockito.spy(keyStoreUtil);
        doReturn(keyStoreMock).when(keyStoreUtilSpy).loadKeyStore();
        
        // Assume decryptKeyPass returns a valid password
        when(keyStoreUtilSpy.decryptKeyPass(anyString())).thenReturn("validPassword");

        SecretKey result = keyStoreUtilSpy.getKeyFromKeyStore(keyAlias);
        assertNotNull(result);
        assertEquals(secretKey, result);
    }

    @Test
    public void testGetKeyFromKeyStore_InvalidKeyAlias() throws Exception {
        String keyAlias = "invalidAlias";

        KeyStore keyStoreMock = mock(KeyStore.class);
        
        when(keyStoreMock.getEntry(eq(keyAlias), any(KeyStore.PasswordProtection.class))).thenReturn(null);

        // Mock loadKeyStore method to return the keyStoreMock
        KeyStoreUtil keyStoreUtilSpy = Mockito.spy(keyStoreUtil);
        doReturn(keyStoreMock).when(keyStoreUtilSpy).loadKeyStore();

        // Assume decryptKeyPass returns a valid password
        when(keyStoreUtilSpy.decryptKeyPass(anyString())).thenReturn("validPassword");

        SecretKey result = keyStoreUtilSpy.getKeyFromKeyStore(keyAlias);
        assertNull(result);
    }

    @Test
    public void testGetKeyFromKeyStore_InvalidKeyStore() throws Exception {
        String keyAlias = "testAlias";

        // Mock the loadKeyStore method to throw an exception
        KeyStoreUtil keyStoreUtilSpy = Mockito.spy(keyStoreUtil);
        doThrow(new Exception("KeyStore load error")).when(keyStoreUtilSpy).loadKeyStore();

        SecretKey result = keyStoreUtilSpy.getKeyFromKeyStore(keyAlias);
        assertNull(result);
    }

    @Test
    public void testGetKeyFromKeyStore_WithCustomFile() throws Exception {
        String keyAlias = "testAlias";
        String keystoreFile = "keystoreFile.jks";
        String keystorePw = "keystorePassword";
        SecretKey secretKey = Mockito.mock(SecretKey.class);
        
        KeyStore keyStoreMock = mock(KeyStore.class);
        KeyStore.SecretKeyEntry secretKeyEntryMock = mock(KeyStore.SecretKeyEntry.class);

        when(secretKeyEntryMock.getSecretKey()).thenReturn(secretKey);
        when(keyStoreMock.getEntry(keyAlias, any(KeyStore.PasswordProtection.class))).thenReturn(secretKeyEntryMock);

        // Mock loadKeyStore method to return the keyStoreMock
        KeyStoreUtil keyStoreUtilSpy = Mockito.spy(keyStoreUtil);
        doReturn(keyStoreMock).when(keyStoreUtilSpy).loadKeyStore(keystoreFile, keystorePw);
        
        // Mock decryption
        when(Decryptor.decrypt(anyString(), anyString(), anyString())).thenReturn("decryptedPassword");

        SecretKey result = keyStoreUtilSpy.getKeyFromKeyStore(keyAlias, keystoreFile, keystorePw);
        assertNotNull(result);
        assertEquals(secretKey, result);
    }

    @Test
    public void testLoadKeyStore() throws Exception {
        String keyStoreFn = "testKeystore.jks";
        System.setProperty("mbna.tsys.ks.file.name", keyStoreFn);

        KeyStore keyStoreMock = mock(KeyStore.class);
        FileInputStream fisMock = mock(FileInputStream.class);
        String decryptedPassword = "decryptedPassword";

        when(KeyStore.getInstance("JCEKS")).thenReturn(keyStoreMock);
        when(keyStoreMock.load(any(FileInputStream.class), any(char[].class))).thenReturn(null);
        when(keyStoreUtil.decryptKeyPass(anyString())).thenReturn(decryptedPassword);
        
        KeyStore result = keyStoreUtil.loadKeyStore();
        assertNotNull(result);
        
        // Verify interactions
        verify(keyStoreMock).load(fisMock, decryptedPassword.toCharArray());
        verify(fisMock).close();
    }

    @Test
    public void testDecryptKeyPass_ValidInput() throws Exception {
        String input = "inputPassword";
        String decryptedPassword = "decryptedPassword";
        
        when(Decryptor.decrypt(anyString(), anyString(), eq(input))).thenReturn(decryptedPassword);

        String result = keyStoreUtil.decryptKeyPass(input);
        assertEquals(decryptedPassword, result);
    }

    @Test
    public void testDecryptKeyPass_DecryptorException() throws Exception {
        String input = "inputPassword";

        when(Decryptor.decrypt(anyString(), anyString(), eq(input))).thenThrow(new DecryptorException("Decryption error"));

        assertThrows(DecryptorException.class, () -> {
            keyStoreUtil.decryptKeyPass(input);
        });
    }
}
