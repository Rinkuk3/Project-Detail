import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;

import com.td.mbna.msec.customer.application.*;
import com.td.mbna.msec.customer.domain.*;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.util.perf.ProfileLog;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerResourceTest {

    @InjectMocks
    private CustomerResource customerResource;

    @Mock
    private CustomerApplicationService customerService;

    @Mock
    private AddAuthorizedUserService addAuthorizedUserService;

    @Mock
    private RemoveAccountService removeAccountService;

    @Mock
    private SecCardHolderInfoService secCardHolderInfoService;

    @Mock
    private CardSetupConfirmationService cardSetupConfirmationService;

    @Mock
    private SessionProvider sessionProvider;

    private MockMvc mockMvc;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(customerResource).build();
    }

    @Test
    public void testGetIpEligibility() throws Exception {
        List<AccountIpEligibility> eligibilityList = Arrays.asList(new AccountIpEligibility());
        when(customerService.getIpEligibilityList()).thenReturn(eligibilityList);

        mockMvc.perform(get("/v1/ip/eligibility"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$", hasSize(1)))
                .andDo(print());
    }

    @Test
    public void testGetCustomerProfile() throws Exception {
        CustomerNameForNudge customerProfile = new CustomerNameForNudge();
        when(customerService.getCustomerProfile()).thenReturn(customerProfile);

        mockMvc.perform(get("/customer-profile"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testGetDisclosureText() throws Exception {
        String accountId = "123456";
        HttpServletRequest request = mock(HttpServletRequest.class);
        AddAuInfo addAuInfo = new AddAuInfo();
        when(addAuthorizedUserService.getAddAuInfo(accountId, request)).thenReturn(addAuInfo);

        mockMvc.perform(get("/addAuthorizedUser/checkEligibility/{accountId}", accountId)
                .requestAttr("httpServletRequest", request))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testVerifyAddAuthorizedUser() throws Exception {
        AuthorizedUserData userData = new AuthorizedUserData();
        AddAuResponse response = new AddAuResponse();
        when(addAuthorizedUserService.addAuthorizedUser(userData, true, null)).thenReturn(response);

        mockMvc.perform(post("/addAuthorizedUser/verify")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ }")) // Assuming empty JSON for the test
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testAddAuthorizedUser() throws Exception {
        AuthorizedUserData userData = new AuthorizedUserData();
        AddAuResponse response = new AddAuResponse();
        when(addAuthorizedUserService.addAuthorizedUser(userData, false, null)).thenReturn(response);

        mockMvc.perform(post("/addAuthorizedUser/confirmation")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ }")) // Assuming empty JSON for the test
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testRemoveAccountConfirmation() throws Exception {
        String accountId = "123456";
        BaseMsecbffResponse response = new BaseMsecbffResponse();
        when(removeAccountService.removeAccountConfirmation(accountId)).thenReturn(response);

        mockMvc.perform(get("/remove-account/{accountId}/confirm", accountId))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testRemoveAccount() throws Exception {
        Map<String, Object> accountID = new HashMap<>();
        accountID.put("accountID", "123456");
        BaseMsecbffResponse response = new BaseMsecbffResponse();
        when(removeAccountService.removeAccount("123456")).thenReturn(response);

        mockMvc.perform(post("/accounts/remove-account")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ \"accountID\": \"123456\" }")) // JSON with accountID
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testInitSecCardHolderInfo() throws Exception {
        String accountId = "123456";
        HttpServletResponse response = mock(HttpServletResponse.class);
        SecondCardUserInfo secCardUserInfo = new SecondCardUserInfo();
        when(secCardHolderInfoService.initSecCardHolderInfo(accountId, response)).thenReturn(secCardUserInfo);

        mockMvc.perform(get("/secCardInfo/{accountId}", accountId))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testUpdatePersonalInfo() throws Exception {
        SecondCardUserInfo userInfo = new SecondCardUserInfo();
        BaseMsecbffResponse response = new BaseMsecbffResponse();
        when(secCardHolderInfoService.updatePersonalInfo(userInfo)).thenReturn(response);

        mockMvc.perform(post("/update-secCardInfo")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ }")) // Assuming empty JSON for the test
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testCardSetupConfirmation() throws Exception {
        BaseMsecbffResponse response = new BaseMsecbffResponse();
        when(cardSetupConfirmationService.cardSetupConfirmation()).thenReturn(response);

        mockMvc.perform(get("/cardsetup-confirm"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andDo(print());
    }

    @Test
    public void testHandleAddAuthorizedUser() throws Exception {
        com.td.mbna.msec.account.domain.AccountDetails accountDetails = new com.td.mbna.msec.account.domain.AccountDetails();
        accountDetails.setAccountId("123456");
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(accountDetails);

        mockMvc.perform(post("/addAuthorizedUser")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{ }")) // Assuming empty JSON for the test
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("index.html#/account/addau/entry"))
                .andDo(print());
    }
}
