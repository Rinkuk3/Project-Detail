import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PropertiesReaderTest {

    private PropertiesReader propertiesReader;
    private static final String VALID_FILE_PATH = "src/test/resources/test.properties"; // Adjust the path to your test properties file
    private static final String INVALID_FILE_PATH = "invalid/path/to/properties.file";

    @BeforeEach
    void setUp() {
        // Reset the logger if needed
    }

    @Test
    void testConstructorLoadsPropertiesSuccessfully() {
        propertiesReader = new PropertiesReader(VALID_FILE_PATH);

        // Assuming test.properties contains a key-value pair: "testKey=testValue"
        String propertyValue = propertiesReader.getProperty("testKey");
        assertEquals("testValue", propertyValue);
    }

    @Test
    void testConstructorHandlesIOException() {
        // Mock the MbnaLogger to prevent actual logging
        MbnaLogger mockLogger = Mockito.mock(MbnaLogger.class);
        PropertiesReader spyPropertiesReader = Mockito.spy(new PropertiesReader(INVALID_FILE_PATH));

        // Invoke the constructor which should internally call the logger in case of IOException
        assertThrows(RuntimeException.class, () -> {
            spyPropertiesReader.getProperty("someKey"); // This should throw an error due to failed property loading
        });

        // Verify logger was called
        verify(mockLogger, times(1)).error(anyString(), anyString(), any());
    }

    @Test
    void testGetPropertyReturnsNullForNonExistentKey() {
        propertiesReader = new PropertiesReader(VALID_FILE_PATH);
        String propertyValue = propertiesReader.getProperty("nonExistentKey");
        assertNull(propertyValue); // Should return null for non-existent keys
    }

    @Test
    void testGetPropertyHandlesEmptyStringKey() {
        propertiesReader = new PropertiesReader(VALID_FILE_PATH);
        String propertyValue = propertiesReader.getProperty(""); // Test for empty key
        assertNull(propertyValue); // Should return null
    }
}
