package com.td.mbna.msec.common.midtier;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean;

import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import java.io.IOException;
import java.lang.reflect.Method;

@WebServiceClient(name = "TestService", targetNamespace = "http://example.com/test")
class TestService {
    @WebEndpoint(name = "TestServicePort")
    public Object getTestServicePort() {
        return new Object();
    }
}

class MidTierServiceBuilderTest {

    @InjectMocks
    private MidTierServiceBuilder midTierServiceBuilder;

    @Mock
    private MidTierSoapHandler soapHandler;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testBuild() throws Exception {
        // Setup
        String endpointUrl = "http://localhost:8080/test";
        String midtierRequestTimeOut = "5000";
        String midtierConnectTimeOut = "3000";

        // Execute
        JaxWsPortProxyFactoryBean factoryBean = midTierServiceBuilder.build(TestService.class, endpointUrl, midtierRequestTimeOut, midtierConnectTimeOut);

        // Validate
        assertNotNull(factoryBean);
        assertEquals("TestService", factoryBean.getServiceName());
        assertEquals("http://example.com/test", factoryBean.getNamespaceUri());
        assertEquals(endpointUrl, factoryBean.getEndpointAddress());
        assertEquals("TestServicePort", factoryBean.getPortName());
        assertEquals(1, factoryBean.getCustomProperties().size());
        assertEquals(midtierConnectTimeOut, factoryBean.getCustomProperties().get("com.sun.xml.ws.connect.timeout"));
        assertEquals(midtierRequestTimeOut, factoryBean.getCustomProperties().get("com.sun.xml.ws.request.timeout"));
    }

    @Test
    void testBuildThrowsRuntimeException() {
        // Setup
        String endpointUrl = "http://localhost:8080/test";
        String midtierRequestTimeOut = "5000";
        String midtierConnectTimeOut = "3000";

        // Mocking the method to throw an exception
        try {
            Method method = TestService.class.getMethod("getNonExistentPort");
            when(method.getAnnotation(WebEndpoint.class)).thenThrow(NoSuchMethodException.class);
            fail("Expected RuntimeException");
        } catch (NoSuchMethodException e) {
            // Expected exception
        }

        // Validate that RuntimeException is thrown
        Exception exception = assertThrows(RuntimeException.class, () ->
                midTierServiceBuilder.build(TestService.class, endpointUrl, midtierRequestTimeOut, midtierConnectTimeOut)
        );
        assertNotNull(exception);
    }

    @Test
    void testWsdlResourceUrl() throws IOException {
        // Setup
        String serviceName = "TestService";

        // Execute
        URL url = midTierServiceBuilder.wsdlResourceUrl(serviceName);

        // Validate
        assertNotNull(url);
        assertTrue(url.toString().contains("wsdl/TestService.wsdl"));
    }

    @Test
    void testServiceInterface() throws ClassNotFoundException {
        // Setup
        String serviceName = "TestService";

        // Execute
        Class<?> serviceInterface = midTierServiceBuilder.serviceInterface(TestService.class, serviceName);

        // Validate
        assertNotNull(serviceInterface);
        assertEquals("com.td.mbna.msec.common.midtier.TestService", serviceInterface.getName());
    }
}
