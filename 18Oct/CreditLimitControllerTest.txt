package com.td.mbna.msec.creditlimit.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.creditlimit.model.*;
import com.td.mbna.msec.creditlimit.service.CreditLimitService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.web.servlet.ModelAndView;

public class CreditLimitControllerTest {

    private CreditLimitController creditLimitController;
    private CreditLimitService creditLimitService;
    private HttpServletRequest request;

    @BeforeEach
    public void setUp() {
        creditLimitService = mock(CreditLimitService.class);
        request = mock(HttpServletRequest.class);
        creditLimitController = new CreditLimitController();
        creditLimitController.creditLimitService = creditLimitService;
    }

    @Test
    public void testGetCreditLimitEligibility() {
        String accountId = "12345";
        String expectedEligibility = "Eligible";
        
        when(creditLimitService.getCreditLimitEligibility(eq(accountId), any(HttpServletRequest.class)))
                .thenReturn(expectedEligibility);

        String actualEligibility = creditLimitController.getCreditLimitEligibility(accountId, request);

        assertEquals(expectedEligibility, actualEligibility);
        verify(creditLimitService).getCreditLimitEligibility(accountId, request);
    }

    @Test
    public void testGetCreditLimitInfoIncrease() {
        String accountId = "12345";
        CreditLimitInfoIncrease expectedResponse = new CreditLimitInfoIncrease();
        
        when(creditLimitService.getCreditLimitInfoIncrease(eq(accountId), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitInfoIncrease actualResponse = creditLimitController.getCreditLimitInfoIncrease(accountId, request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).getCreditLimitInfoIncrease(accountId, request);
    }

    @Test
    public void testValidateApprovedCreditLimitIncrease() throws Exception {
        CreditLimitIncreaseRequest requestPayload = new CreditLimitIncreaseRequest();
        CreditLimitIncreaseResponse expectedResponse = new CreditLimitIncreaseResponse();
        
        when(creditLimitService.submitApprovedCreditLimitIncrease(eq(requestPayload), eq(true), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitIncreaseResponse actualResponse = creditLimitController.validateApprovedCreditLimitIncrease(requestPayload, request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).submitApprovedCreditLimitIncrease(requestPayload, true, request);
    }

    @Test
    public void testSubmitCreditLimitIncrease() throws Exception {
        CreditLimitIncreaseRequest requestPayload = new CreditLimitIncreaseRequest();
        CreditLimitIncreaseResponse expectedResponse = new CreditLimitIncreaseResponse();
        
        when(creditLimitService.submitApprovedCreditLimitIncrease(eq(requestPayload), eq(false), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitIncreaseResponse actualResponse = creditLimitController.submitCreditLimitIncrease(requestPayload, request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).submitApprovedCreditLimitIncrease(requestPayload, false, request);
    }

    @Test
    public void testGetCreditLimitInfoIncreaseCli() {
        String accountId = "12345";
        CreditLimitInfoIncreaseCli expectedResponse = new CreditLimitInfoIncreaseCli();
        
        when(creditLimitService.getCreditLimitInfoIncreaseCli(eq(accountId)))
                .thenReturn(expectedResponse);

        CreditLimitInfoIncreaseCli actualResponse = creditLimitController.getCreditLimitInfoIncreaseCli(accountId);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).getCreditLimitInfoIncreaseCli(accountId);
    }

    @Test
    public void testValidateCreditLimitIncreaseCli() throws Exception {
        CreditLimitIncreaseCliRequest requestPayload = new CreditLimitIncreaseCliRequest();
        CreditLimitIncreaseResponse expectedResponse = new CreditLimitIncreaseResponse();
        
        when(creditLimitService.increaseCreditLimitCli(eq(requestPayload), eq(true), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitIncreaseResponse actualResponse = creditLimitController.validateCreditLimitIncreaseCli(requestPayload, request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).increaseCreditLimitCli(requestPayload, true, request);
    }

    @Test
    public void testSubmitCreditLimitIncreaseCli() throws Exception {
        CreditLimitIncreaseCliRequest requestPayload = new CreditLimitIncreaseCliRequest();
        CreditLimitIncreaseResponse expectedResponse = new CreditLimitIncreaseResponse();
        
        when(creditLimitService.increaseCreditLimitCli(eq(requestPayload), eq(false), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitIncreaseResponse actualResponse = creditLimitController.submitCreditLimitIncreaseCli(requestPayload, request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).increaseCreditLimitCli(requestPayload, false, request);
    }

    @Test
    public void testGetCreditLimitInfoDecrease() {
        CreditLimitInfoResponse expectedResponse = new CreditLimitInfoResponse();
        
        when(creditLimitService.getCreditLimitInfoDecrease(any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        CreditLimitInfoResponse actualResponse = creditLimitController.getCreditLimitInfoDecrease(request);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).getCreditLimitInfoDecrease(request);
    }

    @Test
    public void testHandleCreditLimitDecEdit() {
        ModelAndView modelAndView = creditLimitController.handleCreditLimitDecEdit();
        assertEquals("redirect:index.html#/account/creditlimit/cld/entry", modelAndView.getViewName());
    }

    @Test
    public void testHandleCreditLimitIncEditRequest() {
        when(creditLimitService.isACLI(any(HttpServletRequest.class))).thenReturn(true);

        ModelAndView modelAndView = creditLimitController.handleCreditLimitIncEdit(request);
        
        assertEquals("redirect:index.html#/account/creditlimitincrease/approved", modelAndView.getViewName());
        verify(creditLimitService).isACLI(request);
    }

    @Test
    public void testHandleCreditLimitIncEditRequestNonACLI() {
        when(creditLimitService.isACLI(any(HttpServletRequest.class))).thenReturn(false);

        ModelAndView modelAndView = creditLimitController.handleCreditLimitIncEdit(request);
        
        assertEquals("redirect:index.html#/account/creditlimitincrease/request", modelAndView.getViewName());
        verify(creditLimitService).isACLI(request);
    }

    @Test
    public void testVerifyCreditLimitDecrease() {
        CreditLimitDecreaseRequest requestPayload = new CreditLimitDecreaseRequest();
        CreditLimitDecreaseResponse expectedResponse = new CreditLimitDecreaseResponse();
        
        when(creditLimitService.verifyCreditLimitDecrease(eq(requestPayload)))
                .thenReturn(expectedResponse);

        CreditLimitDecreaseResponse actualResponse = creditLimitController.verifyCreditLimitDecrease(requestPayload);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).verifyCreditLimitDecrease(requestPayload);
    }

    @Test
    public void testSubmitCreditLimitDecrease() {
        CreditLimitDecreaseRequest requestPayload = new CreditLimitDecreaseRequest();
        CreditLimitDecreaseResponse expectedResponse = new CreditLimitDecreaseResponse();
        
        when(creditLimitService.submitCreditLimitDecrease(eq(requestPayload)))
                .thenReturn(expectedResponse);

        CreditLimitDecreaseResponse actualResponse = creditLimitController.submitCreditLimitDecrease(requestPayload);

        assertSame(expectedResponse, actualResponse);
        verify(creditLimitService).submitCreditLimitDecrease(requestPayload);
    }
}
