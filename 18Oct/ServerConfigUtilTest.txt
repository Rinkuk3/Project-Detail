import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.InputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ServerConfigUtilTest {

    @BeforeEach
    void setUp() {
        // Clear any existing properties
        System.clearProperty("mbna.config.dir");
        System.clearProperty("mbna.test");
        System.clearProperty("log.root.dir");
        System.clearProperty("serverid");
    }

    @Test
    void testInitWithDefaultConfig() throws Exception {
        System.setProperty("mbna.config.dir", "/test/dir/");
        System.setProperty("mbna.test", "false");

        // Mock the ApiConfig to return an InputStream for properties
        ApiConfig apiConfigMock = Mockito.mock(ApiConfig.class);
        InputStream inputStreamMock = mock(InputStream.class);
        when(apiConfigMock.getInputStreamFromFile("ui.properties")).thenReturn(inputStreamMock);
        when(apiConfigMock.getInputStreamFromFile("ui.properties")).thenThrow(new RuntimeException("Error loading properties"));

        // Simulate the static method call
        ServerConfigUtil.setProperty("mbna.config.dir", "/test/dir/");
        
        // Initialize
        ServerConfigUtil.init();
        
        // Assert properties are set correctly
        assertEquals("/td/logs/WebLogs/MSEC", System.getProperty("log.root.dir"));
        assertNotNull(ServerConfigUtil.getProperty("log.root.dir"));
    }

    @Test
    void testRetrieveAppHostName() throws UnknownHostException {
        String hostName = InetAddress.getLocalHost().getHostName();
        assertEquals(hostName, ServerConfigUtil.retrieveAppHostName());
    }

    @Test
    void testGetProperty() {
        System.setProperty("mbna.config.dir", "/test/dir/");
        System.setProperty("mbna.test", "true");

        // Load properties
        ServerConfigUtil.setProperty("testKey", "testValue");
        assertEquals("testValue", ServerConfigUtil.getProperty("testKey"));
    }

    @Test
    void testGetPropertyWithDefaultValue() {
        String defaultValue = "defaultValue";
        assertEquals(defaultValue, ServerConfigUtil.getProperty("nonExistentKey", defaultValue));
    }

    @Test
    void testSetProperty() {
        ServerConfigUtil.setProperty("testKey", "testValue");
        assertEquals("testValue", ServerConfigUtil.getProperty("testKey"));
    }

    @Test
    void testGetAppServerName() {
        System.setProperty("serverid", "testServer");
        assertEquals("testServer", ServerConfigUtil.getAppServerName());

        System.clearProperty("serverid");
        assertEquals("", ServerConfigUtil.getAppServerName());
    }
}
