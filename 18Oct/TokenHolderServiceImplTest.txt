package com.td.mbna.msec.common;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.coreapi.common.security.AccessTokenClaims;
import com.td.mbna.msec.core.session.SessionProvider;
import org.jose4j.jwt.MalformedClaimException;
import org.jose4j.jwt.consumer.InvalidJwtException;
import com.td.coreapi.common.status.ExpiredTokenException;

public class TokenHolderServiceImplTest {

    @InjectMocks
    private TokenHolderServiceImpl tokenHolderService;

    @Mock
    private JwtTokenHandler jwtTokenHandler;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private AccessTokenClaims accessTokenClaims;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetJwtTokenFromContext() {
        // Arrange
        String expectedToken = "mockJwtToken";
        when(sessionProvider.getSessionAttribute(anyString())).thenReturn(expectedToken);

        // Act
        String actualToken = tokenHolderService.getJwtTokenFromContext();

        // Assert
        assertEquals(expectedToken, actualToken);
        verify(sessionProvider).getSessionAttribute(JWT_ACCESS_TOKEN);
    }

    @Test
    public void testGetConnectIdFromContext() throws InvalidJwtException, MalformedClaimException, ExpiredTokenException {
        // Arrange
        String mockToken = "mockJwtToken";
        String userId = "testUserId";
        
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(mockToken);
        when(jwtTokenHandler.verify(mockToken)).thenReturn(accessTokenClaims);
        when(accessTokenClaims.getUserId()).thenReturn(userId);

        // Act
        String actualUserId = tokenHolderService.getConnectIdFromContext();

        // Assert
        assertEquals(userId, actualUserId);
        verify(sessionProvider).getSessionAttribute(JWT_ACCESS_TOKEN);
        verify(jwtTokenHandler).verify(mockToken);
    }

    @Test
    public void testGetConnectIdFromContext_VerifyExceptionHandling() throws InvalidJwtException, MalformedClaimException {
        // Arrange
        String mockToken = "mockJwtToken";

        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(mockToken);
        when(jwtTokenHandler.verify(mockToken)).thenThrow(new InvalidJwtException("Invalid token"));

        // Act & Assert
        Exception exception = assertThrows(IllegalStateException.class, () -> {
            tokenHolderService.getConnectIdFromContext();
        });

        assertEquals("Failed to verify JWT token", exception.getMessage());
        verify(sessionProvider).getSessionAttribute(JWT_ACCESS_TOKEN);
        verify(jwtTokenHandler).verify(mockToken);
    }

    @Test
    public void testValidateAndSetToken() throws InvalidJwtException, MalformedClaimException, ExpiredTokenException {
        // Arrange
        String mockToken = "mockJwtToken";

        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(mockToken);
        when(jwtTokenHandler.verify(mockToken)).thenReturn(accessTokenClaims);

        // Act
        tokenHolderService.validateAndSetToken();

        // Assert
        verify(sessionProvider).getSessionAttribute(JWT_ACCESS_TOKEN);
        verify(jwtTokenHandler).verify(mockToken);
    }

    @Test
    public void testValidateAndSetToken_VerifyExceptionHandling() throws InvalidJwtException, MalformedClaimException {
        // Arrange
        String mockToken = "mockJwtToken";

        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(mockToken);
        when(jwtTokenHandler.verify(mockToken)).thenThrow(new ExpiredTokenException("Expired token"));

        // Act & Assert
        Exception exception = assertThrows(IllegalStateException.class, () -> {
            tokenHolderService.validateAndSetToken();
        });

        assertEquals("Failed to verify JWT token", exception.getMessage());
        verify(sessionProvider).getSessionAttribute(JWT_ACCESS_TOKEN);
        verify(jwtTokenHandler).verify(mockToken);
    }
}
