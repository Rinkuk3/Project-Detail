import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.exception.AccountAlreadyExistException;
import com.td.mbna.msec.common.exception.InvalidAccountException;
import com.td.mbna.msec.midtier.types.common.CustAcctType;

import java.util.ArrayList;
import java.util.Collections;

public class CustomerDetailsTest {

    private CustomerDetails customerDetails;
    private AccountDetails mockAccount;

    @BeforeEach
    public void setUp() {
        customerDetails = new CustomerDetails();
        customerDetails.setAccounts(new ArrayList<>());
        mockAccount = mock(AccountDetails.class);
    }

    @Test
    public void testUpdateCustomer() {
        customerDetails.updateCustomer("John", "Doe");
        assertEquals("John", customerDetails.getFirstName());
        assertEquals("Doe", customerDetails.getLastName());
    }

    @Test
    public void testAddAccount_NewAccount() throws AccountAlreadyExistException {
        when(mockAccount.getAccountNumber()).thenReturn("12345");
        when(customerDetails.getAccounts()).thenReturn(new ArrayList<>());

        customerDetails.addAccount(mockAccount);
        assertEquals(1, customerDetails.getAccounts().size());
    }

    @Test
    public void testAddAccount_ExistingAccount() {
        when(mockAccount.getAccountNumber()).thenReturn("12345");
        customerDetails.getAccounts().add(mockAccount);

        Exception exception = assertThrows(AccountAlreadyExistException.class, () -> {
            customerDetails.addAccount(mockAccount);
        });

        assertEquals("12345", exception.getMessage());
    }

    @Test
    public void testRemoveAccount_ValidAccount() throws InvalidAccountException {
        when(mockAccount.getAccountNumber()).thenReturn("12345");
        customerDetails.getAccounts().add(mockAccount);

        customerDetails.removeAccount(mockAccount);
        assertEquals(0, customerDetails.getAccounts().size());
    }

    @Test
    public void testRemoveAccount_InvalidAccount() {
        when(mockAccount.getAccountNumber()).thenReturn("12345");

        Exception exception = assertThrows(InvalidAccountException.class, () -> {
            customerDetails.removeAccount(mockAccount);
        });

        assertEquals("12345", exception.getMessage());
    }

    @Test
    public void testGetAccount_ExistingAccount() {
        when(mockAccount.getAccountId()).thenReturn("accountId1");
        customerDetails.getAccounts().add(mockAccount);

        AccountDetails account = customerDetails.getAccount("accountId1");
        assertNotNull(account);
        assertEquals(mockAccount, account);
    }

    @Test
    public void testGetAccount_NonExistingAccount() {
        AccountDetails account = customerDetails.getAccount("nonExistingId");
        assertNull(account);
    }

    @Test
    public void testToString() {
        customerDetails.setId("1");
        customerDetails.setUsername("username");
        customerDetails.setFirstName("John");
        customerDetails.setLastName("Doe");
        customerDetails.setDisplayName("John Doe");

        String expectedString = "Customer [id=1 username=username firstName=John lastName=Doe displayName=John Doe accounts=null allowedAccounts=null kycNeededAccts=null cliAccts=null allAccts=null]";
        assertEquals(expectedString, customerDetails.toString());
    }

    @Test
    public void testGetAllowedAccounts_Empty() {
        ArrayList<AccountDetails> allowedAccounts = customerDetails.getAllowedAccounts();
        assertTrue(allowedAccounts.isEmpty());
    }

    @Test
    public void testGetAllowedAccounts_NonEmpty() {
        when(mockAccount.isAllowedAccountSummary()).thenReturn(true);
        customerDetails.getAccounts().add(mockAccount);

        ArrayList<AccountDetails> allowedAccounts = customerDetails.getAllowedAccounts();
        assertEquals(1, allowedAccounts.size());
        assertEquals(mockAccount, allowedAccounts.get(0));
    }

    @Test
    public void testGetPaperlessAccountList_NullCheck() {
        Set<AccountDetails> paperlessAccounts = customerDetails.getPaperlessAccountList();
        assertNotNull(paperlessAccounts);
    }

    @Test
    public void testSetPaperlessAccountList() {
        Set<AccountDetails> paperlessAccounts = Collections.singleton(mockAccount);
        customerDetails.setPaperlessAccountList(paperlessAccounts);
        assertEquals(paperlessAccounts, customerDetails.getPaperlessAccountList());
    }

    @Test
    public void testGetHybridAccountIDs() {
        ArrayList<String> hybridAccounts = customerDetails.getHybridAccountIDs();
        assertNotNull(hybridAccounts);
    }
}
