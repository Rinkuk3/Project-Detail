import com.td.api.mbcca.response.account.Accountstatus;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.cardlock.model.CardControlRequest;
import com.td.mbna.msec.cardlock.model.CardControlResponse;
import com.td.mbna.msec.midtier.cardlock.payload.CardAuthorizationStatus;
import com.td.mbna.msec.midtier.cardlock.payload.CardLockResponse;
import com.td.mbna.msec.midtier.cardlock.payload.RequestPayload;
import com.td.mbna.msec.midtier.mbcca.MbnaCCA;
import com.td.mbna.msec.common.WcmContentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CardControlServiceImplTest {

    @InjectMocks
    private CardControlServiceImpl cardControlService;

    @Mock
    private WcmContentService wcmContentService;

    @Mock
    private MbnaCCA mbnaCCA;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetCardStatus_KillSwitchEnabled() {
        when(wcmContentService.getContentByID("kill_switch", null)).thenReturn("{\"card_control\": true}");
        when(sessionProvider.getCurrentAccount()).thenReturn(new AccountDetails());

        CardControlResponse response = cardControlService.getCardStatus("accountId");

        assertFalse(response.getEligibility());
        verify(sessionProvider, times(1)).getCurrentAccount();
    }

    @Test
    public void testGetCardStatus_AccountNotInSession() {
        when(sessionProvider.getSessionAttribute("CACHED_ACCOUNT")).thenReturn(null);
        when(sessionProvider.getAccount("accountId")).thenReturn(new AccountDetails());

        CardControlResponse response = cardControlService.getCardStatus("accountId");

        assertNotNull(response);
        verify(midTierServiceHelper, times(1)).getCardLockStatus(any(RequestPayload.class));
    }

    @Test
    public void testGetCardStatus_AccountInSession_CachedResponse() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setAliasCustId("customerId");
        accountDetails.setAccountId("accountId");

        Map<String, Object> responseMap = new HashMap<>();
        CardControlResponse cachedResponse = new CardControlResponse();
        cachedResponse.setEligibility(true);
        responseMap.put("customerId", cachedResponse);
        
        when(sessionProvider.getSessionAttribute("CACHED_ACCOUNT")).thenReturn("accountId");
        when(sessionProvider.getSessionAttribute("responseMap_Cache")).thenReturn(responseMap);
        when(sessionProvider.getAccount("accountId")).thenReturn(accountDetails);

        CardControlResponse response = cardControlService.getCardStatus("accountId");

        assertTrue(response.getEligibility());
        assertEquals("customerId", response.getCustomerId());
    }

    @Test
    public void testGetCardControlResponse_Success() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setAliasCustId("customerId");
        accountDetails.setAccountId("accountId");

        when(midTierServiceHelper.getCardLockStatus(any(RequestPayload.class))).thenReturn(new CardLockResponse());
        when(sessionProvider.getAccount("accountId")).thenReturn(accountDetails);
        when(sessionProvider.getSessionAttribute("CACHED_ACCOUNT")).thenReturn("accountId");

        CardControlResponse response = cardControlService.getCardStatus("accountId");

        assertNotNull(response);
        verify(midTierServiceHelper, times(1)).getCardLockStatus(any(RequestPayload.class));
    }

    @Test
    public void testUpdateCardControlStatus_Success() {
        CardControlRequest request = new CardControlRequest();
        request.setCustomerId("customerId");
        request.setActive(true);

        when(midTierServiceHelper.updateCardLockStatus(any(RequestPayload.class))).thenReturn(new CardLockResponse());
        
        CardControlResponse response = cardControlService.updateCardControlStatus("accountId", request);

        assertNotNull(response);
        assertEquals("customerId", response.getCustomerId());
    }

    @Test
    public void testUpdateCardControlStatus_Error() {
        CardControlRequest request = new CardControlRequest();
        request.setCustomerId("customerId");
        request.setActive(true);
        
        CardLockResponse errorResponse = new CardLockResponse();
        errorResponse.setStatus("500");
        errorResponse.setErrorMsgs(Collections.singletonList("error occurred"));
        
        when(midTierServiceHelper.updateCardLockStatus(any(RequestPayload.class))).thenReturn(errorResponse);

        CardControlResponse response = cardControlService.updateCardControlStatus("accountId", request);

        assertNotNull(response);
        assertEquals("500", response.getStatus());
        assertEquals("error occurred", response.getErrorCode());
    }

    @Test
    public void testIsValidAccountStatus_Valid() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setCardNumber("12345");

        Accountstatus accountStatus = new Accountstatus();
        accountStatus.setReasonCd("LS");
        accountStatus.setCd("SF");
        
        when(mbnaCCA.getAccountStatus(anyString(), anyList(), anyString())).thenReturn(Collections.singletonList(accountStatus));

        Boolean isValid = cardControlService.isValidAccountStatus(accountDetails);

        assertFalse(isValid); // Based on the predicate logic
    }

    @Test
    public void testIsValidAccountStatus_NoStatus() {
        AccountDetails accountDetails = new AccountDetails();
        accountDetails.setCardNumber("12345");

        when(mbnaCCA.getAccountStatus(anyString(), anyList(), anyString())).thenReturn(Collections.emptyList());

        Boolean isValid = cardControlService.isValidAccountStatus(accountDetails);

        assertTrue(isValid);
    }

    @Test
    public void testKillSwitchEnabled_Success() {
        when(wcmContentService.getContentByID("kill_switch", null)).thenReturn("{\"card_control\": false}");

        Boolean isEnabled = cardControlService.killSwitchEnabled();

        assertFalse(isEnabled);
    }

    @Test
    public void testKillSwitchEnabled_JsonError() {
        when(wcmContentService.getContentByID("kill_switch", null)).thenThrow(new RuntimeException("WCM error"));

        Boolean isEnabled = cardControlService.killSwitchEnabled();

        assertFalse(isEnabled);
    }

    @Test
    public void testPrepareResponse() {
        CardControlResponse response = cardControlService.prepareResponse("customerId", true, false);

        assertEquals("customerId", response.getCustomerId());
        assertTrue(response.getEligibility());
        assertFalse(response.getActive());
    }
}
