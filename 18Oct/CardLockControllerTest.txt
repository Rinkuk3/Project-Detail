import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.mbna.msec.cardlock.model.CardControlRequest;
import com.td.mbna.msec.cardlock.model.CardControlResponse;
import com.td.mbna.msec.cardlock.service.CardControlService;
import com.td.mbna.msec.cardlock.controller.CardLockController;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

@RestController
public class CardLockControllerTest {

    @InjectMocks
    private CardLockController cardLockController;

    @Mock
    private CardControlService cardControlService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCardControlStatus_ValidAccountId() {
        // Arrange
        String accountId = "12345";
        CardControlResponse expectedResponse = new CardControlResponse();
        when(cardControlService.getCardStatus(accountId)).thenReturn(expectedResponse);

        // Act
        CardControlResponse result = cardLockController.cardControlStatus(accountId);

        // Assert
        assertNotNull(result);
        assertEquals(expectedResponse, result);
        verify(cardControlService, times(1)).getCardStatus(accountId);
    }

    @Test
    public void testUpdateCardControlStatus_ValidRequest() {
        // Arrange
        String accountId = "12345";
        CardControlRequest request = new CardControlRequest();
        CardControlResponse expectedResponse = new CardControlResponse();
        when(cardControlService.updateCardControlStatus(accountId, request)).thenReturn(expectedResponse);

        // Act
        CardControlResponse result = cardLockController.updateCardControlStatus(accountId, request);

        // Assert
        assertNotNull(result);
        assertEquals(expectedResponse, result);
        verify(cardControlService, times(1)).updateCardControlStatus(accountId, request);
    }

    @Test
    public void testUpdateCardControlStatus_NullRequest() {
        // Arrange
        String accountId = "12345";
        CardControlRequest request = null;

        // Act & Assert
        Exception exception = assertThrows(NullPointerException.class, () -> {
            cardLockController.updateCardControlStatus(accountId, request);
        });
        assertEquals("request cannot be null", exception.getMessage());
    }

    @Test
    public void testCardControlStatus_NonExistingAccount() {
        // Arrange
        String accountId = "non-existing-account";
        when(cardControlService.getCardStatus(accountId)).thenThrow(new RuntimeException("Account not found"));

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            cardLockController.cardControlStatus(accountId);
        });
        assertEquals("Account not found", exception.getMessage());
    }
}
