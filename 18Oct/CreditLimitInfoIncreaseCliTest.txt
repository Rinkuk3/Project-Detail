package com.td.mbna.msec.creditlimit.model;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;

import com.td.mbna.msec.customer.domain.EmployerInfo;
import com.td.mbna.msec.customer.domain.OtherIncome;

public class CreditLimitInfoIncreaseCliTest {

    @Test
    public void testSetAndGetCreditLimit() {
        BigDecimal creditLimit = new BigDecimal("5000.00");
        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .creditLimit(creditLimit)
                .build();

        assertEquals(creditLimit, creditLimitInfo.getCreditLimit());
    }

    @Test
    public void testSetAndGetCurrentBalance() {
        BigDecimal currentBalance = new BigDecimal("3000.00");
        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .currentBalance(currentBalance)
                .build();

        assertEquals(currentBalance, creditLimitInfo.getCurrentBalance());
    }

    @Test
    public void testSetAndGetEmployerInfo() {
        EmployerInfo employerInfo = new EmployerInfo();
        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .employerInfo(employerInfo)
                .build();

        assertEquals(employerInfo, creditLimitInfo.getEmployerInfo());
    }

    @Test
    public void testSetAndGetOtherIncome() {
        OtherIncome otherIncome = new OtherIncome();
        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .otherIncome(otherIncome)
                .build();

        assertEquals(otherIncome, creditLimitInfo.getOtherIncome());
    }

    @Test
    public void testBuilder() {
        BigDecimal creditLimit = new BigDecimal("6000.00");
        BigDecimal currentBalance = new BigDecimal("2000.00");
        EmployerInfo employerInfo = new EmployerInfo();
        OtherIncome otherIncome = new OtherIncome();

        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .creditLimit(creditLimit)
                .currentBalance(currentBalance)
                .employerInfo(employerInfo)
                .otherIncome(otherIncome)
                .build();

        assertNotNull(creditLimitInfo);
        assertEquals(creditLimit, creditLimitInfo.getCreditLimit());
        assertEquals(currentBalance, creditLimitInfo.getCurrentBalance());
        assertEquals(employerInfo, creditLimitInfo.getEmployerInfo());
        assertEquals(otherIncome, creditLimitInfo.getOtherIncome());
    }

    @Test
    public void testToString() {
        BigDecimal creditLimit = new BigDecimal("4000.00");
        BigDecimal currentBalance = new BigDecimal("1000.00");
        EmployerInfo employerInfo = new EmployerInfo();
        OtherIncome otherIncome = new OtherIncome();

        CreditLimitInfoIncreaseCli creditLimitInfo = CreditLimitInfoIncreaseCli.builder()
                .creditLimit(creditLimit)
                .currentBalance(currentBalance)
                .employerInfo(employerInfo)
                .otherIncome(otherIncome)
                .build();

        String expectedString = "CreditLimitInfoIncreaseCli(creditLimit=" + creditLimit + 
            ", currentBalance=" + currentBalance + 
            ", employerInfo=" + employerInfo + 
            ", otherIncome=" + otherIncome + ")";
        assertEquals(expectedString, creditLimitInfo.toString());
    }
}
