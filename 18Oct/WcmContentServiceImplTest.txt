package com.td.mbna.msec.common;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.google.gson.Gson;
import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.content.payload.getpagecontent.ResponsePayload;

public class WcmContentServiceImplTest {

    @InjectMocks
    private WcmContentServiceImpl wcmContentService;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private HttpServletRequest request;

    @Mock
    private ResponsePayload responsePayload;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetPageContentPayload_NullRequest() {
        // Arrange
        String pageId = "testPageId";
        String expectedLangId = "en_CA";
        
        when(sessionProvider.getSessionAttribute(anyString())).thenReturn(expectedLangId);
        when(midTierServiceHelper.getPageContent(any(), any())).thenReturn(responsePayload);
        
        // Act
        ResponsePayload result = wcmContentService.getPageContentPayload(pageId, null);

        // Assert
        assertNotNull(result);
        verify(sessionProvider).getSessionAttribute(SELECTED_LOCALE);
        verify(midTierServiceHelper).getPageContent(any(), any());
    }

    @Test
    public void testGetPageContentPayload_WithRequest() {
        // Arrange
        String pageId = "testPageId";
        String langId = "fr_CA";
        
        when(HttpUtil.getPreferredLang(request)).thenReturn(langId);
        when(midTierServiceHelper.getPageContent(any(), any())).thenReturn(responsePayload);
        
        // Act
        ResponsePayload result = wcmContentService.getPageContentPayload(pageId, request);

        // Assert
        assertNotNull(result);
        verify(sessionProvider, never()).getSessionAttribute(SELECTED_LOCALE);
        verify(midTierServiceHelper).getPageContent(any(), any());
    }

    @Test
    public void testGetPageContentPayloadWithLanguage() {
        // Arrange
        String pageId = "testPageId";
        String langId = "en_CA";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(langId);
        when(midTierServiceHelper.getPageContent(any(), any())).thenReturn(responsePayload);

        // Act
        ResponsePayload result = wcmContentService.getPageContentPayloadWithLanguage(pageId, langId);

        // Assert
        assertNotNull(result);
        verify(midTierServiceHelper).getPageContent(any(), any());
    }

    @Test
    public void testGetPageContentPayloadWithLanguage_LangIdNull() {
        // Arrange
        String pageId = "testPageId";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(null);
        when(midTierServiceHelper.getPageContent(any(), any())).thenReturn(responsePayload);

        // Act
        ResponsePayload result = wcmContentService.getPageContentPayloadWithLanguage(pageId, null);

        // Assert
        assertNotNull(result);
        verify(midTierServiceHelper).getPageContent(any(), any());
    }

    @Test
    public void testGetPageContentPayloadWithLanguage_ExceptionHandling() {
        // Arrange
        String pageId = "testPageId";
        String langId = "en_CA";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(langId);
        doThrow(new RuntimeException("Error")).when(midTierServiceHelper).getPageContent(any(), any());

        // Act & Assert
        Exception exception = assertThrows(com.td.mbna.msec.midtier.exceptions.BusinessException.class, () -> {
            wcmContentService.getPageContentPayloadWithLanguage(pageId, langId);
        });

        assertEquals("WcmContentService business exception", exception.getMessage());
    }

    @Test
    public void testGetImgLinkFromWCM() {
        // Arrange
        String connectId = "testConnectId";
        String expectedUrl = "http://wcm.test.com/image.jpg";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en_CA");
        when(midTierServiceHelper.getLinkContent(any())).thenReturn(responsePayload);
        when(responsePayload.getLinkContent()).thenReturn(List.of(new LinkContent(expectedUrl)));

        // Act
        String result = wcmContentService.getImgLinkFromWCM(connectId);

        // Assert
        assertEquals(expectedUrl, result);
        verify(midTierServiceHelper).getLinkContent(any());
    }

    @Test
    public void testGetImgLinkFromWCM_ExceptionHandling() {
        // Arrange
        String connectId = "testConnectId";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en_CA");
        doThrow(new RuntimeException("Error")).when(midTierServiceHelper).getLinkContent(any());

        // Act
        String result = wcmContentService.getImgLinkFromWCM(connectId);

        // Assert
        assertNull(result);
        verify(midTierServiceHelper).getLinkContent(any());
    }

    @Test
    public void testGetContentByID_WithRequest() {
        // Arrange
        String contentId = "testContentId";
        when(wcmContentService.getPageContentPayload(contentId, request)).thenReturn(responsePayload);
        when(responsePayload.getContent()).thenReturn("Test Content");

        // Act
        String result = wcmContentService.getContentByID(contentId, request);

        // Assert
        assertEquals("Test Content", result);
    }

    @Test
    public void testGetContentByID_NullResponse() {
        // Arrange
        String contentId = "testContentId";
        when(wcmContentService.getPageContentPayload(contentId, request)).thenReturn(null);

        // Act
        String result = wcmContentService.getContentByID(contentId, request);

        // Assert
        assertNull(result);
    }

    @Test
    public void testGetContentByID_StringLang() {
        // Arrange
        String contentId = "testContentId";
        String langId = "en_CA";
        when(wcmContentService.getPageContentPayloadWithLanguage(contentId, langId)).thenReturn(responsePayload);
        when(responsePayload.getContent()).thenReturn("Test Content");

        // Act
        String result = wcmContentService.getContentByID(contentId, langId);

        // Assert
        assertEquals("Test Content", result);
    }

    @Test
    public void testGetContentByID_StringLang_NullResponse() {
        // Arrange
        String contentId = "testContentId";
        String langId = "en_CA";
        when(wcmContentService.getPageContentPayloadWithLanguage(contentId, langId)).thenReturn(null);

        // Act
        String result = wcmContentService.getContentByID(contentId, langId);

        // Assert
        assertNull(result);
    }

    @Test
    public void testGetContentByID_NoLang() {
        // Arrange
        String contentId = "testContentId";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en_CA");
        when(wcmContentService.getPageContentPayloadWithLanguage(contentId, "en_CA")).thenReturn(responsePayload);
        when(responsePayload.getContent()).thenReturn("Test Content");

        // Act
        String result = wcmContentService.getContentByID(contentId);

        // Assert
        assertEquals("Test Content", result);
    }

    @Test
    public void testGetContentByID_NoLang_NullResponse() {
        // Arrange
        String contentId = "testContentId";
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn("en_CA");
        when(wcmContentService.getPageContentPayloadWithLanguage(contentId, "en_CA")).thenReturn(null);

        // Act
        String result = wcmContentService.getContentByID(contentId);

        // Assert
        assertNull(result);
    }
}
