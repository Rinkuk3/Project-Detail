package com.td.mbna.msec.common.servlet;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;

public class MockCIPTest {

    private MockCIP mockCIP;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private HttpSession session;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockCIP = new MockCIP();
    }

    @Test
    public void testDoGet_WithValidUsername() throws ServletException, IOException {
        // Arrange
        String username = "validUsername";
        when(request.getParameter("username")).thenReturn(username);
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doGet(request, response);

        // Assert
        verify(session).setAttribute(MockCIP.SESSION_CONNECT_ID, username);
        verify(session).setAttribute(MockCIP.SESSION_LOGIN_ID, username);
        verify(response).sendRedirect(anyString());
    }

    @Test
    public void testDoGet_WithEmptyUsername() throws ServletException, IOException {
        // Arrange
        when(request.getParameter("username")).thenReturn("");
        when(request.getContextPath()).thenReturn("/app");
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doGet(request, response);

        // Assert
        verify(response).sendRedirect("/app/notfound");
    }

    @Test
    public void testDoGet_WithNullUsername() throws ServletException, IOException {
        // Arrange
        when(request.getParameter("username")).thenReturn(null);
        when(request.getContextPath()).thenReturn("/app");
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doGet(request, response);

        // Assert
        verify(response).sendRedirect("/app/notfound");
    }

    @Test
    public void testDoPost_WithValidUsername() throws ServletException, IOException {
        // Arrange
        String username = "validUsername";
        when(request.getParameter("username")).thenReturn(username);
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doPost(request, response);

        // Assert
        verify(session).setAttribute(MockCIP.SESSION_CONNECT_ID, username);
        verify(session).setAttribute(MockCIP.SESSION_LOGIN_ID, username);
        verify(response).sendRedirect(anyString());
    }

    @Test
    public void testDoPost_WithEmptyUsername() throws ServletException, IOException {
        // Arrange
        when(request.getParameter("username")).thenReturn("");
        when(request.getContextPath()).thenReturn("/app");
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doPost(request, response);

        // Assert
        verify(response).sendRedirect("/app/notfound");
    }

    @Test
    public void testDoPost_WithNullUsername() throws ServletException, IOException {
        // Arrange
        when(request.getParameter("username")).thenReturn(null);
        when(request.getContextPath()).thenReturn("/app");
        when(request.getSession()).thenReturn(session);

        // Act
        mockCIP.doPost(request, response);

        // Assert
        verify(response).sendRedirect("/app/notfound");
    }

    @Test
    public void testDoWork_RedirectFailure() throws IOException {
        // Arrange
        String username = "validUsername";
        when(request.getParameter("username")).thenReturn(username);
        when(request.getSession()).thenReturn(session);
        doThrow(new IOException("Redirect failed")).when(response).sendRedirect(anyString());

        // Act
        mockCIP.doWork(request, response);

        // Assert
        verify(session).setAttribute(MockCIP.SESSION_CONNECT_ID, username);
        verify(session).setAttribute(MockCIP.SESSION_LOGIN_ID, username);
        // Check for logged error, you may need a way to verify this.
    }
}
