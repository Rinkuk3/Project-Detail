package com.td.mbna.msec.common.midtier;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.JWT_ACCESS_TOKEN;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.infrastructure.util.MsecbffConstants;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.TrackableRequest;
import com.td.mbna.msec.midtier.types.common.TrackingInfoType;
import com.td.mbna.msec.midtier.util.AuditLogger;

class RequestBuilderTest {

    private RequestBuilder requestBuilder;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private AuditLogger auditLogger;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private HttpSession httpSession;

    @Mock
    private CustomerDetails customerDetails;

    @Mock
    private AccountDetails accountDetails;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        requestBuilder = new RequestBuilder();
        requestBuilder.sessionProvider = sessionProvider;
        requestBuilder.auditLogger = auditLogger;

        when(sessionProvider.getHttpServletRequest()).thenReturn(httpServletRequest);
        when(httpServletRequest.getSession()).thenReturn(httpSession);
    }

    @Test
    void testGenClientAction() {
        when(httpServletRequest.getRequestURL()).thenReturn(new StringBuffer("http://test.com/resource.action"));
        String result = requestBuilder.genClientAction("TestClass");
        assertEquals("http://test.com/resource", result);
    }

    @Test
    void testGenClientActionWithNullRequest() {
        when(sessionProvider.getHttpServletRequest()).thenReturn(null);
        String result = requestBuilder.genClientAction("TestClass");
        assertNull(result);
    }

    @Test
    void testGenTrackingInfo() {
        when(sessionProvider.getConnectId()).thenReturn("connectId");
        when(sessionProvider.getLoginId()).thenReturn("loginId");
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn("token");
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.0.1");
        when(httpSession.getId()).thenReturn("sessionId");
        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(customerDetails.getFirstName()).thenReturn("John");
        when(customerDetails.getLastName()).thenReturn("Doe");

        TrackingInfoType trackingInfo = requestBuilder.genTrackingInfo(BaseRequest.class);

        assertEquals("connectId", trackingInfo.getConnectId());
        assertEquals("loginId", trackingInfo.getLoginId());
        assertEquals("Bearer token", trackingInfo.getToken());
        assertEquals("192.168.0.1", trackingInfo.getIpAddr());
        assertEquals("sessionId", trackingInfo.getSessionId());
        assertEquals("John", trackingInfo.getFirstName());
        assertEquals("Doe", trackingInfo.getLastName());
    }

    @Test
    void testGenTrackingInfoWithException() {
        when(sessionProvider.getSessionCustomer()).thenThrow(new RuntimeException("Test Exception"));
        TrackingInfoType trackingInfo = requestBuilder.genTrackingInfo(BaseRequest.class);
        assertNotNull(trackingInfo); // Ensure trackingInfo is still created
    }

    @Test
    void testGenRequestWithClass() {
        TrackableRequest request = requestBuilder.genRequest(TrackableRequestImpl.class);
        assertNotNull(request);
        assertEquals(TrackableRequestImpl.class, request.getClass());
    }

    @Test
    void testGenRequestWithEventCode() {
        String eventCode = "EVENT_CODE";
        TrackableRequest request = requestBuilder.genRequest(TrackableRequestImpl.class, eventCode);
        assertNotNull(request);
        assertEquals(eventCode, request.getSessionInfo().getEventCode()); // Assuming the eventCode is set in the request
    }

    @Test
    void testGenInitialCustomerRequest() {
        String custId = "custId";
        String eventCode = "EVENT_CODE";
        when(sessionProvider.getSessionCustomerId()).thenReturn("customerId");

        BaseRequest request = requestBuilder.genInitialCustomerRequest(custId, BaseRequest.class, eventCode);
        assertNotNull(request);
        assertEquals(custId, request.getCustId());
    }

    @Test
    void testGenRequestHandlesException() {
        when(sessionProvider.getConnectId()).thenThrow(new RuntimeException("Test Exception"));

        assertThrows(RuntimeException.class, () -> {
            requestBuilder.genRequest(TrackableRequestImpl.class, "EVENT_CODE");
        });
    }

    @Test
    void testLogTransactionStatus() {
        BaseRequest baseRequest = new BaseRequest();
        requestBuilder.logTransactionStatus(baseRequest, "SUCCESS");
        assertEquals("SUCCESS", baseRequest.getAuditInfo().getTransactionStatus());
    }

    @Test
    void testGetCustInterfaceWithSessionAttribute() {
        when(sessionProvider.getSessionAttribute(MsecbffConstants.CUST_INTERFACE_TARGET)).thenReturn("CUSTOM_INTERFACE");
        String result = requestBuilder.getCustInterface();
        assertEquals("CUSTOM_INTERFACE", result);
    }

    @Test
    void testGetCustInterfaceWithDefault() {
        when(sessionProvider.getSessionAttribute(MsecbffConstants.CUST_INTERFACE_TARGET)).thenReturn(null);
        String result = requestBuilder.getCustInterface();
        assertEquals("ODS", result); // Default value
    }

    // Mock class for TrackableRequest to be used in tests
    static class TrackableRequestImpl extends TrackableRequest {
        public TrackableRequestImpl() {
            this.setSessionInfo(new TrackingInfoType());
        }
    }
}
