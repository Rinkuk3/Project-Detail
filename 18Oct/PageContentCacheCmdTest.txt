package com.td.mbna.msec.common;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload;
import com.td.mbna.msec.midtier.content.payload.getpagecontent.ResponsePayload;
import com.td.mbna.msec.midtier.util.MbnaLogger;

public class PageContentCacheCmdTest {

    private MidTierServiceHelper midTierServiceHelper;
    private PageContentCacheCmd pageContentCacheCmd;

    @BeforeEach
    public void setUp() {
        midTierServiceHelper = mock(MidTierServiceHelper.class);
        pageContentCacheCmd = new PageContentCacheCmd(midTierServiceHelper, "testPageId", "en", "testAuditCode");
    }

    @Test
    public void testConstructor() {
        assertEquals("testPageId", pageContentCacheCmd.getPageId());
        assertEquals("en", pageContentCacheCmd.getLangId());
        assertEquals("testAuditCode", pageContentCacheCmd.getAuditCode());
    }

    @Test
    public void testPerformExecute() throws Exception {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setContent("Test Content");

        // Mocking the behavior of midTierServiceHelper
        when(midTierServiceHelper.getPageContent(any(RequestPayload.class), eq("testAuditCode")))
            .thenReturn(responsePayload);

        // Perform the execute method
        pageContentCacheCmd.performExecute();

        // Validate that the response payload was set correctly
        assertNotNull(pageContentCacheCmd.getResPayload());
        assertEquals("Test Content", pageContentCacheCmd.getResPayload().getContent());

        // Verify that the midTierServiceHelper was called
        verify(midTierServiceHelper).getPageContent(any(RequestPayload.class), eq("testAuditCode"));
    }

    @Test
    public void testPerformExecuteException() throws Exception {
        // Mocking the behavior to throw an exception
        when(midTierServiceHelper.getPageContent(any(RequestPayload.class), eq("testAuditCode")))
            .thenThrow(new RuntimeException("Service error"));

        // Asserting that the exception is thrown when performExecute is called
        Exception exception = assertThrows(Exception.class, () -> {
            pageContentCacheCmd.performExecute();
        });

        assertEquals("Service error", exception.getCause().getMessage());

        // Verify that the logger was called
        // (You'll need to adjust the logger's behavior to verify logging if necessary)
    }

    @Test
    public void testSettersAndGetters() {
        pageContentCacheCmd.setPageId("newPageId");
        pageContentCacheCmd.setLangId("fr");
        pageContentCacheCmd.setAuditCode("newAuditCode");

        assertEquals("newPageId", pageContentCacheCmd.getPageId());
        assertEquals("fr", pageContentCacheCmd.getLangId());
        assertEquals("newAuditCode", pageContentCacheCmd.getAuditCode());
    }
}
