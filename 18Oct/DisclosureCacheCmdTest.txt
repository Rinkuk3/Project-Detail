package com.td.mbna.msec.common;

import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import com.td.mbna.msec.midtier.disclosure.payload.getdisclosure.GetDisclosureResponse;
import com.td.mbna.msec.midtier.disclosure.payload.getdisclosure.RequestPayload;
import com.td.mbna.msec.midtier.types.common.DisclosureInfoType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class DisclosureCacheCmdTest {

    private DisclosureCacheCmd disclosureCacheCmd;
    private MidTierServiceHelper midTierServiceHelper;

    @BeforeEach
    void setUp() {
        midTierServiceHelper = Mockito.mock(MidTierServiceHelper.class);
        disclosureCacheCmd = new DisclosureCacheCmd(midTierServiceHelper, DISCLOSURE_EAA_FIRST, "en", "auditCode123");
    }

    @Test
    void testIsReadyToCallExecute_WithValidDisclosureTypeAndLanguageId() {
        assertTrue(disclosureCacheCmd.isReadyToCallExecute());
    }

    @Test
    void testIsReadyToCallExecute_WithNullDisclosureType() {
        disclosureCacheCmd.setDisclosureType(null);
        assertFalse(disclosureCacheCmd.isReadyToCallExecute());
    }

    @Test
    void testIsReadyToCallExecute_WithNullLanguageId() {
        disclosureCacheCmd.setLanguageId(null);
        assertFalse(disclosureCacheCmd.isReadyToCallExecute());
    }

    @Test
    void testPerformExecute_Success() throws Exception {
        // Mock response
        GetDisclosureResponse mockResponse = new GetDisclosureResponse();
        DisclosureInfoType mockInfo = new DisclosureInfoType();
        mockResponse.setResponsePayload(new GetDisclosureResponse.ResponsePayload());
        mockResponse.getResponsePayload().setDisclosureInfo(mockInfo);
        mockResponse.getResponsePayload().setContent("Sample Disclosure Text");

        when(midTierServiceHelper.getDisclosure(any(RequestPayload.class), any(String.class)))
                .thenReturn(mockResponse);

        // Call performExecute
        disclosureCacheCmd.performExecute();

        // Assertions
        assertNotNull(disclosureCacheCmd.getDisclosureInfo());
        assertEquals("Sample Disclosure Text", disclosureCacheCmd.getDisclosureText());
    }

    @Test
    void testPerformExecute_NoResponse() throws Exception {
        when(midTierServiceHelper.getDisclosure(any(RequestPayload.class), any(String.class)))
                .thenReturn(new GetDisclosureResponse());

        disclosureCacheCmd.performExecute();

        // Ensure no exceptions are thrown and the state remains unchanged
        assertNull(disclosureCacheCmd.getDisclosureInfo());
        assertNull(disclosureCacheCmd.getDisclosureText());
    }

    @Test
    void testPerformExecute_FailureWithRetry() throws Exception {
        // Mock failure in the first call
        when(midTierServiceHelper.getDisclosure(any(RequestPayload.class), any(String.class)))
                .thenThrow(new RuntimeException("Service Error"));

        // Simulate existing saved data for fallback
        DisclosureInfoType savedInfo = new DisclosureInfoType();
        disclosureCacheCmd.setDisclosureInfo(savedInfo);
        disclosureCacheCmd.setDisclosureText("Fallback Disclosure Text");
        disclosureCacheCmd.performExecute();

        // Ensure the fallback data is used
        assertEquals(savedInfo, disclosureCacheCmd.getDisclosureInfo());
        assertEquals("Fallback Disclosure Text", disclosureCacheCmd.getDisclosureText());
    }

    @Test
    void testPerformExecute_FailureWithoutFallback() {
        when(midTierServiceHelper.getDisclosure(any(RequestPayload.class), any(String.class)))
                .thenThrow(new RuntimeException("Service Error"));

        // Execute and expect exception
        assertThrows(RuntimeException.class, () -> disclosureCacheCmd.performExecute());
    }

    // Test for getter and setter methods
    @Test
    void testGettersAndSetters() {
        disclosureCacheCmd.setDisclosureText("Sample Disclosure Text");
        assertEquals("Sample Disclosure Text", disclosureCacheCmd.getDisclosureText());

        disclosureCacheCmd.setDisclosureType("newDisclosureType");
        assertEquals("newDisclosureType", disclosureCacheCmd.getDisclosureType());

        disclosureCacheCmd.setLanguageId("fr");
        assertEquals("fr", disclosureCacheCmd.getLanguageId());

        DisclosureInfoType mockInfo = new DisclosureInfoType();
        disclosureCacheCmd.setDisclosureInfo(mockInfo);
        assertEquals(mockInfo, disclosureCacheCmd.getDisclosureInfo());

        disclosureCacheCmd.setAuditCode("newAuditCode");
        assertEquals("newAuditCode", disclosureCacheCmd.getAuditCode());
    }
}
