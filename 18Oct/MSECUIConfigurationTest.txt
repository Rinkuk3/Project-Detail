import com.td.mbna.msec.common.infrastructure.MSECUIConfiguration;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import static org.assertj.core.api.Assertions.assertThat;

public class MSECUIConfigurationTest {

    private MSECUIConfiguration msecUIConfiguration;
    private Environment environment;

    @BeforeEach
    public void setUp() {
        // Create a mock Environment
        environment = Mockito.mock(Environment.class);
        msecUIConfiguration = new MSECUIConfiguration();
        msecUIConfiguration.environment = environment; // Inject the mock Environment
    }

    @Test
    public void testRewardsApiEndpointUrl_WithExistingProperty() {
        // Arrange
        String expectedValue = "API_URL";
        Mockito.when(environment.getProperty("mbna.td.webservice.cust.interface", "MDM")).thenReturn(expectedValue);

        // Act
        String result = msecUIConfiguration.rewardsApiEndpointUrl();

        // Assert
        assertThat(result).isEqualTo(expectedValue);
    }

    @Test
    public void testRewardsApiEndpointUrl_WithDefaultValue() {
        // Arrange
        Mockito.when(environment.getProperty("mbna.td.webservice.cust.interface", "MDM")).thenReturn(null);

        // Act
        String result = msecUIConfiguration.rewardsApiEndpointUrl();

        // Assert
        assertThat(result).isEqualTo("MDM");
    }

    @Test
    public void testRewardsApiEndpointUrl_WithEmptyValue() {
        // Arrange
        Mockito.when(environment.getProperty("mbna.td.webservice.cust.interface", "MDM")).thenReturn("  ");

        // Act
        String result = msecUIConfiguration.rewardsApiEndpointUrl();

        // Assert
        assertThat(result).isEqualTo("MDM");
    }
}
