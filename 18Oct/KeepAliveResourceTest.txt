package com.td.mbna.msec.common.resource;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.bind.annotation.RequestMethod;

import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.util.MbnaLogger;

class KeepAliveResourceTest {

    private KeepAliveResource keepAliveResource;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MbnaLogger logger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        keepAliveResource = new KeepAliveResource();
        keepAliveResource.sessionProvider = sessionProvider;
        // Replace the static logger in KeepAliveResource with the mocked logger
        KeepAliveResource.class.getDeclaredField("logger").setAccessible(true);
        KeepAliveResource.class.getDeclaredField("logger").set(null, logger);
    }

    @Test
    void testHandleKeepAliveWithDebugEnabled() {
        when(logger.isDebugEnabled()).thenReturn(true);
        when(sessionProvider.getConnectId()).thenReturn("12345");

        String response = keepAliveResource.handleKeepAlive();
        
        assertEquals("success for user: 12345", response);
    }

    @Test
    void testHandleKeepAliveWithoutDebugEnabled() {
        when(logger.isDebugEnabled()).thenReturn(false);

        String response = keepAliveResource.handleKeepAlive();
        
        assertEquals("SUCCESS", response);
    }
}
