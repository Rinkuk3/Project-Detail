import com.td.mbna.msec.common.infrastructure.ApiError;
import com.td.mbna.msec.common.infrastructure.ServiceExceptionHandler;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.WebRequest;

import javax.servlet.http.HttpServletRequest;

import static org.assertj.core.api.Assertions.assertThat;

public class ServiceExceptionHandlerTest {

    private ServiceExceptionHandler serviceExceptionHandler;

    @BeforeEach
    public void setUp() {
        serviceExceptionHandler = new ServiceExceptionHandler();
    }

    @Test
    public void testHandleControllerException() {
        // Arrange
        HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
        Throwable exception = new RuntimeException("Test exception");
        Mockito.when(request.getServletPath()).thenReturn("/test/path");

        // Act
        ResponseEntity<ApiError> responseEntity = serviceExceptionHandler.handleControllerException(request, exception);

        // Assert
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(responseEntity.getBody()).isNotNull();
        assertThat(responseEntity.getBody().getStatus()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(responseEntity.getBody().getPath()).isEqualTo("/test/path");
    }

    @Test
    public void testHandleExceptionInternal() {
        // Arrange
        Exception exception = new RuntimeException("Internal error");
        Object body = null;
        HttpHeaders headers = new HttpHeaders();
        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
        WebRequest request = Mockito.mock(WebRequest.class);
        
        Mockito.when(request.getContextPath()).thenReturn("/context");

        // Act
        ResponseEntity<Object> responseEntity = serviceExceptionHandler.handleExceptionInternal(exception, body, headers, status, request);

        // Assert
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(responseEntity.getBody()).isNotNull();
        assertThat(responseEntity.getBody()).isInstanceOf(ApiError.class);
        ApiError apiError = (ApiError) responseEntity.getBody();
        assertThat(apiError.getStatus()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
        assertThat(apiError.getPath()).isEqualTo("/context");
    }
}
