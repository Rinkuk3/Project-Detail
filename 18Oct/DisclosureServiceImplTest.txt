package com.td.mbna.msec.common;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.DisclosureDetails;
import com.td.mbna.msec.midtier.disclosure.payload.getdisclosure.GetDisclosureResponse;
import com.td.mbna.msec.midtier.util.MbnaLogger;

class DisclosureServiceImplTest {

    @InjectMocks
    private DisclosureServiceImpl disclosureService;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private DisclosureCacheCmd disclosureCacheCmd;

    @Mock
    private AuFeeDisclosureCacheCmd auFeeDisclosureCacheCmd;

    @Mock
    private AuDisclosureCacheCmd auDisclosureCacheCmd;

    @Mock
    private AccountDetails account;

    @Mock
    private GetDisclosureResponse response;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testRetrieveEaaDisclosureDetails() throws Exception {
        // Given
        String disclosureType = "EAA_FIRST";
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(midTierServiceHelper.createAuditLog(auditCode)).thenReturn(null);
        when(disclosureCacheCmd.getDisclosureText()).thenReturn("Disclosure Text");
        when(disclosureCacheCmd.getDisclosureInfo()).thenReturn(null);
        when(disclosureCacheCmd.performExecute()).thenReturn(null);

        // When
        DisclosureDetails result = disclosureService.retrieveEaaDisclosureDetails(disclosureType, languageId, auditCode);

        // Then
        assertNotNull(result);
        assertEquals("Disclosure Text", result.getDisclosureText());
        verify(midTierServiceHelper).createAuditLog(auditCode);
        verify(disclosureCacheCmd).performExecute();
    }

    @Test
    void testRetrieveEaaDisclosureDetailsWithException() throws Exception {
        // Given
        String disclosureType = "EAA_FIRST";
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(midTierServiceHelper.createAuditLog(auditCode)).thenReturn(null);
        doThrow(new RuntimeException("Error")).when(disclosureCacheCmd).performExecute();

        // When & Then
        assertThrows(RuntimeException.class, () -> {
            disclosureService.retrieveEaaDisclosureDetails(disclosureType, languageId, auditCode);
        });
        verify(midTierServiceHelper).createAuditLog(auditCode);
    }

    @Test
    void testRetrieveAuDisclosureDetails() throws Exception {
        // Given
        String disclosureType = "AU_DISCL";
        BigDecimal auFee = BigDecimal.valueOf(100);
        BigDecimal maxFee = BigDecimal.valueOf(200);
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(midTierServiceHelper.createAuditLog(auditCode)).thenReturn(null);
        when(auFeeDisclosureCacheCmd.getDisclosureText()).thenReturn("AU Disclosure Text");
        when(auFeeDisclosureCacheCmd.getDisclosureInfo()).thenReturn(null);
        when(auFeeDisclosureCacheCmd.performExecute()).thenReturn(null);

        // When
        DisclosureDetails result = disclosureService.retrieveAuDisclosureDetails(disclosureType, auFee, maxFee, languageId, auditCode);

        // Then
        assertNotNull(result);
        assertEquals("AU Disclosure Text", result.getDisclosureText());
        verify(midTierServiceHelper).createAuditLog(auditCode);
        verify(auFeeDisclosureCacheCmd).performExecute();
    }

    @Test
    void testRetrieveAuDisclosureDetailsWithException() throws Exception {
        // Given
        String disclosureType = "AU_DISCL";
        BigDecimal auFee = BigDecimal.valueOf(100);
        BigDecimal maxFee = BigDecimal.valueOf(200);
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(midTierServiceHelper.createAuditLog(auditCode)).thenReturn(null);
        doThrow(new RuntimeException("Error")).when(auFeeDisclosureCacheCmd).performExecute();

        // When & Then
        assertThrows(RuntimeException.class, () -> {
            disclosureService.retrieveAuDisclosureDetails(disclosureType, auFee, maxFee, languageId, auditCode);
        });
        verify(midTierServiceHelper).createAuditLog(auditCode);
    }

    @Test
    void testRetrieveAuDisclosureDetailsWithoutFee() {
        // Given
        String disclosureType = "AU_DISCL";
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(auDisclosureCacheCmd.getDisclosureText()).thenReturn("AU Disclosure Text");
        when(auDisclosureCacheCmd.getDisclosureInfo()).thenReturn(null);

        // When
        DisclosureDetails result = disclosureService.retrieveAuDisclosureDetailsWithoutFee(disclosureType, languageId, auditCode);

        // Then
        assertNotNull(result);
        assertEquals("AU Disclosure Text", result.getDisclosureText());
    }

    @Test
    void testRetrieveDisclosureDetails() {
        // Given
        String disclosureType = "GEN_DISCL";
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(disclosureCacheCmd.getDisclosureText()).thenReturn("General Disclosure Text");
        when(disclosureCacheCmd.getDisclosureInfo()).thenReturn(null);

        // When
        DisclosureDetails result = disclosureService.retrieveDisclosureDetails(disclosureType, languageId, auditCode);

        // Then
        assertNotNull(result);
        assertEquals("General Disclosure Text", result.getDisclosureText());
    }

    @Test
    void testRetrieveBtDisclosureDetails() throws Exception {
        // Given
        String disclosureType = "BT_DISCLOSURE";
        String offerID = "OFFER123";
        BigDecimal feePercentage = BigDecimal.valueOf(10);
        BigDecimal fixedFee = BigDecimal.valueOf(5);
        String languageId = "en";
        String auditCode = "AUDIT123";

        when(AccountHelper.getBTOffer(account, offerID)).thenReturn(null);
        when(midTierServiceHelper.getDisclosure(any(), any())).thenReturn(response);
        when(response.getResponsePayload()).thenReturn(null);

        // When
        DisclosureDetails result = disclosureService.retrieveBtDisclosureDetails(disclosureType, offerID, account, languageId, auditCode);

        // Then
        assertNotNull(result);
        assertNull(result.getDisclosureText());
        assertNull(result.getDisclosureInfo());
    }

    @Test
    void testGetCachedResponse() {
        // Given
        String cacheKey = "CACHE_KEY";

        // When
        GetDisclosureResponse result = disclosureService.getCachedResponse(cacheKey);

        // Then
        assertNull(result);
    }

    @Test
    void testPutCachedResponse() {
        // Given
        String cacheKey = "CACHE_KEY";

        // When
        disclosureService.putCachedResponse(cacheKey, response);

        // Then
        assertNotNull(disclosureService.cachedMap.get(cacheKey));
    }
}
