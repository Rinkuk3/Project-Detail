package com.td.mbna.msec.common.midtier;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.midtier.types.common.AuditInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;

class AuditLoggerTest {

    @InjectMocks
    private AuditLogger auditLogger;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private HttpServletRequest request;

    @Mock
    private AccountDetails accountDetails;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(sessionProvider.getHttpServletRequest()).thenReturn(request);
    }

    @Test
    void testGenAuditLogInfo() {
        // Setup
        String eventCode = "SS2903";
        String message = "Test Message";
        String url = "http://test.url";
        boolean logLastLogin = true;
        Long userBrowserTime = 123456789L;
        String userAgent = "Mozilla/5.0";
        String browserDefaultLang = "en";
        String os = "Windows";
        String localName = "localhost";

        // Mocking session provider behaviors
        when(request.getHeader("User-Agent")).thenReturn(userAgent);
        when(HttpUtil.getBrowserDefaultLang(request)).thenReturn(browserDefaultLang);
        when(sessionProvider.getSessionAttribute(SESSION_USER_BROWSER_TIME)).thenReturn(userBrowserTime);
        when(sessionProvider.getSessionAttribute(SESSION_USER_LAND_INITACTION)).thenReturn(false);
        when(sessionProvider.getSessionAttribute(SESSION_CURRENT_ACCOUNT)).thenReturn(accountDetails);
        when(sessionProvider.getSessionCustomer()).thenReturn(null); // Or mock a customer object if needed

        // Mocking account details behavior
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        when(accountDetails.getAcctEnding()).thenReturn("1234");
        when(accountDetails.getCardStarting()).thenReturn("5678");
        when(accountDetails.getAffinityCode()).thenReturn("AF123");
        when(accountDetails.getDelinquencyStatus()).thenReturn("No");
        when(accountDetails.getAccountStatus()).thenReturn("Active");
        when(accountDetails.getPaaSequenceNumber()).thenReturn(1L);

        // Execute
        AuditInfo auditInfo = auditLogger.genAuditLogInfo(accountDetails, eventCode, message, url, logLastLogin);

        // Validate
        assertNotNull(auditInfo);
        assertEquals("PCH", auditInfo.getCardHolderRole());
        assertEquals(message, auditInfo.getDescription());
        assertEquals(eventCode, auditInfo.getTransactionCode());
        assertEquals(url, auditInfo.getUrl());
        assertTrue(auditInfo.isLogLastLogin());
        assertEquals("1234", auditInfo.getCardEnding());
        assertEquals("5678", auditInfo.getCardStarting());
        assertEquals("AF123", auditInfo.getGroupAffinityCode());
        assertEquals("No", auditInfo.getAccountDelinquencyCode());
        assertEquals("Active", auditInfo.getAccountStatusCode());
        assertEquals(123456789L, auditInfo.getBrowserTime());
    }

    @Test
    void testGenAuditLogInfoForCardReplacement() {
        // Setup
        String eventCode = "SS0701"; // Card Replacement Event
        String message = "Test Message";
        String url = "http://test.url";
        boolean logLastLogin = true;

        // Mocking behaviors
        when(sessionProvider.getHttpServletRequest()).thenReturn(request);
        when(request.getHeader("User-Agent")).thenReturn("Mozilla/5.0");
        when(sessionProvider.getSessionAttribute(SESSION_CARDREPLACEMENT_REASON_TEXT)).thenReturn("Test Reason");
        when(sessionProvider.getSessionAttribute(SESSION_USER_LAND_INITACTION)).thenReturn(false);
        
        // Mocking account details
        when(sessionProvider.getSessionCustomer()).thenReturn(null); // Or mock customer with hybrid accounts if needed

        // Execute
        AuditInfo auditInfo = auditLogger.genAuditLogInfo(accountDetails, eventCode, message, url, logLastLogin);

        // Validate
        assertNotNull(auditInfo);
        assertEquals("Test Reason", auditInfo.getBusinessEventReason());
    }

    @Test
    void testCheckHybridAccounts() {
        // Setup
        when(sessionProvider.getSessionCustomer()).thenReturn(null); // Mock customer with hybrid accounts if needed
        // Execute
        boolean result = auditLogger.checkHybridAccounts();

        // Validate
        assertFalse(result);
    }
}
