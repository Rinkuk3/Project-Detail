package com.td.mbna.msec.content.resource;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.common.WcmContentService;
import com.td.mbna.msec.content.application.ContentDisplayService;
import com.td.mbna.msec.content.domain.ContentDisplayRequest;
import com.td.mbna.msec.content.domain.ContentDisplayResponse;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.midtier.content.payload.getpagecontent.ResponsePayload;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.ui.ModelMap;
import org.springframework.web.servlet.ModelAndView;

public class ContentDisplayResourceTest {

    private ContentDisplayResource contentDisplayResource;
    private ContentDisplayService contentDisplayService;
    private WcmContentService wcmContentService;
    private SessionProvider sessionProvider;
    private HttpServletRequest request;

    @BeforeEach
    public void setUp() {
        contentDisplayService = mock(ContentDisplayService.class);
        wcmContentService = mock(WcmContentService.class);
        sessionProvider = mock(SessionProvider.class);
        request = mock(HttpServletRequest.class);
        contentDisplayResource = new ContentDisplayResource();
        contentDisplayResource.contentDisplayService = contentDisplayService;
        contentDisplayResource.wcmContentService = wcmContentService;
        contentDisplayResource.sessionProvider = sessionProvider;
    }

    @Test
    public void testGetContent() {
        // Arrange
        ContentDisplayRequest requestPayload = new ContentDisplayRequest();
        ContentDisplayResponse expectedResponse = new ContentDisplayResponse();
        when(contentDisplayService.getContent(any(ContentDisplayRequest.class), any(HttpServletRequest.class)))
                .thenReturn(expectedResponse);

        // Act
        ContentDisplayResponse actualResponse = contentDisplayResource.getContent(requestPayload, request);

        // Assert
        assertSame(expectedResponse, actualResponse);
        verify(contentDisplayService).getContent(requestPayload, request);
    }

    @Test
    public void testHandleContentDisplayWithNullId() {
        // Arrange
        when(request.getParameter("id")).thenReturn(null);
        when(request.getParameter("language")).thenReturn(null);
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en_CA");

        // Act
        ModelAndView modelAndView = contentDisplayResource.handleContentDisplay(request);

        // Assert
        assertEquals("redirect:/error", modelAndView.getViewName());
        assertTrue(modelAndView.getModel().containsKey("language"));
        assertEquals("en", modelAndView.getModel().get("language"));
    }

    @Test
    public void testHandleContentDisplayWithValidId() {
        // Arrange
        when(request.getParameter("id")).thenReturn("faq");
        when(request.getParameter("language")).thenReturn("en_CA");
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en_CA");

        // Act
        ModelAndView modelAndView = contentDisplayResource.handleContentDisplay(request);

        // Assert
        assertEquals("redirect:index.html#/faq?request_locale=en", modelAndView.getViewName());
    }

    @Test
    public void testHandleContentDisplayWithUgoApp() {
        // Arrange
        when(request.getParameter("id")).thenReturn("faq");
        when(request.getParameter("language")).thenReturn("en_CA");
        when(HttpUtil.isUgoApp(request)).thenReturn(true);

        // Act
        ModelAndView modelAndView = contentDisplayResource.handleContentDisplay(request);

        // Assert
        assertEquals("redirect:index.html#/faq?request_locale=en", modelAndView.getViewName());
    }

    @Test
    public void testHandleContentDisplayWithWcmContent() {
        // Arrange
        when(request.getParameter("id")).thenReturn("faq");
        when(request.getParameter("language")).thenReturn("en_CA");
        when(sessionProvider.getSessionAttribute("SELECTED_LOCALE")).thenReturn("en_CA");

        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setTitle("FAQ Title");
        responsePayload.setContent("FAQ Content");
        when(wcmContentService.getPageContentPayloadWithLanguage(eq("faq"), eq("en_CA")))
                .thenReturn(responsePayload);

        // Act
        ModelAndView modelAndView = contentDisplayResource.handleContentDisplay(request);

        // Assert
        assertEquals("contentDisplay", modelAndView.getViewName());
        assertEquals("FAQ Title", modelAndView.getModel().get("wcmTitle"));
        assertEquals("FAQ Content", modelAndView.getModel().get("wcmContent"));
    }
}
