package com.td.mbna.msec.midtier.autopay.payload.addpad;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AddPadRequestTest {

    private AddPadRequest addPadRequest;

    @BeforeEach
    void setUp() {
        addPadRequest = new AddPadRequest();
    }

    @Test
    void testDefaultConstructor() {
        assertNotNull(addPadRequest);
        assertNotNull(addPadRequest.getRequestPayload());
    }

    @Test
    void testGetRequestPayload_NotNull() {
        assertNotNull(addPadRequest.getRequestPayload());
    }

    @Test
    void testGetRequestPayload_InitializesWhenNull() {
        addPadRequest.setRequestPayload(null);
        assertNotNull(addPadRequest.getRequestPayload());
    }

    @Test
    void testSetRequestPayload() {
        AddPadRequest.RequestPayload payload = new AddPadRequest.RequestPayload();
        addPadRequest.setRequestPayload(payload);
        assertEquals(payload, addPadRequest.getRequestPayload());
    }

    @Test
    void testToString_NotNull() {
        String result = addPadRequest.toString();
        assertNotNull(result);
        assertTrue(result.contains("AddPadRequest"));
    }

    @Test
    void testEquals_SameObject() {
        assertTrue(addPadRequest.equals(addPadRequest));
    }

    @Test
    void testEquals_DifferentClass() {
        assertFalse(addPadRequest.equals("SomeString"));
    }

    @Test
    void testEquals_NullObject() {
        assertFalse(addPadRequest.equals(null));
    }

    @Test
    void testEquals_EqualObjects() {
        AddPadRequest anotherRequest = new AddPadRequest();
        assertTrue(addPadRequest.equals(anotherRequest));
    }

    @Test
    void testEquals_DifferentRequestPayload() {
        AddPadRequest anotherRequest = new AddPadRequest();
        anotherRequest.getRequestPayload().setSomeProperty("DifferentValue");
        assertFalse(addPadRequest.equals(anotherRequest));
    }

    @Test
    void testHashCode_EqualObjects() {
        AddPadRequest anotherRequest = new AddPadRequest();
        assertEquals(addPadRequest.hashCode(), anotherRequest.hashCode());
    }

    @Test
    void testHashCode_DifferentObjects() {
        AddPadRequest anotherRequest = new AddPadRequest();
        anotherRequest.getRequestPayload().setSomeProperty("DifferentValue");
        assertNotEquals(addPadRequest.hashCode(), anotherRequest.hashCode());
    }

    @Test
    void testSetAndGetSessionInfo() {
        addPadRequest.setSessionInfo("SessionInfo");
        assertEquals("SessionInfo", addPadRequest.getSessionInfo());
    }

    @Test
    void testSetAndGetCustId() {
        addPadRequest.setCustId("CustId123");
        assertEquals("CustId123", addPadRequest.getCustId());
    }

    @Test
    void testSetAndGetAliasCustId() {
        addPadRequest.setAliasCustId("Alias123");
        assertEquals("Alias123", addPadRequest.getAliasCustId());
    }

    @Test
    void testSetAndGetAcctNum() {
        addPadRequest.setAcctNum("AcctNum123");
        assertEquals("AcctNum123", addPadRequest.getAcctNum());
    }

    @Test
    void testSetAndGetAcctType() {
        addPadRequest.setAcctType("Savings");
        assertEquals("Savings", addPadRequest.getAcctType());
    }

    @Test
    void testSetAndGetLanguagePref() {
        addPadRequest.setLanguagePref("EN");
        assertEquals("EN", addPadRequest.getLanguagePref());
    }

    @Test
    void testSetAndGetAuditInfo() {
        addPadRequest.setAuditInfo("AuditInfo");
        assertEquals("AuditInfo", addPadRequest.getAuditInfo());
    }

    @Test
    void testSetAndGetIsPrimaryUser() {
        addPadRequest.setIsPrimaryUser(true);
        assertTrue(addPadRequest.getIsPrimaryUser());
    }

    @Test
    void testSetAndGetReserved1() {
        addPadRequest.setReserved1("ReservedValue");
        assertEquals("ReservedValue", addPadRequest.getReserved1());
    }

    @Test
    void testSetAndGetCustInterface() {
        addPadRequest.setCustInterface("Mobile");
        assertEquals("Mobile", addPadRequest.getCustInterface());
    }
}
