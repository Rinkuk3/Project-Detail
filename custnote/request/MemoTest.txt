package com.td.api.mbcca.custnote.request;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;

class MemoTest {

    @Test
    void testGettersAndSetters() {
        Memo memo = new Memo();
        
        // Test set and get eventTypeCd
        String eventTypeCd = "TestEvent";
        memo.setEventTypeCd(eventTypeCd);
        assertEquals(eventTypeCd, memo.getEventTypeCd());

        // Test set and get lineTxt
        memo.setLineTxt(Arrays.asList("Line 1", "Line 2"));
        assertEquals(Arrays.asList("Line 1", "Line 2"), memo.getLineTxt());

        memo.setLineTxt(null);
        assertNull(memo.getLineTxt());
    }

    @Test
    void testToString() {
        Memo memo = new Memo();
        
        memo.setEventTypeCd("TestEvent");
        memo.setLineTxt(Arrays.asList("Line 1", "Line 2"));

        String expectedString = "com.td.api.mbcca.custnote.request.Memo@" + 
            Integer.toHexString(memo.hashCode()) + "[eventTypeCd=TestEvent,lineTxt=[Line 1, Line 2]]";
        
        assertEquals(expectedString, memo.toString());
    }

    @Test
    void testHashCode() {
        Memo memo1 = new Memo();
        Memo memo2 = new Memo();
        
        memo1.setEventTypeCd("TestEvent");
        memo1.setLineTxt(Arrays.asList("Line 1", "Line 2"));
        
        memo2.setEventTypeCd("TestEvent");
        memo2.setLineTxt(Arrays.asList("Line 1", "Line 2"));

        assertEquals(memo1.hashCode(), memo2.hashCode());
    }

    @Test
    void testEquals() {
        Memo memo1 = new Memo();
        Memo memo2 = new Memo();
        Memo memo3 = new Memo();
        
        memo1.setEventTypeCd("TestEvent");
        memo1.setLineTxt(Arrays.asList("Line 1", "Line 2"));
        
        memo2.setEventTypeCd("TestEvent");
        memo2.setLineTxt(Arrays.asList("Line 1", "Line 2"));
        
        memo3.setEventTypeCd("TestEvent");
        memo3.setLineTxt(Arrays.asList("Line 3", "Line 4"));

        // Equal comparison
        assertTrue(memo1.equals(memo2));

        // Different lineTxt
        assertFalse(memo1.equals(memo3));

        // Comparing with null
        assertFalse(memo1.equals(null));

        // Comparing with different class type
        assertFalse(memo1.equals(new Object()));
    }

    @Test
    void testEquals_SameObject() {
        Memo memo = new Memo();
        
        memo.setEventTypeCd("TestEvent");
        memo.setLineTxt(Arrays.asList("Line 1", "Line 2"));

        assertTrue(memo.equals(memo));
    }

}
