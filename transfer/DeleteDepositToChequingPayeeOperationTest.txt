package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.persistance.entity.TtcDestinations;
import com.td.mbna.msec.midtier.persistance.mybatis.DBMybatisService;
import com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType;
import com.td.mbna.msec.midtier.transfer.payload.deletedeposittochequingpayee.DeleteDepositToChequingPayeeRequest;
import com.td.mbna.msec.midtier.transfer.payload.deletedeposittochequingpayee.DeleteDepositToChequingPayeeResponse;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.text.NumberFormat;
import java.util.Locale;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class DeleteDepositToChequingPayeeOperationTest {

    @InjectMocks
    private DeleteDepositToChequingPayeeOperation deleteDepositToChequingPayeeOperation;

    @Mock
    private DBMybatisService dbMybatisService;

    @Mock
    private DeleteDepositToChequingPayeeRequest deleteDepositToChequingPayeeRequest;

    @Mock
    private DeleteDepositToChequingPayeeResponse deleteDepositToChequingPayeeResponse;

    @Mock
    private DepositToChequingPayeeType depositToChequingPayeeType;

    @Mock
    private TtcDestinations ttcDestinations;

    @Mock
    private MbnaLogger mbnaLogger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() throws Exception {
        // Arrange
        when(deleteDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new DeleteDepositToChequingPayeeRequest().getRequestPayload());
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("12345");
        when(deleteDepositToChequingPayeeRequest.getRequestPayload().getPayee()).thenReturn(payee);

        TtcDestinations payeeDto = new TtcDestinations();
        payeeDto.setTtcDestinationId(12345);
        when(dbMybatisService.deleteTtcDestination(any(TtcDestinations.class))).thenReturn(true);

        // Act
        DeleteDepositToChequingPayeeResponse response = deleteDepositToChequingPayeeOperation.invokeService(deleteDepositToChequingPayeeRequest);

        // Assert
        assertNotNull(response);
        verify(dbMybatisService).deleteTtcDestination(any(TtcDestinations.class));
    }

    @Test
    void testInvokeService_ExceptionThrown() {
        // Arrange
        when(deleteDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new DeleteDepositToChequingPayeeRequest().getRequestPayload());
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("12345");
        when(deleteDepositToChequingPayeeRequest.getRequestPayload().getPayee()).thenReturn(payee);

        when(dbMybatisService.deleteTtcDestination(any(TtcDestinations.class))).thenThrow(new RuntimeException("Database error"));

        // Act and Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            deleteDepositToChequingPayeeOperation.invokeService(deleteDepositToChequingPayeeRequest);
        });
        assertTrue(exception.getMessage().contains("Database error"));
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act
        boolean result = deleteDepositToChequingPayeeOperation.requiresDisclosureConsent();

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = deleteDepositToChequingPayeeOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assertNull(result);
    }

    @Test
    void testGenerateAutoComment() {
        // Act
        boolean result = deleteDepositToChequingPayeeOperation.generateAutoComment();

        // Assert
        assertFalse(result);
    }

    @Test
    void testCreateAutoComment() {
        // Act
        List<String> result = deleteDepositToChequingPayeeOperation.createAutoComment(null, null);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetEmailInfoBean() {
        // Act
        EmailInfo result = deleteDepositToChequingPayeeOperation.getEmailInfoBean(null, null);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetValidator() {
        // Act
        MsecValidator result = deleteDepositToChequingPayeeOperation.getValidator();

        // Assert
        assertNull(result);
    }
}
