package com.td.mbna.msec.midtier.transfer.payload.deletedeposittochequingpayee;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeleteDepositToChequingPayeeResponseTest {

    private DeleteDepositToChequingPayeeResponse deleteDepositToChequingPayeeResponse;

    @Before
    public void setUp() {
        deleteDepositToChequingPayeeResponse = new DeleteDepositToChequingPayeeResponse();
    }

    @Test
    public void testGetAndSetResponsePayload() {
        ResponsePayload responsePayload = new ResponsePayload();
        deleteDepositToChequingPayeeResponse.setResponsePayload(responsePayload);
        assertEquals(responsePayload, deleteDepositToChequingPayeeResponse.getResponsePayload());

        ResponsePayload newResponsePayload = new ResponsePayload();
        deleteDepositToChequingPayeeResponse.setResponsePayload(newResponsePayload);
        assertEquals(newResponsePayload, deleteDepositToChequingPayeeResponse.getResponsePayload());
    }

    @Test
    public void testToString() {
        deleteDepositToChequingPayeeResponse.setStatus("status");
        deleteDepositToChequingPayeeResponse.setErrorMessages("errorMsgs");
        
        ResponsePayload responsePayload = new ResponsePayload();
        deleteDepositToChequingPayeeResponse.setResponsePayload(responsePayload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.deletedeposittochequingpayee.DeleteDepositToChequingPayeeResponse@"
                + Integer.toHexString(System.identityHashCode(deleteDepositToChequingPayeeResponse))
                + "[status=status,errorMsgs=errorMsgs,responsePayload=" + responsePayload + "]";

        assertEquals(expectedString, deleteDepositToChequingPayeeResponse.toString());
    }

    @Test
    public void testHashCode() {
        DeleteDepositToChequingPayeeResponse response1 = new DeleteDepositToChequingPayeeResponse();
        response1.setStatus("status");
        response1.setErrorMessages("errorMsgs");
        ResponsePayload responsePayload1 = new ResponsePayload();
        response1.setResponsePayload(responsePayload1);

        DeleteDepositToChequingPayeeResponse response2 = new DeleteDepositToChequingPayeeResponse();
        response2.setStatus("status");
        response2.setErrorMessages("errorMsgs");
        ResponsePayload responsePayload2 = new ResponsePayload();
        response2.setResponsePayload(responsePayload2);

        assertEquals(response1.hashCode(), response2.hashCode());

        response2.setStatus("newStatus");
        assertNotEquals(response1.hashCode(), response2.hashCode());
    }

    @Test
    public void testEquals() {
        DeleteDepositToChequingPayeeResponse response1 = new DeleteDepositToChequingPayeeResponse();
        response1.setStatus("status");
        response1.setErrorMessages("errorMsgs");
        ResponsePayload responsePayload1 = new ResponsePayload();
        response1.setResponsePayload(responsePayload1);

        DeleteDepositToChequingPayeeResponse response2 = new DeleteDepositToChequingPayeeResponse();
        response2.setStatus("status");
        response2.setErrorMessages("errorMsgs");
        ResponsePayload responsePayload2 = new ResponsePayload();
        response2.setResponsePayload(responsePayload2);

        DeleteDepositToChequingPayeeResponse response3 = new DeleteDepositToChequingPayeeResponse();
        response3.setStatus("newStatus");

        assertTrue(response1.equals(response2));  // Same values
        assertFalse(response1.equals(response3)); // Different status
        assertFalse(response1.equals(null));  // Null check
        assertFalse(response1.equals("String")); // Different object type
    }
}
