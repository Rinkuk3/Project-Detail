package com.td.mbna.msec.midtier.transfer.payload;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class DepositToChequingPayeeTypeTest {

    private DepositToChequingPayeeType payee;

    @BeforeEach
    void setUp() {
        payee = new DepositToChequingPayeeType();
    }

    @Test
    void testGetAndSetId() {
        String id = "12345";
        payee.setId(id);
        assertEquals(id, payee.getId());
    }

    @Test
    void testGetAndSetNickName() {
        String nickName = "Test Nick";
        payee.setNickName(nickName);
        assertEquals(nickName, payee.getNickName());
    }

    @Test
    void testGetAndSetTransitNum() {
        String transitNum = "987654321";
        payee.setTransitNum(transitNum);
        assertEquals(transitNum, payee.getTransitNum());
    }

    @Test
    void testGetAndSetBankId() {
        String bankId = "001";
        payee.setBankId(bankId);
        assertEquals(bankId, payee.getBankId());
    }

    @Test
    void testGetAndSetAcctNum() {
        String acctNum = "1234567890";
        payee.setAcctNum(acctNum);
        assertEquals(acctNum, payee.getAcctNum());
    }

    @Test
    void testToString() {
        String id = "12345";
        String nickName = "Test Nick";
        String transitNum = "987654321";
        String bankId = "001";
        String acctNum = "1234567890";

        payee.setId(id);
        payee.setNickName(nickName);
        payee.setTransitNum(transitNum);
        payee.setBankId(bankId);
        payee.setAcctNum(acctNum);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType@" +
                Integer.toHexString(payee.hashCode()) +
                "[id=12345,nickName=Test Nick,transitNum=987654321,bankId=001,acctNum=1234567890]";

        assertEquals(expectedString, payee.toString());
    }

    @Test
    void testHashCode() {
        String id = "12345";
        String nickName = "Test Nick";
        String transitNum = "987654321";
        String bankId = "001";
        String acctNum = "1234567890";

        payee.setId(id);
        payee.setNickName(nickName);
        payee.setTransitNum(transitNum);
        payee.setBankId(bankId);
        payee.setAcctNum(acctNum);

        int expectedHashCode = payee.hashCode();

        DepositToChequingPayeeType anotherPayee = new DepositToChequingPayeeType();
        anotherPayee.setId(id);
        anotherPayee.setNickName(nickName);
        anotherPayee.setTransitNum(transitNum);
        anotherPayee.setBankId(bankId);
        anotherPayee.setAcctNum(acctNum);

        assertEquals(expectedHashCode, anotherPayee.hashCode());
    }

    @Test
    void testEquals() {
        String id = "12345";
        String nickName = "Test Nick";
        String transitNum = "987654321";
        String bankId = "001";
        String acctNum = "1234567890";

        payee.setId(id);
        payee.setNickName(nickName);
        payee.setTransitNum(transitNum);
        payee.setBankId(bankId);
        payee.setAcctNum(acctNum);

        DepositToChequingPayeeType anotherPayee = new DepositToChequingPayeeType();
        anotherPayee.setId(id);
        anotherPayee.setNickName(nickName);
        anotherPayee.setTransitNum(transitNum);
        anotherPayee.setBankId(bankId);
        anotherPayee.setAcctNum(acctNum);

        assertTrue(payee.equals(anotherPayee));

        // Test different id
        anotherPayee.setId("54321");
        assertFalse(payee.equals(anotherPayee));

        // Test different nickName
        anotherPayee.setId(id);
        anotherPayee.setNickName("Different Nick");
        assertFalse(payee.equals(anotherPayee));

        // Test different transitNum
        anotherPayee.setNickName(nickName);
        anotherPayee.setTransitNum("123456789");
        assertFalse(payee.equals(anotherPayee));

        // Test different bankId
        anotherPayee.setTransitNum(transitNum);
        anotherPayee.setBankId("002");
        assertFalse(payee.equals(anotherPayee));

        // Test different acctNum
        anotherPayee.setBankId(bankId);
        anotherPayee.setAcctNum("9876543210");
        assertFalse(payee.equals(anotherPayee));

        // Test null value
        assertFalse(payee.equals(null));

        // Test different object type
        assertFalse(payee.equals(new Object()));
    }

    @Test
    void testEqualsWithSameReference() {
        String id = "12345";
        String nickName = "Test Nick";
        String transitNum = "987654321";
        String bankId = "001";
        String acctNum = "1234567890";

        payee.setId(id);
        payee.setNickName(nickName);
        payee.setTransitNum(transitNum);
        payee.setBankId(bankId);
        payee.setAcctNum(acctNum);

        assertTrue(payee.equals(payee));
    }

    @Test
    void testEqualsWithNullValues() {
        payee.setId(null);
        payee.setNickName(null);
        payee.setTransitNum(null);
        payee.setBankId(null);
        payee.setAcctNum(null);

        DepositToChequingPayeeType anotherPayee = new DepositToChequingPayeeType();
        anotherPayee.setId(null);
        anotherPayee.setNickName(null);
        anotherPayee.setTransitNum(null);
        anotherPayee.setBankId(null);
        anotherPayee.setAcctNum(null);

        assertTrue(payee.equals(anotherPayee));
    }

    @Test
    void testHashCodeWithNullValues() {
        payee.setId(null);
        payee.setNickName(null);
        payee.setTransitNum(null);
        payee.setBankId(null);
        payee.setAcctNum(null);

        DepositToChequingPayeeType anotherPayee = new DepositToChequingPayeeType();
        anotherPayee.setId(null);
        anotherPayee.setNickName(null);
        anotherPayee.setTransitNum(null);
        anotherPayee.setBankId(null);
        anotherPayee.setAcctNum(null);

        assertEquals(payee.hashCode(), anotherPayee.hashCode());
    }
}
