package com.td.mbna.msec.midtier.transfer.payload.addbalancetransfertocreditorpayee;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class AddBalanceTransferToCreditorPayeeRequestTest {

    private AddBalanceTransferToCreditorPayeeRequest request;

    @Before
    public void setUp() {
        request = new AddBalanceTransferToCreditorPayeeRequest();
    }

    @Test
    public void testGetAndSetRequestPayload() {
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);
        assertEquals(payload, request.getRequestPayload());

        request.setRequestPayload(null);
        assertNull(request.getRequestPayload());
    }

    @Test
    public void testToString() {
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("en");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("web");
        
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.addbalancetransfertocreditorpayee.AddBalanceTransferToCreditorPayeeRequest@" 
                + Integer.toHexString(System.identityHashCode(request)) 
                + "[sessionInfo=sessionInfo,custId=custId,aliasCustId=aliasCustId,acctNum=acctNum,acctType=acctType,languagePref=en,auditInfo=auditInfo,isPrimaryUser=true,reserved1=reserved1,custInterface=web,requestPayload=" + payload + "]";

        assertEquals(expectedString, request.toString());
    }

    @Test
    public void testHashCode() {
        AddBalanceTransferToCreditorPayeeRequest request1 = new AddBalanceTransferToCreditorPayeeRequest();
        request1.setSessionInfo("sessionInfo");
        request1.setCustId("custId");

        AddBalanceTransferToCreditorPayeeRequest request2 = new AddBalanceTransferToCreditorPayeeRequest();
        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");

        AddBalanceTransferToCreditorPayeeRequest request3 = new AddBalanceTransferToCreditorPayeeRequest();
        request3.setSessionInfo("differentSessionInfo");
        request3.setCustId("custId");

        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    public void testEquals() {
        AddBalanceTransferToCreditorPayeeRequest request1 = new AddBalanceTransferToCreditorPayeeRequest();
        request1.setSessionInfo("sessionInfo");
        request1.setCustId("custId");

        AddBalanceTransferToCreditorPayeeRequest request2 = new AddBalanceTransferToCreditorPayeeRequest();
        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");

        AddBalanceTransferToCreditorPayeeRequest request3 = new AddBalanceTransferToCreditorPayeeRequest();
        request3.setSessionInfo("differentSessionInfo");
        request3.setCustId("custId");

        assertTrue(request1.equals(request2));
        assertFalse(request1.equals(request3));

        // Test equality with a different class type
        assertFalse(request1.equals("String"));
    }

    @Test
    public void testEqualsWithNull() {
        AddBalanceTransferToCreditorPayeeRequest request1 = new AddBalanceTransferToCreditorPayeeRequest();
        request1.setSessionInfo(null);

        AddBalanceTransferToCreditorPayeeRequest request2 = new AddBalanceTransferToCreditorPayeeRequest();
        request2.setSessionInfo(null);

        assertTrue(request1.equals(request2));
    }
}
