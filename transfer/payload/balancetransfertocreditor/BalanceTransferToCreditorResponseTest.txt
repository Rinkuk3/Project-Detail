package com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class BalanceTransferToCreditorResponseTest {

    private BalanceTransferToCreditorResponse response;

    @Before
    public void setUp() {
        response = new BalanceTransferToCreditorResponse();
    }

    @Test
    public void testGetAndSetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        payload.setStatus(true);
        payload.setPayeeId(123);
        response.setResponsePayload(payload);

        assertNotNull(response.getResponsePayload());
        assertEquals(payload, response.getResponsePayload());

        response.setResponsePayload(null);
        assertNull(response.getResponsePayload());
    }

    @Test
    public void testToString() {
        response.setStatus("Success");
        response.setErrorMessages("No Errors");
        
        ResponsePayload payload = new ResponsePayload();
        payload.setStatus(true);
        payload.setPayeeId(123);
        response.setResponsePayload(payload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorResponse@"
                + Integer.toHexString(System.identityHashCode(response))
                + "[status=Success,errorMsgs=No Errors,responsePayload=" + payload + "]";

        assertEquals(expectedString, response.toString());
    }

    @Test
    public void testHashCode() {
        BalanceTransferToCreditorResponse response1 = new BalanceTransferToCreditorResponse();
        response1.setStatus("Success");
        response1.setErrorMessages("No Errors");

        ResponsePayload payload1 = new ResponsePayload();
        payload1.setStatus(true);
        payload1.setPayeeId(123);
        response1.setResponsePayload(payload1);

        BalanceTransferToCreditorResponse response2 = new BalanceTransferToCreditorResponse();
        response2.setStatus("Success");
        response2.setErrorMessages("No Errors");

        ResponsePayload payload2 = new ResponsePayload();
        payload2.setStatus(true);
        payload2.setPayeeId(123);
        response2.setResponsePayload(payload2);

        BalanceTransferToCreditorResponse response3 = new BalanceTransferToCreditorResponse();
        response3.setStatus("Failure");
        response3.setErrorMessages("Some Error");

        ResponsePayload payload3 = new ResponsePayload();
        payload3.setStatus(false);
        payload3.setPayeeId(456);
        response3.setResponsePayload(payload3);

        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    public void testEquals() {
        BalanceTransferToCreditorResponse response1 = new BalanceTransferToCreditorResponse();
        response1.setStatus("Success");
        response1.setErrorMessages("No Errors");

        ResponsePayload payload1 = new ResponsePayload();
        payload1.setStatus(true);
        payload1.setPayeeId(123);
        response1.setResponsePayload(payload1);

        BalanceTransferToCreditorResponse response2 = new BalanceTransferToCreditorResponse();
        response2.setStatus("Success");
        response2.setErrorMessages("No Errors");

        ResponsePayload payload2 = new ResponsePayload();
        payload2.setStatus(true);
        payload2.setPayeeId(123);
        response2.setResponsePayload(payload2);

        BalanceTransferToCreditorResponse response3 = new BalanceTransferToCreditorResponse();
        response3.setStatus("Failure");
        response3.setErrorMessages("Some Error");

        ResponsePayload payload3 = new ResponsePayload();
        payload3.setStatus(false);
        payload3.setPayeeId(456);
        response3.setResponsePayload(payload3);

        assertTrue(response1.equals(response2));
        assertFalse(response1.equals(response3));
        assertFalse(response1.equals(null));
        assertFalse(response1.equals("String"));
    }

    @Test
    public void testGetResponsePayloadLazyInitialization() {
        BalanceTransferToCreditorResponse responseWithNullPayload = new BalanceTransferToCreditorResponse();
        assertNotNull(responseWithNullPayload.getResponsePayload()); // This should initialize the responsePayload
        assertTrue(responseWithNullPayload.getResponsePayload() instanceof ResponsePayload);
    }
}
