package com.td.mbna.msec.midtier.transfer.payload.deletebalancetransfertocreditorpayee;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeleteBalanceTransferToCreditorPayeeRequestTest {

    private DeleteBalanceTransferToCreditorPayeeRequest request;
    private RequestPayload requestPayload;

    @Before
    public void setUp() {
        request = new DeleteBalanceTransferToCreditorPayeeRequest();
        requestPayload = new RequestPayload();
    }

    @Test
    public void testGetAndSetRequestPayload() {
        request.setRequestPayload(requestPayload);
        assertEquals(requestPayload, request.getRequestPayload());

        RequestPayload newRequestPayload = new RequestPayload();
        request.setRequestPayload(newRequestPayload);
        assertEquals(newRequestPayload, request.getRequestPayload());
    }

    @Test
    public void testToString() {
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("languagePref");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("custInterface");
        request.setRequestPayload(requestPayload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.deletebalancetransfertocreditorpayee.DeleteBalanceTransferToCreditorPayeeRequest@"
                + Integer.toHexString(System.identityHashCode(request))
                + "[sessionInfo=sessionInfo,custId=custId,aliasCustId=aliasCustId,acctNum=acctNum,acctType=acctType,languagePref=languagePref,auditInfo=auditInfo,isPrimaryUser=true,reserved1=reserved1,custInterface=custInterface,requestPayload=" + requestPayload + "]";

        assertEquals(expectedString, request.toString());
    }

    @Test
    public void testHashCode() {
        DeleteBalanceTransferToCreditorPayeeRequest request1 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request1.setSessionInfo("sessionInfo");
        request1.setCustId("custId");
        request1.setAliasCustId("aliasCustId");
        request1.setAcctNum("acctNum");
        request1.setAcctType("acctType");
        request1.setLanguagePref("languagePref");
        request1.setAuditInfo("auditInfo");
        request1.setIsPrimaryUser(true);
        request1.setReserved1("reserved1");
        request1.setCustInterface("custInterface");
        request1.setRequestPayload(requestPayload);

        DeleteBalanceTransferToCreditorPayeeRequest request2 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");
        request2.setAliasCustId("aliasCustId");
        request2.setAcctNum("acctNum");
        request2.setAcctType("acctType");
        request2.setLanguagePref("languagePref");
        request2.setAuditInfo("auditInfo");
        request2.setIsPrimaryUser(true);
        request2.setReserved1("reserved1");
        request2.setCustInterface("custInterface");
        request2.setRequestPayload(requestPayload);

        assertEquals(request1.hashCode(), request2.hashCode());

        DeleteBalanceTransferToCreditorPayeeRequest request3 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request3.setSessionInfo("newSessionInfo");
        request3.setCustId("newCustId");
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    public void testEquals() {
        DeleteBalanceTransferToCreditorPayeeRequest request1 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request1.setSessionInfo("sessionInfo");
        request1.setCustId("custId");
        request1.setAliasCustId("aliasCustId");
        request1.setAcctNum("acctNum");
        request1.setAcctType("acctType");
        request1.setLanguagePref("languagePref");
        request1.setAuditInfo("auditInfo");
        request1.setIsPrimaryUser(true);
        request1.setReserved1("reserved1");
        request1.setCustInterface("custInterface");
        request1.setRequestPayload(requestPayload);

        DeleteBalanceTransferToCreditorPayeeRequest request2 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");
        request2.setAliasCustId("aliasCustId");
        request2.setAcctNum("acctNum");
        request2.setAcctType("acctType");
        request2.setLanguagePref("languagePref");
        request2.setAuditInfo("auditInfo");
        request2.setIsPrimaryUser(true);
        request2.setReserved1("reserved1");
        request2.setCustInterface("custInterface");
        request2.setRequestPayload(requestPayload);

        DeleteBalanceTransferToCreditorPayeeRequest request3 = new DeleteBalanceTransferToCreditorPayeeRequest();
        request3.setSessionInfo("newSessionInfo");
        request3.setCustId("newCustId");

        assertTrue(request1.equals(request2));
        assertFalse(request1.equals(request3));
        assertFalse(request1.equals(null));
        assertFalse(request1.equals("String"));
    }
}
