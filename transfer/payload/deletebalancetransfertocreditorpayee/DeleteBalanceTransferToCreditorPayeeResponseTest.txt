package com.td.mbna.msec.midtier.transfer.payload.deletebalancetransfertocreditorpayee;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeleteBalanceTransferToCreditorPayeeResponseTest {

    private DeleteBalanceTransferToCreditorPayeeResponse response;
    private ResponsePayload responsePayload;

    @Before
    public void setUp() {
        response = new DeleteBalanceTransferToCreditorPayeeResponse();
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testGetAndSetResponsePayload() {
        response.setResponsePayload(responsePayload);
        assertEquals(responsePayload, response.getResponsePayload());

        ResponsePayload newResponsePayload = new ResponsePayload();
        response.setResponsePayload(newResponsePayload);
        assertEquals(newResponsePayload, response.getResponsePayload());
    }

    @Test
    public void testToString() {
        response.setStatus("status");
        response.setErrorMessages("errorMessages");
        response.setResponsePayload(responsePayload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.deletebalancetransfertocreditorpayee.DeleteBalanceTransferToCreditorPayeeResponse@"
                + Integer.toHexString(System.identityHashCode(response))
                + "[status=status,errorMsgs=errorMessages,responsePayload=" + responsePayload + "]";

        assertEquals(expectedString, response.toString());
    }

    @Test
    public void testHashCode() {
        DeleteBalanceTransferToCreditorPayeeResponse response1 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response1.setStatus("status");
        response1.setErrorMessages("errorMessages");
        response1.setResponsePayload(responsePayload);

        DeleteBalanceTransferToCreditorPayeeResponse response2 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response2.setStatus("status");
        response2.setErrorMessages("errorMessages");
        response2.setResponsePayload(responsePayload);

        assertEquals(response1.hashCode(), response2.hashCode());

        DeleteBalanceTransferToCreditorPayeeResponse response3 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response3.setStatus("newStatus");
        response3.setErrorMessages("newErrorMessages");

        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    public void testEquals() {
        DeleteBalanceTransferToCreditorPayeeResponse response1 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response1.setStatus("status");
        response1.setErrorMessages("errorMessages");
        response1.setResponsePayload(responsePayload);

        DeleteBalanceTransferToCreditorPayeeResponse response2 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response2.setStatus("status");
        response2.setErrorMessages("errorMessages");
        response2.setResponsePayload(responsePayload);

        DeleteBalanceTransferToCreditorPayeeResponse response3 = new DeleteBalanceTransferToCreditorPayeeResponse();
        response3.setStatus("newStatus");
        response3.setErrorMessages("newErrorMessages");

        assertTrue(response1.equals(response2));
        assertFalse(response1.equals(response3));
        assertFalse(response1.equals(null));
        assertFalse(response1.equals("String"));
    }
}
