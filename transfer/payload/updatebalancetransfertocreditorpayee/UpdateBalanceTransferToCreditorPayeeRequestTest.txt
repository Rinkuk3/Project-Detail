package com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class UpdateBalanceTransferToCreditorPayeeRequestTest {

    private UpdateBalanceTransferToCreditorPayeeRequest request;
    private RequestPayload requestPayload;

    @BeforeEach
    void setUp() {
        request = new UpdateBalanceTransferToCreditorPayeeRequest();
        requestPayload = new RequestPayload();
        requestPayload.setCurrentNickname("Nickname");
        requestPayload.setPayee(new BalanceTransferToCreditorPayeeType());
    }

    @Test
    void testGetAndSetRequestPayload() {
        request.setRequestPayload(requestPayload);
        assertEquals(requestPayload, request.getRequestPayload());
    }

    @Test
    void testToString() {
        request.setRequestPayload(requestPayload);
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("en");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("interface");

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeRequest@" +
                Integer.toHexString(request.hashCode()) + "[sessionInfo=sessionInfo,custId=custId,aliasCustId=aliasCustId,acctNum=acctNum," +
                "acctType=acctType,languagePref=en,auditInfo=auditInfo,isPrimaryUser=true,reserved1=reserved1,custInterface=interface," +
                "requestPayload=" + requestPayload.toString() + "]";
        assertEquals(expectedString, request.toString());
    }

    @Test
    void testToStringWithNullValues() {
        request.setRequestPayload(null);
        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeRequest@" +
                Integer.toHexString(request.hashCode()) + "[sessionInfo=<null>,custId=<null>,aliasCustId=<null>,acctNum=<null>," +
                "acctType=<null>,languagePref=<null>,auditInfo=<null>,isPrimaryUser=<null>,reserved1=<null>,custInterface=<null>,requestPayload=<null>]";
        assertEquals(expectedString, request.toString());
    }

    @Test
    void testHashCode() {
        request.setRequestPayload(requestPayload);
        int expectedHashCode = request.hashCode();

        UpdateBalanceTransferToCreditorPayeeRequest anotherRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        anotherRequest.setRequestPayload(requestPayload);
        assertEquals(expectedHashCode, anotherRequest.hashCode());
    }

    @Test
    void testHashCodeWithNullRequestPayload() {
        request.setRequestPayload(null);
        int expectedHashCode = request.hashCode();

        UpdateBalanceTransferToCreditorPayeeRequest anotherRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        anotherRequest.setRequestPayload(null);
        assertEquals(expectedHashCode, anotherRequest.hashCode());
    }

    @Test
    void testEquals() {
        request.setRequestPayload(requestPayload);

        UpdateBalanceTransferToCreditorPayeeRequest anotherRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        anotherRequest.setRequestPayload(requestPayload);

        assertTrue(request.equals(anotherRequest));

        UpdateBalanceTransferToCreditorPayeeRequest differentRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        differentRequest.setRequestPayload(new RequestPayload());
        assertFalse(request.equals(differentRequest));

        assertFalse(request.equals(null));
        assertFalse(request.equals(new Object()));
    }

    @Test
    void testEqualsWithNullRequestPayload() {
        request.setRequestPayload(null);

        UpdateBalanceTransferToCreditorPayeeRequest anotherRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        anotherRequest.setRequestPayload(null);

        assertTrue(request.equals(anotherRequest));
    }

    @Test
    void testEqualsWithDifferentValues() {
        request.setRequestPayload(requestPayload);

        UpdateBalanceTransferToCreditorPayeeRequest differentRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        differentRequest.setRequestPayload(new RequestPayload());

        assertFalse(request.equals(differentRequest));
    }

    @Test
    void testEqualsWithSameReference() {
        request.setRequestPayload(requestPayload);

        UpdateBalanceTransferToCreditorPayeeRequest sameRequest = request;

        assertTrue(request.equals(sameRequest));
    }

    @Test
    void testEqualsWithNullFields() {
        request.setSessionInfo(null);
        request.setCustId(null);
        request.setAliasCustId(null);
        request.setAcctNum(null);
        request.setAcctType(null);
        request.setLanguagePref(null);
        request.setAuditInfo(null);
        request.setIsPrimaryUser(null);
        request.setReserved1(null);
        request.setCustInterface(null);
        request.setRequestPayload(null);

        UpdateBalanceTransferToCreditorPayeeRequest otherRequest = new UpdateBalanceTransferToCreditorPayeeRequest();
        otherRequest.setSessionInfo(null);
        otherRequest.setCustId(null);
        otherRequest.setAliasCustId(null);
        otherRequest.setAcctNum(null);
        otherRequest.setAcctType(null);
        otherRequest.setLanguagePref(null);
        otherRequest.setAuditInfo(null);
        otherRequest.setIsPrimaryUser(null);
        otherRequest.setReserved1(null);
        otherRequest.setCustInterface(null);
        otherRequest.setRequestPayload(null);

        assertTrue(request.equals(otherRequest));
    }
}
