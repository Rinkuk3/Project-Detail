package com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class UpdateBalanceTransferToCreditorPayeeResponseTest {

    private UpdateBalanceTransferToCreditorPayeeResponse response;
    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        response = new UpdateBalanceTransferToCreditorPayeeResponse();
        responsePayload = new ResponsePayload();
        responsePayload.setStatus(true);
    }

    @Test
    void testGetAndSetResponsePayload() {
        response.setResponsePayload(responsePayload);
        assertEquals(responsePayload, response.getResponsePayload());
    }

    @Test
    void testToString() {
        response.setResponsePayload(responsePayload);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeResponse@" +
                Integer.toHexString(response.hashCode()) + "[status=true,errorMsgs=No errors,responsePayload=" + responsePayload.toString() + "]";
        assertEquals(expectedString, response.toString());
    }

    @Test
    void testToStringWithNullValues() {
        response.setResponsePayload(null);
        response.setStatus(null);
        response.setErrorMessages(null);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeResponse@" +
                Integer.toHexString(response.hashCode()) + "[status=<null>,errorMsgs=<null>,responsePayload=<null>]";
        assertEquals(expectedString, response.toString());
    }

    @Test
    void testHashCode() {
        response.setResponsePayload(responsePayload);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        int expectedHashCode = response.hashCode();

        UpdateBalanceTransferToCreditorPayeeResponse anotherResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        anotherResponse.setResponsePayload(responsePayload);
        anotherResponse.setStatus(true);
        anotherResponse.setErrorMessages("No errors");

        assertEquals(expectedHashCode, anotherResponse.hashCode());
    }

    @Test
    void testHashCodeWithNullFields() {
        response.setResponsePayload(null);
        response.setStatus(null);
        response.setErrorMessages(null);

        int expectedHashCode = response.hashCode();

        UpdateBalanceTransferToCreditorPayeeResponse anotherResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        anotherResponse.setResponsePayload(null);
        anotherResponse.setStatus(null);
        anotherResponse.setErrorMessages(null);

        assertEquals(expectedHashCode, anotherResponse.hashCode());
    }

    @Test
    void testEquals() {
        response.setResponsePayload(responsePayload);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        UpdateBalanceTransferToCreditorPayeeResponse anotherResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        anotherResponse.setResponsePayload(responsePayload);
        anotherResponse.setStatus(true);
        anotherResponse.setErrorMessages("No errors");

        assertTrue(response.equals(anotherResponse));

        UpdateBalanceTransferToCreditorPayeeResponse differentResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        differentResponse.setResponsePayload(new ResponsePayload());
        differentResponse.setStatus(false);
        differentResponse.setErrorMessages("Some errors");

        assertFalse(response.equals(differentResponse));

        assertFalse(response.equals(null));
        assertFalse(response.equals(new Object()));
    }

    @Test
    void testEqualsWithNullResponsePayload() {
        response.setResponsePayload(null);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        UpdateBalanceTransferToCreditorPayeeResponse anotherResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        anotherResponse.setResponsePayload(null);
        anotherResponse.setStatus(true);
        anotherResponse.setErrorMessages("No errors");

        assertTrue(response.equals(anotherResponse));
    }

    @Test
    void testEqualsWithDifferentValues() {
        response.setResponsePayload(responsePayload);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        UpdateBalanceTransferToCreditorPayeeResponse differentResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        differentResponse.setResponsePayload(new ResponsePayload());
        differentResponse.setStatus(false);
        differentResponse.setErrorMessages("Some errors");

        assertFalse(response.equals(differentResponse));
    }

    @Test
    void testEqualsWithSameReference() {
        response.setResponsePayload(responsePayload);
        response.setStatus(true);
        response.setErrorMessages("No errors");

        UpdateBalanceTransferToCreditorPayeeResponse sameResponse = response;

        assertTrue(response.equals(sameResponse));
    }

    @Test
    void testEqualsWithNullFields() {
        response.setResponsePayload(null);
        response.setStatus(null);
        response.setErrorMessages(null);

        UpdateBalanceTransferToCreditorPayeeResponse otherResponse = new UpdateBalanceTransferToCreditorPayeeResponse();
        otherResponse.setResponsePayload(null);
        otherResponse.setStatus(null);
        otherResponse.setErrorMessages(null);

        assertTrue(response.equals(otherResponse));
    }
}
