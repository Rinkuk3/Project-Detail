package com.td.mbna.msec.midtier.transfer.payload;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class DepositToChequingPaymentInfoTypeTest {

    private DepositToChequingPaymentInfoType paymentInfo;

    @BeforeEach
    void setUp() {
        paymentInfo = new DepositToChequingPaymentInfoType();
    }

    @Test
    void testGetAndSetPayee() {
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("123");
        paymentInfo.setPayee(payee);
        assertEquals(payee, paymentInfo.getPayee());
    }

    @Test
    void testGetAndSetAmount() {
        BigDecimal amount = new BigDecimal("100.50");
        paymentInfo.setAmount(amount);
        assertEquals(amount, paymentInfo.getAmount());
    }

    @Test
    void testToString() {
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("123");
        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPaymentInfoType@" +
                Integer.toHexString(paymentInfo.hashCode()) +
                "[payee=DepositToChequingPayeeType@"+Integer.toHexString(payee.hashCode())+ ",amount=100.50]";
        
        assertEquals(expectedString, paymentInfo.toString());
    }

    @Test
    void testHashCode() {
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("123");
        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        int expectedHashCode = paymentInfo.hashCode();

        DepositToChequingPaymentInfoType anotherPaymentInfo = new DepositToChequingPaymentInfoType();
        anotherPaymentInfo.setPayee(payee);
        anotherPaymentInfo.setAmount(amount);

        assertEquals(expectedHashCode, anotherPaymentInfo.hashCode());
    }

    @Test
    void testEquals() {
        DepositToChequingPayeeType payee1 = new DepositToChequingPayeeType();
        payee1.setId("123");
        BigDecimal amount1 = new BigDecimal("100.50");

        DepositToChequingPayeeType payee2 = new DepositToChequingPayeeType();
        payee2.setId("123");
        BigDecimal amount2 = new BigDecimal("100.50");

        paymentInfo.setPayee(payee1);
        paymentInfo.setAmount(amount1);

        DepositToChequingPaymentInfoType anotherPaymentInfo = new DepositToChequingPaymentInfoType();
        anotherPaymentInfo.setPayee(payee2);
        anotherPaymentInfo.setAmount(amount2);

        // Test equal objects
        assertTrue(paymentInfo.equals(anotherPaymentInfo));

        // Test different payee
        payee2.setId("456");
        anotherPaymentInfo.setPayee(payee2);
        assertFalse(paymentInfo.equals(anotherPaymentInfo));

        // Test different amount
        anotherPaymentInfo.setPayee(payee1);
        anotherPaymentInfo.setAmount(new BigDecimal("200.00"));
        assertFalse(paymentInfo.equals(anotherPaymentInfo));

        // Test null value
        assertFalse(paymentInfo.equals(null));

        // Test different object type
        assertFalse(paymentInfo.equals(new Object()));
    }

    @Test
    void testEqualsWithSameReference() {
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setId("123");
        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        assertTrue(paymentInfo.equals(paymentInfo));
    }

    @Test
    void testEqualsWithNullValues() {
        paymentInfo.setPayee(null);
        paymentInfo.setAmount(null);

        DepositToChequingPaymentInfoType anotherPaymentInfo = new DepositToChequingPaymentInfoType();
        anotherPaymentInfo.setPayee(null);
        anotherPaymentInfo.setAmount(null);

        assertTrue(paymentInfo.equals(anotherPaymentInfo));
    }

    @Test
    void testHashCodeWithNullValues() {
        paymentInfo.setPayee(null);
        paymentInfo.setAmount(null);

        DepositToChequingPaymentInfoType anotherPaymentInfo = new DepositToChequingPaymentInfoType();
        anotherPaymentInfo.setPayee(null);
        anotherPaymentInfo.setAmount(null);

        assertEquals(paymentInfo.hashCode(), anotherPaymentInfo.hashCode());
    }
}
