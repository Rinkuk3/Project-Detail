package com.td.mbna.msec.midtier.transfer.payload;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BTConfirmationTypeTest {

    private BTConfirmationType confirmation;

    @BeforeEach
    void setUp() {
        confirmation = new BTConfirmationType();
    }

    @Test
    void testGetAndSetStatus() {
        Boolean status = true;
        confirmation.setStatus(status);
        assertEquals(status, confirmation.getStatus());
    }

    @Test
    void testGetAndSetRefId() {
        String refId = "12345";
        confirmation.setRefId(refId);
        assertEquals(refId, confirmation.getRefId());
    }

    @Test
    void testGetAndSetErrorCode() {
        String errorCode = "ERR001";
        confirmation.setErrorCode(errorCode);
        assertEquals(errorCode, confirmation.getErrorCode());
    }

    @Test
    void testGetAndSetPaymentInfo() {
        BalanceTransferToCreditorPaymentInfoType paymentInfo = new BalanceTransferToCreditorPaymentInfoType();
        confirmation.setPaymentInfo(paymentInfo);
        assertEquals(paymentInfo, confirmation.getPaymentInfo());
    }

    @Test
    void testToString() {
        Boolean status = true;
        String refId = "12345";
        String errorCode = "ERR001";
        BalanceTransferToCreditorPaymentInfoType paymentInfo = new BalanceTransferToCreditorPaymentInfoType();

        confirmation.setStatus(status);
        confirmation.setRefId(refId);
        confirmation.setErrorCode(errorCode);
        confirmation.setPaymentInfo(paymentInfo);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.BTConfirmationType@" +
                Integer.toHexString(confirmation.hashCode()) +
                "[status=true,refId=12345,errorCode=ERR001,paymentInfo=" + paymentInfo + "]";

        assertEquals(expectedString, confirmation.toString());
    }

    @Test
    void testHashCode() {
        Boolean status = true;
        String refId = "12345";
        String errorCode = "ERR001";
        BalanceTransferToCreditorPaymentInfoType paymentInfo = new BalanceTransferToCreditorPaymentInfoType();

        confirmation.setStatus(status);
        confirmation.setRefId(refId);
        confirmation.setErrorCode(errorCode);
        confirmation.setPaymentInfo(paymentInfo);

        int expectedHashCode = confirmation.hashCode();

        BTConfirmationType anotherConfirmation = new BTConfirmationType();
        anotherConfirmation.setStatus(status);
        anotherConfirmation.setRefId(refId);
        anotherConfirmation.setErrorCode(errorCode);
        anotherConfirmation.setPaymentInfo(paymentInfo);

        assertEquals(expectedHashCode, anotherConfirmation.hashCode());
    }

    @Test
    void testEquals() {
        Boolean status = true;
        String refId = "12345";
        String errorCode = "ERR001";
        BalanceTransferToCreditorPaymentInfoType paymentInfo = new BalanceTransferToCreditorPaymentInfoType();

        confirmation.setStatus(status);
        confirmation.setRefId(refId);
        confirmation.setErrorCode(errorCode);
        confirmation.setPaymentInfo(paymentInfo);

        BTConfirmationType anotherConfirmation = new BTConfirmationType();
        anotherConfirmation.setStatus(status);
        anotherConfirmation.setRefId(refId);
        anotherConfirmation.setErrorCode(errorCode);
        anotherConfirmation.setPaymentInfo(paymentInfo);

        assertTrue(confirmation.equals(anotherConfirmation));

        // Test different status
        anotherConfirmation.setStatus(false);
        assertFalse(confirmation.equals(anotherConfirmation));

        // Test different refId
        anotherConfirmation.setStatus(status);
        anotherConfirmation.setRefId("54321");
        assertFalse(confirmation.equals(anotherConfirmation));

        // Test different errorCode
        anotherConfirmation.setRefId(refId);
        anotherConfirmation.setErrorCode("ERR002");
        assertFalse(confirmation.equals(anotherConfirmation));

        // Test different paymentInfo
        anotherConfirmation.setErrorCode(errorCode);
        anotherConfirmation.setPaymentInfo(new BalanceTransferToCreditorPaymentInfoType());
        assertFalse(confirmation.equals(anotherConfirmation));

        // Test null value
        assertFalse(confirmation.equals(null));

        // Test different object type
        assertFalse(confirmation.equals(new Object()));
    }

    @Test
    void testEqualsWithSameReference() {
        Boolean status = true;
        String refId = "12345";
        String errorCode = "ERR001";
        BalanceTransferToCreditorPaymentInfoType paymentInfo = new BalanceTransferToCreditorPaymentInfoType();

        confirmation.setStatus(status);
        confirmation.setRefId(refId);
        confirmation.setErrorCode(errorCode);
        confirmation.setPaymentInfo(paymentInfo);

        assertTrue(confirmation.equals(confirmation));
    }

    @Test
    void testEqualsWithNullValues() {
        confirmation.setStatus(null);
        confirmation.setRefId(null);
        confirmation.setErrorCode(null);
        confirmation.setPaymentInfo(null);

        BTConfirmationType anotherConfirmation = new BTConfirmationType();
        anotherConfirmation.setStatus(null);
        anotherConfirmation.setRefId(null);
        anotherConfirmation.setErrorCode(null);
        anotherConfirmation.setPaymentInfo(null);

        assertTrue(confirmation.equals(anotherConfirmation));
    }

    @Test
    void testHashCodeWithNullValues() {
        confirmation.setStatus(null);
        confirmation.setRefId(null);
        confirmation.setErrorCode(null);
        confirmation.setPaymentInfo(null);

        BTConfirmationType anotherConfirmation = new BTConfirmationType();
        anotherConfirmation.setStatus(null);
        anotherConfirmation.setRefId(null);
        anotherConfirmation.setErrorCode(null);
        anotherConfirmation.setPaymentInfo(null);

        assertEquals(confirmation.hashCode(), anotherConfirmation.hashCode());
    }
}
