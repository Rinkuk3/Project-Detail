package com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class RequestPayloadTest {

    private RequestPayload requestPayload;
    private DepositToChequingPayeeType payee;

    @BeforeEach
    void setUp() {
        requestPayload = new RequestPayload();
        payee = new DepositToChequingPayeeType();
    }

    @Test
    void testGetAndSetCurrentNickname() {
        requestPayload.setCurrentNickname("Test Nickname");
        assertEquals("Test Nickname", requestPayload.getCurrentNickname());
    }

    @Test
    void testGetAndSetPayee() {
        requestPayload.setPayee(payee);
        assertEquals(payee, requestPayload.getPayee());
    }

    @Test
    void testToString() {
        requestPayload.setCurrentNickname("Test Nickname");
        requestPayload.setPayee(payee);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.RequestPayload@" +
                Integer.toHexString(requestPayload.hashCode()) + "[currentNickname=Test Nickname,payee=" + payee + "]";
        assertEquals(expectedString, requestPayload.toString());
    }

    @Test
    void testToStringWithNullValues() {
        requestPayload.setCurrentNickname(null);
        requestPayload.setPayee(null);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.RequestPayload@" +
                Integer.toHexString(requestPayload.hashCode()) + "[currentNickname=<null>,payee=<null>]";
        assertEquals(expectedString, requestPayload.toString());
    }

    @Test
    void testHashCode() {
        requestPayload.setCurrentNickname("Test Nickname");
        requestPayload.setPayee(payee);

        int expectedHashCode = requestPayload.hashCode();

        RequestPayload anotherRequestPayload = new RequestPayload();
        anotherRequestPayload.setCurrentNickname("Test Nickname");
        anotherRequestPayload.setPayee(payee);

        assertEquals(expectedHashCode, anotherRequestPayload.hashCode());
    }

    @Test
    void testHashCodeWithNullFields() {
        requestPayload.setCurrentNickname(null);
        requestPayload.setPayee(null);

        int expectedHashCode = requestPayload.hashCode();

        RequestPayload anotherRequestPayload = new RequestPayload();
        anotherRequestPayload.setCurrentNickname(null);
        anotherRequestPayload.setPayee(null);

        assertEquals(expectedHashCode, anotherRequestPayload.hashCode());
    }

    @Test
    void testEquals() {
        requestPayload.setCurrentNickname("Test Nickname");
        requestPayload.setPayee(payee);

        RequestPayload anotherRequestPayload = new RequestPayload();
        anotherRequestPayload.setCurrentNickname("Test Nickname");
        anotherRequestPayload.setPayee(payee);

        assertTrue(requestPayload.equals(anotherRequestPayload));

        RequestPayload differentRequestPayload = new RequestPayload();
        differentRequestPayload.setCurrentNickname("Different Nickname");
        differentRequestPayload.setPayee(new DepositToChequingPayeeType());

        assertFalse(requestPayload.equals(differentRequestPayload));

        assertFalse(requestPayload.equals(null));
        assertFalse(requestPayload.equals(new Object()));
    }

    @Test
    void testEqualsWithNullFields() {
        requestPayload.setCurrentNickname(null);
        requestPayload.setPayee(null);

        RequestPayload anotherRequestPayload = new RequestPayload();
        anotherRequestPayload.setCurrentNickname(null);
        anotherRequestPayload.setPayee(null);

        assertTrue(requestPayload.equals(anotherRequestPayload));
    }

    @Test
    void testEqualsWithSameReference() {
        requestPayload.setCurrentNickname("Test Nickname");
        requestPayload.setPayee(payee);

        RequestPayload sameRequestPayload = requestPayload;

        assertTrue(requestPayload.equals(sameRequestPayload));
    }

    @Test
    void testEqualsWithNullPayee() {
        requestPayload.setCurrentNickname("Test Nickname");
        requestPayload.setPayee(null);

        RequestPayload anotherRequestPayload = new RequestPayload();
        anotherRequestPayload.setCurrentNickname("Test Nickname");
        anotherRequestPayload.setPayee(null);

        assertTrue(requestPayload.equals(anotherRequestPayload));
    }
}
