package com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    void testGetAndSetStatus() {
        responsePayload.setStatus(true);
        assertTrue(responsePayload.getStatus());

        responsePayload.setStatus(false);
        assertFalse(responsePayload.getStatus());

        responsePayload.setStatus(null);
        assertNull(responsePayload.getStatus());
    }

    @Test
    void testToString() {
        responsePayload.setStatus(true);
        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.ResponsePayload@" +
                Integer.toHexString(responsePayload.hashCode()) + "[status=true]";
        assertEquals(expectedString, responsePayload.toString());

        responsePayload.setStatus(false);
        expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.ResponsePayload@" +
                Integer.toHexString(responsePayload.hashCode()) + "[status=false]";
        assertEquals(expectedString, responsePayload.toString());

        responsePayload.setStatus(null);
        expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.ResponsePayload@" +
                Integer.toHexString(responsePayload.hashCode()) + "[status=<null>]";
        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    void testHashCode() {
        responsePayload.setStatus(true);
        int expectedHashCode = responsePayload.hashCode();

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setStatus(true);

        assertEquals(expectedHashCode, anotherResponsePayload.hashCode());

        responsePayload.setStatus(false);
        anotherResponsePayload.setStatus(false);

        assertEquals(responsePayload.hashCode(), anotherResponsePayload.hashCode());
    }

    @Test
    void testHashCodeWithNullStatus() {
        responsePayload.setStatus(null);
        int expectedHashCode = responsePayload.hashCode();

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setStatus(null);

        assertEquals(expectedHashCode, anotherResponsePayload.hashCode());
    }

    @Test
    void testEquals() {
        responsePayload.setStatus(true);
        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setStatus(true);

        assertTrue(responsePayload.equals(anotherResponsePayload));

        ResponsePayload differentResponsePayload = new ResponsePayload();
        differentResponsePayload.setStatus(false);

        assertFalse(responsePayload.equals(differentResponsePayload));

        assertFalse(responsePayload.equals(null));
        assertFalse(responsePayload.equals(new Object()));
    }

    @Test
    void testEqualsWithNullStatus() {
        responsePayload.setStatus(null);
        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setStatus(null);

        assertTrue(responsePayload.equals(anotherResponsePayload));
    }

    @Test
    void testEqualsWithSameReference() {
        responsePayload.setStatus(true);
        ResponsePayload sameResponsePayload = responsePayload;

        assertTrue(responsePayload.equals(sameResponsePayload));
    }
}
