package com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class UpdateDepositToChequingPayeeResponseTest {

    private UpdateDepositToChequingPayeeResponse response;

    @BeforeEach
    void setUp() {
        response = new UpdateDepositToChequingPayeeResponse();
    }

    @Test
    void testGetAndSetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    void testToString() {
        response.setStatus(true);
        response.setErrorMessages("Error message");
        
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);
        
        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.UpdateDepositToChequingPayeeResponse@" +
                Integer.toHexString(response.hashCode()) + 
                "[status=true,errorMsgs=Error message,responsePayload=" + payload.toString() + "]";
        
        assertEquals(expectedString, response.toString());
    }

    @Test
    void testHashCode() {
        response.setStatus(true);
        response.setErrorMessages("Error message");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        int expectedHashCode = response.hashCode();

        UpdateDepositToChequingPayeeResponse anotherResponse = new UpdateDepositToChequingPayeeResponse();
        anotherResponse.setStatus(true);
        anotherResponse.setErrorMessages("Error message");
        anotherResponse.setResponsePayload(payload);

        assertEquals(expectedHashCode, anotherResponse.hashCode());
    }

    @Test
    void testEquals() {
        response.setStatus(true);
        response.setErrorMessages("Error message");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        UpdateDepositToChequingPayeeResponse anotherResponse = new UpdateDepositToChequingPayeeResponse();
        anotherResponse.setStatus(true);
        anotherResponse.setErrorMessages("Error message");
        anotherResponse.setResponsePayload(payload);

        assertTrue(response.equals(anotherResponse));

        anotherResponse.setStatus(false);
        assertFalse(response.equals(anotherResponse));

        anotherResponse.setErrorMessages("Different error message");
        assertFalse(response.equals(anotherResponse));

        anotherResponse.setResponsePayload(new ResponsePayload());
        assertFalse(response.equals(anotherResponse));

        assertFalse(response.equals(null));
        assertFalse(response.equals(new Object()));
    }

    @Test
    void testEqualsWithSameReference() {
        response.setStatus(true);
        response.setErrorMessages("Error message");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        assertTrue(response.equals(response));
    }

    @Test
    void testEqualsWithNullValues() {
        response.setStatus(null);
        response.setErrorMessages(null);

        ResponsePayload payload = null;
        response.setResponsePayload(payload);

        UpdateDepositToChequingPayeeResponse anotherResponse = new UpdateDepositToChequingPayeeResponse();
        anotherResponse.setStatus(null);
        anotherResponse.setErrorMessages(null);
        anotherResponse.setResponsePayload(null);

        assertTrue(response.equals(anotherResponse));
    }

    @Test
    void testHashCodeWithNullValues() {
        response.setStatus(null);
        response.setErrorMessages(null);

        ResponsePayload payload = null;
        response.setResponsePayload(payload);

        UpdateDepositToChequingPayeeResponse anotherResponse = new UpdateDepositToChequingPayeeResponse();
        anotherResponse.setStatus(null);
        anotherResponse.setErrorMessages(null);
        anotherResponse.setResponsePayload(null);

        assertEquals(response.hashCode(), anotherResponse.hashCode());
    }
}
