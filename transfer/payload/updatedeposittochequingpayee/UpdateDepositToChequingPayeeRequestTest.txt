package com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class UpdateDepositToChequingPayeeRequestTest {

    private UpdateDepositToChequingPayeeRequest request;

    @BeforeEach
    void setUp() {
        request = new UpdateDepositToChequingPayeeRequest();
    }

    @Test
    void testGetAndSetRequestPayload() {
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);
        assertEquals(payload, request.getRequestPayload());
    }

    @Test
    void testToString() {
        request.setSessionInfo("SessionInfo");
        request.setCustId("123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setAuditInfo("AuditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved1");
        request.setCustInterface("Web");
        
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.UpdateDepositToChequingPayeeRequest@" +
                Integer.toHexString(request.hashCode()) + 
                "[sessionInfo=SessionInfo,custId=123,aliasCustId=Alias123,acctNum=Acct123,acctType=Type1,languagePref=EN,auditInfo=AuditInfo,isPrimaryUser=true,reserved1=Reserved1,custInterface=Web,requestPayload=" + payload.toString() + "]";
        
        assertEquals(expectedString, request.toString());
    }

    @Test
    void testHashCode() {
        request.setSessionInfo("SessionInfo");
        request.setCustId("123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setAuditInfo("AuditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved1");
        request.setCustInterface("Web");
        
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        int expectedHashCode = request.hashCode();

        UpdateDepositToChequingPayeeRequest anotherRequest = new UpdateDepositToChequingPayeeRequest();
        anotherRequest.setSessionInfo("SessionInfo");
        anotherRequest.setCustId("123");
        anotherRequest.setAliasCustId("Alias123");
        anotherRequest.setAcctNum("Acct123");
        anotherRequest.setAcctType("Type1");
        anotherRequest.setLanguagePref("EN");
        anotherRequest.setAuditInfo("AuditInfo");
        anotherRequest.setIsPrimaryUser(true);
        anotherRequest.setReserved1("Reserved1");
        anotherRequest.setCustInterface("Web");
        anotherRequest.setRequestPayload(payload);

        assertEquals(expectedHashCode, anotherRequest.hashCode());
    }

    @Test
    void testEquals() {
        request.setSessionInfo("SessionInfo");
        request.setCustId("123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setAuditInfo("AuditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved1");
        request.setCustInterface("Web");
        
        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        UpdateDepositToChequingPayeeRequest anotherRequest = new UpdateDepositToChequingPayeeRequest();
        anotherRequest.setSessionInfo("SessionInfo");
        anotherRequest.setCustId("123");
        anotherRequest.setAliasCustId("Alias123");
        anotherRequest.setAcctNum("Acct123");
        anotherRequest.setAcctType("Type1");
        anotherRequest.setLanguagePref("EN");
        anotherRequest.setAuditInfo("AuditInfo");
        anotherRequest.setIsPrimaryUser(true);
        anotherRequest.setReserved1("Reserved1");
        anotherRequest.setCustInterface("Web");
        anotherRequest.setRequestPayload(payload);

        assertTrue(request.equals(anotherRequest));

        anotherRequest.setSessionInfo("DifferentSession");
        assertFalse(request.equals(anotherRequest));

        assertFalse(request.equals(null));
        assertFalse(request.equals(new Object()));
    }

    @Test
    void testEqualsWithDifferentRequestPayload() {
        request.setSessionInfo("SessionInfo");
        request.setCustId("123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setAuditInfo("AuditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved1");
        request.setCustInterface("Web");

        RequestPayload payload1 = new RequestPayload();
        request.setRequestPayload(payload1);

        UpdateDepositToChequingPayeeRequest anotherRequest = new UpdateDepositToChequingPayeeRequest();
        anotherRequest.setSessionInfo("SessionInfo");
        anotherRequest.setCustId("123");
        anotherRequest.setAliasCustId("Alias123");
        anotherRequest.setAcctNum("Acct123");
        anotherRequest.setAcctType("Type1");
        anotherRequest.setLanguagePref("EN");
        anotherRequest.setAuditInfo("AuditInfo");
        anotherRequest.setIsPrimaryUser(true);
        anotherRequest.setReserved1("Reserved1");
        anotherRequest.setCustInterface("Web");

        RequestPayload payload2 = new RequestPayload();
        anotherRequest.setRequestPayload(payload2);

        assertFalse(request.equals(anotherRequest));
    }

    @Test
    void testEqualsWithSameReference() {
        request.setSessionInfo("SessionInfo");
        request.setCustId("123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type1");
        request.setLanguagePref("EN");
        request.setAuditInfo("AuditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved1");
        request.setCustInterface("Web");

        RequestPayload payload = new RequestPayload();
        request.setRequestPayload(payload);

        assertTrue(request.equals(request));
    }

}
