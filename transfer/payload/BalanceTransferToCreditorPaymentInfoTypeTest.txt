package com.td.mbna.msec.midtier.transfer.payload;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class BalanceTransferToCreditorPaymentInfoTypeTest {

    private BalanceTransferToCreditorPaymentInfoType paymentInfo;

    @BeforeEach
    void setUp() {
        paymentInfo = new BalanceTransferToCreditorPaymentInfoType();
    }

    @Test
    void testGetAndSetPayee() {
        BalanceTransferToCreditorPayeeType payee = new BalanceTransferToCreditorPayeeType();
        paymentInfo.setPayee(payee);
        assertEquals(payee, paymentInfo.getPayee());
    }

    @Test
    void testGetAndSetAmount() {
        BigDecimal amount = new BigDecimal("100.50");
        paymentInfo.setAmount(amount);
        assertEquals(amount, paymentInfo.getAmount());
    }

    @Test
    void testToString() {
        BalanceTransferToCreditorPayeeType payee = new BalanceTransferToCreditorPayeeType();
        payee.setId("123");
        payee.setNickName("Test Payee");

        BigDecimal amount = new BigDecimal("200.75");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.BalanceTransferToCreditorPaymentInfoType@" +
                Integer.toHexString(paymentInfo.hashCode()) +
                "[payee=com.td.mbna.msec.midtier.transfer.payload.BalanceTransferToCreditorPayeeType@" +
                Integer.toHexString(payee.hashCode()) + "[id=123,nickName=Test Payee],amount=200.75]";

        assertEquals(expectedString, paymentInfo.toString());
    }

    @Test
    void testHashCode() {
        BalanceTransferToCreditorPayeeType payee = new BalanceTransferToCreditorPayeeType();
        payee.setId("123");
        payee.setNickName("Test Payee");

        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        int expectedHashCode = paymentInfo.hashCode();

        BalanceTransferToCreditorPaymentInfoType anotherPaymentInfo = new BalanceTransferToCreditorPaymentInfoType();
        anotherPaymentInfo.setPayee(payee);
        anotherPaymentInfo.setAmount(amount);

        assertEquals(expectedHashCode, anotherPaymentInfo.hashCode());
    }

    @Test
    void testEquals() {
        BalanceTransferToCreditorPayeeType payee = new BalanceTransferToCreditorPayeeType();
        payee.setId("123");
        payee.setNickName("Test Payee");

        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        BalanceTransferToCreditorPaymentInfoType anotherPaymentInfo = new BalanceTransferToCreditorPaymentInfoType();
        anotherPaymentInfo.setPayee(payee);
        anotherPaymentInfo.setAmount(amount);

        assertTrue(paymentInfo.equals(anotherPaymentInfo));

        // Test different payee
        BalanceTransferToCreditorPayeeType differentPayee = new BalanceTransferToCreditorPayeeType();
        differentPayee.setId("124");
        differentPayee.setNickName("Different Payee");

        anotherPaymentInfo.setPayee(differentPayee);
        assertFalse(paymentInfo.equals(anotherPaymentInfo));

        // Test different amount
        anotherPaymentInfo.setPayee(payee);
        anotherPaymentInfo.setAmount(new BigDecimal("200.75"));
        assertFalse(paymentInfo.equals(anotherPaymentInfo));

        // Test null value
        assertFalse(paymentInfo.equals(null));

        // Test different object type
        assertFalse(paymentInfo.equals(new Object()));
    }

    @Test
    void testEqualsWithSameReference() {
        BalanceTransferToCreditorPayeeType payee = new BalanceTransferToCreditorPayeeType();
        payee.setId("123");
        payee.setNickName("Test Payee");

        BigDecimal amount = new BigDecimal("100.50");

        paymentInfo.setPayee(payee);
        paymentInfo.setAmount(amount);

        assertTrue(paymentInfo.equals(paymentInfo));
    }

    @Test
    void testEqualsWithNullValues() {
        paymentInfo.setPayee(null);
        paymentInfo.setAmount(null);

        BalanceTransferToCreditorPaymentInfoType anotherPaymentInfo = new BalanceTransferToCreditorPaymentInfoType();
        anotherPaymentInfo.setPayee(null);
        anotherPaymentInfo.setAmount(null);

        assertTrue(paymentInfo.equals(anotherPaymentInfo));
    }

    @Test
    void testHashCodeWithNullValues() {
        paymentInfo.setPayee(null);
        paymentInfo.setAmount(null);

        BalanceTransferToCreditorPaymentInfoType anotherPaymentInfo = new BalanceTransferToCreditorPaymentInfoType();
        anotherPaymentInfo.setPayee(null);
        anotherPaymentInfo.setAmount(null);

        assertEquals(paymentInfo.hashCode(), anotherPaymentInfo.hashCode());
    }
}
