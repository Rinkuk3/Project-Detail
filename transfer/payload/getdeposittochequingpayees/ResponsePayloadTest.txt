package com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees;

import com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    void testGetAndSetPayee() {
        List<DepositToChequingPayeeType> payees = new ArrayList<>();
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payees.add(payee);

        responsePayload.setPayee(payees);
        assertEquals(payees, responsePayload.getPayee());
    }

    @Test
    void testToString() {
        List<DepositToChequingPayeeType> payees = new ArrayList<>();
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payees.add(payee);

        responsePayload.setPayee(payees);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.ResponsePayload@" +
                Integer.toHexString(responsePayload.hashCode()) + "[payee=" + payees + "]";

        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    void testToStringWithNullPayee() {
        responsePayload.setPayee(null);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.ResponsePayload@" +
                Integer.toHexString(responsePayload.hashCode()) + "[payee=<null>]";

        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    void testHashCode() {
        List<DepositToChequingPayeeType> payees = new ArrayList<>();
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payees.add(payee);

        responsePayload.setPayee(payees);

        int expectedHashCode = responsePayload.hashCode();

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setPayee(payees);

        assertEquals(expectedHashCode, anotherResponsePayload.hashCode());
    }

    @Test
    void testHashCodeWithNullPayee() {
        responsePayload.setPayee(null);

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setPayee(null);

        assertEquals(responsePayload.hashCode(), anotherResponsePayload.hashCode());
    }

    @Test
    void testEquals() {
        List<DepositToChequingPayeeType> payees = new ArrayList<>();
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payees.add(payee);

        responsePayload.setPayee(payees);

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setPayee(payees);

        assertTrue(responsePayload.equals(anotherResponsePayload));

        ResponsePayload differentResponsePayload = new ResponsePayload();
        differentResponsePayload.setPayee(new ArrayList<>());
        assertFalse(responsePayload.equals(differentResponsePayload));

        assertFalse(responsePayload.equals(null));
        assertFalse(responsePayload.equals(new Object()));
    }

    @Test
    void testEqualsWithNullPayee() {
        responsePayload.setPayee(null);

        ResponsePayload anotherResponsePayload = new ResponsePayload();
        anotherResponsePayload.setPayee(null);

        assertTrue(responsePayload.equals(anotherResponsePayload));
    }

    @Test
    void testEqualsWithDifferentPayee() {
        List<DepositToChequingPayeeType> payees1 = new ArrayList<>();
        DepositToChequingPayeeType payee1 = new DepositToChequingPayeeType();
        payees1.add(payee1);

        List<DepositToChequingPayeeType> payees2 = new ArrayList<>();
        DepositToChequingPayeeType payee2 = new DepositToChequingPayeeType();
        payees2.add(payee2);

        responsePayload.setPayee(payees1);

        ResponsePayload differentResponsePayload = new ResponsePayload();
        differentResponsePayload.setPayee(payees2);

        assertFalse(responsePayload.equals(differentResponsePayload));
    }

    @Test
    void testEqualsWithSamePayeeReference() {
        List<DepositToChequingPayeeType> payees = new ArrayList<>();
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payees.add(payee);

        responsePayload.setPayee(payees);

        ResponsePayload anotherResponsePayload = responsePayload;

        assertTrue(responsePayload.equals(anotherResponsePayload));
    }
}
