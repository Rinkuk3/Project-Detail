package com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GetDepositToChequingPayeesResponseTest {

    private GetDepositToChequingPayeesResponse response;

    @BeforeEach
    void setUp() {
        response = new GetDepositToChequingPayeesResponse();
    }

    @Test
    void testGetAndSetResponsePayload() {
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    void testToString() {
        response.setStatus("Success");
        response.setErrorMessages("No error");
        
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.GetDepositToChequingPayeesResponse@" +
                                Integer.toHexString(response.hashCode()) + "[status=Success,errorMsgs=No error,responsePayload=" + payload + "]";

        assertEquals(expectedString, response.toString());
    }

    @Test
    void testToStringWithNullFields() {
        response.setStatus(null);
        response.setErrorMessages(null);
        response.setResponsePayload(null);

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.GetDepositToChequingPayeesResponse@" +
                                Integer.toHexString(response.hashCode()) + "[status=<null>,errorMsgs=<null>,responsePayload=<null>]";

        assertEquals(expectedString, response.toString());
    }

    @Test
    void testHashCode() {
        response.setStatus("Success");
        response.setErrorMessages("No error");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        int expectedHashCode = response.hashCode();

        GetDepositToChequingPayeesResponse anotherResponse = new GetDepositToChequingPayeesResponse();
        anotherResponse.setStatus("Success");
        anotherResponse.setErrorMessages("No error");
        anotherResponse.setResponsePayload(payload);

        assertEquals(expectedHashCode, anotherResponse.hashCode());
    }

    @Test
    void testHashCodeWithNullFields() {
        response.setStatus(null);
        response.setErrorMessages(null);
        response.setResponsePayload(null);

        GetDepositToChequingPayeesResponse anotherResponse = new GetDepositToChequingPayeesResponse();
        anotherResponse.setStatus(null);
        anotherResponse.setErrorMessages(null);
        anotherResponse.setResponsePayload(null);

        assertEquals(response.hashCode(), anotherResponse.hashCode());
    }

    @Test
    void testEquals() {
        response.setStatus("Success");
        response.setErrorMessages("No error");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        GetDepositToChequingPayeesResponse anotherResponse = new GetDepositToChequingPayeesResponse();
        anotherResponse.setStatus("Success");
        anotherResponse.setErrorMessages("No error");
        anotherResponse.setResponsePayload(payload);

        assertTrue(response.equals(anotherResponse));

        GetDepositToChequingPayeesResponse differentResponse = new GetDepositToChequingPayeesResponse();
        assertFalse(response.equals(differentResponse));

        assertFalse(response.equals(null));
        assertFalse(response.equals(new Object()));
    }

    @Test
    void testEqualsWithNullFields() {
        response.setStatus(null);
        response.setErrorMessages(null);
        response.setResponsePayload(null);

        GetDepositToChequingPayeesResponse anotherResponse = new GetDepositToChequingPayeesResponse();
        anotherResponse.setStatus(null);
        anotherResponse.setErrorMessages(null);
        anotherResponse.setResponsePayload(null);

        assertTrue(response.equals(anotherResponse));
    }

    @Test
    void testEqualsWithDifferentFields() {
        response.setStatus("Success");
        response.setErrorMessages("No error");

        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);

        GetDepositToChequingPayeesResponse differentResponse = new GetDepositToChequingPayeesResponse();
        differentResponse.setStatus("Failure");

        assertFalse(response.equals(differentResponse));
    }
}
