package com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorpayees;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GetBalanceTransferToCreditorPayeesRequestTest {

    private GetBalanceTransferToCreditorPayeesRequest request;

    @BeforeEach
    void setUp() {
        request = new GetBalanceTransferToCreditorPayeesRequest();
    }

    @Test
    void testGetAndSetRequestPayload() {
        Object payload = new Object();
        request.setRequestPayload(payload);
        assertEquals(payload, request.getRequestPayload());
    }

    @Test
    void testToString() {
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("EN");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("custInterface");
        request.setRequestPayload("requestPayload");

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorpayees.GetBalanceTransferToCreditorPayeesRequest@" 
                                + Integer.toHexString(request.hashCode()) + "[sessionInfo=sessionInfo,custId=custId,aliasCustId=aliasCustId,acctNum=acctNum,acctType=acctType,languagePref=EN,auditInfo=auditInfo,isPrimaryUser=true,reserved1=reserved1,custInterface=custInterface,requestPayload=requestPayload]";
        assertEquals(expectedString, request.toString());
    }

    @Test
    void testHashCode() {
        GetBalanceTransferToCreditorPayeesRequest request2 = new GetBalanceTransferToCreditorPayeesRequest();
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("EN");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("custInterface");
        request.setRequestPayload("requestPayload");

        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");
        request2.setAliasCustId("aliasCustId");
        request2.setAcctNum("acctNum");
        request2.setAcctType("acctType");
        request2.setLanguagePref("EN");
        request2.setAuditInfo("auditInfo");
        request2.setIsPrimaryUser(true);
        request2.setReserved1("reserved1");
        request2.setCustInterface("custInterface");
        request2.setRequestPayload("requestPayload");

        assertEquals(request.hashCode(), request2.hashCode());
    }

    @Test
    void testEquals() {
        GetBalanceTransferToCreditorPayeesRequest request2 = new GetBalanceTransferToCreditorPayeesRequest();
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");
        request.setAliasCustId("aliasCustId");
        request.setAcctNum("acctNum");
        request.setAcctType("acctType");
        request.setLanguagePref("EN");
        request.setAuditInfo("auditInfo");
        request.setIsPrimaryUser(true);
        request.setReserved1("reserved1");
        request.setCustInterface("custInterface");
        request.setRequestPayload("requestPayload");

        request2.setSessionInfo("sessionInfo");
        request2.setCustId("custId");
        request2.setAliasCustId("aliasCustId");
        request2.setAcctNum("acctNum");
        request2.setAcctType("acctType");
        request2.setLanguagePref("EN");
        request2.setAuditInfo("auditInfo");
        request2.setIsPrimaryUser(true);
        request2.setReserved1("reserved1");
        request2.setCustInterface("custInterface");
        request2.setRequestPayload("requestPayload");

        assertTrue(request.equals(request2));

        // Test equality with different object
        assertFalse(request.equals(null));

        // Test equality with different class
        assertFalse(request.equals(new Object()));
    }

    @Test
    void testEqualsWithDifferentValues() {
        GetBalanceTransferToCreditorPayeesRequest request2 = new GetBalanceTransferToCreditorPayeesRequest();
        request.setSessionInfo("sessionInfo");
        request.setCustId("custId");

        request2.setSessionInfo("sessionInfo");
        request2.setCustId("differentCustId");

        assertFalse(request.equals(request2));
    }
}
