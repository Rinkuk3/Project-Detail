package com.td.mbna.msec.midtier.transfer.payload.deposittochequing;

import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.*;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @Before
    public void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    public void testGetAndSetStatus() {
        Boolean status = true;
        responsePayload.setStatus(status);
        assertEquals(status, responsePayload.getStatus());
    }

    @Test
    public void testGetAndSetRefId() {
        String refId = "12345";
        responsePayload.setRefId(refId);
        assertEquals(refId, responsePayload.getRefId());
    }

    @Test
    public void testGetAndSetTransferTo() {
        String transferTo = "AccountA";
        responsePayload.setTransferTo(transferTo);
        assertEquals(transferTo, responsePayload.getTransferTo());
    }

    @Test
    public void testGetAndSetTransferToFr() {
        String transferToFr = "AccountB";
        responsePayload.setTransferToFr(transferToFr);
        assertEquals(transferToFr, responsePayload.getTransferToFr());
    }

    @Test
    public void testGetAndSetMinNumOfDays() {
        Integer minNumOfDays = 5;
        responsePayload.setMinNumOfDays(minNumOfDays);
        assertEquals(minNumOfDays, responsePayload.getMinNumOfDays());
    }

    @Test
    public void testGetAndSetMaxNumOfDays() {
        Integer maxNumOfDays = 10;
        responsePayload.setMaxNumOfDays(maxNumOfDays);
        assertEquals(maxNumOfDays, responsePayload.getMaxNumOfDays());
    }

    @Test
    public void testGetAndSetAllowBalanceTransfer() {
        Boolean allowBalanceTransfer = true;
        responsePayload.setAllowBalanceTransfer(allowBalanceTransfer);
        assertEquals(allowBalanceTransfer, responsePayload.getAllowBalanceTransfer());
    }

    @Test
    public void testGetAndSetAllowTransferToChequing() {
        Boolean allowTransferToChequing = false;
        responsePayload.setAllowTransferToChequing(allowTransferToChequing);
        assertEquals(allowTransferToChequing, responsePayload.getAllowTransferToChequing());
    }

    @Test
    public void testGetAndSetTotalAmt() {
        BigDecimal totalAmt = new BigDecimal("1500.75");
        responsePayload.setTotalAmt(totalAmt);
        assertEquals(totalAmt, responsePayload.getTotalAmt());
    }

    @Test
    public void testGetAndSetTransferFee() {
        BigDecimal transferFee = new BigDecimal("15.00");
        responsePayload.setTransferFee(transferFee);
        assertEquals(transferFee, responsePayload.getTransferFee());
    }

    @Test
    public void testToString() {
        responsePayload.setStatus(true);
        responsePayload.setRefId("12345");
        responsePayload.setTransferTo("AccountA");
        responsePayload.setTransferToFr("AccountB");
        responsePayload.setMinNumOfDays(5);
        responsePayload.setMaxNumOfDays(10);
        responsePayload.setAllowBalanceTransfer(true);
        responsePayload.setAllowTransferToChequing(false);
        responsePayload.setTotalAmt(new BigDecimal("1500.75"));
        responsePayload.setTransferFee(new BigDecimal("15.00"));

        String expectedString = "com.td.mbna.msec.midtier.transfer.payload.deposittochequing.ResponsePayload@"
                + Integer.toHexString(System.identityHashCode(responsePayload))
                + "[status=true,refId=12345,transferTo=AccountA,transferToFr=AccountB,minNumOfDays=5,maxNumOfDays=10,allowBalanceTransfer=true,allowTransferToChequing=false,totalAmt=1500.75,transferFee=15.00]";

        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    public void testHashCode() {
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setStatus(true);
        payload1.setRefId("12345");
        payload1.setTransferTo("AccountA");
        payload1.setTransferToFr("AccountB");
        payload1.setMinNumOfDays(5);
        payload1.setMaxNumOfDays(10);
        payload1.setAllowBalanceTransfer(true);
        payload1.setAllowTransferToChequing(false);
        payload1.setTotalAmt(new BigDecimal("1500.75"));
        payload1.setTransferFee(new BigDecimal("15.00"));

        ResponsePayload payload2 = new ResponsePayload();
        payload2.setStatus(true);
        payload2.setRefId("12345");
        payload2.setTransferTo("AccountA");
        payload2.setTransferToFr("AccountB");
        payload2.setMinNumOfDays(5);
        payload2.setMaxNumOfDays(10);
        payload2.setAllowBalanceTransfer(true);
        payload2.setAllowTransferToChequing(false);
        payload2.setTotalAmt(new BigDecimal("1500.75"));
        payload2.setTransferFee(new BigDecimal("15.00"));

        assertEquals(payload1.hashCode(), payload2.hashCode());
    }

    @Test
    public void testEquals() {
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setStatus(true);
        payload1.setRefId("12345");
        payload1.setTransferTo("AccountA");
        payload1.setTransferToFr("AccountB");
        payload1.setMinNumOfDays(5);
        payload1.setMaxNumOfDays(10);
        payload1.setAllowBalanceTransfer(true);
        payload1.setAllowTransferToChequing(false);
        payload1.setTotalAmt(new BigDecimal("1500.75"));
        payload1.setTransferFee(new BigDecimal("15.00"));

        ResponsePayload payload2 = new ResponsePayload();
        payload2.setStatus(true);
        payload2.setRefId("12345");
        payload2.setTransferTo("AccountA");
        payload2.setTransferToFr("AccountB");
        payload2.setMinNumOfDays(5);
        payload2.setMaxNumOfDays(10);
        payload2.setAllowBalanceTransfer(true);
        payload2.setAllowTransferToChequing(false);
        payload2.setTotalAmt(new BigDecimal("1500.75"));
        payload2.setTransferFee(new BigDecimal("15.00"));

        ResponsePayload payload3 = new ResponsePayload();
        payload3.setStatus(false);
        payload3.setRefId("54321");
        payload3.setTransferTo("AccountX");
        payload3.setTransferToFr("AccountY");
        payload3.setMinNumOfDays(3);
        payload3.setMaxNumOfDays(7);
        payload3.setAllowBalanceTransfer(false);
        payload3.setAllowTransferToChequing(true);
        payload3.setTotalAmt(new BigDecimal("1000.50"));
        payload3.setTransferFee(new BigDecimal("10.00"));

        assertTrue(payload1.equals(payload2));
        assertFalse(payload1.equals(payload3));
        assertFalse(payload1.equals(null));
        assertFalse(payload1.equals("Some String"));
    }
}
