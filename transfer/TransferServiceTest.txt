package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.transfer.payload.addbalancetransfertocreditorpayee.AddBalanceTransferToCreditorPayeeRequest;
import com.td.mbna.msec.midtier.transfer.payload.addbalancetransfertocreditorpayee.AddBalanceTransferToCreditorPayeeResponse;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorRequest;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorResponse;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorpayees.GetBalanceTransferToCreditorPayeesRequest;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorpayees.GetBalanceTransferToCreditorPayeesResponse;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorsummary.GetBalanceTransferToCreditorSummaryRequest;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorsummary.GetBalanceTransferToCreditorSummaryResponse;
import com.td.mbna.msec.midtier.transfer.payload.getknowncardissuers.GetKnownCardIssuersRequest;
import com.td.mbna.msec.midtier.transfer.payload.getknowncardissuers.GetKnownCardIssuersResponse;
import com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeRequest;
import com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeResponse;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.DepositToChequingRequest;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.DepositToChequingResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class TransferServiceImplTest {

    @InjectMocks
    private TransferServiceImpl transferService;

    @Mock
    private AddBalanceTransferToCreditorPayeeOperation addBalanceTransferToCreditorPayeeOperation;
    @Mock
    private AddDepositToChequingPayeeOperation addDepositToChequingPayeeOperation;
    @Mock
    private DeleteBalanceTransferToCreditorPayeeOperation deleteBalanceTransferToCreditorPayeeOperation;
    @Mock
    private DeleteDepositToChequingPayeeOperation deleteDepositToChequingPayeeOperation;
    @Mock
    private DepositToChequingOperation depositToChequingOperation;
    @Mock
    private UpdateDepositToChequingPayeeOperation updateDepositToChequingPayeeOperation;
    @Mock
    private UpdateBalanceTransferToCreditorPayeeOperation updateBalanceTransferToCreditorPayeeOperation;
    @Mock
    private BalanceTransferToCreditorOperation balanceTransferToCreditorOperation;
    @Mock
    private GetBalanceTransferToCreditorPayeesOperation getBalanceTransferToCreditorPayeesOperation;
    @Mock
    private GetBalanceTransferToCreditorSummaryOperation getBalanceTransferToCreditorSummaryOperation;
    @Mock
    private GetDepositToChequingPayeesOperation getDepositToChequingPayeesOperation;
    @Mock
    private GetKnownCardIssuersOperation getKnownCardIssuersOperation;

    @Mock
    private AddBalanceTransferToCreditorPayeeRequest addBalanceTransferToCreditorPayeeRequest;
    @Mock
    private BalanceTransferToCreditorRequest balanceTransferToCreditorRequest;
    @Mock
    private GetBalanceTransferToCreditorPayeesRequest getBalanceTransferToCreditorPayeesRequest;
    @Mock
    private GetBalanceTransferToCreditorSummaryRequest getBalanceTransferToCreditorSummaryRequest;
    @Mock
    private GetKnownCardIssuersRequest getKnownCardIssuersRequest;
    @Mock
    private DepositToChequingRequest depositToChequingRequest;
    @Mock
    private UpdateBalanceTransferToCreditorPayeeRequest updateBalanceTransferToCreditorPayeeRequest;
    @Mock
    private UpdateDepositToChequingPayeeRequest updateDepositToChequingPayeeRequest;

    @Mock
    private AddBalanceTransferToCreditorPayeeResponse addBalanceTransferToCreditorPayeeResponse;
    @Mock
    private BalanceTransferToCreditorResponse balanceTransferToCreditorResponse;
    @Mock
    private GetBalanceTransferToCreditorPayeesResponse getBalanceTransferToCreditorPayeesResponse;
    @Mock
    private GetBalanceTransferToCreditorSummaryResponse getBalanceTransferToCreditorSummaryResponse;
    @Mock
    private GetKnownCardIssuersResponse getKnownCardIssuersResponse;
    @Mock
    private DepositToChequingResponse depositToChequingResponse;
    @Mock
    private UpdateBalanceTransferToCreditorPayeeResponse updateBalanceTransferToCreditorPayeeResponse;
    @Mock
    private UpdateDepositToChequingPayeeResponse updateDepositToChequingPayeeResponse;
    @Mock
    private DeleteBalanceTransferToCreditorPayeeResponse deleteBalanceTransferToCreditorPayeeResponse;
    @Mock
    private DeleteDepositToChequingPayeeResponse deleteDepositToChequingPayeeResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testBalanceTransferToCreditor() {
        when(balanceTransferToCreditorOperation.invokeService(balanceTransferToCreditorRequest, "token"))
                .thenReturn(balanceTransferToCreditorResponse);

        BalanceTransferToCreditorResponse response = transferService.balanceTransferToCreditor(balanceTransferToCreditorRequest, "token");

        assertNotNull(response);
        verify(balanceTransferToCreditorOperation, times(1)).invokeService(balanceTransferToCreditorRequest, "token");
    }

    @Test
    void testGetBalanceTransferToCreditorPayees() {
        when(getBalanceTransferToCreditorPayeesOperation.invokeService(getBalanceTransferToCreditorPayeesRequest))
                .thenReturn(getBalanceTransferToCreditorPayeesResponse);

        GetBalanceTransferToCreditorPayeesResponse response = transferService.getBalanceTransferToCreditorPayees(getBalanceTransferToCreditorPayeesRequest);

        assertNotNull(response);
        verify(getBalanceTransferToCreditorPayeesOperation, times(1)).invokeService(getBalanceTransferToCreditorPayeesRequest);
    }

    @Test
    void testGetBalanceTransferToCreditorSummary() {
        when(getBalanceTransferToCreditorSummaryOperation.invokeService(getBalanceTransferToCreditorSummaryRequest))
                .thenReturn(getBalanceTransferToCreditorSummaryResponse);

        GetBalanceTransferToCreditorSummaryResponse response = transferService.getBalanceTransferToCreditorSummary(getBalanceTransferToCreditorSummaryRequest);

        assertNotNull(response);
        verify(getBalanceTransferToCreditorSummaryOperation, times(1)).invokeService(getBalanceTransferToCreditorSummaryRequest);
    }

    @Test
    void testAddBalanceTransferToCreditorPayee() {
        when(addBalanceTransferToCreditorPayeeOperation.invokeService(addBalanceTransferToCreditorPayeeRequest))
                .thenReturn(addBalanceTransferToCreditorPayeeResponse);

        AddBalanceTransferToCreditorPayeeResponse response = transferService.addBalanceTransferToCreditorPayee(addBalanceTransferToCreditorPayeeRequest);

        assertNotNull(response);
        verify(addBalanceTransferToCreditorPayeeOperation, times(1)).invokeService(addBalanceTransferToCreditorPayeeRequest);
    }

    @Test
    void testDeleteBalanceTransferToCreditorPayee() {
        when(deleteBalanceTransferToCreditorPayeeOperation.invokeService(any()))
                .thenReturn(deleteBalanceTransferToCreditorPayeeResponse);

        DeleteBalanceTransferToCreditorPayeeResponse response = transferService.deleteBalanceTransferToCreditorPayee(any());

        assertNotNull(response);
        verify(deleteBalanceTransferToCreditorPayeeOperation, times(1)).invokeService(any());
    }

    @Test
    void testUpdateBalanceTransferToCreditorPayee() {
        when(updateBalanceTransferToCreditorPayeeOperation.invokeService(updateBalanceTransferToCreditorPayeeRequest))
                .thenReturn(updateBalanceTransferToCreditorPayeeResponse);

        UpdateBalanceTransferToCreditorPayeeResponse response = transferService.updateBalanceTransferToCreditorPayee(updateBalanceTransferToCreditorPayeeRequest);

        assertNotNull(response);
        verify(updateBalanceTransferToCreditorPayeeOperation, times(1)).invokeService(updateBalanceTransferToCreditorPayeeRequest);
    }

    @Test
    void testDepositToChequing() {
        when(depositToChequingOperation.invokeService(depositToChequingRequest, "token"))
                .thenReturn(depositToChequingResponse);

        DepositToChequingResponse response = transferService.depositToChequing(depositToChequingRequest, "token");

        assertNotNull(response);
        verify(depositToChequingOperation, times(1)).invokeService(depositToChequingRequest, "token");
    }

    @Test
    void testGetDepositToChequingPayees() {
        when(getDepositToChequingPayeesOperation.invokeService(any()))
                .thenReturn(getDepositToChequingPayeesResponse);

        GetDepositToChequingPayeesResponse response = transferService.getDepositToChequingPayees(any());

        assertNotNull(response);
        verify(getDepositToChequingPayeesOperation, times(1)).invokeService(any());
    }

    @Test
    void testAddDepositToChequingPayee() {
        when(addDepositToChequingPayeeOperation.invokeService(any()))
                .thenReturn(any());

        AddDepositToChequingPayeeResponse response = transferService.addDepositToChequingPayee(any());

        assertNotNull(response);
        verify(addDepositToChequingPayeeOperation, times(1)).invokeService(any());
    }

    @Test
    void testDeleteDepositToChequingPayee() {
        when(deleteDepositToChequingPayeeOperation.invokeService(any()))
                .thenReturn(deleteDepositToChequingPayeeResponse);

        DeleteDepositToChequingPayeeResponse response = transferService.deleteDepositToChequingPayee(any());

        assertNotNull(response);
        verify(deleteDepositToChequingPayeeOperation, times(1)).invokeService(any());
    }

    @Test
    void testUpdateDepositToChequingPayee() {
        when(updateDepositToChequingPayeeOperation.invokeService(any(), eq("token")))
                .thenReturn(updateDepositToChequingPayeeResponse);

        UpdateDepositToChequingPayeeResponse response = transferService.updateDepositToChequingPayee(any(), "token");

        assertNotNull(response);
        verify(updateDepositToChequingPayeeOperation, times(1)).invokeService(any(), eq("token"));
    }

    @Test
    void testGetKnownCardIssuers() {
        when(getKnownCardIssuersOperation.invokeService(any()))
                .thenReturn(getKnownCardIssuersResponse);

        GetKnownCardIssuersResponse response = transferService.getKnownCardIssuers(any());

        assertNotNull(response);
        verify(getKnownCardIssuersOperation, times(1)).invokeService(any());
    }
}
