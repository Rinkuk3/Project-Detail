package com.td.mbna.msec.midtier.transfer.util;

import com.td.mbna.msec.midtier.persistance.entity.TtcDestinations;
import com.td.mbna.msec.midtier.persistance.mybatis.DBMybatisService;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.RequestPayload;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.math.BigDecimal;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class DepositToChequingValidatorTest {

    @InjectMocks
    private DepositToChequingValidator depositToChequingValidator;

    @Mock
    private RequestPayload requestPayload;

    @Mock
    private TtcDestinations ttcDestinations;

    @Mock
    private DBMybatisService dbMybatisService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testValidateTotal_ValidTransfer() throws Exception {
        // Arrange
        BigDecimal transferTotal = new BigDecimal("500");
        BigDecimal creditAvail = new BigDecimal("1000");
        
        when(requestPayload.getCreditAvail()).thenReturn(creditAvail);
        when(TotalUtil.getDepositToChequingTotal(requestPayload)).thenReturn(transferTotal);
        
        DepositToChequingValidator.ValidateTotal validateTotal = new DepositToChequingValidator.ValidateTotal(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return requestPayload;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) validateTotal.doGetResult(null);

        // Assert
        assertTrue(result);
    }

    @Test
    void testValidateTotal_ExceedsTransfer() throws Exception {
        // Arrange
        BigDecimal transferTotal = new BigDecimal("1500");
        BigDecimal creditAvail = new BigDecimal("1000");

        when(requestPayload.getCreditAvail()).thenReturn(creditAvail);
        when(TotalUtil.getDepositToChequingTotal(requestPayload)).thenReturn(transferTotal);

        DepositToChequingValidator.ValidateTotal validateTotal = new DepositToChequingValidator.ValidateTotal(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return requestPayload;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) validateTotal.doGetResult(null);

        // Assert
        assertFalse(result);
    }

    @Test
    void testIsNewPayeeNickname_NewNickname() throws Exception {
        // Arrange
        String nickname = "newNick";
        String custId = "cust123";

        when(requestPayload.getNickname()).thenReturn(nickname);
        when(requestPayload.getCustId()).thenReturn(custId);
        when(dbMybatisService.findTtcDestinationsByNickname(custId, nickname)).thenReturn(Collections.emptyList());

        DepositToChequingValidator.IsNewPayeeNickname isNewPayeeNickname = new DepositToChequingValidator.IsNewPayeeNickname(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return nickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return custId;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) isNewPayeeNickname.doGetResult(null);

        // Assert
        assertTrue(result);
    }

    @Test
    void testIsNewPayeeNickname_ExistingNickname() throws Exception {
        // Arrange
        String nickname = "existingNick";
        String custId = "cust123";

        TtcDestinations ttcDestinations = new TtcDestinations();
        when(requestPayload.getNickname()).thenReturn(nickname);
        when(requestPayload.getCustId()).thenReturn(custId);
        when(dbMybatisService.findTtcDestinationsByNickname(custId, nickname)).thenReturn(Collections.singletonList(ttcDestinations));

        DepositToChequingValidator.IsNewPayeeNickname isNewPayeeNickname = new DepositToChequingValidator.IsNewPayeeNickname(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return nickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return custId;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) isNewPayeeNickname.doGetResult(null);

        // Assert
        assertFalse(result);
    }

    @Test
    void testIsNewOrSamePayeeNickname_NewNickname() throws Exception {
        // Arrange
        String nickname = "newNick";
        String curNickname = "oldNick";
        String custId = "cust123";

        when(requestPayload.getNickname()).thenReturn(nickname);
        when(requestPayload.getCurNickname()).thenReturn(curNickname);
        when(requestPayload.getCustId()).thenReturn(custId);
        when(dbMybatisService.findTtcDestinationsByNickname(custId, nickname)).thenReturn(Collections.emptyList());

        DepositToChequingValidator.IsNewOrSamePayeeNickname isNewOrSamePayeeNickname = new DepositToChequingValidator.IsNewOrSamePayeeNickname(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return nickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return curNickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return custId;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) isNewOrSamePayeeNickname.doGetResult(null);

        // Assert
        assertTrue(result);
    }

    @Test
    void testIsNewOrSamePayeeNickname_SameNickname() throws Exception {
        // Arrange
        String nickname = "sameNick";
        String curNickname = "sameNick";
        String custId = "cust123";

        when(requestPayload.getNickname()).thenReturn(nickname);
        when(requestPayload.getCurNickname()).thenReturn(curNickname);
        when(requestPayload.getCustId()).thenReturn(custId);

        DepositToChequingValidator.IsNewOrSamePayeeNickname isNewOrSamePayeeNickname = new DepositToChequingValidator.IsNewOrSamePayeeNickname(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return nickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return curNickname;
                }
            },
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return custId;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) isNewOrSamePayeeNickname.doGetResult(null);

        // Assert
        assertTrue(result);
    }

    @Test
    void testExceedsMaxTransferAmount_ExceedsLimit() throws Exception {
        // Arrange
        BigDecimal transferAmount = new BigDecimal("5000");

        DepositToChequingValidator.ExceedsMaxTransferAmount exceedsMaxTransferAmount = new DepositToChequingValidator.ExceedsMaxTransferAmount(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return transferAmount;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) exceedsMaxTransferAmount.doGetResult(null);

        // Assert
        assertTrue(result);
    }

    @Test
    void testExceedsMaxTransferAmount_WithInLimit() throws Exception {
        // Arrange
        BigDecimal transferAmount = new BigDecimal("2000");

        DepositToChequingValidator.ExceedsMaxTransferAmount exceedsMaxTransferAmount = new DepositToChequingValidator.ExceedsMaxTransferAmount(new Function[] {
            new Function() {
                @Override
                public Object getResult(Object target) throws Exception {
                    return transferAmount;
                }
            }
        }, 1, 1);

        // Act
        boolean result = (Boolean) exceedsMaxTransferAmount.doGetResult(null);

        // Assert
        assertFalse(result);
    }
}
