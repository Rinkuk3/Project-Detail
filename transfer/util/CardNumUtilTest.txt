package com.td.mbna.msec.midtier.transfer.util;

import com.td.mbna.msec.midtier.transfer.payload.BalanceTransferToCreditorPayeeType;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CardNumUtilTest {

    @InjectMocks
    private CardNumUtil cardNumUtil;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private BalanceTransferToCreditorPayeeType payee;

    @Mock
    private HttpHeaders headers;

    @Mock
    private ResponseEntity<String> responseEntity;

    @Mock
    private TDRestServiceUtil tdRestServiceUtil;

    @Mock
    private MbnaLogger logger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        cardNumUtil = new CardNumUtil();
    }

    @Test
    void testIsValidMerchantCardNum_Success() {
        // Arrange
        String cardNum = "1234567890123456";
        String merchantId = "merchant123";
        String token = "someToken";

        when(payee.getCardNum()).thenReturn(cardNum);
        when(payee.getMerchantId()).thenReturn(merchantId);
        when(payee.getToken()).thenReturn(token);

        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + token);

        String url = "http://example.com?issuingMerchantPartyAccountNum=" + cardNum + "&merchantPartyIdentificationNum=" + merchantId;

        // Mock the RestTemplate behavior
        when(restTemplate.exchange(eq(url), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(new ResponseEntity<>(HttpStatus.NO_CONTENT));

        // Act
        boolean result = cardNumUtil.isValidMerchantCardNum(payee);

        // Assert
        assertTrue(result);
    }

    @Test
    void testIsValidMerchantCardNum_Failure() {
        // Arrange
        String cardNum = "1234567890123456";
        String merchantId = "merchant123";
        String token = "someToken";

        when(payee.getCardNum()).thenReturn(cardNum);
        when(payee.getMerchantId()).thenReturn(merchantId);
        when(payee.getToken()).thenReturn(token);

        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + token);

        String url = "http://example.com?issuingMerchantPartyAccountNum=" + cardNum + "&merchantPartyIdentificationNum=" + merchantId;

        // Mock the RestTemplate behavior to simulate a 400 error (client error)
        when(restTemplate.exchange(eq(url), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST));

        // Act
        boolean result = cardNumUtil.isValidMerchantCardNum(payee);

        // Assert
        assertFalse(result);
    }

    @Test
    void testIsValidMerchantCardNum_Exception() {
        // Arrange
        String cardNum = "1234567890123456";
        String merchantId = "merchant123";
        String token = "someToken";

        when(payee.getCardNum()).thenReturn(cardNum);
        when(payee.getMerchantId()).thenReturn(merchantId);
        when(payee.getToken()).thenReturn(token);

        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + token);

        String url = "http://example.com?issuingMerchantPartyAccountNum=" + cardNum + "&merchantPartyIdentificationNum=" + merchantId;

        // Mock the RestTemplate behavior to simulate an unexpected exception
        when(restTemplate.exchange(eq(url), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenThrow(new RuntimeException("Unexpected error"));

        // Act and Assert
        assertThrows(RuntimeException.class, () -> cardNumUtil.isValidMerchantCardNum(payee));
    }

    @Test
    void testGenerateHeader() {
        // Arrange
        String cardNum = "1234567890123456";
        String merchantId = "merchant123";
        String token = "someToken";

        when(payee.getCardNum()).thenReturn(cardNum);
        when(payee.getMerchantId()).thenReturn(merchantId);
        when(payee.getToken()).thenReturn(token);

        HttpHeaders expectedHeaders = new HttpHeaders();
        expectedHeaders.add("Content_type", "application/json");
        expectedHeaders.add("originating-channel-instance-id", "WEB");
        expectedHeaders.add("x-environment-testset", "testset");
        expectedHeaders.add("Accept-Language", "En");
        expectedHeaders.add("traceabilityid", Long.toString(123456789L)); // Example traceability id
        expectedHeaders.add("x-environment-testsystem", "testsystem");
        expectedHeaders.add(MSECConstants.AUTHORIZATION, "Bearer " + token);

        // Act
        HttpHeaders result = CardNumUtil.generateHeader(payee);

        // Assert
        assertEquals(expectedHeaders, result);
    }
}
