package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.persistance.entity.Creditors;
import com.td.mbna.msec.midtier.transfer.payload.getknowncardissuers.GetKnownCardIssuersRequest;
import com.td.mbna.msec.midtier.transfer.payload.getknowncardissuers.GetKnownCardIssuersResponse;
import com.td.mbna.msec.midtier.transfer.payload.getknowncardissuers.ResponsePayload;
import com.td.mbna.msec.midtier.persistance.mybatis.DBMybatisService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GetKnownCardIssuersOperationTest {

    @InjectMocks
    private GetKnownCardIssuersOperation operation;

    @Mock
    private GetKnownCardIssuersRequest request;

    @Mock
    private ResponsePayload responsePayload;

    @Mock
    private DBMybatisService dbMybatisService;

    @Mock
    private Creditors creditor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success_English() {
        // Arrange
        String languagePref = "en_CA";
        when(request.getLanguagePref()).thenReturn(languagePref);

        List<Creditors> creditors = new ArrayList<>();
        creditors.add(creditor);
        when(dbMybatisService.getAllCreditors()).thenReturn(creditors);
        when(creditor.getName_EN()).thenReturn("Issuer Name");
        when(creditor.getName_FR()).thenReturn("Nom de l'émetteur");
        when(creditor.getMerchantId()).thenReturn("123456");

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertNotNull(issuers);
        assertEquals(1, issuers.size());
        assertEquals("Issuer Name,123456", issuers.get(0));
    }

    @Test
    void testInvokeService_Success_French() {
        // Arrange
        String languagePref = "fr_CA";
        when(request.getLanguagePref()).thenReturn(languagePref);

        List<Creditors> creditors = new ArrayList<>();
        creditors.add(creditor);
        when(dbMybatisService.getAllCreditors()).thenReturn(creditors);
        when(creditor.getName_EN()).thenReturn("Issuer Name");
        when(creditor.getName_FR()).thenReturn("Nom de l'émetteur");
        when(creditor.getMerchantId()).thenReturn("123456");

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertNotNull(issuers);
        assertEquals(1, issuers.size());
        assertEquals("Nom de l'émetteur,123456", issuers.get(0));
    }

    @Test
    void testInvokeService_NoCreditors() {
        // Arrange
        String languagePref = "en_CA";
        when(request.getLanguagePref()).thenReturn(languagePref);
        when(dbMybatisService.getAllCreditors()).thenReturn(null);

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertTrue(issuers.isEmpty());
    }

    @Test
    void testInvokeService_ExceptionHandling() {
        // Arrange
        String languagePref = "en_CA";
        when(request.getLanguagePref()).thenReturn(languagePref);

        List<Creditors> creditors = new ArrayList<>();
        creditors.add(creditor);
        when(dbMybatisService.getAllCreditors()).thenThrow(new RuntimeException("Database Error"));

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertTrue(issuers.isEmpty());
    }

    @Test
    void testInvokeService_EmptyCreditorsList() {
        // Arrange
        String languagePref = "en_CA";
        when(request.getLanguagePref()).thenReturn(languagePref);

        List<Creditors> creditors = new ArrayList<>();
        when(dbMybatisService.getAllCreditors()).thenReturn(creditors);

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertTrue(issuers.isEmpty());
    }

    @Test
    void testInvokeService_NullLanguagePreference() {
        // Arrange
        when(request.getLanguagePref()).thenReturn(null);

        // Act
        GetKnownCardIssuersResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<String> issuers = response.getResponsePayload().getCardIssuer();
        assertTrue(issuers.isEmpty());
    }
}
