package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.persistance.entity.TtcDestinations;
import com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType;
import com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.GetDepositToChequingPayeesRequest;
import com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.GetDepositToChequingPayeesResponse;
import com.td.mbna.msec.midtier.transfer.payload.getdeposittochequingpayees.ResponsePayload;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GetDepositToChequingPayeesOperationTest {

    @InjectMocks
    private GetDepositToChequingPayeesOperation operation;

    @Mock
    private GetDepositToChequingPayeesRequest request;

    @Mock
    private ResponsePayload responsePayload;

    @Mock
    private TtcDestinations payeeDto;

    @Mock
    private DBMybatisService dbMybatisService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        String customerId = "12345";
        when(request.getCustId()).thenReturn(customerId);
        
        Collection<TtcDestinations> payeeDtos = new ArrayList<>();
        payeeDtos.add(payeeDto);
        when(dbMybatisService.findTtcDestinationsByCustomer(customerId)).thenReturn(payeeDtos);

        when(payeeDto.getTtcDestinationId()).thenReturn(1);
        when(payeeDto.getNickname()).thenReturn("Payee Nickname");
        when(payeeDto.getBankId()).thenReturn("123");
        when(payeeDto.getTransitNum()).thenReturn("45678");
        when(payeeDto.getAccountNumber()).thenReturn("111222333");

        // Act
        GetDepositToChequingPayeesResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<DepositToChequingPayeeType> payees = response.getResponsePayload().getPayee();
        assertNotNull(payees);
        assertEquals(1, payees.size());

        DepositToChequingPayeeType payee = payees.get(0);
        assertEquals("1", payee.getId());
        assertEquals("Payee Nickname", payee.getNickName());
        assertEquals("123", payee.getBankId());
        assertEquals("45678", payee.getTransitNum());
        assertEquals("111222333", payee.getAcctNum());
    }

    @Test
    void testInvokeService_NoPayees() {
        // Arrange
        String customerId = "12345";
        when(request.getCustId()).thenReturn(customerId);
        
        Collection<TtcDestinations> payeeDtos = new ArrayList<>();
        when(dbMybatisService.findTtcDestinationsByCustomer(customerId)).thenReturn(payeeDtos);

        // Act
        GetDepositToChequingPayeesResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<DepositToChequingPayeeType> payees = response.getResponsePayload().getPayee();
        assertTrue(payees.isEmpty());
    }

    @Test
    void testInvokeService_PayeesNull() {
        // Arrange
        String customerId = "12345";
        when(request.getCustId()).thenReturn(customerId);
        
        when(dbMybatisService.findTtcDestinationsByCustomer(customerId)).thenReturn(null);

        // Act
        GetDepositToChequingPayeesResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<DepositToChequingPayeeType> payees = response.getResponsePayload().getPayee();
        assertTrue(payees.isEmpty());
    }

    @Test
    void testInvokeService_EmptyCustomerId() {
        // Arrange
        when(request.getCustId()).thenReturn("");

        // Act
        GetDepositToChequingPayeesResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<DepositToChequingPayeeType> payees = response.getResponsePayload().getPayee();
        assertTrue(payees.isEmpty());
    }

    @Test
    void testInvokeService_InvalidBankDetails() {
        // Arrange
        String customerId = "12345";
        when(request.getCustId()).thenReturn(customerId);
        
        Collection<TtcDestinations> payeeDtos = new ArrayList<>();
        payeeDtos.add(payeeDto);
        when(dbMybatisService.findTtcDestinationsByCustomer(customerId)).thenReturn(payeeDtos);

        when(payeeDto.getTtcDestinationId()).thenReturn(1);
        when(payeeDto.getNickname()).thenReturn("Payee Nickname");
        when(payeeDto.getBankId()).thenReturn("ABC");  // Invalid bank ID
        when(payeeDto.getTransitNum()).thenReturn("45678");
        when(payeeDto.getAccountNumber()).thenReturn("111222333");

        // Act
        GetDepositToChequingPayeesResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        List<DepositToChequingPayeeType> payees = response.getResponsePayload().getPayee();
        assertNotNull(payees);
        assertEquals(1, payees.size());

        DepositToChequingPayeeType payee = payees.get(0);
        assertEquals("1", payee.getId());
        assertEquals("Payee Nickname", payee.getNickName());
        assertEquals("ABC", payee.getBankId()); // Invalid Bank ID is retained
        assertEquals("45678", payee.getTransitNum());
        assertEquals("111222333", payee.getAcctNum());
    }
}
