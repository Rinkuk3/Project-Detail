package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.transfer.payload.BalanceTransferToCreditorPaymentInfoType;
import com.td.mbna.msec.midtier.transfer.payload.BalanceTransferToCreditorSummaryType;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorsummary.GetBalanceTransferToCreditorSummaryRequest;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorsummary.GetBalanceTransferToCreditorSummaryResponse;
import com.td.mbna.msec.midtier.transfer.payload.getbalancetransfertocreditorsummary.ResponsePayload;
import com.td.mbna.msec.midtier.transfer.util.TotalUtil;
import com.td.mbna.msec.midtier.types.common.PromotionOfferType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class GetBalanceTransferToCreditorSummaryOperationTest {

    @InjectMocks
    private GetBalanceTransferToCreditorSummaryOperation operation;

    @Mock
    private TotalUtil totalUtil;

    @Mock
    private GetBalanceTransferToCreditorSummaryRequest request;

    @Mock
    private ResponsePayload responsePayload;

    @Mock
    private PromotionOfferType promotionOfferType;

    @Mock
    private BalanceTransferToCreditorPaymentInfoType paymentInfo;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        List<BalanceTransferToCreditorPaymentInfoType> paymentInfoList = new ArrayList<>();
        paymentInfoList.add(paymentInfo);
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(paymentInfoList);
        
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(new BigDecimal("5000.00"));
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        when(totalUtil.getTransferAmountTotal(paymentInfoList)).thenReturn(new BigDecimal("1000.00"));
        when(totalUtil.getTransferFeeTotal(promotionOfferType, paymentInfoList)).thenReturn(new BigDecimal("50.00"));
        when(totalUtil.getbalanceTransferToCreditorTotal(promotionOfferType, paymentInfoList)).thenReturn(new BigDecimal("1050.00"));
        
        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(new BigDecimal("1000.00"), summary.getTransferAmt());
        assertEquals(new BigDecimal("50.00"), summary.getTransferFee());
        assertEquals(new BigDecimal("3950.00"), summary.getCreditRemaining()); // 5000 - 1050
    }

    @Test
    void testInvokeService_NoPayments() {
        // Arrange
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(new ArrayList<>());
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(new BigDecimal("5000.00"));
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(BigDecimal.ZERO, summary.getTransferAmt());
        assertEquals(BigDecimal.ZERO, summary.getTransferFee());
        assertEquals(new BigDecimal("5000.00"), summary.getCreditRemaining()); // No transfer, so credit remains unchanged
    }

    @Test
    void testInvokeService_ZeroCurrentCreditRemaining() {
        // Arrange
        List<BalanceTransferToCreditorPaymentInfoType> paymentInfoList = new ArrayList<>();
        paymentInfoList.add(paymentInfo);
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(paymentInfoList);
        
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(BigDecimal.ZERO);
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        when(totalUtil.getTransferAmountTotal(paymentInfoList)).thenReturn(new BigDecimal("1000.00"));
        when(totalUtil.getTransferFeeTotal(promotionOfferType, paymentInfoList)).thenReturn(new BigDecimal("50.00"));
        when(totalUtil.getbalanceTransferToCreditorTotal(promotionOfferType, paymentInfoList)).thenReturn(new BigDecimal("1050.00"));
        
        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(new BigDecimal("1000.00"), summary.getTransferAmt());
        assertEquals(new BigDecimal("50.00"), summary.getTransferFee());
        assertEquals(new BigDecimal("-1050.00"), summary.getCreditRemaining()); // 0 - 1050
    }

    @Test
    void testInvokeService_NullPayments() {
        // Arrange
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(null);
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(new BigDecimal("5000.00"));
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(BigDecimal.ZERO, summary.getTransferAmt());
        assertEquals(BigDecimal.ZERO, summary.getTransferFee());
        assertEquals(new BigDecimal("5000.00"), summary.getCreditRemaining());
    }

    @Test
    void testInvokeService_NullCreditRemaining() {
        // Arrange
        List<BalanceTransferToCreditorPaymentInfoType> paymentInfoList = new ArrayList<>();
        paymentInfoList.add(paymentInfo);
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(paymentInfoList);
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(null);
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(new BigDecimal("1000.00"), summary.getTransferAmt());
        assertEquals(new BigDecimal("50.00"), summary.getTransferFee());
        assertNull(summary.getCreditRemaining()); // Since current credit remaining is null, it should remain null
    }

    @Test
    void testInvokeService_WithZeroTransferAmount() {
        // Arrange
        List<BalanceTransferToCreditorPaymentInfoType> paymentInfoList = new ArrayList<>();
        when(request.getRequestPayload().getPaymentInfo()).thenReturn(paymentInfoList);
        when(request.getRequestPayload().getCurrentCreditRemaining()).thenReturn(new BigDecimal("5000.00"));
        when(request.getRequestPayload().getSelectedOffer()).thenReturn(promotionOfferType);

        when(totalUtil.getTransferAmountTotal(paymentInfoList)).thenReturn(BigDecimal.ZERO);
        when(totalUtil.getTransferFeeTotal(promotionOfferType, paymentInfoList)).thenReturn(BigDecimal.ZERO);
        when(totalUtil.getbalanceTransferToCreditorTotal(promotionOfferType, paymentInfoList)).thenReturn(BigDecimal.ZERO);
        
        // Act
        GetBalanceTransferToCreditorSummaryResponse response = operation.invokeService(request);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        BalanceTransferToCreditorSummaryType summary = response.getResponsePayload().getSummary();
        assertNotNull(summary);
        assertEquals(BigDecimal.ZERO, summary.getTransferAmt());
        assertEquals(BigDecimal.ZERO, summary.getTransferFee());
        assertEquals(new BigDecimal("5000.00"), summary.getCreditRemaining()); // No transfer, so credit remains unchanged
    }
}
