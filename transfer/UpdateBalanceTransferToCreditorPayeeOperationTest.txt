package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.persistance.entity.BtDestinations;
import com.td.mbna.msec.midtier.persistance.entity.Creditors;
import com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeRequest;
import com.td.mbna.msec.midtier.transfer.payload.updatebalancetransfertocreditorpayee.UpdateBalanceTransferToCreditorPayeeResponse;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.service.MsecValidator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springmodules.validation.valang.ValangValidator;

import java.text.NumberFormat;
import java.util.Locale;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class UpdateBalanceTransferToCreditorPayeeOperationTest {

    @InjectMocks
    private UpdateBalanceTransferToCreditorPayeeOperation updateBalanceTransferToCreditorPayeeOperation;

    @Mock
    private ValangValidator updateBalanceTransferToCreditorPayeeRequestValidator;
    @Mock
    private MsecValidator msecValidator;
    @Mock
    private UpdateBalanceTransferToCreditorPayeeRequest updateBalanceTransferToCreditorPayeeRequest;
    @Mock
    private UpdateBalanceTransferToCreditorPayeeResponse updateBalanceTransferToCreditorPayeeResponse;
    @Mock
    private BtDestinations payeeDto;
    @Mock
    private Creditors creditor;
    @Mock
    private NumberFormat numberFormat;
    @Mock
    private ExceptionUtil exceptionUtil;
    @Mock
    private MbnaLogger logger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        updateBalanceTransferToCreditorPayeeOperation = new UpdateBalanceTransferToCreditorPayeeOperation();
    }

    @Test
    void testInvokeService_withValidRequest() throws Exception {
        // Prepare mocks
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload()).thenReturn(new BalanceTransferToCreditorPayeeType());
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload().getPayee()).thenReturn(new BalanceTransferToCreditorPayeeType());
        when(updateBalanceTransferToCreditorPayeeRequest.getCustId()).thenReturn("custId");
        when(numberFormat.parse(anyString())).thenReturn(123);

        when(DBMybatisService.getCreditorByMerchantId(anyString())).thenReturn(creditor);
        when(DBMybatisService.updateBtDestination(any(BtDestinations.class))).thenReturn(null);

        // Invoke the service
        UpdateBalanceTransferToCreditorPayeeResponse response = updateBalanceTransferToCreditorPayeeOperation.invokeService(updateBalanceTransferToCreditorPayeeRequest, "token");

        // Verify and assert
        assertNotNull(response);
        verify(DBMybatisService, times(1)).getCreditorByMerchantId(anyString());
        verify(DBMybatisService, times(1)).updateBtDestination(any(BtDestinations.class));
    }

    @Test
    void testInvokeService_withNullPayee() throws Exception {
        // Prepare mocks
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload()).thenReturn(new BalanceTransferToCreditorPayeeType());
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload().getPayee()).thenReturn(null);

        // Invoke the service
        UpdateBalanceTransferToCreditorPayeeResponse response = updateBalanceTransferToCreditorPayeeOperation.invokeService(updateBalanceTransferToCreditorPayeeRequest, "token");

        // Verify and assert
        assertNotNull(response);
        verify(DBMybatisService, never()).getCreditorByMerchantId(anyString());
        verify(DBMybatisService, never()).updateBtDestination(any(BtDestinations.class));
    }

    @Test
    void testInvokeService_withException() throws Exception {
        // Prepare mocks
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload()).thenReturn(new BalanceTransferToCreditorPayeeType());
        when(updateBalanceTransferToCreditorPayeeRequest.getRequestPayload().getPayee()).thenReturn(new BalanceTransferToCreditorPayeeType());
        when(updateBalanceTransferToCreditorPayeeRequest.getCustId()).thenReturn("custId");

        when(numberFormat.parse(anyString())).thenThrow(new Exception("Parsing error"));

        // Invoke the service and expect exception
        assertThrows(RuntimeException.class, () -> {
            updateBalanceTransferToCreditorPayeeOperation.invokeService(updateBalanceTransferToCreditorPayeeRequest, "token");
        });
    }

    @Test
    void testRequiresDisclosureConsent() {
        assertFalse(updateBalanceTransferToCreditorPayeeOperation.requiresDisclosureConsent());
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        assertNull(updateBalanceTransferToCreditorPayeeOperation.getConsentDisclosureFailedMsgCode());
    }

    @Test
    void testGenerateAutoComment() {
        assertFalse(updateBalanceTransferToCreditorPayeeOperation.generateAutoComment());
    }

    @Test
    void testCreateAutoComment() {
        assertNull(updateBalanceTransferToCreditorPayeeOperation.createAutoComment(null, null));
    }

    @Test
    void testGetEmailInfoBean() {
        assertNull(updateBalanceTransferToCreditorPayeeOperation.getEmailInfoBean(null, null));
    }

    @Test
    void testGetValidator() {
        when(updateBalanceTransferToCreditorPayeeRequestValidator.isValid(anyString())).thenReturn(true);
        MsecValidator validator = updateBalanceTransferToCreditorPayeeOperation.getValidator();
        assertNotNull(validator);
    }
}
