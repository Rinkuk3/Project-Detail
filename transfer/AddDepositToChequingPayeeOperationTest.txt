package com.td.mbna.msec.midtier.transfer;

import com.td.mbna.msec.midtier.persistance.entity.TtcDestinations;
import com.td.mbna.msec.midtier.persistance.mybatis.DBMybatisService;
import com.td.mbna.msec.midtier.service.EmailInfo;
import com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType;
import com.td.mbna.msec.midtier.transfer.payload.adddeposittochequingpayee.AddDepositToChequingPayeeRequest;
import com.td.mbna.msec.midtier.transfer.payload.adddeposittochequingpayee.AddDepositToChequingPayeeResponse;
import com.td.mbna.msec.midtier.transfer.payload.adddeposittochequingpayee.ResponsePayload;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AddDepositToChequingPayeeOperationTest {

    @InjectMocks
    private AddDepositToChequingPayeeOperation addDepositToChequingPayeeOperation;

    @Mock
    private DBMybatisService dbMybatisService;

    @Mock
    private AddDepositToChequingPayeeRequest addDepositToChequingPayeeRequest;

    @Mock
    private AddDepositToChequingPayeeResponse addDepositToChequingPayeeResponse;

    @Mock
    private DepositToChequingPayeeType depositToChequingPayeeType;

    @Mock
    private TtcDestinations ttcDestinations;

    @Mock
    private ResponsePayload responsePayload;

    @Mock
    private MbnaLogger mbnaLogger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_ConfirmedFalse() {
        // Arrange
        when(addDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new AddDepositToChequingPayeeRequest().getRequestPayload());
        when(addDepositToChequingPayeeRequest.getRequestPayload().getConfirmed()).thenReturn(false);

        // Act
        AddDepositToChequingPayeeResponse response = addDepositToChequingPayeeOperation.invokeService(addDepositToChequingPayeeRequest);

        // Assert
        assertNotNull(response);
        assertNull(response.getResponsePayload());
    }

    @Test
    void testInvokeService_NullPayee() {
        // Arrange
        when(addDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new AddDepositToChequingPayeeRequest().getRequestPayload());
        when(addDepositToChequingPayeeRequest.getRequestPayload().getConfirmed()).thenReturn(true);
        when(addDepositToChequingPayeeRequest.getRequestPayload().getPayee()).thenReturn(null);

        // Act
        AddDepositToChequingPayeeResponse response = addDepositToChequingPayeeOperation.invokeService(addDepositToChequingPayeeRequest);

        // Assert
        assertNotNull(response);
        assertNull(response.getResponsePayload());
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        when(addDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new AddDepositToChequingPayeeRequest().getRequestPayload());
        when(addDepositToChequingPayeeRequest.getRequestPayload().getConfirmed()).thenReturn(true);
        
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setNickName("Test Nickname");
        payee.setBankId("Bank123");
        payee.setTransitNum("123456");
        payee.setAcctNum("987654321");

        when(addDepositToChequingPayeeRequest.getRequestPayload().getPayee()).thenReturn(payee);
        when(addDepositToChequingPayeeRequest.getCustId()).thenReturn("cust123");

        TtcDestinations ttcDestinations = new TtcDestinations();
        ttcDestinations.setTtcDestinationId(1L);

        // Mock DBMybatisService call
        when(dbMybatisService.saveTtcDestination(any(TtcDestinations.class))).thenReturn(ttcDestinations);

        // Act
        AddDepositToChequingPayeeResponse response = addDepositToChequingPayeeOperation.invokeService(addDepositToChequingPayeeRequest);

        // Assert
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertEquals(1L, response.getResponsePayload().getPayeeId());
        verify(dbMybatisService).saveTtcDestination(any(TtcDestinations.class));
    }

    @Test
    void testInvokeService_ExceptionThrown() {
        // Arrange
        when(addDepositToChequingPayeeRequest.getRequestPayload()).thenReturn(new AddDepositToChequingPayeeRequest().getRequestPayload());
        when(addDepositToChequingPayeeRequest.getRequestPayload().getConfirmed()).thenReturn(true);
        
        DepositToChequingPayeeType payee = new DepositToChequingPayeeType();
        payee.setNickName("Test Nickname");
        payee.setBankId("Bank123");
        payee.setTransitNum("123456");
        payee.setAcctNum("987654321");

        when(addDepositToChequingPayeeRequest.getRequestPayload().getPayee()).thenReturn(payee);
        when(addDepositToChequingPayeeRequest.getCustId()).thenReturn("cust123");

        // Simulate exception in DBMybatisService
        when(dbMybatisService.saveTtcDestination(any(TtcDestinations.class))).thenThrow(new RuntimeException("Database error"));

        // Act and Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            addDepositToChequingPayeeOperation.invokeService(addDepositToChequingPayeeRequest);
        });
        assertTrue(exception.getMessage().contains("Database error"));
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act
        boolean result = addDepositToChequingPayeeOperation.requiresDisclosureConsent();

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = addDepositToChequingPayeeOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assertNull(result);
    }

    @Test
    void testGenerateAutoComment() {
        // Act
        boolean result = addDepositToChequingPayeeOperation.generateAutoComment();

        // Assert
        assertFalse(result);
    }

    @Test
    void testCreateAutoComment() {
        // Act
        List<String> result = addDepositToChequingPayeeOperation.createAutoComment(null, null);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetEmailInfoBean() {
        // Act
        EmailInfo result = addDepositToChequingPayeeOperation.getEmailInfoBean(null, null);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetValidator() {
        // Act
        MsecValidator result = addDepositToChequingPayeeOperation.getValidator();

        // Assert
        assertNotNull(result);
    }
}
