package com.td.api.dms.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AdditionalstatusTest {

    private Additionalstatus additionalstatus;

    @BeforeEach
    void setUp() {
        additionalstatus = new Additionalstatus();
    }

    @Test
    void testGetAndSetStatusCode() {
        additionalstatus.setStatusCode(100);
        assertEquals(100, additionalstatus.getStatusCode());
    }

    @Test
    void testGetAndSetStatusDesc() {
        additionalstatus.setStatusDesc("Test description");
        assertEquals("Test description", additionalstatus.getStatusDesc());
    }

    @Test
    void testToString() {
        additionalstatus.setStatusCode(100);
        additionalstatus.setStatusDesc("Test description");
        String expectedString = "com.td.api.dms.common.Additionalstatus@" + Integer.toHexString(System.identityHashCode(additionalstatus)) +
                "[statusCode=100,statusDesc=Test description,]";
        assertTrue(additionalstatus.toString().contains("statusCode=100"));
        assertTrue(additionalstatus.toString().contains("statusDesc=Test description"));
    }

    @Test
    void testHashCode() {
        Additionalstatus additionalstatus1 = new Additionalstatus();
        Additionalstatus additionalstatus2 = new Additionalstatus();
        assertEquals(additionalstatus1.hashCode(), additionalstatus2.hashCode());

        additionalstatus1.setStatusCode(100);
        additionalstatus2.setStatusCode(100);
        assertEquals(additionalstatus1.hashCode(), additionalstatus2.hashCode());

        additionalstatus1.setStatusDesc("Test");
        additionalstatus2.setStatusDesc("Test");
        assertEquals(additionalstatus1.hashCode(), additionalstatus2.hashCode());
    }

    @Test
    void testEquals() {
        Additionalstatus additionalstatus1 = new Additionalstatus();
        Additionalstatus additionalstatus2 = new Additionalstatus();
        assertTrue(additionalstatus1.equals(additionalstatus2));

        additionalstatus1.setStatusCode(100);
        assertFalse(additionalstatus1.equals(additionalstatus2));
        additionalstatus2.setStatusCode(100);
        assertTrue(additionalstatus1.equals(additionalstatus2));

        additionalstatus1.setStatusDesc("Test");
        additionalstatus2.setStatusDesc("Test");
        assertTrue(additionalstatus1.equals(additionalstatus2));
        
        additionalstatus2.setStatusDesc("Different");
        assertFalse(additionalstatus1.equals(additionalstatus2));
    }
}
