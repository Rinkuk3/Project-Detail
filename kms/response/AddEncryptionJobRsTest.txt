package com.td.api.kms.response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class AddEncryptionJobRsTest {

    private AddEncryptionJobRs addEncryptionJobRs;

    @BeforeEach
    void setUp() {
        addEncryptionJobRs = new AddEncryptionJobRs();
    }

    @Test
    void testSetAndGetCryptographyKey() {
        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        addEncryptionJobRs.setCryptographyKey(Arrays.asList(key));
        assertEquals(1, addEncryptionJobRs.getCryptographyKey().size());
        assertEquals(key, addEncryptionJobRs.getCryptographyKey().get(0));
    }

    @Test
    void testSetAndGetCipherData() {
        CipherData cipherData = new CipherData(); // Assuming CipherData has a default constructor
        addEncryptionJobRs.setCipherData(cipherData);
        assertEquals(cipherData, addEncryptionJobRs.getCipherData());
    }

    @Test
    void testSetAndGetHash() {
        Hash hash = new Hash(); // Assuming Hash has a default constructor
        addEncryptionJobRs.setHash(hash);
        assertEquals(hash, addEncryptionJobRs.getHash());
    }

    @Test
    void testToString() {
        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        CipherData cipherData = new CipherData(); // Assuming CipherData has a default constructor
        Hash hash = new Hash(); // Assuming Hash has a default constructor
        
        addEncryptionJobRs.setCryptographyKey(Arrays.asList(key));
        addEncryptionJobRs.setCipherData(cipherData);
        addEncryptionJobRs.setHash(hash);

        String expectedToString = "com.td.api.kms.response.AddEncryptionJobRs@" + Integer.toHexString(addEncryptionJobRs.hashCode()) +
                "[cryptographyKey=[" + key + "],cipherData=" + cipherData + ",hash=" + hash + "]";
        assertEquals(expectedToString, addEncryptionJobRs.toString());
    }

    @Test
    void testHashCode() {
        AddEncryptionJobRs addEncryptionJobRs1 = new AddEncryptionJobRs();
        AddEncryptionJobRs addEncryptionJobRs2 = new AddEncryptionJobRs();
        assertEquals(addEncryptionJobRs1.hashCode(), addEncryptionJobRs2.hashCode());

        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        CipherData cipherData = new CipherData(); // Assuming CipherData has a default constructor
        Hash hash = new Hash(); // Assuming Hash has a default constructor
        
        addEncryptionJobRs1.setCryptographyKey(Arrays.asList(key));
        addEncryptionJobRs1.setCipherData(cipherData);
        addEncryptionJobRs1.setHash(hash);

        addEncryptionJobRs2.setCryptographyKey(Arrays.asList(key));
        addEncryptionJobRs2.setCipherData(cipherData);
        addEncryptionJobRs2.setHash(hash);

        assertEquals(addEncryptionJobRs1.hashCode(), addEncryptionJobRs2.hashCode());
    }

    @Test
    void testEquals() {
        AddEncryptionJobRs addEncryptionJobRs1 = new AddEncryptionJobRs();
        AddEncryptionJobRs addEncryptionJobRs2 = new AddEncryptionJobRs();
        assertTrue(addEncryptionJobRs1.equals(addEncryptionJobRs2));

        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        CipherData cipherData = new CipherData(); // Assuming CipherData has a default constructor
        Hash hash = new Hash(); // Assuming Hash has a default constructor
        
        addEncryptionJobRs1.setCryptographyKey(Arrays.asList(key));
        addEncryptionJobRs1.setCipherData(cipherData);
        addEncryptionJobRs1.setHash(hash);

        addEncryptionJobRs2.setCryptographyKey(Arrays.asList(key));
        addEncryptionJobRs2.setCipherData(cipherData);
        addEncryptionJobRs2.setHash(hash);

        assertTrue(addEncryptionJobRs1.equals(addEncryptionJobRs2));

        addEncryptionJobRs2.setCipherData(new CipherData()); // Change one field
        assertFalse(addEncryptionJobRs1.equals(addEncryptionJobRs2));

        addEncryptionJobRs2.setHash(new Hash()); // Change another field
        assertFalse(addEncryptionJobRs1.equals(addEncryptionJobRs2));

        addEncryptionJobRs2.setCryptographyKey(Arrays.asList(new CryptographyKey())); // Change the list
        assertFalse(addEncryptionJobRs1.equals(addEncryptionJobRs2));
    }

    @Test
    void testEqualsWithNull() {
        AddEncryptionJobRs addEncryptionJobRs1 = new AddEncryptionJobRs();
        assertFalse(addEncryptionJobRs1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        AddEncryptionJobRs addEncryptionJobRs1 = new AddEncryptionJobRs();
        String str = "DifferentClass";
        assertFalse(addEncryptionJobRs1.equals(str));
    }
}
