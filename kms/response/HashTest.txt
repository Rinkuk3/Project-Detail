package com.td.api.kms.response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class HashTest {

    private Hash hash;

    @BeforeEach
    void setUp() {
        hash = new Hash();
    }

    @Test
    void testSetAndGetEncodingSchemeTypeCd() {
        hash.setEncodingSchemeTypeCd("UTF-8");
        assertEquals("UTF-8", hash.getEncodingSchemeTypeCd());
    }

    @Test
    void testSetAndGetHashVal() {
        hash.setHashVal("abcd1234");
        assertEquals("abcd1234", hash.getHashVal());
    }

    @Test
    void testSetAndGetLengthCnt() {
        hash.setLengthCnt(256);
        assertEquals(256, hash.getLengthCnt());
    }

    @Test
    void testToString() {
        hash.setEncodingSchemeTypeCd("UTF-8");
        hash.setHashVal("abcd1234");
        hash.setLengthCnt(256);

        String expectedToString = "com.td.api.kms.response.Hash@" + Integer.toHexString(hash.hashCode()) +
                "[encodingSchemeTypeCd=UTF-8,hashVal=abcd1234,lengthCnt=256]";
        assertEquals(expectedToString, hash.toString());
    }

    @Test
    void testHashCode() {
        Hash hash1 = new Hash();
        Hash hash2 = new Hash();
        assertEquals(hash1.hashCode(), hash2.hashCode());

        hash1.setEncodingSchemeTypeCd("UTF-8");
        hash1.setHashVal("abcd1234");
        hash1.setLengthCnt(256);

        hash2.setEncodingSchemeTypeCd("UTF-8");
        hash2.setHashVal("abcd1234");
        hash2.setLengthCnt(256);

        assertEquals(hash1.hashCode(), hash2.hashCode());
    }

    @Test
    void testEquals() {
        Hash hash1 = new Hash();
        Hash hash2 = new Hash();
        assertTrue(hash1.equals(hash2));

        hash1.setEncodingSchemeTypeCd("UTF-8");
        hash1.setHashVal("abcd1234");
        hash1.setLengthCnt(256);

        hash2.setEncodingSchemeTypeCd("UTF-8");
        hash2.setHashVal("abcd1234");
        hash2.setLengthCnt(256);

        assertTrue(hash1.equals(hash2));

        hash2.setLengthCnt(512); // Change one field
        assertFalse(hash1.equals(hash2));

        hash2.setHashVal("abcd5678"); // Change another field
        assertFalse(hash1.equals(hash2));

        hash2.setEncodingSchemeTypeCd("ASCII"); // Change another field
        assertFalse(hash1.equals(hash2));
    }

    @Test
    void testEqualsWithNull() {
        Hash hash1 = new Hash();
        assertFalse(hash1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        Hash hash1 = new Hash();
        String str = "DifferentClass";
        assertFalse(hash1.equals(str));
    }
}
