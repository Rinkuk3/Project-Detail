package com.td.api.kms.response;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class AddDecryptionJobRsTest {

    private AddDecryptionJobRs addDecryptionJobRs;

    @BeforeEach
    void setUp() {
        addDecryptionJobRs = new AddDecryptionJobRs();
    }

    @Test
    void testSetAndGetCryptographyKey() {
        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        addDecryptionJobRs.setCryptographyKey(Arrays.asList(key));
        assertEquals(1, addDecryptionJobRs.getCryptographyKey().size());
        assertEquals(key, addDecryptionJobRs.getCryptographyKey().get(0));
    }

    @Test
    void testSetAndGetData() {
        Data data = new Data(); // Assuming Data has a default constructor
        addDecryptionJobRs.setData(data);
        assertEquals(data, addDecryptionJobRs.getData());
    }

    @Test
    void testToString() {
        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        Data data = new Data(); // Assuming Data has a default constructor
        addDecryptionJobRs.setCryptographyKey(Arrays.asList(key));
        addDecryptionJobRs.setData(data);

        String expectedToString = "com.td.api.kms.response.AddDecryptionJobRs@" + Integer.toHexString(addDecryptionJobRs.hashCode()) +
                "[cryptographyKey=[" + key + "],data=" + data + "]";
        assertEquals(expectedToString, addDecryptionJobRs.toString());
    }

    @Test
    void testHashCode() {
        AddDecryptionJobRs addDecryptionJobRs1 = new AddDecryptionJobRs();
        AddDecryptionJobRs addDecryptionJobRs2 = new AddDecryptionJobRs();
        assertEquals(addDecryptionJobRs1.hashCode(), addDecryptionJobRs2.hashCode());

        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        Data data = new Data(); // Assuming Data has a default constructor
        addDecryptionJobRs1.setCryptographyKey(Arrays.asList(key));
        addDecryptionJobRs1.setData(data);

        addDecryptionJobRs2.setCryptographyKey(Arrays.asList(key));
        addDecryptionJobRs2.setData(data);

        assertEquals(addDecryptionJobRs1.hashCode(), addDecryptionJobRs2.hashCode());
    }

    @Test
    void testEquals() {
        AddDecryptionJobRs addDecryptionJobRs1 = new AddDecryptionJobRs();
        AddDecryptionJobRs addDecryptionJobRs2 = new AddDecryptionJobRs();
        assertTrue(addDecryptionJobRs1.equals(addDecryptionJobRs2));

        CryptographyKey key = new CryptographyKey(); // Assuming CryptographyKey has a default constructor
        Data data = new Data(); // Assuming Data has a default constructor
        addDecryptionJobRs1.setCryptographyKey(Arrays.asList(key));
        addDecryptionJobRs1.setData(data);

        addDecryptionJobRs2.setCryptographyKey(Arrays.asList(key));
        addDecryptionJobRs2.setData(data);

        assertTrue(addDecryptionJobRs1.equals(addDecryptionJobRs2));

        addDecryptionJobRs2.setData(new Data());
        assertFalse(addDecryptionJobRs1.equals(addDecryptionJobRs2));

        addDecryptionJobRs2.setCryptographyKey(Arrays.asList(new CryptographyKey()));
        assertFalse(addDecryptionJobRs1.equals(addDecryptionJobRs2));
    }

    @Test
    void testEqualsWithNull() {
        AddDecryptionJobRs addDecryptionJobRs1 = new AddDecryptionJobRs();
        assertFalse(addDecryptionJobRs1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        AddDecryptionJobRs addDecryptionJobRs1 = new AddDecryptionJobRs();
        String str = "DifferentClass";
        assertFalse(addDecryptionJobRs1.equals(str));
    }
}
