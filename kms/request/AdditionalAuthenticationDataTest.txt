package com.td.api.kms.request;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AdditionalAuthenticationDataTest {

    private AdditionalAuthenticationData additionalAuthenticationData;

    @BeforeEach
    void setUp() {
        additionalAuthenticationData = new AdditionalAuthenticationData();
    }

    @Test
    void testSetAndGetEncodingSchemeTypeCd() {
        String encodingSchemeTypeCd = "Scheme1";
        additionalAuthenticationData.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        assertEquals(encodingSchemeTypeCd, additionalAuthenticationData.getEncodingSchemeTypeCd());
    }

    @Test
    void testSetAndGetPlainTxt() {
        String plainTxt = "Some plain text";
        additionalAuthenticationData.setPlainTxt(plainTxt);
        assertEquals(plainTxt, additionalAuthenticationData.getPlainTxt());
    }

    @Test
    void testToString() {
        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "Some plain text";
        additionalAuthenticationData.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        additionalAuthenticationData.setPlainTxt(plainTxt);

        String expectedToString = "com.td.api.kms.request.AdditionalAuthenticationData@" + Integer.toHexString(additionalAuthenticationData.hashCode()) +
                "[encodingSchemeTypeCd=" + encodingSchemeTypeCd + ",plainTxt=" + plainTxt + "]";
        assertEquals(expectedToString, additionalAuthenticationData.toString());
    }

    @Test
    void testHashCode() {
        AdditionalAuthenticationData data1 = new AdditionalAuthenticationData();
        AdditionalAuthenticationData data2 = new AdditionalAuthenticationData();
        assertEquals(data1.hashCode(), data2.hashCode());

        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "Some plain text";
        data1.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data1.setPlainTxt(plainTxt);
        data2.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data2.setPlainTxt(plainTxt);

        assertEquals(data1.hashCode(), data2.hashCode());
    }

    @Test
    void testEquals() {
        AdditionalAuthenticationData data1 = new AdditionalAuthenticationData();
        AdditionalAuthenticationData data2 = new AdditionalAuthenticationData();
        assertTrue(data1.equals(data2));

        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "Some plain text";
        data1.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data1.setPlainTxt(plainTxt);
        data2.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data2.setPlainTxt(plainTxt);
        assertTrue(data1.equals(data2));

        data2.setPlainTxt("Different text");
        assertFalse(data1.equals(data2));

        data2.setPlainTxt(plainTxt);
        data2.setEncodingSchemeTypeCd("Scheme2");
        assertFalse(data1.equals(data2));
    }

    @Test
    void testEqualsWithNull() {
        AdditionalAuthenticationData data = new AdditionalAuthenticationData();
        assertFalse(data.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        AdditionalAuthenticationData data = new AdditionalAuthenticationData();
        String str = "DifferentClass";
        assertFalse(data.equals(str));
    }
}
