package com.td.api.kms.request;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class DataTest {

    private Data data;

    @BeforeEach
    void setUp() {
        data = new Data();
    }

    @Test
    void testSetAndGetEncodingSchemeTypeCd() {
        String encodingSchemeTypeCd = "Scheme1";
        data.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        assertEquals(encodingSchemeTypeCd, data.getEncodingSchemeTypeCd());
    }

    @Test
    void testSetAndGetPlainTxt() {
        String plainTxt = "PlainTextExample";
        data.setPlainTxt(plainTxt);
        assertEquals(plainTxt, data.getPlainTxt());
    }

    @Test
    void testSetAndGetLengthCnt() {
        Integer lengthCnt = 100;
        data.setLengthCnt(lengthCnt);
        assertEquals(lengthCnt, data.getLengthCnt());
    }

    @Test
    void testSetAndGetKmsExtension() {
        KmsExtension kmsExtension = new KmsExtension();
        data.setKmsExtension(kmsExtension);
        assertEquals(kmsExtension, data.getKmsExtension());
    }

    @Test
    void testToString() {
        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "PlainTextExample";
        Integer lengthCnt = 100;
        KmsExtension kmsExtension = new KmsExtension();

        data.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data.setPlainTxt(plainTxt);
        data.setLengthCnt(lengthCnt);
        data.setKmsExtension(kmsExtension);

        String expectedToString = "com.td.api.kms.request.Data@" + Integer.toHexString(data.hashCode()) +
                "[encodingSchemeTypeCd=" + encodingSchemeTypeCd + ",plainTxt=" + plainTxt + 
                ",lengthCnt=" + lengthCnt + ",kmsExtension=" + kmsExtension + "]";
        assertEquals(expectedToString, data.toString());
    }

    @Test
    void testHashCode() {
        Data data1 = new Data();
        Data data2 = new Data();
        assertEquals(data1.hashCode(), data2.hashCode());

        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "PlainTextExample";
        Integer lengthCnt = 100;
        KmsExtension kmsExtension = new KmsExtension();

        data1.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data1.setPlainTxt(plainTxt);
        data1.setLengthCnt(lengthCnt);
        data1.setKmsExtension(kmsExtension);

        data2.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data2.setPlainTxt(plainTxt);
        data2.setLengthCnt(lengthCnt);
        data2.setKmsExtension(kmsExtension);

        assertEquals(data1.hashCode(), data2.hashCode());
    }

    @Test
    void testEquals() {
        Data data1 = new Data();
        Data data2 = new Data();
        assertTrue(data1.equals(data2));

        String encodingSchemeTypeCd = "Scheme1";
        String plainTxt = "PlainTextExample";
        Integer lengthCnt = 100;
        KmsExtension kmsExtension = new KmsExtension();

        data1.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data1.setPlainTxt(plainTxt);
        data1.setLengthCnt(lengthCnt);
        data1.setKmsExtension(kmsExtension);

        data2.setEncodingSchemeTypeCd(encodingSchemeTypeCd);
        data2.setPlainTxt(plainTxt);
        data2.setLengthCnt(lengthCnt);
        data2.setKmsExtension(kmsExtension);

        assertTrue(data1.equals(data2));

        data2.setPlainTxt("DifferentPlainText");
        assertFalse(data1.equals(data2));

        data2.setPlainTxt(plainTxt);
        data2.setLengthCnt(200);
        assertFalse(data1.equals(data2));

        data2.setLengthCnt(lengthCnt);
        data2.setEncodingSchemeTypeCd("Scheme2");
        assertFalse(data1.equals(data2));
    }

    @Test
    void testEqualsWithNull() {
        Data data1 = new Data();
        assertFalse(data1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        Data data1 = new Data();
        String str = "DifferentClass";
        assertFalse(data1.equals(str));
    }
}
