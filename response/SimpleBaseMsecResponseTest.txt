package com.td.mbna.msec.midtier.auditlog.payload.response;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class SimpleBaseMsecResponseTest {

    @Test
    void testGetStatus() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        response.setStatus("Success");
        
        assertEquals("Success", response.getStatus());
    }

    @Test
    void testSetStatus() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        response.setStatus("Failure");
        
        assertEquals("Failure", response.getStatus());
    }

    @Test
    void testGetErrorMsgs() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        List<String> errorMsgs = new ArrayList<>();
        errorMsgs.add("Error1");
        errorMsgs.add("Error2");
        
        response.setErrorMsgs(errorMsgs);
        
        assertEquals(2, response.getErrorMsgs().size());
        assertTrue(response.getErrorMsgs().contains("Error1"));
        assertTrue(response.getErrorMsgs().contains("Error2"));
    }

    @Test
    void testSetErrorMsgs() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        List<String> errorMsgs = new ArrayList<>();
        errorMsgs.add("Error1");
        
        response.setErrorMsgs(errorMsgs);
        
        assertEquals(1, response.getErrorMsgs().size());
        assertTrue(response.getErrorMsgs().contains("Error1"));
    }

    @Test
    void testGetResponsePayload() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        ResponsePayload payload = new ResponsePayload();
        
        response.setResponsePayload(payload);
        
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    void testSetResponsePayload() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        ResponsePayload payload = new ResponsePayload();
        
        response.setResponsePayload(payload);
        
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    void testToString() {
        SimpleBaseMsecResponse response = new SimpleBaseMsecResponse();
        response.setStatus("Success");
        
        String expected = "com.td.mbna.msec.midtier.auditlog.payload.response.SimpleBaseMsecResponse@" +
                          Integer.toHexString(System.identityHashCode(response)) + "[status=Success,errorMsgs=<null>,responsePayload=<null>]";
        
        assertTrue(response.toString().contains("status=Success"));
    }

    @Test
    void testHashCode() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus("Success");
        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus("Success");
        
        assertEquals(response1.hashCode(), response2.hashCode());
    }

    @Test
    void testEquals() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus("Success");
        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus("Success");
        
        assertTrue(response1.equals(response2));
    }

    @Test
    void testEqualsDifferentStatus() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus("Success");
        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus("Failure");
        
        assertFalse(response1.equals(response2));
    }

    @Test
    void testEqualsNullStatus() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus(null);
        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus(null);
        
        assertTrue(response1.equals(response2));
    }

    @Test
    void testEqualsErrorMsgs() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus("Success");
        List<String> errorMsgs = new ArrayList<>();
        errorMsgs.add("Error1");
        response1.setErrorMsgs(errorMsgs);

        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus("Success");
        List<String> errorMsgs2 = new ArrayList<>();
        errorMsgs2.add("Error1");
        response2.setErrorMsgs(errorMsgs2);
        
        assertTrue(response1.equals(response2));
    }

    @Test
    void testEqualsDifferentErrorMsgs() {
        SimpleBaseMsecResponse response1 = new SimpleBaseMsecResponse();
        response1.setStatus("Success");
        List<String> errorMsgs = new ArrayList<>();
        errorMsgs.add("Error1");
        response1.setErrorMsgs(errorMsgs);

        SimpleBaseMsecResponse response2 = new SimpleBaseMsecResponse();
        response2.setStatus("Success");
        List<String> errorMsgs2 = new ArrayList<>();
        errorMsgs2.add("Error2");
        response2.setErrorMsgs(errorMsgs2);
        
        assertFalse(response1.equals(response2));
    }
}
