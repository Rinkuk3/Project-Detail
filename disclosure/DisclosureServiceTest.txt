package com.td.mbna.msec.midtier.disclosure;

import com.td.mbna.msec.midtier.disclosure.payload.consentdisclosure.ConsentDisclosureRequest;
import com.td.mbna.msec.midtier.disclosure.payload.consentdisclosure.ConsentDisclosureResponse;
import com.td.mbna.msec.midtier.disclosure.payload.getdisclosure.GetDisclosureRequest;
import com.td.mbna.msec.midtier.disclosure.payload.getdisclosure.GetDisclosureResponse;
import com.td.mbna.msec.midtier.util.perf.ProfileLog;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class DisclosureServiceTest {

    @InjectMocks
    private DisclosureServiceImpl disclosureService;

    @Mock
    private ConsentDisclosureOperation consentDisclosureOperation;

    @Mock
    private GetDisclosureOperation getDisclosureOperation;

    @Mock
    private GetDisclosureRequest getDisclosureRequest;

    @Mock
    private GetDisclosureResponse getDisclosureResponse;

    @Mock
    private ConsentDisclosureRequest consentDisclosureRequest;

    @Mock
    private ConsentDisclosureResponse consentDisclosureResponse;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetDisclosure() {
        when(getDisclosureOperation.invokeService(getDisclosureRequest)).thenReturn(getDisclosureResponse);

        GetDisclosureResponse response = disclosureService.getDisclosure(getDisclosureRequest);

        assertNotNull(response);
        assertEquals(getDisclosureResponse, response);
        verify(getDisclosureOperation, times(1)).invokeService(getDisclosureRequest);
    }

    @Test
    void testConsentDisclosure() {
        when(consentDisclosureOperation.invokeService(consentDisclosureRequest)).thenReturn(consentDisclosureResponse);

        ConsentDisclosureResponse response = disclosureService.consentDisclosure(consentDisclosureRequest);

        assertNotNull(response);
        assertEquals(consentDisclosureResponse, response);
        verify(consentDisclosureOperation, times(1)).invokeService(consentDisclosureRequest);
    }
}
