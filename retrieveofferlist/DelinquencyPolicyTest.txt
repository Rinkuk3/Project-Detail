import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

public class DelinquencyPolicyTest {

    private DelinquencyPolicy delinquencyPolicy;

    @BeforeEach
    public void setUp() {
        delinquencyPolicy = new DelinquencyPolicy();
    }

    @Test
    public void testSetAndGetPolicyTypeCd() {
        String policyTypeCd = "POLICY_01";
        delinquencyPolicy.setPolicyTypeCd(policyTypeCd);
        assertEquals(policyTypeCd, delinquencyPolicy.getPolicyTypeCd());
    }

    @Test
    public void testSetAndGetPolicyDesc() {
        String policyDesc = "Policy description";
        delinquencyPolicy.setPolicyDesc(policyDesc);
        assertEquals(policyDesc, delinquencyPolicy.getPolicyDesc());
    }

    @Test
    public void testSetAndGetFeatureClassificationCd() {
        String featureClassificationCd = "CLASS_A";
        delinquencyPolicy.setFeatureClassificationCd(featureClassificationCd);
        assertEquals(featureClassificationCd, delinquencyPolicy.getFeatureClassificationCd());
    }

    @Test
    public void testSetAndGetRepricingTypeCd() {
        String repricingTypeCd = "RATE_A";
        delinquencyPolicy.setRepricingTypeCd(repricingTypeCd);
        assertEquals(repricingTypeCd, delinquencyPolicy.getRepricingTypeCd());
    }

    @Test
    public void testSetAndGetRepricingRate() {
        BigDecimal repricingRate = new BigDecimal("10.5");
        delinquencyPolicy.setRepricingRate(repricingRate);
        assertEquals(repricingRate, delinquencyPolicy.getRepricingRate());
    }

    @Test
    public void testSetAndGetTriggerCycleCnt() {
        Integer triggerCycleCnt = 3;
        delinquencyPolicy.setTriggerCycleCnt(triggerCycleCnt);
        assertEquals(triggerCycleCnt, delinquencyPolicy.getTriggerCycleCnt());
    }

    @Test
    public void testSetAndGetDelinquencyLevelCd() {
        String delinquencyLevelCd = "LEVEL_1";
        delinquencyPolicy.setDelinquencyLevelCd(delinquencyLevelCd);
        assertEquals(delinquencyLevelCd, delinquencyPolicy.getDelinquencyLevelCd());
    }

    @Test
    public void testSetAndGetMinimumDelinquencyCnt() {
        Integer minimumDelinquencyCnt = 5;
        delinquencyPolicy.setMinimumDelinquencyCnt(minimumDelinquencyCnt);
        assertEquals(minimumDelinquencyCnt, delinquencyPolicy.getMinimumDelinquencyCnt());
    }

    @Test
    public void testToString() {
        delinquencyPolicy.setPolicyTypeCd("POLICY_01");
        delinquencyPolicy.setPolicyDesc("Policy description");
        delinquencyPolicy.setFeatureClassificationCd("CLASS_A");
        delinquencyPolicy.setRepricingTypeCd("RATE_A");
        delinquencyPolicy.setRepricingRate(new BigDecimal("10.5"));
        delinquencyPolicy.setTriggerCycleCnt(3);
        delinquencyPolicy.setDelinquencyLevelCd("LEVEL_1");
        delinquencyPolicy.setMinimumDelinquencyCnt(5);
        
        String expected = "com.td.api.mbofp.response.retrieveofferlist.DelinquencyPolicy@" 
                + Integer.toHexString(System.identityHashCode(delinquencyPolicy))
                + "[policyTypeCd=POLICY_01,policyDesc=Policy description,featureClassificationCd=CLASS_A,repricingTypeCd=RATE_A,repricingRate=10.5,triggerCycleCnt=3,delinquencyLevelCd=LEVEL_1,minimumDelinquencyCnt=5]";
        
        assertEquals(expected, delinquencyPolicy.toString());
    }

    @Test
    public void testHashCode() {
        delinquencyPolicy.setPolicyTypeCd("POLICY_01");
        delinquencyPolicy.setPolicyDesc("Policy description");
        delinquencyPolicy.setFeatureClassificationCd("CLASS_A");
        delinquencyPolicy.setRepricingTypeCd("RATE_A");
        delinquencyPolicy.setRepricingRate(new BigDecimal("10.5"));
        delinquencyPolicy.setTriggerCycleCnt(3);
        delinquencyPolicy.setDelinquencyLevelCd("LEVEL_1");
        delinquencyPolicy.setMinimumDelinquencyCnt(5);
        
        int expectedHashCode = 31 * (31 * (31 * (31 * (31 * (31 * (31 * (31 + (delinquencyPolicy.getPolicyTypeCd() == null ? 0 : delinquencyPolicy.getPolicyTypeCd().hashCode())) + 
                (delinquencyPolicy.getPolicyDesc() == null ? 0 : delinquencyPolicy.getPolicyDesc().hashCode())) + 
                (delinquencyPolicy.getFeatureClassificationCd() == null ? 0 : delinquencyPolicy.getFeatureClassificationCd().hashCode())) +
                (delinquencyPolicy.getRepricingTypeCd() == null ? 0 : delinquencyPolicy.getRepricingTypeCd().hashCode())) + 
                (delinquencyPolicy.getRepricingRate() == null ? 0 : delinquencyPolicy.getRepricingRate().hashCode())) + 
                (delinquencyPolicy.getTriggerCycleCnt() == null ? 0 : delinquencyPolicy.getTriggerCycleCnt().hashCode())) + 
                (delinquencyPolicy.getDelinquencyLevelCd() == null ? 0 : delinquencyPolicy.getDelinquencyLevelCd().hashCode())) + 
                (delinquencyPolicy.getMinimumDelinquencyCnt() == null ? 0 : delinquencyPolicy.getMinimumDelinquencyCnt().hashCode()));
        
        assertEquals(expectedHashCode, delinquencyPolicy.hashCode());
    }

    @Test
    public void testEquals() {
        delinquencyPolicy.setPolicyTypeCd("POLICY_01");
        delinquencyPolicy.setPolicyDesc("Policy description");
        delinquencyPolicy.setFeatureClassificationCd("CLASS_A");
        delinquencyPolicy.setRepricingTypeCd("RATE_A");
        delinquencyPolicy.setRepricingRate(new BigDecimal("10.5"));
        delinquencyPolicy.setTriggerCycleCnt(3);
        delinquencyPolicy.setDelinquencyLevelCd("LEVEL_1");
        delinquencyPolicy.setMinimumDelinquencyCnt(5);

        DelinquencyPolicy anotherPolicy = new DelinquencyPolicy();
        anotherPolicy.setPolicyTypeCd("POLICY_01");
        anotherPolicy.setPolicyDesc("Policy description");
        anotherPolicy.setFeatureClassificationCd("CLASS_A");
        anotherPolicy.setRepricingTypeCd("RATE_A");
        anotherPolicy.setRepricingRate(new BigDecimal("10.5"));
        anotherPolicy.setTriggerCycleCnt(3);
        anotherPolicy.setDelinquencyLevelCd("LEVEL_1");
        anotherPolicy.setMinimumDelinquencyCnt(5);

        assertTrue(delinquencyPolicy.equals(anotherPolicy));

        anotherPolicy.setPolicyTypeCd("POLICY_02");
        assertFalse(delinquencyPolicy.equals(anotherPolicy));

        anotherPolicy.setPolicyTypeCd("POLICY_01");
        anotherPolicy.setRepricingRate(new BigDecimal("12.5"));
        assertFalse(delinquencyPolicy.equals(anotherPolicy));

        assertFalse(delinquencyPolicy.equals(null));
        assertFalse(delinquencyPolicy.equals(new Object()));
    }
}
