import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.*;

public class BonusRewardTest {

    private BonusReward bonusReward;

    @BeforeEach
    public void setUp() {
        bonusReward = new BonusReward();
    }

    @Test
    public void testSetAndGetBonusRewardId() {
        String bonusRewardId = "BR001";
        bonusReward.setBonusRewardId(bonusRewardId);
        assertEquals(bonusRewardId, bonusReward.getBonusRewardId());
    }

    @Test
    public void testSetAndGetBonusRewardDesc() {
        String bonusRewardDesc = "Bonus Reward Description";
        bonusReward.setBonusRewardDesc(bonusRewardDesc);
        assertEquals(bonusRewardDesc, bonusReward.getBonusRewardDesc());
    }

    @Test
    public void testSetAndGetRewardAmt() {
        BigDecimal rewardAmt = new BigDecimal("100.50");
        bonusReward.setRewardAmt(rewardAmt);
        assertEquals(rewardAmt, bonusReward.getRewardAmt());
    }

    @Test
    public void testSetAndGetCurrencyCd() {
        String currencyCd = "USD";
        bonusReward.setCurrencyCd(currencyCd);
        assertEquals(currencyCd, bonusReward.getCurrencyCd());
    }

    @Test
    public void testSetAndGetActivateConditionCd() {
        String activateConditionCd = "ACT001";
        bonusReward.setActivateConditionCd(activateConditionCd);
        assertEquals(activateConditionCd, bonusReward.getActivateConditionCd());
    }

    @Test
    public void testToString() {
        String bonusRewardId = "BR001";
        String bonusRewardDesc = "Bonus Reward Description";
        BigDecimal rewardAmt = new BigDecimal("100.50");
        String currencyCd = "USD";
        String activateConditionCd = "ACT001";

        bonusReward.setBonusRewardId(bonusRewardId);
        bonusReward.setBonusRewardDesc(bonusRewardDesc);
        bonusReward.setRewardAmt(rewardAmt);
        bonusReward.setCurrencyCd(currencyCd);
        bonusReward.setActivateConditionCd(activateConditionCd);

        String expected = "com.td.api.mbofp.response.retrieveofferlist.BonusReward@" 
                + Integer.toHexString(System.identityHashCode(bonusReward)) 
                + "[bonusRewardId=" + bonusRewardId + ",bonusRewardDesc=" + bonusRewardDesc 
                + ",rewardAmt=" + rewardAmt + ",currencyCd=" + currencyCd 
                + ",activateConditionCd=" + activateConditionCd + "]";
        
        assertEquals(expected, bonusReward.toString());
    }

    @Test
    public void testHashCode() {
        String bonusRewardId = "BR001";
        String bonusRewardDesc = "Bonus Reward Description";
        BigDecimal rewardAmt = new BigDecimal("100.50");
        String currencyCd = "USD";
        String activateConditionCd = "ACT001";

        bonusReward.setBonusRewardId(bonusRewardId);
        bonusReward.setBonusRewardDesc(bonusRewardDesc);
        bonusReward.setRewardAmt(rewardAmt);
        bonusReward.setCurrencyCd(currencyCd);
        bonusReward.setActivateConditionCd(activateConditionCd);

        int expectedHashCode = 31 + (rewardAmt == null ? 0 : rewardAmt.hashCode())
                + (currencyCd == null ? 0 : currencyCd.hashCode())
                + (activateConditionCd == null ? 0 : activateConditionCd.hashCode())
                + (bonusRewardId == null ? 0 : bonusRewardId.hashCode())
                + (bonusRewardDesc == null ? 0 : bonusRewardDesc.hashCode());

        assertEquals(expectedHashCode, bonusReward.hashCode());
    }

    @Test
    public void testEquals() {
        String bonusRewardId = "BR001";
        String bonusRewardDesc = "Bonus Reward Description";
        BigDecimal rewardAmt = new BigDecimal("100.50");
        String currencyCd = "USD";
        String activateConditionCd = "ACT001";

        bonusReward.setBonusRewardId(bonusRewardId);
        bonusReward.setBonusRewardDesc(bonusRewardDesc);
        bonusReward.setRewardAmt(rewardAmt);
        bonusReward.setCurrencyCd(currencyCd);
        bonusReward.setActivateConditionCd(activateConditionCd);

        BonusReward anotherBonusReward = new BonusReward();
        anotherBonusReward.setBonusRewardId(bonusRewardId);
        anotherBonusReward.setBonusRewardDesc(bonusRewardDesc);
        anotherBonusReward.setRewardAmt(rewardAmt);
        anotherBonusReward.setCurrencyCd(currencyCd);
        anotherBonusReward.setActivateConditionCd(activateConditionCd);

        assertTrue(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setBonusRewardId("BR002");
        assertFalse(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setBonusRewardId(bonusRewardId);
        anotherBonusReward.setBonusRewardDesc("Different Description");
        assertFalse(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setBonusRewardDesc(bonusRewardDesc);
        anotherBonusReward.setRewardAmt(new BigDecimal("200.00"));
        assertFalse(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setRewardAmt(rewardAmt);
        anotherBonusReward.setCurrencyCd("EUR");
        assertFalse(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setCurrencyCd(currencyCd);
        anotherBonusReward.setActivateConditionCd("ACT002");
        assertFalse(bonusReward.equals(anotherBonusReward));

        anotherBonusReward.setActivateConditionCd(activateConditionCd);
        assertTrue(bonusReward.equals(anotherBonusReward));

        assertFalse(bonusReward.equals(null));
        assertFalse(bonusReward.equals(new Object()));
    }
}
