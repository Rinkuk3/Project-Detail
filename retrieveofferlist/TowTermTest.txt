import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TowTermTest {

    private TowTerm towTerm;

    @BeforeEach
    public void setUp() {
        towTerm = new TowTerm();
    }

    @Test
    public void testSetAndGetUntilAgeCd() {
        String untilAgeCd = "30";
        towTerm.setUntilAgeCd(untilAgeCd);
        assertEquals(untilAgeCd, towTerm.getUntilAgeCd());
    }

    @Test
    public void testSetAndGetUntilAgeNum() {
        String untilAgeNum = "25";
        towTerm.setUntilAgeNum(untilAgeNum);
        assertEquals(untilAgeNum, towTerm.getUntilAgeNum());
    }

    @Test
    public void testSetAndGetFixedEndDt() {
        String fixedEndDt = "2025-12-31";
        towTerm.setFixedEndDt(fixedEndDt);
        assertEquals(fixedEndDt, towTerm.getFixedEndDt());
    }

    @Test
    public void testSetAndGetOpeningExpiryDt() {
        String openingExpiryDt = "2025-01-01";
        towTerm.setOpeningExpiryDt(openingExpiryDt);
        assertEquals(openingExpiryDt, towTerm.getOpeningExpiryDt());
    }

    @Test
    public void testSetAndGetCalculationTypeCd() {
        String calculationTypeCd = "A";
        towTerm.setCalculationTypeCd(calculationTypeCd);
        assertEquals(calculationTypeCd, towTerm.getCalculationTypeCd());
    }

    @Test
    public void testToString() {
        towTerm.setUntilAgeCd("30");
        towTerm.setUntilAgeNum("25");
        towTerm.setFixedEndDt("2025-12-31");
        towTerm.setOpeningExpiryDt("2025-01-01");
        towTerm.setCalculationTypeCd("A");

        String expected = "com.td.api.mbofp.response.retrieveofferlist.TowTerm@"
                + Integer.toHexString(System.identityHashCode(towTerm)) + "[untilAgeCd=30,untilAgeNum=25,fixedEndDt=2025-12-31,openingExpiryDt=2025-01-01,calculationTypeCd=A,]";
        assertEquals(expected, towTerm.toString());
    }

    @Test
    public void testHashCode() {
        towTerm.setUntilAgeCd("30");
        towTerm.setUntilAgeNum("25");
        towTerm.setFixedEndDt("2025-12-31");
        towTerm.setOpeningExpiryDt("2025-01-01");
        towTerm.setCalculationTypeCd("A");

        int expectedHashCode = 1;
        expectedHashCode = (expectedHashCode * 31) + ("A" == null ? 0 : "A".hashCode());
        expectedHashCode = (expectedHashCode * 31) + ("30" == null ? 0 : "30".hashCode());
        expectedHashCode = (expectedHashCode * 31) + ("2025-12-31" == null ? 0 : "2025-12-31".hashCode());
        expectedHashCode = (expectedHashCode * 31) + ("2025-01-01" == null ? 0 : "2025-01-01".hashCode());
        expectedHashCode = (expectedHashCode * 31) + ("25" == null ? 0 : "25".hashCode());

        assertEquals(expectedHashCode, towTerm.hashCode());
    }

    @Test
    public void testEquals() {
        towTerm.setUntilAgeCd("30");
        towTerm.setUntilAgeNum("25");
        towTerm.setFixedEndDt("2025-12-31");
        towTerm.setOpeningExpiryDt("2025-01-01");
        towTerm.setCalculationTypeCd("A");

        TowTerm anotherTowTerm = new TowTerm();
        anotherTowTerm.setUntilAgeCd("30");
        anotherTowTerm.setUntilAgeNum("25");
        anotherTowTerm.setFixedEndDt("2025-12-31");
        anotherTowTerm.setOpeningExpiryDt("2025-01-01");
        anotherTowTerm.setCalculationTypeCd("A");

        assertTrue(towTerm.equals(anotherTowTerm));

        anotherTowTerm.setUntilAgeCd("35");
        assertFalse(towTerm.equals(anotherTowTerm));

        assertFalse(towTerm.equals(null));
        assertFalse(towTerm.equals(new Object()));
    }
}
