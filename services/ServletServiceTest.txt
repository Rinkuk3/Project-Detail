package com.td.mbna.msec.midtier.services;

import com.td.mbna.msec.midtier.exception.SystemError;
import com.td.mbna.msec.midtier.util.ConfigUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ServletServiceTest {

    @Mock
    private MbnaLogger mockLogger;

    @Mock
    private HttpURLConnection mockHttpURLConnection;

    @Mock
    private InputStream mockInputStream;

    @Mock
    private URL mockUrl;

    @Mock
    private URLConnection mockUrlConnection;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(mockLogger.info(anyString())).thenReturn(null);
        when(mockLogger.error(anyString(), any(Exception.class))).thenReturn(null);
    }

    @Test
    void testGetQueryString_withValidParameters() throws Exception {
        Map<String, String> parameters = new HashMap<>();
        parameters.put("key1", "value1");
        parameters.put("key2", "value2");

        String queryString = ServletService.getQueryString(parameters);
        assertNotNull(queryString);
        assertEquals("key1=value1&key2=value2", queryString);
    }

    @Test
    void testGetQueryString_withEmptyParameters() throws Exception {
        Map<String, String> parameters = new HashMap<>();

        String queryString = ServletService.getQueryString(parameters);
        assertNull(queryString);
    }

    @Test
    void testGetQueryString_withNullParameters() throws Exception {
        String queryString = ServletService.getQueryString(null);
        assertNull(queryString);
    }

    @Test
    void testCallServlet_success() throws Exception {
        Map<String, String> parameters = new HashMap<>();
        parameters.put("param1", "value1");

        String urlString = "http://localhost/servlet";
        byte[] responseBytes = "response".getBytes();

        // Mock URL and connection setup
        when(mockUrl.openConnection()).thenReturn(mockHttpURLConnection);
        when(mockHttpURLConnection.getOutputStream()).thenReturn(new ByteArrayOutputStream());
        when(mockHttpURLConnection.getInputStream()).thenReturn(new ByteArrayInputStream(responseBytes));
        when(mockHttpURLConnection.getContentLength()).thenReturn(responseBytes.length);

        // Mock ConfigUtil.getProperty method to return test values
        when(ConfigUtil.getProperty(anyString())).thenReturn("30");

        // Mock OutputStreamWriter behavior (mock flushing)
        OutputStreamWriter mockWriter = mock(OutputStreamWriter.class);
        when(mockHttpURLConnection.getOutputStream()).thenReturn(new ByteArrayOutputStream());

        // Test the callServlet method
        byte[] result = ServletService.callServlet(urlString, parameters);

        assertNotNull(result);
        assertArrayEquals(responseBytes, result);

        // Verify that the connection was opened and the writer was flushed
        verify(mockHttpURLConnection).setRequestMethod("POST");
        verify(mockHttpURLConnection).setConnectTimeout(anyInt());
        verify(mockHttpURLConnection).setReadTimeout(anyInt());
    }

    @Test
    void testCallServlet_exception() throws Exception {
        Map<String, String> parameters = new HashMap<>();
        parameters.put("param1", "value1");

        String urlString = "http://localhost/servlet";

        // Simulate an exception in the connection
        when(mockUrl.openConnection()).thenThrow(new Exception("Connection failed"));

        SystemError thrown = assertThrows(SystemError.class, () -> {
            ServletService.callServlet(urlString, parameters);
        });

        assertNotNull(thrown);
        assertEquals("ServletService", thrown.getFaultInfo().getErrorSource());
        assertEquals("Connection failed", thrown.getFaultInfo().getErrorDescription());
    }
}
