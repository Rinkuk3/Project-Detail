import com.td.mbna.msec.midtier.persistance.entity.BusinessEventAudit;
import com.td.mbna.msec.midtier.persistance.mybatis.DBMybatisService;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorRequest;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorResponse;
import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.types.common.TrackableRequest;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.math.BigDecimal;
import java.util.Date;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class AuditServiceWorkTest {

    @InjectMocks
    private AuditServiceWork auditServiceWork;

    @Mock
    private TrackableRequest trackableRequest;

    @Mock
    private BaseResponse baseResponse;

    @Mock
    private BaseRequest baseRequest;

    @Mock
    private BalanceTransferToCreditorResponse balanceTransferToCreditorResponse;

    @Mock
    private BusinessEventAudit businessEventAudit;

    @Mock
    private MbnaLogger logger;

    @Mock
    private DBMybatisService dbMybatisService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testRunSuccessfully() {
        // Mock static methods
        try (MockedStatic<DBMybatisService> dbMybatisServiceMock = mockStatic(DBMybatisService.class)) {
            dbMybatisServiceMock.when(() -> DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class))).thenReturn(null);

            // Mock TrackableRequest and BaseResponse
            when(trackableRequest instanceof BaseRequest).thenReturn(true);
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));

            // Mock audit info
            when(baseRequest.getAuditInfo().getTransactionCode()).thenReturn("SS0905");
            when(baseResponse.getStatus()).thenReturn("Success");
            
            // Mock BalanceTransferToCreditorResponse and related objects
            BalanceTransferToCreditorRequest request = mock(BalanceTransferToCreditorRequest.class);
            when(request.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(balanceTransferToCreditorResponse.getResponsePayload()).thenReturn(mock(BalanceTransferToCreditorResponse.Payload.class));

            // Date and processing time
            Date startTime = new Date();
            long processingTime = 1000L;

            // Initialize AuditServiceWork
            auditServiceWork = new AuditServiceWork(trackableRequest, baseResponse, startTime, processingTime);

            // Call run method
            auditServiceWork.run();

            // Verify createAuditLogEntry is called
            verifyStatic(DBMybatisService.class, times(1));
            DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class));
        }
    }

    @Test
    public void testCreateAuditLogEntryWithBalanceTransfer() throws Exception {
        // Mock BaseRequest and BalanceTransferToCreditorRequest
        BalanceTransferToCreditorRequest request = mock(BalanceTransferToCreditorRequest.class);
        when(request.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));

        BalanceTransferToCreditorResponse response = mock(BalanceTransferToCreditorResponse.class);
        when(response.getResponsePayload()).thenReturn(mock(BalanceTransferToCreditorResponse.Payload.class));

        // Mock transaction status
        when(response.getResponsePayload().getConfirmation()).thenReturn(new BTConfirmationType[]{new BTConfirmationType()});

        // Mock BaseRequest for creating audit log
        when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
        when(baseRequest.getAuditInfo().getTransactionCode()).thenReturn("SS0905");

        // Set date and processing time
        Date startTime = new Date();
        long processingTime = 1000L;

        // Initialize AuditServiceWork
        auditServiceWork = new AuditServiceWork(request, response, startTime, processingTime);

        // Run the method
        auditServiceWork.run();

        // Verify method execution
        verifyStatic(DBMybatisService.class, times(1));
        DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class));
    }

    @Test
    public void testCreateAuditLogEntryWithTransactionCode() throws Exception {
        // Mock TrackableRequest (BaseRequest) and BaseResponse
        when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
        when(baseRequest.getAuditInfo().getTransactionCode()).thenReturn("SS0905");
        when(baseRequest.getCustId()).thenReturn("12345");
        when(baseResponse.getStatus()).thenReturn("Success");

        // Date and processing time
        Date startTime = new Date();
        long processingTime = 1000L;

        // Initialize AuditServiceWork
        auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);

        // Run the method
        auditServiceWork.run();

        // Verify the creation of audit log entry
        verifyStatic(DBMybatisService.class, times(1));
        DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class));
    }

    @Test
    public void testCreateAuditLogEntryNullAuditInfo() throws Exception {
        // Mock TrackableRequest (BaseRequest) and BaseResponse
        when(baseRequest.getAuditInfo()).thenReturn(null);
        when(baseResponse.getStatus()).thenReturn("Failure");

        // Date and processing time
        Date startTime = new Date();
        long processingTime = 1000L;

        // Initialize AuditServiceWork
        auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);

        // Run the method
        auditServiceWork.run();

        // Verify the DB insertion never happens
        verifyStatic(DBMybatisService.class, never());
        DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class));
    }

    @Test
    public void testErrorHandlingInRun() {
        // Simulate an error in the DBService
        try (MockedStatic<DBMybatisService> dbMybatisServiceMock = mockStatic(DBMybatisService.class)) {
            dbMybatisServiceMock.when(() -> DBMybatisService.createAuditLogEntry(any(BusinessEventAudit.class)))
                    .thenThrow(new RuntimeException("Database Error"));

            // Mock TrackableRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseResponse.getStatus()).thenReturn("Failure");

            // Date and processing time
            Date startTime = new Date();
            long processingTime = 1000L;

            // Initialize AuditServiceWork
            auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);

            // Call run method (should catch exception)
            auditServiceWork.run();

            // Verify error logging
            verify(logger).error(eq("Error in AuditServiceWork"), any(Throwable.class));
        }
    }
}
