import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.util.ConfigUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import java.util.Date;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class AuditServiceTest {

    @InjectMocks
    private AuditService auditService;

    @Mock
    private BaseRequest baseRequest;

    @Mock
    private BaseResponse baseResponse;

    @Mock
    private MbnaLogger logger;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCreateAuditLogTransactionSuccess() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);
            configUtilMock.when(() -> ConfigUtil.getProperty(any())).thenReturn("true");
            configUtilMock.when(() -> ConfigUtil.isTest()).thenReturn(false);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseRequest.getAuditInfo().getTransactionStatus()).thenReturn("Success");
            when(baseResponse.getStatus()).thenReturn(null);

            Date startTime = new Date();
            long processingTime = 1000L;

            // Call method
            AuditService.createAuditLog(baseRequest, baseResponse, startTime, processingTime);

            // Verify that the response status is set to "Success"
            verify(baseResponse).setStatus("Success");

            // Verify that the AuditServiceWork was run
            verifyStatic(AuditServiceWork.class);
            AuditServiceWork auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);
            auditServiceWork.run();
        }
    }

    @Test
    public void testCreateAuditLogTransactionFailure() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);
            configUtilMock.when(() -> ConfigUtil.getProperty(any())).thenReturn("true");
            configUtilMock.when(() -> ConfigUtil.isTest()).thenReturn(false);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseRequest.getAuditInfo().getTransactionStatus()).thenReturn("Failure");

            Date startTime = new Date();
            long processingTime = 1000L;

            // Call method
            AuditService.createAuditLog(baseRequest, baseResponse, startTime, processingTime);

            // Verify that the method returns early for transaction failure, no other interactions
            verify(baseResponse, never()).setStatus(any());
        }
    }

    @Test
    public void testCreateAuditLogAuditInactive() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(false);

            // Call method
            AuditService.createAuditLog(baseRequest, baseResponse, new Date(), 1000L);

            // Verify that no other methods are called if audit is inactive
            verify(baseResponse, never()).setStatus(any());
        }
    }

    @Test
    public void testCreateAuditLogNullAuditInfo() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(null);

            // Call method
            AuditService.createAuditLog(baseRequest, baseResponse, new Date(), 1000L);

            // Verify that the method returns early if audit info is null
            verify(baseResponse, never()).setStatus(any());
        }
    }

    @Test
    public void testCreateAuditLogSyncEnabled() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);
            configUtilMock.when(() -> ConfigUtil.getProperty(any())).thenReturn("true");
            configUtilMock.when(() -> ConfigUtil.isTest()).thenReturn(false);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseRequest.getAuditInfo().getTransactionStatus()).thenReturn("Success");
            when(baseResponse.getStatus()).thenReturn(null);

            Date startTime = new Date();
            long processingTime = 1000L;

            // Call method with sync enabled
            AuditService.createAuditLog(baseRequest, baseResponse, startTime, processingTime);

            // Verify that the AuditServiceWork was run
            verifyStatic(AuditServiceWork.class);
            AuditServiceWork auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);
            auditServiceWork.run();
        }
    }

    @Test
    public void testCreateAuditLogSyncDisabled() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);
            configUtilMock.when(() -> ConfigUtil.getProperty(any())).thenReturn("false");
            configUtilMock.when(() -> ConfigUtil.isTest()).thenReturn(false);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseRequest.getAuditInfo().getTransactionStatus()).thenReturn("Success");
            when(baseResponse.getStatus()).thenReturn(null);

            Date startTime = new Date();
            long processingTime = 1000L;

            // Call method with sync disabled
            AuditService.createAuditLog(baseRequest, baseResponse, startTime, processingTime);

            // Verify that the method handles sync being disabled
            // No call to AuditServiceWork's run method
            verifyStatic(AuditServiceWork.class, never());
            AuditServiceWork auditServiceWork = new AuditServiceWork(baseRequest, baseResponse, startTime, processingTime);
            auditServiceWork.run();
        }
    }

    @Test
    public void testCreateAuditLogErrorHandling() {
        // Mock static methods
        try (MockedStatic<ConfigUtil> configUtilMock = mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.auditActive()).thenReturn(true);
            configUtilMock.when(() -> ConfigUtil.getProperty(any())).thenReturn("true");
            configUtilMock.when(() -> ConfigUtil.isTest()).thenReturn(false);

            // Mock BaseRequest and BaseResponse
            when(baseRequest.getAuditInfo()).thenReturn(mock(BaseRequest.AuditInfo.class));
            when(baseRequest.getAuditInfo().getTransactionStatus()).thenReturn("Success");

            // Simulate an error in AuditServiceWork
            doThrow(new RuntimeException("Test Exception")).when(AuditServiceWork.class, "run");

            Date startTime = new Date();
            long processingTime = 1000L;

            // Call method
            AuditService.createAuditLog(baseRequest, baseResponse, startTime, processingTime);

            // Verify that error is logged
            verify(logger).error(eq("Error in AuditService"), any(Throwable.class));
        }
    }
}
