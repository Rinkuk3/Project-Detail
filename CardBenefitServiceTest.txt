package com.td.mbna.msec.cardbenefit.service.impl;

import com.google.gson.Gson;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.cardbenefit.model.CardBenefit;
import com.td.mbna.msec.cardbenefit.model.CardBenefitItemInWcm;
import com.td.mbna.msec.common.WcmContentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CardBenefitServiceTest {

    @InjectMocks
    private CardBenefitServiceImpl cardBenefitService;

    @Mock
    private WcmContentService wcmContentService;

    @Mock
    private HttpServletRequest request;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetCardBenefit_WithNullAccount() {
        CardBenefit result = cardBenefitService.getCardBenefit(null, request);
        assertNull(result, "Expected null when account is null");
    }

    @Test
    void testGetCardBenefit_WithNullWcmContent() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");

        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn(null);

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNull(result, "Expected null when WCM content is null");
    }

    @Test
    void testGetCardBenefit_WithEmptyWcmContent() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");
        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn("");

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNull(result, "Expected null when WCM content is empty");
    }

    @Test
    void testGetCardBenefit_WithJsonParsingError() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");

        String wcmContent = "{\"invalidJson\"";
        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn(wcmContent);

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNull(result, "Expected null when there is a JSON parsing error");
    }

    @Test
    void testGetCardBenefit_WithUnpublishedItem() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");
        
        CardBenefitItemInWcm item = new CardBenefitItemInWcm();
        item.setPublish(false); // Unpublished item
        item.setHtml("<div>Benefit</div>");
        
        String wcmContent = new Gson().toJson(new CardBenefitItemInWcm[]{item});
        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn(wcmContent);

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNull(result, "Expected null when all items are unpublished");
    }

    @Test
    void testGetCardBenefit_WithValidPublishedItem() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");
        account.setProductCode("PROD123");

        CardBenefitItemInWcm item = new CardBenefitItemInWcm();
        item.setPublish(true);
        item.setProductionCode("PROD123");
        item.setHtml("<div>Benefit</div>");

        String wcmContent = new Gson().toJson(new CardBenefitItemInWcm[]{item});
        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn(wcmContent);

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNotNull(result, "Expected non-null CardBenefit when item is published and matches production code");
        assertEquals("<div>Benefit</div>", result.getHtml());
    }

    @Test
    void testGetCardBenefit_WithPublishedItemDifferentProductionCode() {
        AccountDetails account = new AccountDetails();
        account.setAccountId("12345");
        account.setProductCode("DIFF_CODE");

        CardBenefitItemInWcm item = new CardBenefitItemInWcm();
        item.setPublish(true);
        item.setProductionCode("PROD123");
        item.setHtml("<div>Benefit</div>");

        String wcmContent = new Gson().toJson(new CardBenefitItemInWcm[]{item});
        when(wcmContentService.getContentByID("cardbenefit", request)).thenReturn(wcmContent);

        CardBenefit result = cardBenefitService.getCardBenefit(account, request);
        assertNull(result, "Expected null when published item does not match account's product code");
    }
}
