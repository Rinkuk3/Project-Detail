package com.td.mbna.msec.midtier.account.payload.getrewardsbalances;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    @Test
    void testGettersAndSetters() {
        // Create an instance of ResponsePayload
        ResponsePayload responsePayload = new ResponsePayload();

        // Test setter and getter for availableBalanceQty
        Long availableBalanceQty = 12345L;
        responsePayload.setAvailableBalanceQty(availableBalanceQty);
        assertEquals(availableBalanceQty, responsePayload.getAvailableBalanceQty(), "Setter and getter for availableBalanceQty should work correctly.");

        // Test setter and getter for loyaltyUnitOfMeasure
        String loyaltyUnitOfMeasure = "Points";
        responsePayload.setLoyaltyUnitOfMeasure(loyaltyUnitOfMeasure);
        assertEquals(loyaltyUnitOfMeasure, responsePayload.getLoyaltyUnitOfMeasure(), "Setter and getter for loyaltyUnitOfMeasure should work correctly.");
    }

    @Test
    void testToString() {
        // Create an instance and set values
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setAvailableBalanceQty(12345L);
        responsePayload.setLoyaltyUnitOfMeasure("Points");

        // Validate the toString output
        String toStringResult = responsePayload.toString();
        assertNotNull(toStringResult, "toString should not return null.");
        assertTrue(toStringResult.contains("availableBalanceQty=12345"), "toString should include availableBalanceQty.");
        assertTrue(toStringResult.contains("loyaltyUnitOfMeasure=Points"), "toString should include loyaltyUnitOfMeasure.");
    }

    @Test
    void testEqualsAndHashCode() {
        // Create two identical objects
        ResponsePayload response1 = new ResponsePayload();
        response1.setAvailableBalanceQty(12345L);
        response1.setLoyaltyUnitOfMeasure("Points");

        ResponsePayload response2 = new ResponsePayload();
        response2.setAvailableBalanceQty(12345L);
        response2.setLoyaltyUnitOfMeasure("Points");

        // Validate equals
        assertEquals(response1, response2, "Two identical objects should be equal.");
        assertEquals(response1.hashCode(), response2.hashCode(), "Hash codes of two identical objects should match.");

        // Modify one object
        response2.setAvailableBalanceQty(67890L);

        // Validate inequality
        assertNotEquals(response1, response2, "Objects with different data should not be equal.");
        assertNotEquals(response1.hashCode(), response2.hashCode(), "Hash codes of objects with different data should not match.");
    }

    @Test
    void testEqualsWithNull() {
        // Create an instance
        ResponsePayload response = new ResponsePayload();

        // Validate equals with null
        assertNotEquals(response, null, "Equals should return false when compared with null.");
    }

    @Test
    void testEqualsWithDifferentClass() {
        // Create an instance
        ResponsePayload response = new ResponsePayload();

        // Validate equals with an object of a different class
        assertNotEquals(response, new Object(), "Equals should return false when compared with a different class.");
    }

    @Test
    void testEqualsWithSelf() {
        // Create an instance
        ResponsePayload response = new ResponsePayload();

        // Validate equals with itself
        assertEquals(response, response, "Equals should return true when compared with itself.");
    }
}
