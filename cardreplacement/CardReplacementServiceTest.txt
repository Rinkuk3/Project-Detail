package com.td.mbna.msec.midtier.cardreplacement;

import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardRequest;
import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CardReplacementServiceTest {

    @Mock
    private ReplaceCardOperation replaceCardOperation;

    @InjectMocks
    private CardReplacementServiceImpl cardReplacementService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testReplaceCard() {
        // Arrange
        ReplaceCardRequest request = new ReplaceCardRequest();
        ReplaceCardResponse expectedResponse = new ReplaceCardResponse();

        when(replaceCardOperation.invokeService(eq(request), any())).thenReturn(expectedResponse);

        // Act
        ReplaceCardResponse actualResponse = cardReplacementService.replaceCard(request, "token123");

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        verify(replaceCardOperation, times(1)).invokeService(eq(request), eq("token123"));
    }

    @Test
    void testReplaceCardWithNullRequest() {
        // Arrange
        ReplaceCardRequest request = null;
        ReplaceCardResponse expectedResponse = new ReplaceCardResponse();

        when(replaceCardOperation.invokeService(eq(request), any())).thenReturn(expectedResponse);

        // Act
        ReplaceCardResponse actualResponse = cardReplacementService.replaceCard(request);

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        verify(replaceCardOperation, times(1)).invokeService(eq(request), eq((String) null));
    }

    @Test
    void testReplaceCardWithMultipleTokens() {
        // Arrange
        ReplaceCardRequest request = new ReplaceCardRequest();
        ReplaceCardResponse expectedResponse = new ReplaceCardResponse();

        when(replaceCardOperation.invokeService(eq(request), any())).thenReturn(expectedResponse);

        // Act
        ReplaceCardResponse actualResponse = cardReplacementService.replaceCard(request, "token1", "token2", "token3");

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        verify(replaceCardOperation, times(1)).invokeService(eq(request), eq("token1"), eq("token2"), eq("token3"));
    }
}
