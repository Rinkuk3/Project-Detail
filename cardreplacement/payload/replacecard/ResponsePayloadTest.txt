package com.td.mbna.msec.midtier.cardreplacement.payload.replacecard;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    @Test
    void testGettersAndSetters() {
        ResponsePayload responsePayload = new ResponsePayload();

        responsePayload.setStatus(true);
        assertTrue(responsePayload.isStatus());

        responsePayload.setStatus(false);
        assertFalse(responsePayload.isStatus());
    }

    @Test
    void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        String toString = responsePayload.toString();

        assertNotNull(toString);
        assertTrue(toString.contains(ResponsePayload.class.getName()));
        assertTrue(toString.contains("@"));
    }

    @Test
    void testEqualsAndHashCode() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        // Both objects are default and should be equal
        assertEquals(responsePayload1, responsePayload2);
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        // Modify one object and test inequality
        responsePayload1.setStatus(true);
        assertNotEquals(responsePayload1, responsePayload2);
        assertNotEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        // Test equality after setting the same status
        responsePayload2.setStatus(true);
        assertEquals(responsePayload1, responsePayload2);
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
    }

    @Test
    void testNotEqualsDifferentClass() {
        ResponsePayload responsePayload = new ResponsePayload();
        Object other = new Object();
        assertNotEquals(responsePayload, other);
    }

    @Test
    void testNotEqualsNull() {
        ResponsePayload responsePayload = new ResponsePayload();
        assertNotEquals(responsePayload, null);
    }

    @Test
    void testHashCodeConsistency() {
        ResponsePayload responsePayload = new ResponsePayload();
        int initialHashCode = responsePayload.hashCode();
        assertEquals(initialHashCode, responsePayload.hashCode());
    }
}
