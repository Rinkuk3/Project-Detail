package com.td.mbna.msec.midtier.cardreplacement;

import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardRequest;
import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.ReplaceCardResponse;
import com.td.mbna.msec.midtier.cardreplacement.payload.replacecard.RequestPayload;
import com.td.mbna.msec.midtier.mbnaad.MbnaAd;
import com.td.mbna.msec.midtier.types.common.EmailNotificationInfoType;
import com.td.mbna.msec.midtier.types.common.SessionInfo;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.UuidUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.Validator;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class ReplaceCardOperationTest {

    @InjectMocks
    private ReplaceCardOperation replaceCardOperation;

    @Mock
    private MbnaAd mbnaAd;

    @Mock
    private Validator replaceCardRequestValidator;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeServiceWhenConfirmedIsFalse() {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(false);
        request.setRequestPayload(payload);

        ReplaceCardResponse response = replaceCardOperation.invokeService(request);

        assertNotNull(response);
        assertEquals("Success", response.getStatus());
    }

    @Test
    void testInvokeServiceWhenConfirmedIsTrue() throws Exception {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(true);
        payload.setAliasCustID("12345");
        payload.setCardNumber("6789");
        request.setRequestPayload(payload);
        SessionInfo sessionInfo = new SessionInfo();
        sessionInfo.setLoginId("testUser");
        request.setSessionInfo(sessionInfo);

        ReplaceCardResponse mockResponse = new ReplaceCardResponse();
        mockResponse.setStatus("Success");

        when(mbnaAd.issueCard(any(), any(), any())).thenReturn(mockResponse);

        ReplaceCardResponse response = replaceCardOperation.invokeService(request, "token");

        assertNotNull(response);
        assertEquals("Success", response.getStatus());
        verify(mbnaAd, times(1)).issueCard(any(), any(), any());
    }

    @Test
    void testInvokeServiceThrowsException() {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(true);
        request.setRequestPayload(payload);

        when(mbnaAd.issueCard(any(), any(), any())).thenThrow(new RuntimeException("Error"));

        Exception exception = assertThrows(RuntimeException.class, () -> 
            replaceCardOperation.invokeService(request, "token")
        );

        assertEquals("Error", exception.getMessage());
    }

    @Test
    void testCreateAutoComment() {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(true);
        payload.setRequestedAccountHolderName("John Doe");
        request.setRequestPayload(payload);

        ReplaceCardResponse response = new ReplaceCardResponse();
        response.setStatus("Success");

        List<String> comments = replaceCardOperation.createAutoComment(request, response);

        assertNotNull(comments);
        assertEquals(2, comments.size());
    }

    @Test
    void testCreateAutoCommentWhenNotConfirmed() {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(false);
        request.setRequestPayload(payload);

        ReplaceCardResponse response = new ReplaceCardResponse();
        response.setStatus("Success");

        List<String> comments = replaceCardOperation.createAutoComment(request, response);

        assertNotNull(comments);
        assertTrue(comments.isEmpty());
    }

    @Test
    void testGetEmailInfoBean() {
        ReplaceCardRequest request = new ReplaceCardRequest();
        RequestPayload payload = new RequestPayload();
        payload.setConfirmed(true);
        EmailNotificationInfoType emailInfoType = new EmailNotificationInfoType();
        emailInfoType.setPrimaryUserFirstName("John");
        emailInfoType.setCardName("Platinum");
        payload.setEmailNotificationInfo(emailInfoType);
        request.setRequestPayload(payload);

        ReplaceCardResponse response = new ReplaceCardResponse();
        response.setStatus("Success");

        EmailInfo emailInfo = replaceCardOperation.getEmailInfoBean(request, response);

        assertNotNull(emailInfo);
    }

    @Test
    void testGetValidator() {
        assertNotNull(replaceCardOperation.getValidator());
    }
}