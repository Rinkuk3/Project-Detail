package com.td.mbna.msec.midtier.account;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.api.kms.request.AddEncryptionJobRq;
import com.td.api.kms.response.AddEncryptionJobRs;
import com.td.api.kms.response.CipherData;
import com.td.mbna.msec.midtier.account.payload.getrewardssaml.GetRewardsSamlRequest;
import com.td.mbna.msec.midtier.account.payload.getrewardssaml.GetRewardsSamlResponse;
import com.td.mbna.msec.midtier.rewards.MbnaRewards;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Base64;

class GetRewardsSamlOperationTest {

    @InjectMocks
    private GetRewardsSamlOperation getRewardsSamlOperation;

    @Mock
    private MbnaRewards mbnaRewards;

    @Mock
    private TDRestServiceUtil tdRestServiceUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() throws Exception {
        // Arrange
        GetRewardsSamlRequest request = new GetRewardsSamlRequest();
        request.setAcctNum("12345");

        GetRewardsSamlResponse expectedResponse = new GetRewardsSamlResponse();
        when(mbnaRewards.getRewardsSaml(any(GetRewardsSamlRequest.class), anyString())).thenReturn(expectedResponse);

        AddEncryptionJobRs mockEncryptResponse = new AddEncryptionJobRs();
        CipherData cipherData = new CipherData();
        cipherData.setCipherTxt("encryptedAccountId");
        mockEncryptResponse.setCipherData(cipherData);

        when(tdRestServiceUtil.invokeRestService(any(), any(AddEncryptionJobRq.class), eq(AddEncryptionJobRs.class), anyString()))
                .thenReturn(mockEncryptResponse);

        // Act
        GetRewardsSamlResponse actualResponse = getRewardsSamlOperation.invokeService(request, "mockToken");

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        assertEquals("encryptedAccountId", request.getAcctNum());
        verify(tdRestServiceUtil, times(1)).invokeRestService(any(), any(AddEncryptionJobRq.class), eq(AddEncryptionJobRs.class), anyString());
        verify(mbnaRewards, times(1)).getRewardsSaml(any(GetRewardsSamlRequest.class), anyString());
    }

    @Test
    void testInvokeService_NullAccountId() {
        // Arrange
        GetRewardsSamlRequest request = new GetRewardsSamlRequest();

        GetRewardsSamlResponse expectedResponse = new GetRewardsSamlResponse();
        when(mbnaRewards.getRewardsSaml(any(GetRewardsSamlRequest.class), anyString())).thenReturn(expectedResponse);

        // Act
        GetRewardsSamlResponse actualResponse = getRewardsSamlOperation.invokeService(request, "mockToken");

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        verify(tdRestServiceUtil, never()).invokeRestService(any(), any(AddEncryptionJobRq.class), eq(AddEncryptionJobRs.class), anyString());
        verify(mbnaRewards, times(1)).getRewardsSaml(any(GetRewardsSamlRequest.class), anyString());
    }

    @Test
    void testInvokeService_Exception() {
        // Arrange
        GetRewardsSamlRequest request = new GetRewardsSamlRequest();
        request.setAcctNum("12345");

        when(tdRestServiceUtil.invokeRestService(any(), any(AddEncryptionJobRq.class), eq(AddEncryptionJobRs.class), anyString()))
                .thenThrow(new RuntimeException("Mock Exception"));

        // Act
        GetRewardsSamlResponse actualResponse = getRewardsSamlOperation.invokeService(request, "mockToken");

        // Assert
        assertNotNull(actualResponse);
        verify(tdRestServiceUtil, times(1)).invokeRestService(any(), any(AddEncryptionJobRq.class), eq(AddEncryptionJobRs.class), anyString());
    }

    @Test
    void testCreateEncryptRequest() {
        // Arrange
        String ssoToken = "testToken";

        // Act
        AddEncryptionJobRq result = getRewardsSamlOperation.createEncryptRequest(ssoToken);

        // Assert
        assertNotNull(result);
        assertEquals("testToken", result.getEncryptionEvent().getData().getPlainTxt());
        assertEquals("Base64Binary", result.getEncryptionEvent().getData().getEncodingSchemeTypeCd());
        assertEquals("RSA", result.getEncryptionEvent().getEncryptionMethodCd());
        assertNotNull(result.getEncryptionEvent().getCryptographyKey());
        assertEquals(1, result.getEncryptionEvent().getCryptographyKey().size());
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act & Assert
        assertFalse(getRewardsSamlOperation.requiresDisclosureConsent());
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act & Assert
        assertNull(getRewardsSamlOperation.getConsentDisclosureFailedMsgCode());
    }

    @Test
    void testGenerateAutoComment() {
        // Act & Assert
        assertFalse(getRewardsSamlOperation.generateAutoComment());
    }

    @Test
    void testCreateAutoComment() {
        // Act & Assert
        assertNull(getRewardsSamlOperation.createAutoComment(null, null));
    }

    @Test
    void testGetEmailInfoBean() {
        // Act & Assert
        assertNull(getRewardsSamlOperation.getEmailInfoBean(null, null));
    }

    @Test
    void testGetValidator() {
        // Act & Assert
        assertNull(getRewardsSamlOperation.getValidator());
    }
}
