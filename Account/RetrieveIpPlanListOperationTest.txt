package com.td.mbna.msec.midtier.account;

import com.td.mbna.msec.midtier.account.payload.retrieveipplanlist.RetrieveIpPlanListRequest;
import com.td.mbna.msec.midtier.account.payload.retrieveipplanlist.RetrieveIpPlanListResponse;
import com.td.mbna.msec.midtier.mbcca.MbnaCCA;
import com.td.mbna.msec.midtier.service.EmailInfo;
import com.td.mbna.msec.midtier.service.MsecValidator;
import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RetrieveIpPlanListOperationTest {

    @InjectMocks
    private RetrieveIpPlanListOperation operation;

    @Mock
    private MbnaCCA mbnaCCA;

    private RetrieveIpPlanListRequest mockRequest;
    private RetrieveIpPlanListResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockRequest = new RetrieveIpPlanListRequest();
        mockRequest.setAcctNum("123456789");
        // Add session info with connectId
        RetrieveIpPlanListRequest.SessionInfo sessionInfo = new RetrieveIpPlanListRequest.SessionInfo();
        sessionInfo.setConnectId("testConnectId");
        mockRequest.setSessionInfo(sessionInfo);

        mockResponse = new RetrieveIpPlanListResponse();
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        when(mbnaCCA.retrieveIpPlanList("testConnectId", "123456789", "testToken"))
                .thenReturn(mockResponse);

        // Act
        RetrieveIpPlanListResponse response = operation.invokeService(mockRequest, "testToken");

        // Assert
        assertNotNull(response);
        verify(mbnaCCA, times(1)).retrieveIpPlanList("testConnectId", "123456789", "testToken");
    }

    @Test
    void testInvokeService_Exception() {
        // Arrange
        when(mbnaCCA.retrieveIpPlanList(anyString(), anyString(), anyString()))
                .thenThrow(new RuntimeException("Test Exception"));

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            operation.invokeService(mockRequest, "testToken");
        });

        assertTrue(exception.getMessage().contains(" RetrieveIpPlanListOperation falied "));
        verify(mbnaCCA, times(1)).retrieveIpPlanList("testConnectId", "123456789", "testToken");
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act
        boolean result = operation.requiresDisclosureConsent();

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = operation.getConsentDisclosureFailedMsgCode();

        // Assert
        assertNull(result);
    }

    @Test
    void testGenerateAutoComment() {
        // Act
        boolean result = operation.generateAutoComment();

        // Assert
        assertFalse(result);
    }

    @Test
    void testCreateAutoComment() {
        // Act
        List<String> result = operation.createAutoComment(mock(BaseRequest.class), mock(BaseResponse.class));

        // Assert
        assertNull(result);
    }

    @Test
    void testGetEmailInfoBean() {
        // Act
        EmailInfo result = operation.getEmailInfoBean(mock(BaseRequest.class), mock(BaseResponse.class));

        // Assert
        assertNull(result);
    }

    @Test
    void testGetValidator() {
        // Act
        MsecValidator validator = operation.getValidator();

        // Assert
        assertNull(validator);
    }
}
