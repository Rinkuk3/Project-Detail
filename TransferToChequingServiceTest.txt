package com.td.mbna.msec.transfertochequing.application.impl;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.common.DisclosureService;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.DisclosureDetails;
import com.td.mbna.msec.core.service.CheckEligibility;
import com.td.mbna.msec.core.service.EligibilityService;
import com.td.mbna.msec.midtier.exceptions.BusinessException;
import com.td.mbna.msec.midtier.transfer.payload.DepositToChequingPayeeType;
import com.td.mbna.msec.midtier.transfer.payload.adddeposittochequingpayee.AddDepositToChequingPayeeResponse;
import com.td.mbna.msec.midtier.transfer.payload.deletedeposittochequingpayee.DeleteDepositToChequingPayeeResponse;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.DepositToChequingResponse;
import com.td.mbna.msec.midtier.transfer.payload.updatedeposittochequingpayee.UpdateDepositToChequingPayeeResponse;
import com.td.mbna.msec.midtier.types.common.ValidationException;
import com.td.mbna.msec.transfertochequing.domain.TransferToChequingRequest;
import com.td.mbna.msec.transfertochequing.domain.TransferToChequingVerificationResponse;
import com.td.mbna.msec.transfertochequing.domain.TransferToChequingResponse;

public class TransferToChequingServiceImplTest {

    @InjectMocks
    private TransferToChequingServiceImpl transferToChequingService;

    @Mock
    private DisclosureService disclosureService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private AccountDetails accountDetails;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testTransferToChequingVerify_Success() throws Exception {
        // Arrange
        TransferToChequingRequest request = mock(TransferToChequingRequest.class);
        when(request.isAgreedToTerms()).thenReturn(true);
        when(sessionProvider.getSessionAttribute("sessionOfferId")).thenReturn("offerId");
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        
        // Mocking external service responses
        DepositToChequingResponse depositResponse = mock(DepositToChequingResponse.class);
        when(depositResponse.getResponsePayload()).thenReturn(new DepositToChequingResponse.Payload());
        when(midTierServiceHelper.depositToChequing(any(), any())).thenReturn(depositResponse);

        // Act
        TransferToChequingVerificationResponse response = transferToChequingService.transferToChequingVerify(request);

        // Assert
        assertNotNull(response);
        verify(midTierServiceHelper, times(1)).depositToChequing(any(), any());
    }

    @Test
    public void testTransferToChequingVerify_RequestIsNull() {
        // Act & Assert
        assertThrows(BusinessException.class, () -> {
            transferToChequingService.transferToChequingVerify(null);
        });
    }

    @Test
    public void testTransferToChequingVerify_TermsNotAgreed() {
        // Arrange
        TransferToChequingRequest request = mock(TransferToChequingRequest.class);
        when(request.isAgreedToTerms()).thenReturn(false);

        // Act & Assert
        assertThrows(BusinessException.class, () -> {
            transferToChequingService.transferToChequingVerify(request);
        });
    }

    @Test
    public void testTransferToChequingSubmit_Success() throws Exception {
        // Arrange
        TransferToChequingRequest request = mock(TransferToChequingRequest.class);
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        
        DepositToChequingResponse depositResponse = mock(DepositToChequingResponse.class);
        when(midTierServiceHelper.depositToChequing(any(), any())).thenReturn(depositResponse);

        // Act
        TransferToChequingResponse response = transferToChequingService.transferToChequingSubmit(request);

        // Assert
        assertNotNull(response);
        verify(midTierServiceHelper, times(1)).depositToChequing(any(), any());
    }

    @Test
    public void testTransferToChequingSubmit_CpiValidationFails() {
        // Arrange
        TransferToChequingRequest request = mock(TransferToChequingRequest.class);
        when(sessionProvider.getCurrentAccount()).thenThrow(new BusinessException("Invalid account"));

        // Act & Assert
        assertThrows(BusinessException.class, () -> {
            transferToChequingService.transferToChequingSubmit(request);
        });
    }

    @Test
    public void testIncTtcErrorCounter() {
        // Arrange
        String accountId = "testAccountId";
        when(sessionProvider.getSessionAttribute(anyString())).thenReturn("1");
        
        // Act
        int errorCount = transferToChequingService.incTtcErrorCounter(accountId);

        // Assert
        assertEquals(2, errorCount);
        verify(sessionProvider, times(1)).setSessionAttribute(anyString(), anyString());
    }

    @Test
    public void testGetTransferToChequingInfo_Success() {
        // Arrange
        String offerID = "testOfferId";
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        DisclosureDetails disclosureDetails = new DisclosureDetails();
        disclosureDetails.setDisclosureText("Sample Disclosure");
        when(disclosureService.retrieveBtDisclosureDetails(anyString(), anyString(), any(), anyString(), anyString())).thenReturn(disclosureDetails);
        
        // Act
        TransferToChequingInfo info = transferToChequingService.getTransferToChequingInfo(offerID);

        // Assert
        assertNotNull(info);
        assertEquals("Sample Disclosure", info.getOfferDisclosureText());
    }

    @Test
    public void testGetTransferToChequingInfo_AccountIsNull() {
        // Arrange
        String offerID = "testOfferId";
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        
        // Act & Assert
        assertThrows(BusinessException.class, () -> {
            transferToChequingService.getTransferToChequingInfo(offerID);
        });
    }

    // Additional tests can be added for other edge cases and methods as necessary
}
