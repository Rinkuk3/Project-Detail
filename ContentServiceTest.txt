package com.td.mbna.msec.midtier.content;

import com.td.mbna.msec.midtier.content.payload.LinkContentType;
import com.td.mbna.msec.midtier.content.payload.getlinkcontent.GetLinkContentRequest;
import com.td.mbna.msec.midtier.content.payload.getlinkcontent.GetLinkContentResponse;
import com.td.mbna.msec.midtier.content.payload.getpagecontent.GetPageContentRequest;
import com.td.mbna.msec.midtier.content.payload.getpagecontent.GetPageContentResponse;
import com.td.mbna.msec.midtier.util.ContentUtil;
import com.td.mbna.msec.midtier.util.services.JAXBJsonConverter;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class ContentServiceTest {

    @InjectMocks
    private ContentServiceImpl contentServiceImpl;

    @Mock
    private ContentUtil contentUtil;

    @Mock
    private JAXBJsonConverter jaxbJsonConverter;

    @Mock
    private MbnaLogger mbnaLogger;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(contentServiceImpl, "logger", mbnaLogger);
    }

    @Test
    public void testGetLinkContent_success() {
        // Prepare the request and mock response
        GetLinkContentRequest mockRequest = mock(GetLinkContentRequest.class);
        when(mockRequest.getRequestPayload()).thenReturn(mockGetLinkContentRequestPayload());
        
        List<LinkContentType> mockLinkContentList = Collections.singletonList(new LinkContentType());
        when(contentUtil.getLinkContent(anyString(), anyString(), anyString())).thenReturn(mockLinkContentList);

        when(jaxbJsonConverter.convertoJAXBToJsonInterface(any(), any())).thenReturn("jsonResponse");

        // Call the method
        GetLinkContentResponse response = contentServiceImpl.getLinkContent(mockRequest);

        // Validate response
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertTrue(response.getResponsePayload().getLinkContent().size() > 0);

        verify(contentUtil, times(1)).getLinkContent(anyString(), anyString(), anyString());
    }

    @Test
    public void testGetLinkContent_exception() {
        GetLinkContentRequest mockRequest = mock(GetLinkContentRequest.class);
        when(mockRequest.getRequestPayload()).thenReturn(mockGetLinkContentRequestPayload());
        when(contentUtil.getLinkContent(anyString(), anyString(), anyString())).thenThrow(RuntimeException.class);

        // Call the method
        GetLinkContentResponse response = contentServiceImpl.getLinkContent(mockRequest);

        // Validate no exception is thrown
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());

        verify(contentUtil, times(1)).getLinkContent(anyString(), anyString(), anyString());
    }

    @Test
    public void testGetPageContent_success() {
        GetPageContentRequest request = mock(GetPageContentRequest.class);
        when(request.getRequestPayload()).thenReturn(mockPageContentRequestPayload());
        String[] mockContentResponse = {"Title", "content", "content", "true", "tabletContent", "mobileContent", "desktopImage", "tabletImage", "mobileImage"};
        when(contentUtil.getPageTitleAndContent(anyString(), any(), anyString())).thenReturn(mockContentResponse);

        // Call the method
        GetPageContentResponse response = contentServiceImpl.getPageContent(request);

        // Validate response
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertEquals("Title", response.getResponsePayload().getTitle());
        assertEquals("content", response.getResponsePayload().getContent());
        assertEquals("content", response.getResponsePayload().getContentContent());
    }

    @Test
    public void testGetPageContent_FileNotFoundException() {
        GetPageContentRequest request = mock(GetPageContentRequest.class);
        when(request.getRequestPayload()).thenReturn(mockPageContentRequestPayload());
        when(contentUtil.getPageTitleAndContent(anyString(), any(), anyString()))
            .thenThrow(FileNotFoundException.class);

        // Call the method
        GetPageContentResponse response = contentServiceImpl.getPageContent(request);

        // Validate response
        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
    }

    @Test
    public void testGetPageContent_otherException() {
        GetPageContentRequest request = mock(GetPageContentRequest.class);
        when(request.getRequestPayload()).thenReturn(mockPageContentRequestPayload());
        when(contentUtil.getPageTitleAndContent(anyString(), any(), anyString()))
            .thenThrow(RuntimeException.class);

        // Call the method
        GetPageContentResponse response = contentServiceImpl.getPageContent(request);

        // Validate response
        assertNotNull(response);
    }

    private com.td.mbna.msec.midtier.content.payload.getlinkcontent.RequestPayload mockGetLinkContentRequestPayload() {
        com.td.mbna.msec.midtier.content.payload.getlinkcontent.RequestPayload payload = new com.td.mbna.msec.midtier.content.payload.getlinkcontent.RequestPayload();
        payload.setContentId("contentId");
        payload.setLangId("en");
        payload.setPath("path");
        return payload;
    }

    private com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload mockPageContentRequestPayload() {
        com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload payload = new com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload();
        payload.setPageId("123");
        payload.setLangId("en");
        return payload;
    }
}
