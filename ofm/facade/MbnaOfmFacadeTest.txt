package com.td.mbna.msec.midtier.ofm.facade;

import com.td.api.ofm.request.TSvcRetrieveCreditCardAgreementPartyFeatureListRq;
import com.td.api.ofm.response.TSvcRetrieveCreditCardAgreementPartyFeatureListRs;
import com.td.mbna.msec.midtier.eligibility.payload.getentitlementflags.GetEntitlementFlagsRequest;
import com.td.mbna.msec.midtier.eligibility.payload.getentitlementflags.GetEntitlementFlagsResponse;
import com.td.mbna.msec.midtier.ofm.adapter.MbnaOfmAdapter;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class MbnaOfmFacadeTest {

    @InjectMocks
    private MbnaOfmFacade mbnaOfmFacade;

    @Mock
    private MbnaOfmAdapter ofmAdapter;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private GetEntitlementFlagsRequest getEntitlementFlagsRequest;

    @Mock
    private TSvcRetrieveCreditCardAgreementPartyFeatureListRq tsvcRetrieveCreditCardAgreementPartyFeatureListRq;

    @Mock
    private TSvcRetrieveCreditCardAgreementPartyFeatureListRs tsvcRetrieveCreditCardAgreementPartyFeatureListRs;

    @Mock
    private HttpHeaders httpHeaders;

    @Mock
    private ResponseEntity<TSvcRetrieveCreditCardAgreementPartyFeatureListRs> responseEntity;

    @BeforeEach
    public void setUp() {
        mbnaOfmFacade = new MbnaOfmFacade();
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testRetrieveEligibility() {
        String connectId = "connectId";
        String token = "token";
        boolean chatElig = true;

        // Mock behavior
        when(ofmAdapter.buildTsvcRetrieveCreditCardAgreementPartyFeatureListRq(any())).thenReturn(tsvcRetrieveCreditCardAgreementPartyFeatureListRq);
        when(ofmAdapter.convert(any(), any(), anyBoolean())).thenReturn(new GetEntitlementFlagsResponse());

        TSvcRetrieveCreditCardAgreementPartyFeatureListRs response = mbnaOfmFacade.retrieveEligibility(getEntitlementFlagsRequest, chatElig, token);

        assertNotNull(response);
        verify(ofmAdapter, times(1)).buildTsvcRetrieveCreditCardAgreementPartyFeatureListRq(any());
        verify(ofmAdapter, times(1)).convert(any(), any(), anyBoolean());
    }

    @Test
    public void testRetrieveFeaturesList() {
        String connectId = "connectId";
        String cardNumber = "123456";
        String partyId = "partyId";
        String token = "token";

        UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString("https://api.com");

        // Mock behavior
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(TSvcRetrieveCreditCardAgreementPartyFeatureListRs.class)))
                .thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(tsvcRetrieveCreditCardAgreementPartyFeatureListRs);

        TSvcRetrieveCreditCardAgreementPartyFeatureListRs response = mbnaOfmFacade.retrieveFeaturesList(connectId, cardNumber, partyId, token);

        assertNotNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(TSvcRetrieveCreditCardAgreementPartyFeatureListRs.class));
    }

    @Test
    public void testRetrieveFeaturesList_withMockError() {
        System.setProperty("MOCK_OFM_API_ERROR", "true");

        String connectId = "connectId";
        String cardNumber = "123456";
        String partyId = "partyId";
        String token = "token";

        // Expecting a business exception due to mock error
        Exception exception = assertThrows(Exception.class, () -> {
            mbnaOfmFacade.retrieveFeaturesList(connectId, cardNumber, partyId, token);
        });

        assertTrue(exception.getMessage().contains("mock error for api down"));
    }

    @Test
    public void testRetrieveEligibility_withError() {
        String connectId = "connectId";
        String token = "token";

        // Mock error response
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(TSvcRetrieveCreditCardAgreementPartyFeatureListRs.class)))
                .thenThrow(new RuntimeException("Error"));

        TSvcRetrieveCreditCardAgreementPartyFeatureListRs response = mbnaOfmFacade.retrieveEligibility(connectId, tsvcRetrieveCreditCardAgreementPartyFeatureListRq, token);

        assertNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(TSvcRetrieveCreditCardAgreementPartyFeatureListRs.class));
    }

    @Test
    public void testPrepareHeader() {
        String connectId = "connectId";
        String token = "token";

        HttpHeaders headers = MbnaOfmFacade.prepareHeader(connectId, token);

        assertNotNull(headers);
        assertEquals(connectId, headers.get(MSECConstants.CONNECT_ID).get(0));
        assertEquals(token, headers.get(MSECConstants.AUTHORIZATION).get(0));
    }
}
