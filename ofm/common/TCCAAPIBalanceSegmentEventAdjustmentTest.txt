import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

public class TCCAAPIBalanceSegmentEventAdjustmentTest {

    private TCCAAPIBalanceSegmentEventAdjustment balanceSegmentEventAdjustment;

    @BeforeEach
    public void setUp() {
        balanceSegmentEventAdjustment = new TCCAAPIBalanceSegmentEventAdjustment();
    }

    @Test
    public void testGetAndSetTypeCd() {
        balanceSegmentEventAdjustment.setTypeCd("TypeCd1");
        assertEquals("TypeCd1", balanceSegmentEventAdjustment.getTypeCd());
    }

    @Test
    public void testGetAndSetTransactionAmt() {
        BigDecimal amount = new BigDecimal("100.50");
        balanceSegmentEventAdjustment.setTransactionAmt(amount);
        assertEquals(amount, balanceSegmentEventAdjustment.getTransactionAmt());
    }

    @Test
    public void testGetAndSetCreditCardAgreement() {
        TCCAAPICreditCardAgreementKey agreementKey = new TCCAAPICreditCardAgreementKey();
        balanceSegmentEventAdjustment.setCreditCardAgreement(agreementKey);
        assertEquals(agreementKey, balanceSegmentEventAdjustment.getCreditCardAgreement());
    }

    @Test
    public void testGetAndSetBalanceSegment() {
        TCCAAPIBalanceSegment balanceSegment = new TCCAAPIBalanceSegment();
        balanceSegmentEventAdjustment.setBalanceSegment(balanceSegment);
        assertEquals(balanceSegment, balanceSegmentEventAdjustment.getBalanceSegment());
    }

    @Test
    public void testGetAndSetOriginalTransaction() {
        TCCAAPITransaction originalTransaction = new TCCAAPITransaction();
        balanceSegmentEventAdjustment.setOriginalTransaction(originalTransaction);
        assertEquals(originalTransaction, balanceSegmentEventAdjustment.getOriginalTransaction());
    }

    @Test
    public void testToString() {
        balanceSegmentEventAdjustment.setTypeCd("TypeCd1");
        balanceSegmentEventAdjustment.setTransactionAmt(new BigDecimal("100.50"));

        TCCAAPICreditCardAgreementKey agreementKey = new TCCAAPICreditCardAgreementKey();
        balanceSegmentEventAdjustment.setCreditCardAgreement(agreementKey);

        TCCAAPIBalanceSegment balanceSegment = new TCCAAPIBalanceSegment();
        balanceSegmentEventAdjustment.setBalanceSegment(balanceSegment);

        TCCAAPITransaction originalTransaction = new TCCAAPITransaction();
        balanceSegmentEventAdjustment.setOriginalTransaction(originalTransaction);

        String expectedString = "com.td.api.ofm.common.TCCAAPIBalanceSegmentEventAdjustment@" +
                Integer.toHexString(balanceSegmentEventAdjustment.hashCode()) +
                "[typeCd=TypeCd1,transactionAmt=100.50,creditCardAgreement=" + agreementKey +
                ",balanceSegment=" + balanceSegment + ",originalTransaction=" + originalTransaction + "]";
        assertEquals(expectedString, balanceSegmentEventAdjustment.toString());
    }

    @Test
    public void testHashCode() {
        balanceSegmentEventAdjustment.setTypeCd("TypeCd1");
        balanceSegmentEventAdjustment.setTransactionAmt(new BigDecimal("100.50"));

        TCCAAPICreditCardAgreementKey agreementKey = new TCCAAPICreditCardAgreementKey();
        balanceSegmentEventAdjustment.setCreditCardAgreement(agreementKey);

        TCCAAPIBalanceSegment balanceSegment = new TCCAAPIBalanceSegment();
        balanceSegmentEventAdjustment.setBalanceSegment(balanceSegment);

        TCCAAPITransaction originalTransaction = new TCCAAPITransaction();
        balanceSegmentEventAdjustment.setOriginalTransaction(originalTransaction);

        TCCAAPIBalanceSegmentEventAdjustment anotherAdjustment = new TCCAAPIBalanceSegmentEventAdjustment();
        anotherAdjustment.setTypeCd("TypeCd1");
        anotherAdjustment.setTransactionAmt(new BigDecimal("100.50"));
        anotherAdjustment.setCreditCardAgreement(agreementKey);
        anotherAdjustment.setBalanceSegment(balanceSegment);
        anotherAdjustment.setOriginalTransaction(originalTransaction);

        assertEquals(balanceSegmentEventAdjustment.hashCode(), anotherAdjustment.hashCode());
    }

    @Test
    public void testEquals() {
        balanceSegmentEventAdjustment.setTypeCd("TypeCd1");
        balanceSegmentEventAdjustment.setTransactionAmt(new BigDecimal("100.50"));

        TCCAAPICreditCardAgreementKey agreementKey = new TCCAAPICreditCardAgreementKey();
        balanceSegmentEventAdjustment.setCreditCardAgreement(agreementKey);

        TCCAAPIBalanceSegment balanceSegment = new TCCAAPIBalanceSegment();
        balanceSegmentEventAdjustment.setBalanceSegment(balanceSegment);

        TCCAAPITransaction originalTransaction = new TCCAAPITransaction();
        balanceSegmentEventAdjustment.setOriginalTransaction(originalTransaction);

        TCCAAPIBalanceSegmentEventAdjustment equalAdjustment = new TCCAAPIBalanceSegmentEventAdjustment();
        equalAdjustment.setTypeCd("TypeCd1");
        equalAdjustment.setTransactionAmt(new BigDecimal("100.50"));
        equalAdjustment.setCreditCardAgreement(agreementKey);
        equalAdjustment.setBalanceSegment(balanceSegment);
        equalAdjustment.setOriginalTransaction(originalTransaction);

        assertTrue(balanceSegmentEventAdjustment.equals(equalAdjustment));

        TCCAAPIBalanceSegmentEventAdjustment notEqualAdjustment = new TCCAAPIBalanceSegmentEventAdjustment();
        notEqualAdjustment.setTypeCd("TypeCd2");
        notEqualAdjustment.setTransactionAmt(new BigDecimal("200.75"));

        TCCAAPICreditCardAgreementKey differentAgreementKey = new TCCAAPICreditCardAgreementKey();
        notEqualAdjustment.setCreditCardAgreement(differentAgreementKey);

        TCCAAPIBalanceSegment differentBalanceSegment = new TCCAAPIBalanceSegment();
        notEqualAdjustment.setBalanceSegment(differentBalanceSegment);

        TCCAAPITransaction differentOriginalTransaction = new TCCAAPITransaction();
        notEqualAdjustment.setOriginalTransaction(differentOriginalTransaction);

        assertFalse(balanceSegmentEventAdjustment.equals(notEqualAdjustment));
    }
}
