package com.td.api.ofm.common;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class TCCAEVAPIProductChangeEventAddInfoTest {

    private TCCAEVAPIProductChangeEventAddInfo productChangeEventAddInfo;

    @BeforeEach
    public void setUp() {
        productChangeEventAddInfo = new TCCAEVAPIProductChangeEventAddInfo();
    }

    @Test
    public void testGettersAndSetters() {
        TCCAEVAPIGenericAgreementAltkey agreementAltkey = new TCCAEVAPIGenericAgreementAltkey();
        agreementAltkey.setCardNum("12345");
        productChangeEventAddInfo.setAgreementAltkey(agreementAltkey);
        productChangeEventAddInfo.setProductId("productId");
        productChangeEventAddInfo.setEventReasonCd("reason");
        TCCAEVAPIProductChangeEventToParty party = new TCCAEVAPIProductChangeEventToParty();
        productChangeEventAddInfo.setParty(party);
        productChangeEventAddInfo.setOriginatingUserId("userId");
        productChangeEventAddInfo.setOriginatingUserFunctionCd("functionCd");
        productChangeEventAddInfo.setSolicitationChannelTypeCd("channelType");
        productChangeEventAddInfo.setAccessChannelTypeCd("accessChannelType");

        assertEquals(agreementAltkey, productChangeEventAddInfo.getAgreementAltkey());
        assertEquals("productId", productChangeEventAddInfo.getProductId());
        assertEquals("reason", productChangeEventAddInfo.getEventReasonCd());
        assertEquals(party, productChangeEventAddInfo.getParty());
        assertEquals("userId", productChangeEventAddInfo.getOriginatingUserId());
        assertEquals("functionCd", productChangeEventAddInfo.getOriginatingUserFunctionCd());
        assertEquals("channelType", productChangeEventAddInfo.getSolicitationChannelTypeCd());
        assertEquals("accessChannelType", productChangeEventAddInfo.getAccessChannelTypeCd());
    }

    @Test
    public void testToString() {
        productChangeEventAddInfo.setProductId("productId");
        productChangeEventAddInfo.setEventReasonCd("reason");
        productChangeEventAddInfo.setOriginatingUserId("userId");
        productChangeEventAddInfo.setOriginatingUserFunctionCd("functionCd");
        productChangeEventAddInfo.setSolicitationChannelTypeCd("channelType");
        productChangeEventAddInfo.setAccessChannelTypeCd("accessChannelType");

        String expectedString = "com.td.api.ofm.common.TCCAEVAPIProductChangeEventAddInfo@" +
            Integer.toHexString(productChangeEventAddInfo.hashCode()) +
            "[agreementAltkey=<null>,productId=productId,eventReasonCd=reason,party=<null>,originatingUserId=userId,originatingUserFunctionCd=functionCd,solicitationChannelTypeCd=channelType,accessChannelTypeCd=accessChannelType]";

        assertEquals(expectedString, productChangeEventAddInfo.toString());

        productChangeEventAddInfo.setProductId(null);
        expectedString = "com.td.api.ofm.common.TCCAEVAPIProductChangeEventAddInfo@" +
            Integer.toHexString(productChangeEventAddInfo.hashCode()) +
            "[agreementAltkey=<null>,productId=<null>,eventReasonCd=reason,party=<null>,originatingUserId=userId,originatingUserFunctionCd=functionCd,solicitationChannelTypeCd=channelType,accessChannelTypeCd=accessChannelType]";

        assertEquals(expectedString, productChangeEventAddInfo.toString());
    }

    @Test
    public void testHashCode() {
        productChangeEventAddInfo.setProductId("productId");
        productChangeEventAddInfo.setEventReasonCd("reason");
        productChangeEventAddInfo.setOriginatingUserId("userId");
        productChangeEventAddInfo.setOriginatingUserFunctionCd("functionCd");
        productChangeEventAddInfo.setSolicitationChannelTypeCd("channelType");
        productChangeEventAddInfo.setAccessChannelTypeCd("accessChannelType");

        int expectedHashCode = 1;
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getProductId() != null ? productChangeEventAddInfo.getProductId().hashCode() : 0);
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getEventReasonCd() != null ? productChangeEventAddInfo.getEventReasonCd().hashCode() : 0);
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getOriginatingUserId() != null ? productChangeEventAddInfo.getOriginatingUserId().hashCode() : 0);
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getOriginatingUserFunctionCd() != null ? productChangeEventAddInfo.getOriginatingUserFunctionCd().hashCode() : 0);
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getSolicitationChannelTypeCd() != null ? productChangeEventAddInfo.getSolicitationChannelTypeCd().hashCode() : 0);
        expectedHashCode = 31 * expectedHashCode + (productChangeEventAddInfo.getAccessChannelTypeCd() != null ? productChangeEventAddInfo.getAccessChannelTypeCd().hashCode() : 0);

        assertEquals(expectedHashCode, productChangeEventAddInfo.hashCode());
    }

    @Test
    public void testEquals() {
        TCCAEVAPIProductChangeEventAddInfo other = new TCCAEVAPIProductChangeEventAddInfo();
        productChangeEventAddInfo.setProductId("productId");
        productChangeEventAddInfo.setEventReasonCd("reason");
        productChangeEventAddInfo.setOriginatingUserId("userId");
        productChangeEventAddInfo.setOriginatingUserFunctionCd("functionCd");
        productChangeEventAddInfo.setSolicitationChannelTypeCd("channelType");
        productChangeEventAddInfo.setAccessChannelTypeCd("accessChannelType");

        other.setProductId("productId");
        other.setEventReasonCd("reason");
        other.setOriginatingUserId("userId");
        other.setOriginatingUserFunctionCd("functionCd");
        other.setSolicitationChannelTypeCd("channelType");
        other.setAccessChannelTypeCd("accessChannelType");

        assertTrue(productChangeEventAddInfo.equals(other));

        other.setProductId("differentProductId");
        assertFalse(productChangeEventAddInfo.equals(other));

        other.setProductId(null);
        assertFalse(productChangeEventAddInfo.equals(other));

        productChangeEventAddInfo.setProductId(null);
        assertTrue(productChangeEventAddInfo.equals(other));

        assertTrue(productChangeEventAddInfo.equals(productChangeEventAddInfo));
        assertFalse(productChangeEventAddInfo.equals(new Object()));
    }
}
