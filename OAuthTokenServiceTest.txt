import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.coreapi.common.oauthsdk.model.OAuthRequest;
import com.td.coreapi.common.oauthsdk.model.OAuthResponse;
import com.td.coreapi.common.oauthsdk.service.OAuthSDKService;
import com.td.coreapi.common.security.AccessTokenClaims;
import com.td.coreapi.common.security.JwtHelper;
import com.td.mbna.msec.common.domain.OAuthData;
import com.td.mbna.msec.core.support.UapConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.security.SecureRandom;
import java.util.Collections;
import java.util.List;

public class OAuthTokenServiceTest {

    @InjectMocks
    private OAuthTokenServiceImpl oauthTokenService;

    @Mock
    private OAuthSDKService oauthSDKService;

    @Mock
    private AccessTokenClaims accessTokenClaims;

    @Mock
    private JwtHelper jwtHelper;

    @Mock
    private OAuthResponse oauthResponse;

    @Mock
    private OAuthData oauthData;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAccessTokenFromPing_Success() throws Exception {
        String authCode = "authCode";
        String key = "key";
        String redirectUri = "redirectUri";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenReturn(oauthResponse);
        when(oauthResponse.getAccessToken()).thenReturn("accessToken");
        when(oauthResponse.getAccessTokenClaims()).thenReturn(accessTokenClaims);
        when(accessTokenClaims.getScope()).thenReturn(Collections.singletonList("requiredScope"));

        String token = oauthTokenService.getAccessTokenFromPing(authCode, key, redirectUri);
        assertNotNull(token);
        assertEquals("accessToken", token);
    }

    @Test
    void testGetAccessTokenFromPing_Failure_NullResponse() throws Exception {
        String authCode = "authCode";
        String key = "key";
        String redirectUri = "redirectUri";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenReturn(null);

        String token = oauthTokenService.getAccessTokenFromPing(authCode, key, redirectUri);
        assertNull(token);
    }

    @Test
    void testGetTokenAuthResponse_Success() throws Exception {
        String authCode = "authCode";
        String key = "key";
        String redirectUri = "redirectUri";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenReturn(oauthResponse);

        OAuthResponse response = oauthTokenService.getTokenAuthResponse(authCode, key, redirectUri);
        assertNotNull(response);
    }

    @Test
    void testGetTokenAuthResponse_Exception() throws Exception {
        String authCode = "authCode";
        String key = "key";
        String redirectUri = "redirectUri";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenThrow(new RuntimeException("Error"));

        OAuthResponse response = oauthTokenService.getTokenAuthResponse(authCode, key, redirectUri);
        assertNull(response);
    }

    @Test
    void testGetOAuthData_Success() {
        String oauthToken = "oauthToken";
        when(jwtHelper.verifyJwt(oauthToken)).thenReturn(accessTokenClaims);
        when(accessTokenClaims.getUserId()).thenReturn("userId");
        when(accessTokenClaims.getExp()).thenReturn(1000L);
        
        OAuthData data = oauthTokenService.getOAuthData(oauthToken);
        assertNotNull(data);
        assertEquals("userId", data.getConnectId());
        assertEquals(oauthToken, data.getToken());
        assertEquals(1000L, data.getExpiry());
    }

    @Test
    void testGetOAuthData_Exception() {
        String oauthToken = "oauthToken";
        when(jwtHelper.verifyJwt(oauthToken)).thenThrow(new RuntimeException("JWT verification error"));

        assertThrows(SecurityException.class, () -> {
            oauthTokenService.getOAuthData(oauthToken);
        });
    }

    @Test
    void testGetSAMLforJWT_Success() {
        String jwtToken = "jwtToken";
        when(oauthSDKService.getSAML(any(OAuthRequest.class))).thenReturn(new OAuthSAMLResponse("SAMLString"));

        String saml = oauthTokenService.getSAMLforJWT(jwtToken);
        assertEquals("SAMLString", saml);
    }

    @Test
    void testGetSAMLforJWT_Exception() {
        String jwtToken = "jwtToken";
        when(oauthSDKService.getSAML(any(OAuthRequest.class))).thenThrow(new RuntimeException("Error"));

        assertThrows(SecurityException.class, () -> {
            oauthTokenService.getSAMLforJWT(jwtToken);
        });
    }

    @Test
    void testIsValidSaml_Success() throws Exception {
        String samlToken = "samlToken";
        String connectID = "connectId";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenReturn(oauthResponse);
        when(oauthResponse.getAccessTokenClaims()).thenReturn(accessTokenClaims);
        when(accessTokenClaims.getUserId()).thenReturn(connectID);

        boolean valid = oauthTokenService.isValidSaml(samlToken, connectID);
        assertTrue(valid);
    }

    @Test
    void testIsValidSaml_Failure() throws Exception {
        String samlToken = "samlToken";
        String connectID = "connectId";
        when(oauthSDKService.getToken(any(OAuthRequest.class))).thenReturn(oauthResponse);
        when(oauthResponse.getAccessTokenClaims()).thenReturn(accessTokenClaims);
        when(accessTokenClaims.getUserId()).thenReturn("differentConnectId");

        boolean valid = oauthTokenService.isValidSaml(samlToken, connectID);
        assertFalse(valid);
    }

    @Test
    void testNonceGenerator() {
        String nonce = oauthTokenService.nonceGenerator();
        assertEquals(15, nonce.length());
        assertTrue(nonce.matches("\\d{15}")); // Check if the nonce consists of digits only
    }

    @Test
    void testGetChannelID_UgoApp() {
        String channelId = oauthTokenService.getChannelID(true);
        assertEquals(UAP_CHANNEL_ID_MOBILE_APP, channelId);
    }

    @Test
    void testGetChannelID_NotUgoApp() {
        String channelId = oauthTokenService.getChannelID(false);
        assertEquals(UAP_CHANNEL_ID, channelId);
    }

    @Test
    void testGetTsnConsumerAppID() {
        String appId = oauthTokenService.getTsnConsumerAppID();
        assertEquals(UAP_TNS_CUSTOMER_APP_ID, appId);
    }
}
