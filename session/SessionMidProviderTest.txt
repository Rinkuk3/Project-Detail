package com.td.mbna.msec.midtier.session;

import org.apache.commons.lang3.Validate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SessionMidProviderTest {

    @Mock
    private SessionService mockSessionService;

    @InjectMocks
    private SessionMidProvider sessionMidProvider;

    @Mock
    private Map<String, Object> mockSessionMap;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetSessionMap() {
        // Mock the session service and the session map
        when(mockSessionService.getSession()).thenReturn(mockSessionMap);

        // Call the method
        Map<String, Object> session = sessionMidProvider.getSessionMap();

        // Verify that the session map is returned and not null
        assertNotNull(session);
        verify(mockSessionService, times(1)).getSession();
    }

    @Test
    void testGetSessionMap_WhenSessionIsNull() {
        // Mock the session service to return null
        when(mockSessionService.getSession()).thenReturn(null);

        // Call the method and verify the exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> sessionMidProvider.getSessionMap());
        assertEquals("Session should not be null", exception.getMessage());
    }

    @Test
    void testGetSessionAttribute() {
        String key = "testKey";
        Object value = "testValue";
        
        // Mock the session map to return the correct value for the key
        when(mockSessionService.getSession()).thenReturn(mockSessionMap);
        when(mockSessionMap.get(key)).thenReturn(value);

        // Call the method
        Object returnedValue = sessionMidProvider.getSessionAttribute(key);

        // Verify the returned value is as expected
        assertEquals(value, returnedValue);
        verify(mockSessionMap, times(1)).get(key);
    }

    @Test
    void testGetSessionAttribute_WhenSessionIsNull() {
        String key = "testKey";

        // Mock the session service to return null
        when(mockSessionService.getSession()).thenReturn(null);

        // Call the method and verify the exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> sessionMidProvider.getSessionAttribute(key));
        assertEquals("Session should not be null", exception.getMessage());
    }

    @Test
    void testSetSessionAttribute() {
        String key = "testKey";
        Object value = "testValue";

        // Mock the session service to return the session map
        when(mockSessionService.getSession()).thenReturn(mockSessionMap);

        // Call the method
        Object oldValue = sessionMidProvider.setSessionAttribute(key, value);

        // Verify the session map's put method was called
        verify(mockSessionMap, times(1)).put(key, value);
        assertNull(oldValue);  // Since no value is expected to be returned, assuming no previous value
    }

    @Test
    void testSetSessionAttribute_WhenSessionIsNull() {
        String key = "testKey";
        Object value = "testValue";

        // Mock the session service to return null
        when(mockSessionService.getSession()).thenReturn(null);

        // Call the method and verify the exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> sessionMidProvider.setSessionAttribute(key, value));
        assertEquals("Session should not be null", exception.getMessage());
    }

    @Test
    void testRemoveSessionAttribute() {
        String key = "testKey";

        // Mock the session service to return the session map
        when(mockSessionService.getSession()).thenReturn(mockSessionMap);

        // Call the method
        sessionMidProvider.removeSessionAttribute(key);

        // Verify the session map's remove method was called
        verify(mockSessionMap, times(1)).remove(key);
    }

    @Test
    void testRemoveSessionAttribute_WhenSessionIsNull() {
        String key = "testKey";

        // Mock the session service to return null
        when(mockSessionService.getSession()).thenReturn(null);

        // Call the method and verify the exception
        Exception exception = assertThrows(IllegalArgumentException.class, () -> sessionMidProvider.removeSessionAttribute(key));
        assertEquals("Session should not be null", exception.getMessage());
    }
}
