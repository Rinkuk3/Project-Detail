package com.td.mbna.msec.midtier.session;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.Collections;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SessionDataMapTest {

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private HttpSession mockSession;

    private SessionDataMap<String, Object> sessionDataMap;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(mockRequest.getSession(false)).thenReturn(mockSession);
        sessionDataMap = new SessionDataMap<>(mockRequest);
    }

    @Test
    void testInvalidate() {
        // Call invalidate method
        sessionDataMap.invalidate();
        
        // Verify session.invalidate() is called once
        verify(mockSession).invalidate();
    }

    @Test
    void testClear() {
        // Prepare mock to return session attributes
        when(mockSession.getAttributeNames()).thenReturn(Collections.enumeration(Collections.singleton("key")));
        when(mockSession.getAttribute("key")).thenReturn("value");
        
        // Call clear method
        sessionDataMap.clear();

        // Verify session.removeAttribute is called once for the key
        verify(mockSession).removeAttribute("key");
    }

    @Test
    void testEntrySet() {
        // Prepare mock to return session attributes
        when(mockSession.getAttributeNames()).thenReturn(Collections.enumeration(Collections.singleton("key")));
        when(mockSession.getAttribute("key")).thenReturn("value");

        // Get the entry set
        var entrySet = sessionDataMap.entrySet();
        
        // Verify the entry set is not empty
        assertNotNull(entrySet);
        assertEquals(1, entrySet.size());
        
        // Verify the key-value pair in the entry set
        Map.Entry<String, Object> entry = entrySet.iterator().next();
        assertEquals("key", entry.getKey());
        assertEquals("value", entry.getValue());
    }

    @Test
    void testGet() {
        // Prepare mock session attributes
        when(mockSession.getAttribute("key")).thenReturn("value");
        
        // Test get method
        Object value = sessionDataMap.get("key");
        
        // Verify the returned value
        assertEquals("value", value);
    }

    @Test
    void testPut() {
        // Test the put method
        sessionDataMap.put("key", "value");

        // Verify session.setAttribute() was called with the correct arguments
        verify(mockSession).setAttribute("key", "value");
    }

    @Test
    void testRemove() {
        // Prepare mock to return session attributes
        when(mockSession.getAttribute("key")).thenReturn("value");
        
        // Test the remove method
        Object removedValue = sessionDataMap.remove("key");
        
        // Verify session.removeAttribute() was called
        verify(mockSession).removeAttribute("key");
        
        // Verify the returned value is correct
        assertEquals("value", removedValue);
    }

    @Test
    void testContainsKey() {
        // Prepare mock to return session attributes
        when(mockSession.getAttribute("key")).thenReturn("value");
        
        // Test containsKey method
        boolean contains = sessionDataMap.containsKey("key");
        
        // Verify the result
        assertTrue(contains);
    }

    @Test
    void testContainsKey_sessionNull() {
        // Simulate no session
        when(mockRequest.getSession(false)).thenReturn(null);
        
        // Test containsKey when session is null
        boolean contains = sessionDataMap.containsKey("key");
        
        // Verify the result
        assertFalse(contains);
    }
}
