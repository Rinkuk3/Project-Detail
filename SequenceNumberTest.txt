package com.td.mbna.msec.midtier.account.payload.getaccountsnapshot;

import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class SequenceNumberTest {

    @Test
    void testGettersAndSetters() {
        SequenceNumber sequenceNumber = new SequenceNumber();

        // Test name
        assertNull(sequenceNumber.getName(), "Name should initially be null.");
        sequenceNumber.setName("TestName");
        assertEquals("TestName", sequenceNumber.getName(), "Name should be set correctly.");

        // Test declaredType
        assertNull(sequenceNumber.getDeclaredType(), "DeclaredType should initially be null.");
        sequenceNumber.setDeclaredType("DeclaredTypeValue");
        assertEquals("DeclaredTypeValue", sequenceNumber.getDeclaredType(), "DeclaredType should be set correctly.");

        // Test scope
        assertNull(sequenceNumber.getScope(), "Scope should initially be null.");
        sequenceNumber.setScope("GlobalScope");
        assertEquals("GlobalScope", sequenceNumber.getScope(), "Scope should be set correctly.");

        // Test value
        assertNull(sequenceNumber.getValue(), "Value should initially be null.");
        sequenceNumber.setValue(42);
        assertEquals(42, sequenceNumber.getValue(), "Value should be set correctly.");

        // Test nil
        assertNull(sequenceNumber.getNil(), "Nil should initially be null.");
        sequenceNumber.setNil(true);
        assertTrue(sequenceNumber.getNil(), "Nil should be set to true.");
        sequenceNumber.setNil(false);
        assertFalse(sequenceNumber.getNil(), "Nil should be set to false.");

        // Test globalScope
        assertNull(sequenceNumber.getGlobalScope(), "GlobalScope should initially be null.");
        sequenceNumber.setGlobalScope(true);
        assertTrue(sequenceNumber.getGlobalScope(), "GlobalScope should be set to true.");
        sequenceNumber.setGlobalScope(false);
        assertFalse(sequenceNumber.getGlobalScope(), "GlobalScope should be set to false.");

        // Test typeSubstituted
        assertNull(sequenceNumber.getTypeSubstituted(), "TypeSubstituted should initially be null.");
        sequenceNumber.setTypeSubstituted(true);
        assertTrue(sequenceNumber.getTypeSubstituted(), "TypeSubstituted should be set to true.");
        sequenceNumber.setTypeSubstituted(false);
        assertFalse(sequenceNumber.getTypeSubstituted(), "TypeSubstituted should be set to false.");

        // Test additionalProperties
        Map<String, Object> additionalProperties = sequenceNumber.getAdditionalProperties();
        assertNotNull(additionalProperties, "AdditionalProperties map should not be null.");
        assertTrue(additionalProperties.isEmpty(), "AdditionalProperties map should initially be empty.");

        sequenceNumber.setAdditionalProperty("key1", "value1");
        assertEquals(1, sequenceNumber.getAdditionalProperties().size(), "AdditionalProperties map should have one entry.");
        assertEquals("value1", sequenceNumber.getAdditionalProperties().get("key1"), "AdditionalProperties map should contain the correct value.");

        sequenceNumber.setAdditionalProperty("key2", 12345);
        assertEquals(2, sequenceNumber.getAdditionalProperties().size(), "AdditionalProperties map should have two entries.");
        assertEquals(12345, sequenceNumber.getAdditionalProperties().get("key2"), "AdditionalProperties map should contain the correct value for the second entry.");
    }
}
