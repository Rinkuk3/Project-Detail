package com.td.mbna.msec.midtier.account.payload.deleteaccount;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import java.util.Map;

class DeleteAccountResponseTest {

    @Test
    void testGettersAndSetters() {
        DeleteAccountResponse response = new DeleteAccountResponse();

        // Test responsePayload setter and getter
        Object payload = new Object();
        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());

        // Test additionalProperties setter and getter
        response.setAdditionalProperty("key1", "value1");
        response.setAdditionalProperty("key2", 42);
        Map<String, Object> additionalProperties = response.getAdditionalProperties();

        assertNotNull(additionalProperties);
        assertEquals(2, additionalProperties.size());
        assertEquals("value1", additionalProperties.get("key1"));
        assertEquals(42, additionalProperties.get("key2"));
    }

    @Test
    void testAdditionalPropertyOverride() {
        DeleteAccountResponse response = new DeleteAccountResponse();

        // Add and override a property
        response.setAdditionalProperty("key", "initialValue");
        assertEquals("initialValue", response.getAdditionalProperties().get("key"));

        response.setAdditionalProperty("key", "newValue");
        assertEquals("newValue", response.getAdditionalProperties().get("key"));
    }

    @Test
    void testEmptyAdditionalProperties() {
        DeleteAccountResponse response = new DeleteAccountResponse();

        // Verify that additionalProperties is initially empty
        assertTrue(response.getAdditionalProperties().isEmpty());
    }

    @Test
    void testNullResponsePayload() {
        DeleteAccountResponse response = new DeleteAccountResponse();

        // Set and retrieve a null payload
        response.setResponsePayload(null);
        assertNull(response.getResponsePayload());
    }
}
