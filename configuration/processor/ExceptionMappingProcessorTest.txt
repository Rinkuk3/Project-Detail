package com.td.mbna.msec.midtier.configuration.processor;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import com.td.mbna.msec.midtier.configuration.beans.ExceptionInfoBean;
import com.td.mbna.msec.midtier.configuration.beans.ExceptionInfoBeanForJson;
import com.td.mbna.msec.midtier.util.ConfigUtil;
import com.td.mbna.msec.midtier.util.XMLGregorianCalendarConverter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import java.util.*;
import java.util.regex.Pattern;

public class ExceptionMappingProcessorTest {

    @Mock
    private ConfigUtil configUtil;
    @Mock
    private Gson gson;
    @Mock
    private MbnaLogger logger;
    @InjectMocks
    private ExceptionMappingProcessor processor;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        processor = new ExceptionMappingProcessor();
    }

    @Test
    public void testInit() {
        processor.init();
        // Just to verify no exceptions are thrown during initialization
    }

    @Test
    public void testGetMappedExceptionWithValidParameters() throws Exception {
        Map<String, String> mockExceptionInfo = new HashMap<>();
        mockExceptionInfo.put("Exception-Classification", "Error");
        mockExceptionInfo.put("ErrorCode", "TSYS_RetrieveTX_DEFAULT");
        mockExceptionInfo.put("ErrorDescription", "Sample Description");
        mockExceptionInfo.put("Severity", "ERROR");

        when(ExceptionMappingProcessor.getExceptionInfoFromCode(
                anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(mockExceptionInfo);

        ExceptionInfoBean exceptionInfoBean = processor.getMappedException("TSYS", "ERROR_CODE", "AUX_CODE", "BE_ISSUER", "BE_CODE", "ERROR", "DEFAULT");
        assertNotNull(exceptionInfoBean);
        assertEquals("Error", exceptionInfoBean.getExceptionClassification());
        assertEquals("TSYS_RetrieveTX_DEFAULT", exceptionInfoBean.getErrorCode());
        assertEquals("Sample Description", exceptionInfoBean.getErrorDescription());
        assertEquals("ERROR", exceptionInfoBean.getSeverity());
    }

    @Test
    public void testGetMappedExceptionWithDefaultCode() throws Exception {
        Map<String, String> mockExceptionInfo = new HashMap<>();
        mockExceptionInfo.put("Exception-Classification", "System");
        mockExceptionInfo.put("ErrorCode", "MS502");
        mockExceptionInfo.put("ErrorDescription", "System Error");
        mockExceptionInfo.put("Severity", "ERROR");

        when(ExceptionMappingProcessor.getExceptionInfoFromCode(
                anyString(), anyString(), anyString(), anyString(), anyString(), anyString()))
                .thenReturn(mockExceptionInfo);

        ExceptionInfoBean exceptionInfoBean = processor.getMappedException("TSYS", "", "AUX_CODE", "BE_ISSUER", "BE_CODE", "ERROR", "DEFAULT");
        assertNotNull(exceptionInfoBean);
        assertEquals("System", exceptionInfoBean.getExceptionClassification());
        assertEquals("MS502", exceptionInfoBean.getErrorCode());
        assertEquals("System Error", exceptionInfoBean.getErrorDescription());
        assertEquals("ERROR", exceptionInfoBean.getSeverity());
    }

    @Test
    public void testCreateExceptionInfoBeanFromDetails() {
        Map<String, String> errorDetails = new HashMap<>();
        errorDetails.put("code", "TSYS");
        errorDetails.put("auxCode", "ERROR");
        errorDetails.put("desc", "Error Description");
        errorDetails.put("severity", "ERROR");

        ExceptionInfoBean exceptionInfoBean = processor.createExceptionInfoBeanFromDetails(errorDetails);
        assertNotNull(exceptionInfoBean);
        assertEquals("SYSTEM", exceptionInfoBean.getExceptionClassification());
        assertEquals("TSYS/ERROR", exceptionInfoBean.getErrorCode());
        assertEquals("Error Description", exceptionInfoBean.getErrorDescription());
        assertEquals("ERROR", exceptionInfoBean.getSeverity());
    }

    @Test
    public void testMapErrorType() {
        assertEquals(ErrorType.ERROR, processor.mapErrorType("ERROR"));
        assertEquals(ErrorType.WARN, processor.mapErrorType("WARNING"));
        assertEquals(ErrorType.INFO, processor.mapErrorType("INFO"));
    }

    @Test
    public void testBeCodePatternMatched() {
        Map<String, String> mockExceptionInfo = new HashMap<>();
        mockExceptionInfo.put("beCodePattern", "^BE_CODE.*");

        boolean matched = processor.beCodePatternMatched(mockExceptionInfo, "BE_CODE_SAMPLE");
        assertTrue(matched);

        matched = processor.beCodePatternMatched(mockExceptionInfo, "OTHER_CODE");
        assertFalse(matched);
    }

    @Test
    public void testPopulateMappingsForJson() {
        String jsonFilePath = "mockFilePath/ExceptionMappingMidTier.json";
        List<ExceptionInfoBeanForJson> exceptionList = new ArrayList<>();
        ExceptionInfoBeanForJson exceptionInfo = new ExceptionInfoBeanForJson();
        exceptionInfo.setOriginator("TSYS");
        exceptionInfo.setLevelCode("ERROR_CODE");
        exceptionInfo.setAuxCode("AUX_CODE");
        exceptionInfo.setErrorCode("TSYS_RetrieveTX_DEFAULT");
        exceptionInfo.setSeverity("ERROR");
        exceptionList.add(exceptionInfo);

        when(ApiConfig.getInstance().getStringFromFile(anyString())).thenReturn("{...}");

        Map<String, Map<String, String>> mappings = ExceptionMappingProcessor.populateMappingsForJson();
        assertNotNull(mappings);
        assertTrue(mappings.containsKey("TSYS-ERROR_CODE-AUX_CODE-BE_ISSUER"));
    }

    @Test
    public void testGenTsysErrorInfoKey() {
        String key = ExceptionMappingProcessor.genTsysErrorInfoKey("TSYS", "ERROR_CODE", "AUX_CODE", "BE_ISSUER");
        assertEquals("TSYS-ERROR_CODE-AUX_CODE-BE_ISSUER", key);
    }
}
