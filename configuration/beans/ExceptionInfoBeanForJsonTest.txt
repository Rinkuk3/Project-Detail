import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ExceptionInfoBeanForJsonTest {

    @Test
    void testGetSetOriginator() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String originator = "Originator123";
        exceptionInfoBeanForJson.setOriginator(originator);
        assertEquals(originator, exceptionInfoBeanForJson.getOriginator());
    }

    @Test
    void testGetSetLevelCode() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String levelCode = "Level1";
        exceptionInfoBeanForJson.setLevelCode(levelCode);
        assertEquals(levelCode, exceptionInfoBeanForJson.getLevelCode());
    }

    @Test
    void testGetSetAuxCode() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String auxCode = "AuxCode123";
        exceptionInfoBeanForJson.setAuxCode(auxCode);
        assertEquals(auxCode, exceptionInfoBeanForJson.getAuxCode());
    }

    @Test
    void testGetSetClassification() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String classification = "ClassificationA";
        exceptionInfoBeanForJson.setClassification(classification);
        assertEquals(classification, exceptionInfoBeanForJson.getClassification());
    }

    @Test
    void testGetSetErrorCode() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String errorCode = "E123";
        exceptionInfoBeanForJson.setErrorCode(errorCode);
        assertEquals(errorCode, exceptionInfoBeanForJson.getErrorCode());
    }

    @Test
    void testGetSetSeverity() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String severity = "High";
        exceptionInfoBeanForJson.setSeverity(severity);
        assertEquals(severity, exceptionInfoBeanForJson.getSeverity());
    }

    @Test
    void testGetSetDescription() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String description = "Description of the error";
        exceptionInfoBeanForJson.setDescription(description);
        assertEquals(description, exceptionInfoBeanForJson.getDescription());
    }

    @Test
    void testGetSetBeIssuer() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String beIssuer = "Issuer123";
        exceptionInfoBeanForJson.setBeIssuer(beIssuer);
        assertEquals(beIssuer, exceptionInfoBeanForJson.getBeIssuer());
    }

    @Test
    void testGetSetBeCodePattern() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        String beCodePattern = "Pattern123";
        exceptionInfoBeanForJson.setBeCodePattern(beCodePattern);
        assertEquals(beCodePattern, exceptionInfoBeanForJson.getBeCodePattern());
    }

    @Test
    void testToString() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        exceptionInfoBeanForJson.setOriginator("Originator123");
        exceptionInfoBeanForJson.setLevelCode("Level1");
        exceptionInfoBeanForJson.setAuxCode("AuxCode123");
        exceptionInfoBeanForJson.setClassification("ClassificationA");
        exceptionInfoBeanForJson.setErrorCode("E123");
        exceptionInfoBeanForJson.setSeverity("High");
        exceptionInfoBeanForJson.setDescription("Description of the error");
        exceptionInfoBeanForJson.setBeIssuer("Issuer123");
        exceptionInfoBeanForJson.setBeCodePattern("Pattern123");

        String result = exceptionInfoBeanForJson.toString();
        assertNotNull(result);
        assertTrue(result.contains("originator"));
        assertTrue(result.contains("levelCode"));
        assertTrue(result.contains("auxCode"));
        assertTrue(result.contains("classification"));
        assertTrue(result.contains("errorCode"));
        assertTrue(result.contains("severity"));
        assertTrue(result.contains("description"));
        assertTrue(result.contains("beIssuer"));
        assertTrue(result.contains("beCodePattern"));
    }

    @Test
    void testEquals() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson1 = new ExceptionInfoBeanForJson();
        ExceptionInfoBeanForJson exceptionInfoBeanForJson2 = new ExceptionInfoBeanForJson();
        
        exceptionInfoBeanForJson1.setOriginator("Originator123");
        exceptionInfoBeanForJson1.setLevelCode("Level1");
        exceptionInfoBeanForJson1.setAuxCode("AuxCode123");
        exceptionInfoBeanForJson1.setClassification("ClassificationA");
        exceptionInfoBeanForJson1.setErrorCode("E123");
        exceptionInfoBeanForJson1.setSeverity("High");
        exceptionInfoBeanForJson1.setDescription("Description of the error");
        exceptionInfoBeanForJson1.setBeIssuer("Issuer123");
        exceptionInfoBeanForJson1.setBeCodePattern("Pattern123");

        exceptionInfoBeanForJson2.setOriginator("Originator123");
        exceptionInfoBeanForJson2.setLevelCode("Level1");
        exceptionInfoBeanForJson2.setAuxCode("AuxCode123");
        exceptionInfoBeanForJson2.setClassification("ClassificationA");
        exceptionInfoBeanForJson2.setErrorCode("E123");
        exceptionInfoBeanForJson2.setSeverity("High");
        exceptionInfoBeanForJson2.setDescription("Description of the error");
        exceptionInfoBeanForJson2.setBeIssuer("Issuer123");
        exceptionInfoBeanForJson2.setBeCodePattern("Pattern123");

        assertTrue(exceptionInfoBeanForJson1.equals(exceptionInfoBeanForJson2));

        exceptionInfoBeanForJson2.setOriginator("Originator456");
        assertFalse(exceptionInfoBeanForJson1.equals(exceptionInfoBeanForJson2));
    }

    @Test
    void testHashCode() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson1 = new ExceptionInfoBeanForJson();
        ExceptionInfoBeanForJson exceptionInfoBeanForJson2 = new ExceptionInfoBeanForJson();
        
        exceptionInfoBeanForJson1.setOriginator("Originator123");
        exceptionInfoBeanForJson1.setLevelCode("Level1");
        exceptionInfoBeanForJson1.setAuxCode("AuxCode123");
        exceptionInfoBeanForJson1.setClassification("ClassificationA");
        exceptionInfoBeanForJson1.setErrorCode("E123");
        exceptionInfoBeanForJson1.setSeverity("High");
        exceptionInfoBeanForJson1.setDescription("Description of the error");
        exceptionInfoBeanForJson1.setBeIssuer("Issuer123");
        exceptionInfoBeanForJson1.setBeCodePattern("Pattern123");

        exceptionInfoBeanForJson2.setOriginator("Originator123");
        exceptionInfoBeanForJson2.setLevelCode("Level1");
        exceptionInfoBeanForJson2.setAuxCode("AuxCode123");
        exceptionInfoBeanForJson2.setClassification("ClassificationA");
        exceptionInfoBeanForJson2.setErrorCode("E123");
        exceptionInfoBeanForJson2.setSeverity("High");
        exceptionInfoBeanForJson2.setDescription("Description of the error");
        exceptionInfoBeanForJson2.setBeIssuer("Issuer123");
        exceptionInfoBeanForJson2.setBeCodePattern("Pattern123");

        assertEquals(exceptionInfoBeanForJson1.hashCode(), exceptionInfoBeanForJson2.hashCode());
    }

    @Test
    void testEqualsWithDifferentObjectType() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        assertFalse(exceptionInfoBeanForJson.equals(new Object()));
    }

    @Test
    void testEqualsWithNull() {
        ExceptionInfoBeanForJson exceptionInfoBeanForJson = new ExceptionInfoBeanForJson();
        assertFalse(exceptionInfoBeanForJson.equals(null));
    }
}
