import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.util.GregorianCalendar;

class ConsentDocBaseDetailTest {

    @Test
    void testGetSetDate() throws Exception {
        ConsentDocBaseDetail consentDocBaseDetail = new ConsentDocBaseDetail();
        XMLGregorianCalendar calendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
        consentDocBaseDetail.setDate(calendar);
        assertEquals(calendar, consentDocBaseDetail.getDate());
    }

    @Test
    void testGetSetDocTypeCode() {
        ConsentDocBaseDetail consentDocBaseDetail = new ConsentDocBaseDetail();
        String docTypeCode = "SampleDocType";
        consentDocBaseDetail.setDocTypeCode(docTypeCode);
        assertEquals(docTypeCode, consentDocBaseDetail.getDocTypeCode());
    }

    @Test
    void testToString() {
        ConsentDocBaseDetail consentDocBaseDetail = new ConsentDocBaseDetail();
        consentDocBaseDetail.setDocTypeCode("SampleDocType");
        consentDocBaseDetail.setDate(null);
        String result = consentDocBaseDetail.toString();
        assertNotNull(result);
        assertTrue(result.contains("docTypeCode"));
    }

    @Test
    void testEquals() throws Exception {
        ConsentDocBaseDetail consentDocBaseDetail1 = new ConsentDocBaseDetail();
        ConsentDocBaseDetail consentDocBaseDetail2 = new ConsentDocBaseDetail();
        
        consentDocBaseDetail1.setDocTypeCode("SampleDocType");
        consentDocBaseDetail1.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        
        consentDocBaseDetail2.setDocTypeCode("SampleDocType");
        consentDocBaseDetail2.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        
        assertTrue(consentDocBaseDetail1.equals(consentDocBaseDetail2));
        
        consentDocBaseDetail2.setDocTypeCode("OtherDocType");
        assertFalse(consentDocBaseDetail1.equals(consentDocBaseDetail2));
    }

    @Test
    void testHashCode() throws Exception {
        ConsentDocBaseDetail consentDocBaseDetail1 = new ConsentDocBaseDetail();
        ConsentDocBaseDetail consentDocBaseDetail2 = new ConsentDocBaseDetail();
        
        consentDocBaseDetail1.setDocTypeCode("SampleDocType");
        consentDocBaseDetail1.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        
        consentDocBaseDetail2.setDocTypeCode("SampleDocType");
        consentDocBaseDetail2.setDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));
        
        assertEquals(consentDocBaseDetail1.hashCode(), consentDocBaseDetail2.hashCode());
    }

    @Test
    void testEqualsWithDifferentObjectType() {
        ConsentDocBaseDetail consentDocBaseDetail = new ConsentDocBaseDetail();
        assertFalse(consentDocBaseDetail.equals(new Object()));
    }

    @Test
    void testEqualsWithNull() {
        ConsentDocBaseDetail consentDocBaseDetail = new ConsentDocBaseDetail();
        assertFalse(consentDocBaseDetail.equals(null));
    }
}
