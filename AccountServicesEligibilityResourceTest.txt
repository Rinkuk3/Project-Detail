import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.td.mbna.msec.accountservices.application.AccountServicesEligibilityService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Arrays;
import java.util.List;

public class AccountServicesEligibilityResourceTest {

    @InjectMocks
    private AccountServicesEligibilityResource accountServicesEligibilityResource;

    @Mock
    private AccountServicesEligibilityService accountServicesEligibilityService;

    private MockMvc mockMvc;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(accountServicesEligibilityResource).build();
    }

    @Test
    public void testGetCustomerProfile_Success() throws Exception {
        // Arrange
        String accountId = "testAccountId";
        List<String> expectedLinks = Arrays.asList("Link1", "Link2");
        when(accountServicesEligibilityService.getAccountServicesLinksEligibility(accountId, true)).thenReturn(expectedLinks);

        // Act & Assert
        mockMvc.perform(get("/account-services-eligibility/{accountId}", accountId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().json("[\"Link1\", \"Link2\"]"));
    }

    @Test
    public void testGetCustomerProfile_ServiceException() throws Exception {
        // Arrange
        String accountId = "testAccountId";
        when(accountServicesEligibilityService.getAccountServicesLinksEligibility(accountId, true)).thenThrow(new RuntimeException("Service error"));

        // Act & Assert
        mockMvc.perform(get("/account-services-eligibility/{accountId}", accountId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().is5xxServerError());
    }

    @Test
    public void testGetCustomerProfile_InvalidAccountId() throws Exception {
        // Arrange
        String accountId = ""; // Assuming an empty accountId is invalid
        List<String> expectedLinks = Arrays.asList();
        when(accountServicesEligibilityService.getAccountServicesLinksEligibility(accountId, true)).thenReturn(expectedLinks);

        // Act & Assert
        mockMvc.perform(get("/account-services-eligibility/{accountId}", accountId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().json("[]"));
    }
}
