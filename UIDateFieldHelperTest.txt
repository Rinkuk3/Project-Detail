import org.junit.jupiter.api.Test;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class UIDateFieldHelperTest {

    @Test
    public void testGetExpiryYearsList() {
        int numOfYears = 5;
        ArrayList<String> result = UIDateFieldHelper.getExpiryYearsList(numOfYears);
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        
        ArrayList<String> expected = new ArrayList<>();
        for (int i = 0; i < numOfYears; i++) {
            expected.add(Integer.toString(currentYear + i));
        }
        
        assertEquals(expected, result);
    }

    @Test
    public void testGetMonthsList() {
        String months = "January,February,March";
        ArrayList<String> result = UIDateFieldHelper.getMonthsList(months);
        ArrayList<String> expected = new ArrayList<>(Arrays.asList("January", "February", "March"));
        assertEquals(expected, result);
    }

    @Test
    public void testGetLocalDateFromXMLGregorianCalendar() {
        XMLGregorianCalendar mockXmlGregorianCalendar = mock(XMLGregorianCalendar.class);
        when(mockXmlGregorianCalendar.getYear()).thenReturn(2022);
        when(mockXmlGregorianCalendar.getMonth()).thenReturn(10);
        when(mockXmlGregorianCalendar.getDay()).thenReturn(25);

        LocalDate result = UIDateFieldHelper.getLocalDateFromXMLGregorianCalendar(mockXmlGregorianCalendar);
        LocalDate expected = LocalDate.of(2022, 10, 25);

        assertEquals(expected, result);
    }

    @Test
    public void testGetDateFromXMLGregorianCalendar() {
        XMLGregorianCalendar mockXmlGregorianCalendar = mock(XMLGregorianCalendar.class);
        GregorianCalendar gcal = new GregorianCalendar();
        Date expectedDate = gcal.getTime();
        when(mockXmlGregorianCalendar.toGregorianCalendar()).thenReturn(gcal);

        Date result = UIDateFieldHelper.getDateFromXMLGregorianCalendar(mockXmlGregorianCalendar);

        assertEquals(expectedDate, result);
    }

    @Test
    public void testGetXMLGregorianCalendarFromDate() throws DatatypeConfigurationException {
        Date date = new Date();
        XMLGregorianCalendar result = UIDateFieldHelper.getXMLGregorianCalendarFromDate(date);

        GregorianCalendar gcal = new GregorianCalendar();
        gcal.setTime(date);
        XMLGregorianCalendar expected = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);

        assertEquals(expected, result);
    }

    @Test
    public void testGetXMLGregorianCalendarNow() {
        XMLGregorianCalendar result = UIDateFieldHelper.getXMLGregorianCalendarNow();
        assertNotNull(result);
    }

    @Test
    public void testGetCalendar() {
        long timeInMillis = System.currentTimeMillis();
        Calendar result = UIDateFieldHelper.getCalendar(timeInMillis);
        Calendar expected = Calendar.getInstance();
        expected.setTimeInMillis(timeInMillis);

        assertEquals(expected, result);
    }

    @Test
    public void testConvertWithNull() {
        Long l = null;
        XMLGregorianCalendar result = UIDateFieldHelper.convert(l);
        assertNull(result);
    }

    @Test
    public void testConvertWithValue() throws DatatypeConfigurationException {
        Long l = System.currentTimeMillis();
        XMLGregorianCalendar result = UIDateFieldHelper.convert(l);

        GregorianCalendar gcal = new GregorianCalendar();
        gcal.setTimeInMillis(l);
        XMLGregorianCalendar expected = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);

        assertEquals(expected.getYear(), result.getYear());
        assertEquals(expected.getMonth(), result.getMonth());
        assertEquals(expected.getDay(), result.getDay());
    }
}
