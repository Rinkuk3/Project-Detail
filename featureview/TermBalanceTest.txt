import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class TermBalanceTest {

    private TermBalance termBalance;

    @BeforeEach
    void setUp() {
        termBalance = new TermBalance();
    }

    @Test
    void testGetSetTermBalanceCd() {
        String termBalanceCd = "TBC001";
        termBalance.setTermBalanceCd(termBalanceCd);
        assertEquals(termBalanceCd, termBalance.getTermBalanceCd());
    }

    @Test
    void testGetSetTermBalanceDesc() {
        String termBalanceDesc = "Test Term Balance Description";
        termBalance.setTermBalanceDesc(termBalanceDesc);
        assertEquals(termBalanceDesc, termBalance.getTermBalanceDesc());
    }

    @Test
    void testGetSetEffectiveRate() {
        BigDecimal effectiveRate = new BigDecimal("5.5");
        termBalance.setEffectiveRate(effectiveRate);
        assertEquals(effectiveRate, termBalance.getEffectiveRate());
    }

    @Test
    void testGetSetRateDesc() {
        String rateDesc = "Test Rate Description";
        termBalance.setRateDesc(rateDesc);
        assertEquals(rateDesc, termBalance.getRateDesc());
    }

    @Test
    void testGetSetRateCalculationMethodCd() {
        String rateCalculationMethodCd = "RCM001";
        termBalance.setRateCalculationMethodCd(rateCalculationMethodCd);
        assertEquals(rateCalculationMethodCd, termBalance.getRateCalculationMethodCd());
    }

    @Test
    void testGetSetDisclosureGroupRate() {
        BigDecimal disclosureGroupRate = new BigDecimal("4.0");
        termBalance.setDisclosureGroupRate(disclosureGroupRate);
        assertEquals(disclosureGroupRate, termBalance.getDisclosureGroupRate());
    }

    @Test
    void testGetSetDisclosureGroupMinimumRate() {
        BigDecimal disclosureGroupMinimumRate = new BigDecimal("1.0");
        termBalance.setDisclosureGroupMinimumRate(disclosureGroupMinimumRate);
        assertEquals(disclosureGroupMinimumRate, termBalance.getDisclosureGroupMinimumRate());
    }

    @Test
    void testGetSetDisclosureGroupMaximumRate() {
        BigDecimal disclosureGroupMaximumRate = new BigDecimal("8.0");
        termBalance.setDisclosureGroupMaximumRate(disclosureGroupMaximumRate);
        assertEquals(disclosureGroupMaximumRate, termBalance.getDisclosureGroupMaximumRate());
    }

    @Test
    void testGetSetDisclosureGroupRateCalculationMethodCd() {
        String disclosureGroupRateCalculationMethodCd = "DGRCM001";
        termBalance.setDisclosureGroupRateCalculationMethodCd(disclosureGroupRateCalculationMethodCd);
        assertEquals(disclosureGroupRateCalculationMethodCd, termBalance.getDisclosureGroupRateCalculationMethodCd());
    }

    @Test
    void testToString() {
        termBalance.setTermBalanceCd("TBC001");
        termBalance.setTermBalanceDesc("Test Term Balance");
        termBalance.setEffectiveRate(new BigDecimal("5.5"));
        termBalance.setRateDesc("Test Rate Description");
        termBalance.setRateCalculationMethodCd("RCM001");
        termBalance.setDisclosureGroupRate(new BigDecimal("4.0"));
        termBalance.setDisclosureGroupMinimumRate(new BigDecimal("1.0"));
        termBalance.setDisclosureGroupMaximumRate(new BigDecimal("8.0"));
        termBalance.setDisclosureGroupRateCalculationMethodCd("DGRCM001");

        String result = termBalance.toString();
        assertTrue(result.contains("termBalanceCd"));
        assertTrue(result.contains("termBalanceDesc"));
        assertTrue(result.contains("effectiveRate"));
        assertTrue(result.contains("rateDesc"));
        assertTrue(result.contains("rateCalculationMethodCd"));
        assertTrue(result.contains("disclosureGroupRate"));
        assertTrue(result.contains("disclosureGroupMinimumRate"));
        assertTrue(result.contains("disclosureGroupMaximumRate"));
        assertTrue(result.contains("disclosureGroupRateCalculationMethodCd"));
    }

    @Test
    void testHashCode() {
        termBalance.setTermBalanceCd("TBC001");
        termBalance.setTermBalanceDesc("Test Term Balance");
        termBalance.setEffectiveRate(new BigDecimal("5.5"));
        termBalance.setRateDesc("Test Rate Description");
        termBalance.setRateCalculationMethodCd("RCM001");
        termBalance.setDisclosureGroupRate(new BigDecimal("4.0"));
        termBalance.setDisclosureGroupMinimumRate(new BigDecimal("1.0"));
        termBalance.setDisclosureGroupMaximumRate(new BigDecimal("8.0"));
        termBalance.setDisclosureGroupRateCalculationMethodCd("DGRCM001");

        int hashCode = termBalance.hashCode();
        assertNotNull(hashCode);
    }

    @Test
    void testEquals() {
        TermBalance other = new TermBalance();
        other.setTermBalanceCd("TBC001");
        other.setTermBalanceDesc("Test Term Balance");
        other.setEffectiveRate(new BigDecimal("5.5"));
        other.setRateDesc("Test Rate Description");
        other.setRateCalculationMethodCd("RCM001");
        other.setDisclosureGroupRate(new BigDecimal("4.0"));
        other.setDisclosureGroupMinimumRate(new BigDecimal("1.0"));
        other.setDisclosureGroupMaximumRate(new BigDecimal("8.0"));
        other.setDisclosureGroupRateCalculationMethodCd("DGRCM001");

        termBalance.setTermBalanceCd("TBC001");
        termBalance.setTermBalanceDesc("Test Term Balance");
        termBalance.setEffectiveRate(new BigDecimal("5.5"));
        termBalance.setRateDesc("Test Rate Description");
        termBalance.setRateCalculationMethodCd("RCM001");
        termBalance.setDisclosureGroupRate(new BigDecimal("4.0"));
        termBalance.setDisclosureGroupMinimumRate(new BigDecimal("1.0"));
        termBalance.setDisclosureGroupMaximumRate(new BigDecimal("8.0"));
        termBalance.setDisclosureGroupRateCalculationMethodCd("DGRCM001");

        assertTrue(termBalance.equals(other));

        // Test with a different TermBalance object
        other.setTermBalanceCd("TBC002");
        assertFalse(termBalance.equals(other));
    }

    @Test
    void testEquals_withNull() {
        assertFalse(termBalance.equals(null));
    }

    @Test
    void testEquals_withDifferentType() {
        assertFalse(termBalance.equals("string"));
    }

    @Test
    void testEquals_withSameObject() {
        termBalance.setTermBalanceCd("TBC001");
        assertTrue(termBalance.equals(termBalance)); // same object
    }

    @Test
    void testEquals_withNullFields() {
        TermBalance other = new TermBalance();
        termBalance.setTermBalanceCd(null);
        other.setTermBalanceCd(null);
        assertTrue(termBalance.equals(other)); // both have null termBalanceCd
    }
}
