package com.td.mbna.msec.midtier.util.services;

import com.td.mbna.msec.midtier.exceptions.BusinessException;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.types.common.Error;
import com.td.mbna.msec.midtier.types.common.ValidationException;
import com.td.mbna.msec.midtier.types.common.FieldErrorType;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class MidtierUtilHelperTest {

    @Mock
    private BaseResponse mockBaseResponse;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testPreparePlainErrorResponseSingleError() {
        String errorMessage = "Test error message";
        BaseResponse response = MidtierUtilHelper.preparePlainErrorResponse(BaseResponse.class, errorMessage);
        
        assertNotNull(response);
        assertEquals(1, response.getErrorMessages().size());
        assertEquals("ERROR", response.getErrorMessages().get(0).getSeverity());
        assertEquals(errorMessage, response.getErrorMessages().get(0).getErrorDescription());
        assertEquals(errorMessage, response.getErrorMessages().get(0).getErrorCode());
    }

    @Test
    public void testPreparePlainErrorResponseMultipleErrors() {
        List<String> errorMessages = Arrays.asList("Error 1", "Error 2");
        BaseResponse response = MidtierUtilHelper.preparePlainErrorResponse(BaseResponse.class, errorMessages);
        
        assertNotNull(response);
        assertEquals(2, response.getErrorMessages().size());
        assertEquals("ERROR", response.getErrorMessages().get(0).getSeverity());
        assertEquals("Error 1", response.getErrorMessages().get(0).getErrorDescription());
        assertEquals("Error 1", response.getErrorMessages().get(0).getErrorCode());
        assertEquals("Error 2", response.getErrorMessages().get(1).getErrorDescription());
        assertEquals("Error 2", response.getErrorMessages().get(1).getErrorCode());
    }

    @Test(expected = RuntimeException.class)
    public void testPreparePlainErrorResponseException() throws Exception {
        MidtierUtilHelper.preparePlainErrorResponse(null, "Test error message");
    }

    @Test
    public void testPrepareBusinessException() {
        String errorCode = "1001";
        String errorDescription = "Business error occurred";
        BusinessException businessException = MidtierUtilHelper.prepareBusinessException(errorCode, errorDescription);
        
        assertNotNull(businessException);
        assertEquals("Business Error", businessException.getMessage());
        assertEquals(errorCode, businessException.getFaultInfo().getErrorCode());
        assertEquals("ERROR", businessException.getFaultInfo().getSeverity());
        assertEquals(errorDescription, businessException.getFaultInfo().getErrorDescription());
    }

    @Test
    public void testPrepareBusinessExceptionWithCause() {
        String errorCode = "1001";
        String errorDescription = "Business error occurred";
        Throwable cause = new Throwable("Cause of error");
        BusinessException businessException = MidtierUtilHelper.prepareBusinessException(errorCode, errorDescription, cause);

        assertNotNull(businessException);
        assertEquals("Cause of error", businessException.getCause().getMessage());
    }

    @Test
    public void testPrepareValidationException() {
        String errorCode = "1001";
        String errorDescription = "Validation error occurred";
        ValidationException validationException = MidtierUtilHelper.prepareValidationException("field1", errorCode, errorDescription);
        
        assertNotNull(validationException);
        assertEquals(1, validationException.getFieldError().size());
        assertEquals("field1", validationException.getFieldError().get(0).getField());
        assertEquals(errorCode, validationException.getFieldError().get(0).getErrorCode());
        assertEquals(errorDescription, validationException.getFieldError().get(0).getErrorDescription());
        assertEquals("ERROR", validationException.getFieldError().get(0).getSeverity());
    }

    @Test
    public void testPrepareValidationExceptionSingleField() {
        String errorCode = "1001";
        String errorDescription = "Validation error occurred";
        ValidationException validationException = MidtierUtilHelper.prepareValidationException(errorCode, errorDescription);
        
        assertNotNull(validationException);
        assertEquals(1, validationException.getFieldError().size());
        assertEquals(errorCode, validationException.getFieldError().get(0).getErrorCode());
        assertEquals(errorDescription, validationException.getFieldError().get(0).getErrorDescription());
    }
}
