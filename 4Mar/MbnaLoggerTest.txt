import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.MDC;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpResponse;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

public class MbnaLoggerTest {

    private MbnaLogger mbnaLogger;

    @Mock
    private Logger mockLogger;

    @Mock
    private HttpServletRequest mockRequest;

    @Mock
    private HttpRequest mockHttpRequest;

    @Mock
    private ClientHttpResponse mockResponse;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        mbnaLogger = new MbnaLogger(MbnaLogger.class);
        mbnaLogger.logger = mockLogger;
    }

    @Test
    public void testErrorMessageWithMethodNameAndMessage() {
        String methodName = "testMethod";
        String message = "Test error message";
        
        mbnaLogger.error(methodName, message);
        verify(mockLogger).error(eq(" - in testMethod -> : Test error message"));
    }

    @Test
    public void testErrorMessageWithException() {
        String message = "Test error message";
        Throwable exception = new Throwable("Test exception");

        mbnaLogger.error(message, exception);
        verify(mockLogger).error(eq(" --> : Test error message"), eq(exception));
    }

    @Test
    public void testPerfMessageGeneration() {
        long startTime = System.currentTimeMillis();
        long endTime = startTime + 100;
        String methodName = "testMethod";

        String message = MbnaLogger.generatePerfMessage(startTime, endTime, methodName);
        assertTrue(message.contains("testMethod"));
        assertTrue(message.contains("100 ms"));
    }

    @Test
    public void testMandatoryLogging() {
        String message = "Test mandatory log message";

        mbnaLogger.mandatory(message);
        verify(mockLogger).info(eq("Test mandatory log message"), eq(MbnaLogger.MANDATORY.name()));
    }

    @Test
    public void testSetMDC() {
        String sessionId = "12345";
        String ipAddress = "192.168.1.1";
        String connectId = "connectId123";

        when(mockRequest.getSession()).thenReturn(mock(HttpSession.class));
        when(mockRequest.getSession().getId()).thenReturn(sessionId);
        when(mockRequest.getHeader("X-FORWARDED-FOR")).thenReturn(ipAddress);
        when(mockRequest.getSession().getAttribute("_mbna_session_connect_id")).thenReturn(connectId);

        mbnaLogger.setMDC(mockRequest);

        verify(mockLogger).info(eq(sessionId));
        assertEquals(MDC.get(MbnaLogger.SESSION_ID), sessionId);
        assertEquals(MDC.get(MbnaLogger.REMOTE_IP), ipAddress);
        assertEquals(MDC.get(MbnaLogger.CONNECT_ID), connectId);
    }

    @Test
    public void testClearMDC() {
        mbnaLogger.clearMDC();
        assertNull(MDC.get(MbnaLogger.CONNECT_ID));
        assertNull(MDC.get(MbnaLogger.REMOTE_IP));
        assertNull(MDC.get(MbnaLogger.SESSION_ID));
        assertNull(MDC.get(MbnaLogger.OS_NAME));
    }

    @Test
    public void testToJsonObject() {
        Object jsonObj = new Object();
        mbnaLogger.toJson(jsonObj);
        verify(mockLogger).debug(contains(jsonObj.getClass().toString()));
    }

    @Test
    public void testToJsonMethod() {
        String methodName = "testMethod";
        Object jsonObj = new Object();
        mbnaLogger.toJson(methodName, jsonObj);
        verify(mockLogger).debug(contains("Method: testMethod"));
    }

    @Test
    public void testSetSessionInfo() {
        TrackableRequest trackableRequest = mock(TrackableRequest.class);
        TrackingInfoType trackingInfo = mock(TrackingInfoType.class);
        
        when(trackableRequest.getSessionInfo()).thenReturn(trackingInfo);
        when(trackingInfo.getConnectId()).thenReturn("testConnectId");
        when(trackingInfo.getIpAddr()).thenReturn("192.168.1.1");
        when(trackingInfo.getSessionId()).thenReturn("testSessionId");

        mbnaLogger.setSessionInfo(trackableRequest);

        assertEquals(MDC.get(MbnaLogger.CONNECT_ID), "testConnectId");
        assertEquals(MDC.get(MbnaLogger.REMOTE_IP), "192.168.1.1");
        assertEquals(MDC.get(MbnaLogger.SESSION_ID), "testSessionId");
    }

    @Test
    public void testSetSessionInfoWithParameters() {
        mbnaLogger.setSessionInfo("testConnectId", "192.168.1.1");

        assertEquals(MDC.get(MbnaLogger.CONNECT_ID), "testConnectId");
        assertEquals(MDC.get(MbnaLogger.REMOTE_IP), "192.168.1.1");
    }

    @Test
    public void testErrorResponseLogging() throws IOException {
        when(mockHttpRequest.getHeaders()).thenReturn(mock(HttpHeaders.class));
        when(mockHttpRequest.getURI()).thenReturn(new URI("http://localhost"));
        when(mockResponse.getBody()).thenReturn(new ByteArrayInputStream("Response Body".getBytes()));

        mbnaLogger.error(mockHttpRequest, mockResponse);

        verify(mockLogger).error(contains("Rest API Call failed"));
    }

    @Test
    public void testIsEnabled() {
        assertTrue(mbnaLogger.isEnabled(org.slf4j.event.Level.DEBUG));
    }

    @Test
    public void testIsDebugEnabled() {
        assertTrue(mbnaLogger.isDebugEnabled());
    }

    @Test
    public void testMaskCardNumberAndPin() {
        String message = "<CardNO>1234567890123456</CardNO><pin>1234</pin>";
        String maskedMessage = MbnaLogger.maskCardNumberAndPin(message);

        assertEquals(maskedMessage, "<CardNO>**********3456</CardNO><pin>****</pin>");
    }
}
