package com.td.mbna.msec.midtier.util;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;

public class GenericContentUtilTest {

    @Test
    void testParseWithFileName() throws Exception {
        String xmlFileName = "test.xml";
        Document document = Mockito.mock(Document.class);
        DocumentBuilder builder = Mockito.mock(DocumentBuilder.class);
        Mockito.when(builder.parse(xmlFileName)).thenReturn(document);
        DocumentBuilderFactory factory = Mockito.mock(DocumentBuilderFactory.class);
        Mockito.when(factory.newDocumentBuilder()).thenReturn(builder);

        Document result = GenericContentUtil.parse(xmlFileName);
        assertNotNull(result);
    }

    @Test
    void testParseWithInputStream() throws Exception {
        InputStream xmlInputStream = Mockito.mock(InputStream.class);
        Document document = Mockito.mock(Document.class);
        DocumentBuilder builder = Mockito.mock(DocumentBuilder.class);
        Mockito.when(builder.parse(xmlInputStream)).thenReturn(document);
        DocumentBuilderFactory factory = Mockito.mock(DocumentBuilderFactory.class);
        Mockito.when(factory.newDocumentBuilder()).thenReturn(builder);

        Document result = GenericContentUtil.parse(xmlInputStream);
        assertNotNull(result);
    }

    @Test
    void testGetDocumentBuilder() throws Exception {
        String schemaPath = "/schema/MSECURE-WCM.xsd";
        DocumentBuilder builder = GenericContentUtil.getDocumentBuilder(schemaPath);
        assertNotNull(builder);
    }

    @Test
    void testSetSchemaAttributes() throws Exception {
        String schemaPath = "/schema/MSECURE-WCM.xsd";
        DocumentBuilder builder = GenericContentUtil.getDocumentBuilder(schemaPath);

        // Verifying that the DocumentBuilder was created correctly
        assertNotNull(builder);
    }

    @Test
    void testParseWithInvalidSchema() {
        String invalidFileName = "invalid.xml";
        Exception exception = assertThrows(Exception.class, () -> {
            GenericContentUtil.parse(invalidFileName);
        });
        assertTrue(exception.getMessage().contains("parsing error"));
    }
}
