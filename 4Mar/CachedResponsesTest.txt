package com.td.mbna.msec.midtier.util.services;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Date;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class CachedResponsesTest {

    private CachedResponses cachedResponses;
    private MidtierClientHttpResponse mockResponse;

    @BeforeEach
    void setUp() {
        cachedResponses = new CachedResponses();
        mockResponse = Mockito.mock(MidtierClientHttpResponse.class);
    }

    @Test
    void testCacheHitCount() {
        assertEquals(0, cachedResponses.getCacheHitCount());
        cachedResponses.setCacheHitCount(5);
        assertEquals(5, cachedResponses.getCacheHitCount());
        cachedResponses.increaseHitCount();
        assertEquals(6, cachedResponses.getCacheHitCount());
    }

    @Test
    void testLastVisitDate() {
        assertNull(cachedResponses.getLastVisitDate());
        Date date = new Date();
        cachedResponses.setLastVisitDate(date);
        assertEquals(date, cachedResponses.getLastVisitDate());
    }

    @Test
    void testResponsesMap() {
        assertNotNull(cachedResponses.getResponsesMap());
        assertTrue(cachedResponses.getResponsesMap().isEmpty());

        ConcurrentMap<String, MidtierClientHttpResponse> customMap = new ConcurrentHashMap<>();
        customMap.put("key1", mockResponse);
        cachedResponses.setResponsesMap(customMap);

        assertEquals(customMap, cachedResponses.getResponsesMap());
        assertEquals(mockResponse, cachedResponses.getResponsesMap().get("key1"));
    }
}
