import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class MbnaRewardsFacadeTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private GetRewardsSamlAdaptor getRewardsSamlAdaptor;

    @Mock
    private GetRewardsBalancesAdaptor getRewardsBalancesAdaptor;

    @Mock
    private MbnaLogger logger;

    @InjectMocks
    private MbnaRewardsFacade mbnaRewardsFacade;

    @Mock
    private GetRewardsBalancesRequest getRewardsBalancesRequest;

    @Mock
    private GetRewardsSamlRequest getRewardsSamlRequest;

    @Mock
    private HttpHeaders httpHeaders;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetRewardsBalances() {
        String token = "testToken";
        String accountNum = "123456";

        // Mocking the request
        when(getRewardsBalancesRequest.getAcctNum()).thenReturn(accountNum);

        // Mocking HttpHeaders
        when(mbnaRewardsFacade.addAuthorizationHeader(token)).thenReturn(httpHeaders);

        // Mocking RestTemplate response
        RewardsBalanceList rewardsBalanceList = new RewardsBalanceList();
        HttpEntity<RewardsBalanceList> responseEntity = new HttpEntity<>(rewardsBalanceList);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RewardsBalanceList.class)))
                .thenReturn(responseEntity);

        // Mocking the adapter response
        GetRewardsBalancesResponse getRewardsBalancesResponse = new GetRewardsBalancesResponse();
        when(getRewardsBalancesAdaptor.getResponse(rewardsBalanceList)).thenReturn(getRewardsBalancesResponse);

        // Call the method
        GetRewardsBalancesResponse response = mbnaRewardsFacade.getRewardsBalances(getRewardsBalancesRequest, token);

        // Assertions
        assertNotNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RewardsBalanceList.class));
        verify(getRewardsBalancesAdaptor, times(1)).getResponse(rewardsBalanceList);
    }

    @Test
    public void testGetRewardsBalanceInfo() {
        String token = "testToken";
        String accountNum = "123456";

        // Mocking the request
        when(getRewardsBalancesRequest.getAcctNum()).thenReturn(accountNum);

        // Mocking HttpHeaders
        when(mbnaRewardsFacade.addAuthorizationHeader(token)).thenReturn(httpHeaders);

        // Mocking RestTemplate response
        RewardsBalancesResponse rewardsBalancesResponse = new RewardsBalancesResponse();
        HttpEntity<RewardsBalancesResponse> responseEntity = new HttpEntity<>(rewardsBalancesResponse);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RewardsBalancesResponse.class)))
                .thenReturn(responseEntity);

        // Mocking the adapter response
        GetRewardsBalancesResponse getRewardsBalancesResponse = new GetRewardsBalancesResponse();
        when(getRewardsBalancesAdaptor.getResponse(rewardsBalancesResponse)).thenReturn(getRewardsBalancesResponse);

        // Call the method
        GetRewardsBalancesResponse response = mbnaRewardsFacade.getRewardsBalanceInfo(getRewardsBalancesRequest, token);

        // Assertions
        assertNotNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(RewardsBalancesResponse.class));
        verify(getRewardsBalancesAdaptor, times(1)).getResponse(rewardsBalancesResponse);
    }

    @Test
    public void testGetRewardsSaml() {
        String token = "testToken";

        // Mocking the request
        when(getRewardsSamlRequest.getAcctNum()).thenReturn("123456");

        // Mocking HttpHeaders
        when(mbnaRewardsFacade.addAuthorizationHeader(anyString())).thenReturn(httpHeaders);

        // Mocking RestTemplate response
        RewardsSamlResponse rewardsSamlResponse = new RewardsSamlResponse();
        ResponseEntity<RewardsSamlResponse> responseEntity = new ResponseEntity<>(rewardsSamlResponse, HttpStatus.OK);

        when(restTemplate.exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(RewardsSamlResponse.class)))
                .thenReturn(responseEntity);

        // Mocking the adapter response
        GetRewardsSamlResponse getRewardsSamlResponse = new GetRewardsSamlResponse();
        when(getRewardsSamlAdaptor.getResponse(rewardsSamlResponse)).thenReturn(getRewardsSamlResponse);

        // Call the method
        GetRewardsSamlResponse response = mbnaRewardsFacade.getRewardsSaml(getRewardsSamlRequest, token);

        // Assertions
        assertNotNull(response);
        verify(restTemplate, times(1)).exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(RewardsSamlResponse.class));
        verify(getRewardsSamlAdaptor, times(1)).getResponse(rewardsSamlResponse);
    }

    @Test
    public void testAddAuthorizationHeader() {
        // Test the header addition logic
        String token = "testToken";
        HttpHeaders headers = mbnaRewardsFacade.addAuthorizationHeader(token);

        assertNotNull(headers);
        assertTrue(headers.containsKey("Authorization"));
        assertEquals("testToken", headers.getFirst("Authorization"));
    }
}
