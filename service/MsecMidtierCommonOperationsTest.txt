package com.td.mbna.msec.midtier.service;

import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class MsecMidtierCommonOperationsTest {

    private MsecMidtierCommonOperations<BaseRequest, BaseResponse> msecMidtierMock;

    @BeforeEach
    void setUp() {
        msecMidtierMock = Mockito.mock(MsecMidtierCommonOperations.class);
    }

    @Test
    void testInvokeService() {
        BaseRequest mockRequest = new BaseRequest();
        BaseResponse mockResponse = new BaseResponse();
        when(msecMidtierMock.invokeService(mockRequest, "token")).thenReturn(mockResponse);

        BaseResponse response = msecMidtierMock.invokeService(mockRequest, "token");
        assertNotNull(response);
        verify(msecMidtierMock, times(1)).invokeService(mockRequest, "token");
    }

    @Test
    void testRequiresDisclosureConsent() {
        when(msecMidtierMock.requiresDisclosureConsent()).thenReturn(true);
        assertTrue(msecMidtierMock.requiresDisclosureConsent());
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        when(msecMidtierMock.getConsentDisclosureFailedMsgCode()).thenReturn("DISC_FAIL_001");
        assertEquals("DISC_FAIL_001", msecMidtierMock.getConsentDisclosureFailedMsgCode());
    }

    @Test
    void testGenerateAutoComment() {
        when(msecMidtierMock.generateAutoComment()).thenReturn(true);
        assertTrue(msecMidtierMock.generateAutoComment());
    }

    @Test
    void testCreateAutoComment() {
        BaseRequest mockRequest = new BaseRequest();
        BaseResponse mockResponse = new BaseResponse();
        List<String> mockComments = Collections.singletonList("Auto-comment generated");
        
        when(msecMidtierMock.createAutoComment(mockRequest, mockResponse)).thenReturn(mockComments);
        List<String> comments = msecMidtierMock.createAutoComment(mockRequest, mockResponse);

        assertNotNull(comments);
        assertFalse(comments.isEmpty());
        assertEquals("Auto-comment generated", comments.get(0));
    }

    @Test
    void testGetEmailInfoBean() {
        BaseRequest mockRequest = new BaseRequest();
        BaseResponse mockResponse = new BaseResponse();
        EmailInfo mockEmailInfo = mock(EmailInfo.class);

        when(msecMidtierMock.getEmailInfoBean(mockRequest, mockResponse)).thenReturn(mockEmailInfo);
        EmailInfo emailInfoBean = msecMidtierMock.getEmailInfoBean(mockRequest, mockResponse);

        assertNotNull(emailInfoBean);
        verify(msecMidtierMock, times(1)).getEmailInfoBean(mockRequest, mockResponse);
    }

    @Test
    void testGetValidator() {
        MsecValidator mockValidator = mock(MsecValidator.class);

        when(msecMidtierMock.getValidator()).thenReturn(mockValidator);
        MsecValidator validator = msecMidtierMock.getValidator();

        assertNotNull(validator);
        verify(msecMidtierMock, times(1)).getValidator();
    }
}
