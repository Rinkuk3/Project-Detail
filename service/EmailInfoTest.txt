package com.td.mbna.msec.midtier.service;

import com.td.mbna.msec.midtier.types.common.PrimaryCardMemberInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;
import java.util.function.Consumer;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class EmailInfoTest {

    private EmailInfo emailInfoMock;

    @BeforeEach
    void setUp() {
        emailInfoMock = Mockito.mock(EmailInfo.class);
    }

    @Test
    void testGetLogonId() {
        when(emailInfoMock.getLogonId()).thenReturn("logon123");
        assertEquals("logon123", emailInfoMock.getLogonId());
    }

    @Test
    void testGetConnectId() {
        when(emailInfoMock.getConnectId()).thenReturn("connect123");
        assertEquals("connect123", emailInfoMock.getConnectId());
    }

    @Test
    void testGetCustId() {
        when(emailInfoMock.getCustId()).thenReturn("cust123");
        assertEquals("cust123", emailInfoMock.getCustId());
    }

    @Test
    void testGetAcctNum() {
        when(emailInfoMock.getAcctNum()).thenReturn("acct123");
        assertEquals("acct123", emailInfoMock.getAcctNum());
    }

    @Test
    void testGetTokenAndSetToken() {
        when(emailInfoMock.getToken()).thenReturn("token123");
        doNothing().when(emailInfoMock).setToken("token123");

        assertEquals("token123", emailInfoMock.getToken());
        emailInfoMock.setToken("token123");
        verify(emailInfoMock, times(1)).setToken("token123");
    }

    @Test
    void testIsTriggerEmailNotification() {
        when(emailInfoMock.isTriggerEmailNotification()).thenReturn(true);
        assertTrue(emailInfoMock.isTriggerEmailNotification());
    }

    @Test
    void testGetBusinessEventID() {
        when(emailInfoMock.getBusinessEventID()).thenReturn("business123");
        assertEquals("business123", emailInfoMock.getBusinessEventID());
    }

    @Test
    void testGetPrimaryEmailAddressAndSetPrimaryEmailAddress() {
        when(emailInfoMock.getPrimaryEmailAddress()).thenReturn("user@example.com");
        doNothing().when(emailInfoMock).setPrimaryEmailAddress("user@example.com");

        assertEquals("user@example.com", emailInfoMock.getPrimaryEmailAddress());
        emailInfoMock.setPrimaryEmailAddress("user@example.com");
        verify(emailInfoMock, times(1)).setPrimaryEmailAddress("user@example.com");
    }

    @Test
    void testGetPrimaryLanguagePref() {
        when(emailInfoMock.getPrimaryLanguagePref()).thenReturn("EN");
        assertEquals("EN", emailInfoMock.getPrimaryLanguagePref());
    }

    @Test
    void testGetAccountFirstName() {
        when(emailInfoMock.getAccountFirstName()).thenReturn("John");
        assertEquals("John", emailInfoMock.getAccountFirstName());
    }

    @Test
    void testGetAccountLastName() {
        when(emailInfoMock.getAccountLastName()).thenReturn("Doe");
        assertEquals("Doe", emailInfoMock.getAccountLastName());
    }

    @Test
    void testGetPrimaryUserInfo() {
        PrimaryCardMemberInfo primaryCardMemberInfo = Mockito.mock(PrimaryCardMemberInfo.class);
        when(emailInfoMock.getPrimaryUserInfo()).thenReturn(primaryCardMemberInfo);
        assertNotNull(emailInfoMock.getPrimaryUserInfo());
    }

    @Test
    void testGetCardName() {
        when(emailInfoMock.getCardName()).thenReturn("VISA");
        assertEquals("VISA", emailInfoMock.getCardName());
    }

    @Test
    void testGetCardEnding() {
        when(emailInfoMock.getCardEnding()).thenReturn("1234");
        assertEquals("1234", emailInfoMock.getCardEnding());
    }

    @Test
    void testGetConfirmationNumber() {
        when(emailInfoMock.getConfirmationNumber()).thenReturn("CN123");
        assertEquals("CN123", emailInfoMock.getConfirmationNumber());
    }

    @Test
    void testGetConfirmationNumbers() {
        List<String> confirmationNumbers = Arrays.asList("CN123", "CN456");
        when(emailInfoMock.getConfirmationNumbers()).thenReturn(confirmationNumbers);

        assertNotNull(emailInfoMock.getConfirmationNumbers());
        assertEquals(2, emailInfoMock.getConfirmationNumbers().size());
    }

    @Test
    void testGetInitiatedBy() {
        when(emailInfoMock.getInitiatedBy()).thenReturn("User");
        assertEquals("User", emailInfoMock.getInitiatedBy());
    }

    @Test
    void testGetOldEmailAddress() {
        when(emailInfoMock.getOldEmailAddress()).thenReturn("old@example.com");
        assertEquals("old@example.com", emailInfoMock.getOldEmailAddress());
    }

    @Test
    void testGetStatementDeliveryPreferenceSelected() {
        when(emailInfoMock.getStatementDeliveryPreferenceSelected()).thenReturn("EMAIL");
        assertEquals("EMAIL", emailInfoMock.getStatementDeliveryPreferenceSelected());
    }

    @Test
    void testGetAttribute() {
        when(emailInfoMock.getAttribute("key")).thenReturn("value");
        assertEquals("value", emailInfoMock.getAttribute("key"));
    }

    @Test
    void testAddAttribute() {
        doNothing().when(emailInfoMock).addAttribute("key", "value");
        emailInfoMock.addAttribute("key", "value");
        verify(emailInfoMock, times(1)).addAttribute("key", "value");
    }

    @Test
    void testGetAttributes() {
        Map<String, Object> attributes = new HashMap<>();
        attributes.put("key1", "value1");
        when(emailInfoMock.getAttributes()).thenReturn(attributes);
        assertNotNull(emailInfoMock.getAttributes());
        assertEquals(1, emailInfoMock.getAttributes().size());
    }

    @Test
    void testSetRetryLogic() {
        Consumer<String> consumer = mock(Consumer.class);
        doNothing().when(emailInfoMock).setRetryLogic(consumer);
        emailInfoMock.setRetryLogic(consumer);
        verify(emailInfoMock, times(1)).setRetryLogic(consumer);
    }

    @Test
    void testRetry() {
        Consumer<String> consumer = mock(Consumer.class);
        when(emailInfoMock.getRetryLogic()).thenReturn(consumer);
        emailInfoMock.retry("retry-data");
        verify(consumer, times(1)).accept("retry-data");
    }
}
