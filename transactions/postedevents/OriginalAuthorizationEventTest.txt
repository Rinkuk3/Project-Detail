package com.td.api.mbcca.response.transactions.postedevents;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class OriginalAuthorizationEventTest {

    private OriginalAuthorizationEvent originalAuthorizationEvent;

    @Before
    public void setUp() {
        originalAuthorizationEvent = new OriginalAuthorizationEvent();
    }

    @Test
    public void testGetAndSetTerminalChannelTypeCd() {
        String terminalChannelTypeCd = "ATM";
        originalAuthorizationEvent.setTerminalChannelTypeCd(terminalChannelTypeCd);
        assertEquals(terminalChannelTypeCd, originalAuthorizationEvent.getTerminalChannelTypeCd());
    }

    @Test
    public void testGetAndSetTransactionDetailAvailableTypeCd() {
        String transactionDetailAvailableTypeCd = "DETAIL";
        originalAuthorizationEvent.setTransactionDetailAvailableTypeCd(transactionDetailAvailableTypeCd);
        assertEquals(transactionDetailAvailableTypeCd, originalAuthorizationEvent.getTransactionDetailAvailableTypeCd());
    }

    @Test
    public void testGetAndSetMerchantPointOfServiceTerminalCapabilityCd() {
        String merchantPointOfServiceTerminalCapabilityCd = "CAPABILITY";
        originalAuthorizationEvent.setMerchantPointOfServiceTerminalCapabilityCd(merchantPointOfServiceTerminalCapabilityCd);
        assertEquals(merchantPointOfServiceTerminalCapabilityCd, originalAuthorizationEvent.getMerchantPointOfServiceTerminalCapabilityCd());
    }

    @Test
    public void testGetAndSetMerchantPointOfServiceTerminalEntryCd() {
        String merchantPointOfServiceTerminalEntryCd = "ENTRY";
        originalAuthorizationEvent.setMerchantPointOfServiceTerminalEntryCd(merchantPointOfServiceTerminalEntryCd);
        assertEquals(merchantPointOfServiceTerminalEntryCd, originalAuthorizationEvent.getMerchantPointOfServiceTerminalEntryCd());
    }

    @Test
    public void testGetAndSetMailTelephoneOrderTransactionCd() {
        String mailTelephoneOrderTransactionCd = "MTOTRANS";
        originalAuthorizationEvent.setMailTelephoneOrderTransactionCd(mailTelephoneOrderTransactionCd);
        assertEquals(mailTelephoneOrderTransactionCd, originalAuthorizationEvent.getMailTelephoneOrderTransactionCd());
    }

    @Test
    public void testGetAndSetChargeBackRightsIndicatorCd() {
        String chargeBackRightsIndicatorCd = "YES";
        originalAuthorizationEvent.setChargeBackRightsIndicatorCd(chargeBackRightsIndicatorCd);
        assertEquals(chargeBackRightsIndicatorCd, originalAuthorizationEvent.getChargeBackRightsIndicatorCd());
    }

    @Test
    public void testGetAndSetPrepaidCardIndicatorCd() {
        String prepaidCardIndicatorCd = "PREPAID";
        originalAuthorizationEvent.setPrepaidCardIndicatorCd(prepaidCardIndicatorCd);
        assertEquals(prepaidCardIndicatorCd, originalAuthorizationEvent.getPrepaidCardIndicatorCd());
    }

    @Test
    public void testToString() {
        originalAuthorizationEvent.setTerminalChannelTypeCd("ATM");
        originalAuthorizationEvent.setTransactionDetailAvailableTypeCd("DETAIL");
        originalAuthorizationEvent.setMerchantPointOfServiceTerminalCapabilityCd("CAPABILITY");
        originalAuthorizationEvent.setMerchantPointOfServiceTerminalEntryCd("ENTRY");
        originalAuthorizationEvent.setMailTelephoneOrderTransactionCd("MTOTRANS");
        originalAuthorizationEvent.setChargeBackRightsIndicatorCd("YES");
        originalAuthorizationEvent.setPrepaidCardIndicatorCd("PREPAID");

        String expectedString = "com.td.api.mbcca.response.transactions.postedevents.OriginalAuthorizationEvent@"
                + Integer.toHexString(System.identityHashCode(originalAuthorizationEvent)) + "[terminalChannelTypeCd=ATM,transactionDetailAvailableTypeCd=DETAIL,"
                + "merchantPointOfServiceTerminalCapabilityCd=CAPABILITY,merchantPointOfServiceTerminalEntryCd=ENTRY,"
                + "mailTelephoneOrderTransactionCd=MTOTRANS,chargeBackRightsIndicatorCd=YES,prepaidCardIndicatorCd=PREPAID,]";

        assertEquals(expectedString, originalAuthorizationEvent.toString());
    }

    @Test
    public void testHashCode() {
        OriginalAuthorizationEvent event1 = new OriginalAuthorizationEvent();
        event1.setTerminalChannelTypeCd("ATM");
        event1.setTransactionDetailAvailableTypeCd("DETAIL");
        event1.setMerchantPointOfServiceTerminalCapabilityCd("CAPABILITY");
        event1.setMerchantPointOfServiceTerminalEntryCd("ENTRY");
        event1.setMailTelephoneOrderTransactionCd("MTOTRANS");
        event1.setChargeBackRightsIndicatorCd("YES");
        event1.setPrepaidCardIndicatorCd("PREPAID");

        OriginalAuthorizationEvent event2 = new OriginalAuthorizationEvent();
        event2.setTerminalChannelTypeCd("ATM");
        event2.setTransactionDetailAvailableTypeCd("DETAIL");
        event2.setMerchantPointOfServiceTerminalCapabilityCd("CAPABILITY");
        event2.setMerchantPointOfServiceTerminalEntryCd("ENTRY");
        event2.setMailTelephoneOrderTransactionCd("MTOTRANS");
        event2.setChargeBackRightsIndicatorCd("YES");
        event2.setPrepaidCardIndicatorCd("PREPAID");

        assertEquals(event1.hashCode(), event2.hashCode());
    }

    @Test
    public void testEquals() {
        OriginalAuthorizationEvent event1 = new OriginalAuthorizationEvent();
        event1.setTerminalChannelTypeCd("ATM");
        event1.setTransactionDetailAvailableTypeCd("DETAIL");
        event1.setMerchantPointOfServiceTerminalCapabilityCd("CAPABILITY");
        event1.setMerchantPointOfServiceTerminalEntryCd("ENTRY");
        event1.setMailTelephoneOrderTransactionCd("MTOTRANS");
        event1.setChargeBackRightsIndicatorCd("YES");
        event1.setPrepaidCardIndicatorCd("PREPAID");

        OriginalAuthorizationEvent event2 = new OriginalAuthorizationEvent();
        event2.setTerminalChannelTypeCd("ATM");
        event2.setTransactionDetailAvailableTypeCd("DETAIL");
        event2.setMerchantPointOfServiceTerminalCapabilityCd("CAPABILITY");
        event2.setMerchantPointOfServiceTerminalEntryCd("ENTRY");
        event2.setMailTelephoneOrderTransactionCd("MTOTRANS");
        event2.setChargeBackRightsIndicatorCd("YES");
        event2.setPrepaidCardIndicatorCd("PREPAID");

        assertTrue(event1.equals(event2));

        event2.setPrepaidCardIndicatorCd("NON_PREPAID");
        assertFalse(event1.equals(event2));
    }
}
