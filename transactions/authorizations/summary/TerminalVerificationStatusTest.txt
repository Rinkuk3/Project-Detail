package com.td.api.mbcca.response.transactions.authorizations.summary;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class TerminalVerificationStatusTest {

    private TerminalVerificationStatus terminalVerificationStatus;

    @Before
    public void setUp() {
        terminalVerificationStatus = new TerminalVerificationStatus();
    }

    @Test
    public void testGetAndSetPinPadNotPresentInd() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);
        assertTrue(terminalVerificationStatus.getPinPadNotPresentInd());

        terminalVerificationStatus.setPinPadNotPresentInd(false);
        assertFalse(terminalVerificationStatus.getPinPadNotPresentInd());

        terminalVerificationStatus.setPinPadNotPresentInd(null);
        assertNull(terminalVerificationStatus.getPinPadNotPresentInd());
    }

    @Test
    public void testToString() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);

        String expectedString = "com.td.api.mbcca.response.transactions.authorizations.summary.TerminalVerificationStatus@" +
                                Integer.toHexString(System.identityHashCode(terminalVerificationStatus)) +
                                "[pinPadNotPresentInd=true]";
        assertEquals(expectedString, terminalVerificationStatus.toString());
    }

    @Test
    public void testHashCode() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);
        int expectedHashCode = 31 + (terminalVerificationStatus.getPinPadNotPresentInd() != null ? terminalVerificationStatus.getPinPadNotPresentInd().hashCode() : 0);
        assertEquals(expectedHashCode, terminalVerificationStatus.hashCode());
    }

    @Test
    public void testEquals_withEqualObjects() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);

        TerminalVerificationStatus other = new TerminalVerificationStatus();
        other.setPinPadNotPresentInd(true);

        assertTrue(terminalVerificationStatus.equals(other));
    }

    @Test
    public void testEquals_withDifferentPinPadNotPresentInd() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);

        TerminalVerificationStatus other = new TerminalVerificationStatus();
        other.setPinPadNotPresentInd(false);

        assertFalse(terminalVerificationStatus.equals(other));
    }

    @Test
    public void testEquals_withNull() {
        assertFalse(terminalVerificationStatus.equals(null));
    }

    @Test
    public void testEquals_withDifferentClass() {
        String other = "Some String";
        assertFalse(terminalVerificationStatus.equals(other));
    }

    @Test
    public void testEquals_withSameInstance() {
        terminalVerificationStatus.setPinPadNotPresentInd(true);
        assertTrue(terminalVerificationStatus.equals(terminalVerificationStatus));  // Comparing with itself
    }
}
