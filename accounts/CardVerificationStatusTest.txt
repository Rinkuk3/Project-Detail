package com.td.api.mbcca.response.account;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CardVerificationStatusTest {

    private CardVerificationStatus cardVerificationStatus;

    @BeforeEach
    public void setUp() {
        cardVerificationStatus = new CardVerificationStatus();
    }

    @Test
    public void testGetSetOfflinePINVerificationDoneInd() {
        Boolean offlinePINVerificationDoneInd = true;
        cardVerificationStatus.setOfflinePINVerificationDoneInd(offlinePINVerificationDoneInd);
        assertEquals(offlinePINVerificationDoneInd, cardVerificationStatus.getOfflinePINVerificationDoneInd());
    }

    @Test
    public void testGetSetOfflinePINVerificationFailedInd() {
        Boolean offlinePINVerificationFailedInd = false;
        cardVerificationStatus.setOfflinePINVerificationFailedInd(offlinePINVerificationFailedInd);
        assertEquals(offlinePINVerificationFailedInd, cardVerificationStatus.getOfflinePINVerificationFailedInd());
    }

    @Test
    public void testGetSetPinTryLimitExceededInd() {
        Boolean pinTryLimitExceededInd = true;
        cardVerificationStatus.setPinTryLimitExceededInd(pinTryLimitExceededInd);
        assertEquals(pinTryLimitExceededInd, cardVerificationStatus.getPinTryLimitExceededInd());
    }

    @Test
    public void testToString() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        String expectedToString = "com.td.api.mbcca.response.account.CardVerificationStatus@" + Integer.toHexString(System.identityHashCode(cardVerificationStatus)) +
                "[offlinePINVerificationDoneInd=true,offlinePINVerificationFailedInd=false,pinTryLimitExceededInd=true]";
        assertEquals(expectedToString, cardVerificationStatus.toString());
    }

    @Test
    public void testHashCode() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        int expectedHashCode = 31 * (31 * (31 + Boolean.hashCode(true)) + Boolean.hashCode(false)) + Boolean.hashCode(true);
        assertEquals(expectedHashCode, cardVerificationStatus.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);
        assertTrue(cardVerificationStatus.equals(cardVerificationStatus));
    }

    @Test
    public void testEquals_DifferentObjectType() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);
        assertFalse(cardVerificationStatus.equals("Some String"));
    }

    @Test
    public void testEquals_DifferentValues() {
        CardVerificationStatus other = new CardVerificationStatus();
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        other.setOfflinePINVerificationDoneInd(false);
        other.setOfflinePINVerificationFailedInd(true);
        other.setPinTryLimitExceededInd(false);

        assertFalse(cardVerificationStatus.equals(other));
    }

    @Test
    public void testEquals_SameValues() {
        CardVerificationStatus other = new CardVerificationStatus();
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        other.setOfflinePINVerificationDoneInd(true);
        other.setOfflinePINVerificationFailedInd(false);
        other.setPinTryLimitExceededInd(true);

        assertTrue(cardVerificationStatus.equals(other));
    }

    @Test
    public void testHashCode_Equality() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        CardVerificationStatus other = new CardVerificationStatus();
        other.setOfflinePINVerificationDoneInd(true);
        other.setOfflinePINVerificationFailedInd(false);
        other.setPinTryLimitExceededInd(true);

        assertEquals(cardVerificationStatus.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCode_Inequality() {
        cardVerificationStatus.setOfflinePINVerificationDoneInd(true);
        cardVerificationStatus.setOfflinePINVerificationFailedInd(false);
        cardVerificationStatus.setPinTryLimitExceededInd(true);

        CardVerificationStatus other = new CardVerificationStatus();
        other.setOfflinePINVerificationDoneInd(false);
        other.setOfflinePINVerificationFailedInd(true);
        other.setPinTryLimitExceededInd(false);

        assertNotEquals(cardVerificationStatus.hashCode(), other.hashCode());
    }
}
