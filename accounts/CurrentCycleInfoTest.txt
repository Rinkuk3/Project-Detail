package com.td.api.mbcca.response.account;

import com.td.api.mbcca.shared.Cccyamt;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class CurrentCycleInfoTest {

    private CurrentCycleInfo currentCycleInfo;
    private Cccyamt cccyamt;

    @BeforeEach
    public void setUp() {
        currentCycleInfo = new CurrentCycleInfo();
        cccyamt = new Cccyamt(); // Assuming Cccyamt is a valid class
    }

    @Test
    public void testGetSetAverageDailyBalanceCccyamt() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);
        assertEquals(cccyamt, currentCycleInfo.getAverageDailyBalanceCccyamt());
    }

    @Test
    public void testToString() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);

        String expectedToString = "com.td.api.mbcca.response.account.CurrentCycleInfo@" +
                Integer.toHexString(System.identityHashCode(currentCycleInfo)) +
                "[averageDailyBalanceCccyamt=" + cccyamt + "]";
        assertEquals(expectedToString, currentCycleInfo.toString());
    }

    @Test
    public void testHashCode() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);

        int expectedHashCode = 31 + (cccyamt != null ? cccyamt.hashCode() : 0);
        assertEquals(expectedHashCode, currentCycleInfo.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);
        assertTrue(currentCycleInfo.equals(currentCycleInfo));
    }

    @Test
    public void testEquals_DifferentObjectType() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);
        assertFalse(currentCycleInfo.equals("Some String"));
    }

    @Test
    public void testEquals_DifferentValues() {
        CurrentCycleInfo other = new CurrentCycleInfo();
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);
        Cccyamt differentCccyamt = new Cccyamt(); // Assuming this is a different instance

        other.setAverageDailyBalanceCccyamt(differentCccyamt);

        assertFalse(currentCycleInfo.equals(other));
    }

    @Test
    public void testEquals_SameValues() {
        CurrentCycleInfo other = new CurrentCycleInfo();
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);

        other.setAverageDailyBalanceCccyamt(cccyamt);

        assertTrue(currentCycleInfo.equals(other));
    }

    @Test
    public void testHashCode_Equality() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);

        CurrentCycleInfo other = new CurrentCycleInfo();
        other.setAverageDailyBalanceCccyamt(cccyamt);

        assertEquals(currentCycleInfo.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCode_Inequality() {
        currentCycleInfo.setAverageDailyBalanceCccyamt(cccyamt);

        CurrentCycleInfo other = new CurrentCycleInfo();
        Cccyamt differentCccyamt = new Cccyamt(); // Assuming this is a different instance
        other.setAverageDailyBalanceCccyamt(differentCccyamt);

        assertNotEquals(currentCycleInfo.hashCode(), other.hashCode());
    }
}
