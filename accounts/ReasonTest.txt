import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ReasonTest {

    private Reason reason;

    @BeforeEach
    void setUp() {
        reason = new Reason();
    }

    @Test
    void testGetAndSetReasonCd() {
        String reasonCd = "RC123";
        reason.setReasonCd(reasonCd);
        assertEquals(reasonCd, reason.getReasonCd());
    }

    @Test
    void testGetAndSetReasonDesc() {
        String reasonDesc = "Reason Description";
        reason.setReasonDesc(reasonDesc);
        assertEquals(reasonDesc, reason.getReasonDesc());
    }

    @Test
    void testGetAndSetTsysExtension() {
        TsysExtension__5 tsysExtension = new TsysExtension__5();
        reason.setTsysExtension(tsysExtension);
        assertEquals(tsysExtension, reason.getTsysExtension());
    }

    @Test
    void testToString() {
        String reasonCd = "RC123";
        String reasonDesc = "Reason Description";
        TsysExtension__5 tsysExtension = new TsysExtension__5();

        reason.setReasonCd(reasonCd);
        reason.setReasonDesc(reasonDesc);
        reason.setTsysExtension(tsysExtension);

        String expected = "com.td.api.mbcca.response.account.Reason@" +
                Integer.toHexString(reason.hashCode()) +
                "[reasonCd=" + reasonCd +
                ",reasonDesc=" + reasonDesc +
                ",tsysExtension=" + tsysExtension + "]";
        assertEquals(expected, reason.toString());
    }

    @Test
    void testHashCode() {
        Reason anotherReason = new Reason();
        String reasonCd = "RC123";
        reason.setReasonCd(reasonCd);
        anotherReason.setReasonCd(reasonCd);
        assertEquals(reason.hashCode(), anotherReason.hashCode());
    }

    @Test
    void testEquals() {
        Reason anotherReason = new Reason();
        String reasonCd = "RC123";
        String reasonDesc = "Reason Description";
        TsysExtension__5 tsysExtension = new TsysExtension__5();

        reason.setReasonCd(reasonCd);
        reason.setReasonDesc(reasonDesc);
        reason.setTsysExtension(tsysExtension);

        anotherReason.setReasonCd(reasonCd);
        anotherReason.setReasonDesc(reasonDesc);
        anotherReason.setTsysExtension(tsysExtension);

        assertTrue(reason.equals(anotherReason));
    }

    @Test
    void testEqualsWithDifferentValues() {
        Reason anotherReason = new Reason();
        reason.setReasonCd("RC123");
        reason.setReasonDesc("Reason Description");
        anotherReason.setReasonCd("RC124");
        anotherReason.setReasonDesc("Different Description");
        assertFalse(reason.equals(anotherReason));
    }

    @Test
    void testEqualsWithNull() {
        assertFalse(reason.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        assertFalse(reason.equals("Not a Reason"));
    }
}
