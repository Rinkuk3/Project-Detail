package com.td.api.mbcca.response.account;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

public class ContactTest {

    private Contact contact;
    private Locator locator;

    @BeforeEach
    public void setUp() {
        contact = new Contact();
        locator = new Locator(); // Assuming Locator is a valid class
        locator.setValue("locatorValue");
    }

    @Test
    public void testGetSetUsageCd() {
        String usageCd = "WORK";
        contact.setUsageCd(usageCd);
        assertEquals(usageCd, contact.getUsageCd());
    }

    @Test
    public void testGetSetLocator() {
        List<Locator> locators = new ArrayList<>();
        locators.add(locator);
        contact.setLocator(locators);
        assertEquals(locators, contact.getLocator());
    }

    @Test
    public void testGetSetPrivacyPreferenceConsentCd() {
        String privacyPreferenceConsentCd = "Y";
        contact.setPrivacyPreferenceConsentCd(privacyPreferenceConsentCd);
        assertEquals(privacyPreferenceConsentCd, contact.getPrivacyPreferenceConsentCd());
    }

    @Test
    public void testToString() {
        List<Locator> locators = new ArrayList<>();
        locators.add(locator);
        contact.setUsageCd("WORK");
        contact.setLocator(locators);
        contact.setPrivacyPreferenceConsentCd("Y");

        String expectedToString = "com.td.api.mbcca.response.account.Contact@" + Integer.toHexString(System.identityHashCode(contact)) +
                "[usageCd=WORK,locator=[" + locator.toString() + "],privacyPreferenceConsentCd=Y]";
        assertEquals(expectedToString, contact.toString());
    }

    @Test
    public void testHashCode() {
        List<Locator> locators = new ArrayList<>();
        locators.add(locator);
        contact.setUsageCd("WORK");
        contact.setLocator(locators);
        contact.setPrivacyPreferenceConsentCd("Y");

        int expectedHashCode = 31 * (31 * (31 + "WORK".hashCode()) + locators.hashCode()) + "Y".hashCode();
        assertEquals(expectedHashCode, contact.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        assertTrue(contact.equals(contact));
    }

    @Test
    public void testEquals_DifferentObjectType() {
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        assertFalse(contact.equals("Some String"));
    }

    @Test
    public void testEquals_DifferentValues() {
        Contact other = new Contact();
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        other.setUsageCd("HOME");
        other.setLocator(new ArrayList<>());
        other.setPrivacyPreferenceConsentCd("N");

        assertFalse(contact.equals(other));
    }

    @Test
    public void testEquals_SameValues() {
        Contact other = new Contact();
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        other.setUsageCd("WORK");
        other.setLocator(new ArrayList<>());
        other.setPrivacyPreferenceConsentCd("Y");

        assertTrue(contact.equals(other));
    }

    @Test
    public void testHashCode_Equality() {
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        Contact other = new Contact();
        other.setUsageCd("WORK");
        other.setLocator(new ArrayList<>());
        other.setPrivacyPreferenceConsentCd("Y");

        assertEquals(contact.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCode_Inequality() {
        contact.setUsageCd("WORK");
        contact.setLocator(new ArrayList<>());
        contact.setPrivacyPreferenceConsentCd("Y");

        Contact other = new Contact();
        other.setUsageCd("HOME");
        other.setLocator(new ArrayList<>());
        other.setPrivacyPreferenceConsentCd("N");

        assertNotEquals(contact.hashCode(), other.hashCode());
    }
}
