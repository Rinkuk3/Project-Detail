import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class DailyAuthorizationSummaryTest {

    private DailyAuthorizationSummary dailyAuthorizationSummary;
    private Cccyamt cccyamt;

    @BeforeEach
    void setUp() {
        dailyAuthorizationSummary = new DailyAuthorizationSummary();
        cccyamt = new Cccyamt();
    }

    @Test
    void testGetAndSetDebitTypeCd() {
        dailyAuthorizationSummary.setDebitTypeCd("Debit");
        assertEquals("Debit", dailyAuthorizationSummary.getDebitTypeCd());
    }

    @Test
    void testGetAndSetApprovedCnt() {
        dailyAuthorizationSummary.setApprovedCnt(5);
        assertEquals(5, dailyAuthorizationSummary.getApprovedCnt());
    }

    @Test
    void testGetAndSetApprovedCccyamt() {
        dailyAuthorizationSummary.setApprovedCccyamt(cccyamt);
        assertEquals(cccyamt, dailyAuthorizationSummary.getApprovedCccyamt());
    }

    @Test
    void testGetAndSetPaymentCccyamt() {
        dailyAuthorizationSummary.setPaymentCccyamt(cccyamt);
        assertEquals(cccyamt, dailyAuthorizationSummary.getPaymentCccyamt());
    }

    @Test
    void testToString() {
        dailyAuthorizationSummary.setDebitTypeCd("Debit");
        dailyAuthorizationSummary.setApprovedCnt(5);
        dailyAuthorizationSummary.setApprovedCccyamt(cccyamt);
        dailyAuthorizationSummary.setPaymentCccyamt(cccyamt);
        
        String expectedString = "com.td.api.mbcca.response.account.DailyAuthorizationSummary@" + 
                Integer.toHexString(System.identityHashCode(dailyAuthorizationSummary)) + 
                "[debitTypeCd=Debit,approvedCnt=5,approvedCccyamt=" + cccyamt + ",paymentCccyamt=" + cccyamt + "]";
        
        assertEquals(expectedString, dailyAuthorizationSummary.toString());
    }

    @Test
    void testHashCode() {
        dailyAuthorizationSummary.setDebitTypeCd("Debit");
        dailyAuthorizationSummary.setApprovedCnt(5);
        dailyAuthorizationSummary.setApprovedCccyamt(cccyamt);
        dailyAuthorizationSummary.setPaymentCccyamt(cccyamt);
        
        int expectedHashCode = 1;
        expectedHashCode = ((expectedHashCode * 31) + ("Debit" == null ? 0 : "Debit".hashCode()));
        expectedHashCode = ((expectedHashCode * 31) + (cccyamt == null ? 0 : cccyamt.hashCode()));
        expectedHashCode = ((expectedHashCode * 31) + (5 == null ? 0 : Integer.valueOf(5).hashCode()));
        expectedHashCode = ((expectedHashCode * 31) + (cccyamt == null ? 0 : cccyamt.hashCode()));

        assertEquals(expectedHashCode, dailyAuthorizationSummary.hashCode());
    }

    @Test
    void testEquals() {
        DailyAuthorizationSummary anotherSummary = new DailyAuthorizationSummary();
        dailyAuthorizationSummary.setDebitTypeCd("Debit");
        dailyAuthorizationSummary.setApprovedCnt(5);
        dailyAuthorizationSummary.setApprovedCccyamt(cccyamt);
        dailyAuthorizationSummary.setPaymentCccyamt(cccyamt);

        anotherSummary.setDebitTypeCd("Debit");
        anotherSummary.setApprovedCnt(5);
        anotherSummary.setApprovedCccyamt(cccyamt);
        anotherSummary.setPaymentCccyamt(cccyamt);

        assertTrue(dailyAuthorizationSummary.equals(anotherSummary));
        
        anotherSummary.setDebitTypeCd("Credit");
        assertFalse(dailyAuthorizationSummary.equals(anotherSummary));
    }
}
