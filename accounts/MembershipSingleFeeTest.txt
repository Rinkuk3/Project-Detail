import com.td.api.mbcca.shared.Cccyamt;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MembershipSingleFeeTest {

    private MembershipSingleFee membershipSingleFee;

    @BeforeEach
    void setUp() {
        membershipSingleFee = new MembershipSingleFee();
    }

    @Test
    void testGetAndSetAnnualMembershipFeeCccyamt() {
        Cccyamt annualMembershipFee = new Cccyamt();
        membershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        assertEquals(annualMembershipFee, membershipSingleFee.getAnnualMembershipFeeCccyamt());
    }

    @Test
    void testGetAndSetMaximumAnnualMembershipFeeCccyamt() {
        Cccyamt maximumAnnualMembershipFee = new Cccyamt();
        membershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        assertEquals(maximumAnnualMembershipFee, membershipSingleFee.getMaximumAnnualMembershipFeeCccyamt());
    }

    @Test
    void testGetAndSetAdditionalCardAnnualMembershipFeeCccyamt() {
        Cccyamt additionalCardAnnualMembershipFee = new Cccyamt();
        membershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        assertEquals(additionalCardAnnualMembershipFee, membershipSingleFee.getAdditionalCardAnnualMembershipFeeCccyamt());
    }

    @Test
    void testGetAndSetNumberOfFreeChargeCardsCnt() {
        Integer numberOfFreeChargeCardsCnt = 5;
        membershipSingleFee.setNumberOfFreeChargeCardsCnt(numberOfFreeChargeCardsCnt);
        assertEquals(numberOfFreeChargeCardsCnt, membershipSingleFee.getNumberOfFreeChargeCardsCnt());
    }

    @Test
    void testToString() {
        String expectedString = "com.td.api.mbcca.response.account.MembershipSingleFee@" + 
                Integer.toHexString(System.identityHashCode(membershipSingleFee)) + 
                "[annualMembershipFeeCccyamt=<null>,maximumAnnualMembershipFeeCccyamt=<null>,additionalCardAnnualMembershipFeeCccyamt=<null>,numberOfFreeChargeCardsCnt=<null>]";
        assertEquals(expectedString, membershipSingleFee.toString());

        Cccyamt annualMembershipFee = new Cccyamt();
        Cccyamt maximumAnnualMembershipFee = new Cccyamt();
        Cccyamt additionalCardAnnualMembershipFee = new Cccyamt();
        membershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        membershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        membershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        membershipSingleFee.setNumberOfFreeChargeCardsCnt(5);

        expectedString = "com.td.api.mbcca.response.account.MembershipSingleFee@" + 
                Integer.toHexString(System.identityHashCode(membershipSingleFee)) + 
                "[annualMembershipFeeCccyamt=" + annualMembershipFee + 
                ",maximumAnnualMembershipFeeCccyamt=" + maximumAnnualMembershipFee + 
                ",additionalCardAnnualMembershipFeeCccyamt=" + additionalCardAnnualMembershipFee + 
                ",numberOfFreeChargeCardsCnt=5]";
        assertEquals(expectedString, membershipSingleFee.toString());
    }

    @Test
    void testHashCode() {
        Cccyamt annualMembershipFee = new Cccyamt();
        Cccyamt maximumAnnualMembershipFee = new Cccyamt();
        Cccyamt additionalCardAnnualMembershipFee = new Cccyamt();
        membershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        membershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        membershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        membershipSingleFee.setNumberOfFreeChargeCardsCnt(5);

        MembershipSingleFee anotherMembershipSingleFee = new MembershipSingleFee();
        anotherMembershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        anotherMembershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        anotherMembershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        anotherMembershipSingleFee.setNumberOfFreeChargeCardsCnt(5);

        assertEquals(membershipSingleFee.hashCode(), anotherMembershipSingleFee.hashCode());
    }

    @Test
    void testEquals() {
        Cccyamt annualMembershipFee = new Cccyamt();
        Cccyamt maximumAnnualMembershipFee = new Cccyamt();
        Cccyamt additionalCardAnnualMembershipFee = new Cccyamt();
        membershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        membershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        membershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        membershipSingleFee.setNumberOfFreeChargeCardsCnt(5);

        MembershipSingleFee anotherMembershipSingleFee = new MembershipSingleFee();
        anotherMembershipSingleFee.setAnnualMembershipFeeCccyamt(annualMembershipFee);
        anotherMembershipSingleFee.setMaximumAnnualMembershipFeeCccyamt(maximumAnnualMembershipFee);
        anotherMembershipSingleFee.setAdditionalCardAnnualMembershipFeeCccyamt(additionalCardAnnualMembershipFee);
        anotherMembershipSingleFee.setNumberOfFreeChargeCardsCnt(5);

        assertTrue(membershipSingleFee.equals(anotherMembershipSingleFee));

        anotherMembershipSingleFee.setNumberOfFreeChargeCardsCnt(10);
        assertFalse(membershipSingleFee.equals(anotherMembershipSingleFee));
    }

    @Test
    void testEqualsNull() {
        assertFalse(membershipSingleFee.equals(null));
    }

    @Test
    void testEqualsSameObject() {
        assertTrue(membershipSingleFee.equals(membershipSingleFee));
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(membershipSingleFee.equals(new Object()));
    }
}
