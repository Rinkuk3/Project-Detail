import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LocatorTest {

    private Locator locator;

    @BeforeEach
    void setUp() {
        locator = new Locator();
    }

    @Test
    void testGetAndSetEmailAddress() {
        EmailAddress emailAddress = new EmailAddress();
        emailAddress.setEmail("test@example.com");
        locator.setEmailAddress(emailAddress);
        assertEquals(emailAddress, locator.getEmailAddress());
    }

    @Test
    void testGetAndSetInternetProtocolAddress() {
        InternetProtocolAddress ipAddress = new InternetProtocolAddress();
        ipAddress.setDomainName("example.com");
        locator.setInternetProtocolAddress(ipAddress);
        assertEquals(ipAddress, locator.getInternetProtocolAddress());
    }

    @Test
    void testGetAndSetStreetAddress() {
        StreetAddress streetAddress = new StreetAddress();
        streetAddress.setStreet("123 Main St");
        locator.setStreetAddress(streetAddress);
        assertEquals(streetAddress, locator.getStreetAddress());
    }

    @Test
    void testGetAndSetTelephoneNumber() {
        TelephoneNumber telephoneNumber = new TelephoneNumber();
        telephoneNumber.setPhoneNumber("123-456-7890");
        locator.setTelephoneNumber(telephoneNumber);
        assertEquals(telephoneNumber, locator.getTelephoneNumber());
    }

    @Test
    void testToString() {
        String expectedString = "com.td.api.mbcca.response.account.Locator@" + 
                Integer.toHexString(System.identityHashCode(locator)) + 
                "[emailAddress=<null>,internetProtocolAddress=<null>,streetAddress=<null>,telephoneNumber=<null>]";
        assertEquals(expectedString, locator.toString());
    }

    @Test
    void testHashCode() {
        EmailAddress emailAddress = new EmailAddress();
        emailAddress.setEmail("test@example.com");
        InternetProtocolAddress ipAddress = new InternetProtocolAddress();
        ipAddress.setDomainName("example.com");
        StreetAddress streetAddress = new StreetAddress();
        streetAddress.setStreet("123 Main St");
        TelephoneNumber telephoneNumber = new TelephoneNumber();
        telephoneNumber.setPhoneNumber("123-456-7890");

        locator.setEmailAddress(emailAddress);
        locator.setInternetProtocolAddress(ipAddress);
        locator.setStreetAddress(streetAddress);
        locator.setTelephoneNumber(telephoneNumber);

        Locator anotherLocator = new Locator();
        anotherLocator.setEmailAddress(emailAddress);
        anotherLocator.setInternetProtocolAddress(ipAddress);
        anotherLocator.setStreetAddress(streetAddress);
        anotherLocator.setTelephoneNumber(telephoneNumber);

        assertEquals(locator.hashCode(), anotherLocator.hashCode());
    }

    @Test
    void testEquals() {
        EmailAddress emailAddress = new EmailAddress();
        emailAddress.setEmail("test@example.com");
        InternetProtocolAddress ipAddress = new InternetProtocolAddress();
        ipAddress.setDomainName("example.com");
        StreetAddress streetAddress = new StreetAddress();
        streetAddress.setStreet("123 Main St");
        TelephoneNumber telephoneNumber = new TelephoneNumber();
        telephoneNumber.setPhoneNumber("123-456-7890");

        locator.setEmailAddress(emailAddress);
        locator.setInternetProtocolAddress(ipAddress);
        locator.setStreetAddress(streetAddress);
        locator.setTelephoneNumber(telephoneNumber);

        Locator anotherLocator = new Locator();
        anotherLocator.setEmailAddress(emailAddress);
        anotherLocator.setInternetProtocolAddress(ipAddress);
        anotherLocator.setStreetAddress(streetAddress);
        anotherLocator.setTelephoneNumber(telephoneNumber);

        assertTrue(locator.equals(anotherLocator));

        anotherLocator.setTelephoneNumber(new TelephoneNumber());
        assertFalse(locator.equals(anotherLocator));
    }
}
