package com.td.api.mbcca.response.account;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class AlertSetupTest {

    private AlertSetup alertSetup;
    private CardWatch cardWatch;
    private TieredWatch tieredWatch;

    @Before
    public void setUp() {
        alertSetup = new AlertSetup();
        cardWatch = new CardWatch(); // You can mock this class if necessary
        tieredWatch = new TieredWatch(); // You can mock this class if necessary
    }

    @Test
    public void testSetGetCardWatch() {
        alertSetup.setCardWatch(cardWatch);
        assertEquals(cardWatch, alertSetup.getCardWatch());
    }

    @Test
    public void testSetGetTieredWatch() {
        alertSetup.setTieredWatch(tieredWatch);
        assertEquals(tieredWatch, alertSetup.getTieredWatch());
    }

    @Test
    public void testToString() {
        alertSetup.setCardWatch(cardWatch);
        alertSetup.setTieredWatch(tieredWatch);

        String expected = "com.td.api.mbcca.response.account.AlertSetup@" + Integer.toHexString(System.identityHashCode(alertSetup)) + "[cardWatch=" + cardWatch + ",tieredWatch=" + tieredWatch + "]";
        assertEquals(expected, alertSetup.toString());
    }

    @Test
    public void testHashCode() {
        alertSetup.setCardWatch(cardWatch);
        alertSetup.setTieredWatch(tieredWatch);

        int expectedHashCode = (31 * (31 + cardWatch.hashCode())) + tieredWatch.hashCode();
        assertEquals(expectedHashCode, alertSetup.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        alertSetup.setCardWatch(cardWatch);
        alertSetup.setTieredWatch(tieredWatch);

        assertTrue(alertSetup.equals(alertSetup));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(alertSetup.equals("Some other class"));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(alertSetup.equals(null));
    }

    @Test
    public void testEquals_DifferentValues() {
        CardWatch anotherCardWatch = new CardWatch(); // Can set different values if necessary
        TieredWatch anotherTieredWatch = new TieredWatch(); // Can set different values if necessary

        alertSetup.setCardWatch(cardWatch);
        alertSetup.setTieredWatch(tieredWatch);

        AlertSetup anotherAlertSetup = new AlertSetup();
        anotherAlertSetup.setCardWatch(anotherCardWatch);
        anotherAlertSetup.setTieredWatch(anotherTieredWatch);

        assertFalse(alertSetup.equals(anotherAlertSetup));
    }

    @Test
    public void testEquals_SameValues() {
        alertSetup.setCardWatch(cardWatch);
        alertSetup.setTieredWatch(tieredWatch);

        AlertSetup anotherAlertSetup = new AlertSetup();
        anotherAlertSetup.setCardWatch(cardWatch);
        anotherAlertSetup.setTieredWatch(tieredWatch);

        assertTrue(alertSetup.equals(anotherAlertSetup));
    }
}
