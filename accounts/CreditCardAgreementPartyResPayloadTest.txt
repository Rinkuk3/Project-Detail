package com.td.api.mbcca.response.account;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CreditCardAgreementPartyResPayloadTest {

    private CreditCardAgreementPartyResPayload payload;
    private CreditCardAgreement creditCardAgreement;
    private CreditCardAgreementToParty creditCardAgreementToParty;
    private AlertSetup alertSetup;

    @BeforeEach
    public void setUp() {
        payload = new CreditCardAgreementPartyResPayload();
        creditCardAgreement = new CreditCardAgreement(); // Assuming CreditCardAgreement is a valid class
        creditCardAgreementToParty = new CreditCardAgreementToParty(); // Assuming CreditCardAgreementToParty is a valid class
        alertSetup = new AlertSetup(); // Assuming AlertSetup is a valid class
    }

    @Test
    public void testGetSetCreditCardAgreement() {
        payload.setCreditCardAgreement(creditCardAgreement);
        assertEquals(creditCardAgreement, payload.getCreditCardAgreement());
    }

    @Test
    public void testGetSetCreditCardAgreementToParty() {
        List<CreditCardAgreementToParty> list = new ArrayList<>();
        list.add(creditCardAgreementToParty);
        payload.setCreditCardAgreementToParty(list);
        assertEquals(list, payload.getCreditCardAgreementToParty());
    }

    @Test
    public void testGetSetAlertSetup() {
        List<AlertSetup> list = new ArrayList<>();
        list.add(alertSetup);
        payload.setAlertSetup(list);
        assertEquals(list, payload.getAlertSetup());
    }

    @Test
    public void testGetSetStatus() {
        payload.setStatus(true);
        assertTrue(payload.getStatus());
        
        payload.setStatus(false);
        assertFalse(payload.getStatus());
    }

    @Test
    public void testToString() {
        List<CreditCardAgreementToParty> agreementToPartyList = new ArrayList<>();
        agreementToPartyList.add(creditCardAgreementToParty);
        List<AlertSetup> alertSetupList = new ArrayList<>();
        alertSetupList.add(alertSetup);

        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(agreementToPartyList);
        payload.setAlertSetup(alertSetupList);
        payload.setStatus(true);

        String expectedToString = "com.td.api.mbcca.response.account.CreditCardAgreementPartyResPayload@" + 
                Integer.toHexString(System.identityHashCode(payload)) +
                "[creditCardAgreement=" + creditCardAgreement + 
                ",creditCardAgreementToParty=" + agreementToPartyList + 
                ",alertSetup=" + alertSetupList + 
                ",status=true]";

        assertEquals(expectedToString, payload.toString());
    }

    @Test
    public void testHashCode() {
        List<CreditCardAgreementToParty> agreementToPartyList = new ArrayList<>();
        agreementToPartyList.add(creditCardAgreementToParty);
        List<AlertSetup> alertSetupList = new ArrayList<>();
        alertSetupList.add(alertSetup);

        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(agreementToPartyList);
        payload.setAlertSetup(alertSetupList);
        payload.setStatus(true);

        int expectedHashCode = 31 * (31 * (31 * (31 + creditCardAgreement.hashCode()) + agreementToPartyList.hashCode()) +
                alertSetupList.hashCode()) + Boolean.hashCode(true);
        assertEquals(expectedHashCode, payload.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        assertTrue(payload.equals(payload));
    }

    @Test
    public void testEquals_DifferentObjectType() {
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        assertFalse(payload.equals("Some String"));
    }

    @Test
    public void testEquals_DifferentValues() {
        CreditCardAgreementPartyResPayload other = new CreditCardAgreementPartyResPayload();
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        other.setCreditCardAgreement(creditCardAgreement);
        other.setCreditCardAgreementToParty(new ArrayList<>());
        other.setAlertSetup(new ArrayList<>());
        other.setStatus(false);

        assertFalse(payload.equals(other));
    }

    @Test
    public void testEquals_SameValues() {
        CreditCardAgreementPartyResPayload other = new CreditCardAgreementPartyResPayload();
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        other.setCreditCardAgreement(creditCardAgreement);
        other.setCreditCardAgreementToParty(new ArrayList<>());
        other.setAlertSetup(new ArrayList<>());
        other.setStatus(true);

        assertTrue(payload.equals(other));
    }

    @Test
    public void testHashCode_Equality() {
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        CreditCardAgreementPartyResPayload other = new CreditCardAgreementPartyResPayload();
        other.setCreditCardAgreement(creditCardAgreement);
        other.setCreditCardAgreementToParty(new ArrayList<>());
        other.setAlertSetup(new ArrayList<>());
        other.setStatus(true);

        assertEquals(payload.hashCode(), other.hashCode());
    }

    @Test
    public void testHashCode_Inequality() {
        payload.setCreditCardAgreement(creditCardAgreement);
        payload.setCreditCardAgreementToParty(new ArrayList<>());
        payload.setAlertSetup(new ArrayList<>());
        payload.setStatus(true);

        CreditCardAgreementPartyResPayload other = new CreditCardAgreementPartyResPayload();
        other.setCreditCardAgreement(creditCardAgreement);
        other.setCreditCardAgreementToParty(new ArrayList<>());
        other.setAlertSetup(new ArrayList<>());
        other.setStatus(false);

        assertNotEquals(payload.hashCode(), other.hashCode());
    }
}
