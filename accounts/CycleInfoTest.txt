import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class CycleInfoTest {

    private CycleInfo cycleInfo;

    @BeforeEach
    void setUp() {
        cycleInfo = new CycleInfo();
    }

    @Test
    void testGettersAndSetters() {
        String previousDt = "2025-02-01";
        cycleInfo.setPreviousDt(previousDt);
        assertEquals(previousDt, cycleInfo.getPreviousDt());

        String cycleDt = "2025-02-28";
        cycleInfo.setCycleDt(cycleDt);
        assertEquals(cycleDt, cycleInfo.getCycleDt());

        BigDecimal balanceAmt = BigDecimal.valueOf(1000.50);
        cycleInfo.setBalanceAmt(balanceAmt);
        assertEquals(balanceAmt, cycleInfo.getBalanceAmt());

        BigDecimal previousBalanceAmt = BigDecimal.valueOf(950.75);
        cycleInfo.setPreviousBalanceAmt(previousBalanceAmt);
        assertEquals(previousBalanceAmt, cycleInfo.getPreviousBalanceAmt());

        BigDecimal creditLimitAmt = BigDecimal.valueOf(2000.00);
        cycleInfo.setCreditLimitAmt(creditLimitAmt);
        assertEquals(creditLimitAmt, cycleInfo.getCreditLimitAmt());

        String paymentDueDt = "2025-03-15";
        cycleInfo.setPaymentDueDt(paymentDueDt);
        assertEquals(paymentDueDt, cycleInfo.getPaymentDueDt());

        BigDecimal minimumPaymentAmt = BigDecimal.valueOf(50.00);
        cycleInfo.setMinimumPaymentAmt(minimumPaymentAmt);
        assertEquals(minimumPaymentAmt, cycleInfo.getMinimumPaymentAmt());

        BigDecimal availableCreditLimitAmt = BigDecimal.valueOf(1500.00);
        cycleInfo.setAvailableCreditLimitAmt(availableCreditLimitAmt);
        assertEquals(availableCreditLimitAmt, cycleInfo.getAvailableCreditLimitAmt());

        FinancialChargeInfo financialChargeInfo = new FinancialChargeInfo();
        cycleInfo.setFinancialChargeInfo(financialChargeInfo);
        assertEquals(financialChargeInfo, cycleInfo.getFinancialChargeInfo());

        List<PastDueInfo> pastDueInfo = new ArrayList<>();
        cycleInfo.setPastDueInfo(pastDueInfo);
        assertEquals(pastDueInfo, cycleInfo.getPastDueInfo());

        Cccyamt purchaseCccyamt = new Cccyamt();
        cycleInfo.setPurchaseCccyamt(purchaseCccyamt);
        assertEquals(purchaseCccyamt, cycleInfo.getPurchaseCccyamt());

        String statementStartDt = "2025-02-01";
        cycleInfo.setStatementStartDt(statementStartDt);
        assertEquals(statementStartDt, cycleInfo.getStatementStartDt());

        Cccyamt totalFeeChargeCccyamt = new Cccyamt();
        cycleInfo.setTotalFeeChargeCccyamt(totalFeeChargeCccyamt);
        assertEquals(totalFeeChargeCccyamt, cycleInfo.getTotalFeeChargeCccyamt());

        String cycleSequenceNum = "12345";
        cycleInfo.setCycleSequenceNum(cycleSequenceNum);
        assertEquals(cycleSequenceNum, cycleInfo.getCycleSequenceNum());

        String paymentStatusTypeCd = "PAID";
        cycleInfo.setPaymentStatusTypeCd(paymentStatusTypeCd);
        assertEquals(paymentStatusTypeCd, cycleInfo.getPaymentStatusTypeCd());

        Integer cycleDaysCnt = 30;
        cycleInfo.setCycleDaysCnt(cycleDaysCnt);
        assertEquals(cycleDaysCnt, cycleInfo.getCycleDaysCnt());

        BigDecimal calculatedMinimumPaymentAmt = BigDecimal.valueOf(50.00);
        cycleInfo.setCalculatedMinimumPaymentAmt(calculatedMinimumPaymentAmt);
        assertEquals(calculatedMinimumPaymentAmt, cycleInfo.getCalculatedMinimumPaymentAmt());

        Cccyamt latePaymentFeeCccyamt = new Cccyamt();
        cycleInfo.setLatePaymentFeeCccyamt(latePaymentFeeCccyamt);
        assertEquals(latePaymentFeeCccyamt, cycleInfo.getLatePaymentFeeCccyamt());

        Cccyamt frontEndFeeCccyamt = new Cccyamt();
        cycleInfo.setFrontEndFeeCccyamt(frontEndFeeCccyamt);
        assertEquals(frontEndFeeCccyamt, cycleInfo.getFrontEndFeeCccyamt());

        Cccyamt annualMembershipFeeCccyamt = new Cccyamt();
        cycleInfo.setAnnualMembershipFeeCccyamt(annualMembershipFeeCccyamt);
        assertEquals(annualMembershipFeeCccyamt, cycleInfo.getAnnualMembershipFeeCccyamt());

        Cccyamt overLimitFeeCccyamt = new Cccyamt();
        cycleInfo.setOverLimitFeeCccyamt(overLimitFeeCccyamt);
        assertEquals(overLimitFeeCccyamt, cycleInfo.getOverLimitFeeCccyamt());

        Cccyamt checkReturnFeeCccyamt = new Cccyamt();
        cycleInfo.setCheckReturnFeeCccyamt(checkReturnFeeCccyamt);
        assertEquals(checkReturnFeeCccyamt, cycleInfo.getCheckReturnFeeCccyamt());

        String statementInvoiceIndicatorCd = "INVOICE";
        cycleInfo.setStatementInvoiceIndicatorCd(statementInvoiceIndicatorCd);
        assertEquals(statementInvoiceIndicatorCd, cycleInfo.getStatementInvoiceIndicatorCd());

        List<TransactionCategory> transactionCategory = new ArrayList<>();
        cycleInfo.setTransactionCategory(transactionCategory);
        assertEquals(transactionCategory, cycleInfo.getTransactionCategory());
    }

    @Test
    void testToString() {
        String result = cycleInfo.toString();
        assertNotNull(result);
    }

    @Test
    void testEqualsAndHashCode() {
        CycleInfo cycleInfo1 = new CycleInfo();
        CycleInfo cycleInfo2 = new CycleInfo();
        assertEquals(cycleInfo1, cycleInfo2);
        assertEquals(cycleInfo1.hashCode(), cycleInfo2.hashCode());
    }

    @Test
    void testNotEquals() {
        CycleInfo cycleInfo1 = new CycleInfo();
        cycleInfo1.setPreviousDt("2025-02-01");
        CycleInfo cycleInfo2 = new CycleInfo();
        cycleInfo2.setPreviousDt("2025-03-01");

        assertNotEquals(cycleInfo1, cycleInfo2);
        assertNotEquals(cycleInfo1.hashCode(), cycleInfo2.hashCode());
    }
}
