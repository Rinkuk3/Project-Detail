import com.td.api.mbcca.shared.Cccyamt;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class PreviousCycleInfoTest {

    private PreviousCycleInfo previousCycleInfo;

    @BeforeEach
    void setUp() {
        previousCycleInfo = new PreviousCycleInfo();
    }

    @Test
    void testGetAndSetBilledFinanceChargeCccyamt() {
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        assertEquals(billedFinanceChargeCccyamt, previousCycleInfo.getBilledFinanceChargeCccyamt());
    }

    @Test
    void testGetAndSetAppliedPaymentCccyamt() {
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);
        assertEquals(appliedPaymentCccyamt, previousCycleInfo.getAppliedPaymentCccyamt());
    }

    @Test
    void testToString() {
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);
        
        String expected = "com.td.api.mbcca.response.account.PreviousCycleInfo@" + Integer.toHexString(previousCycleInfo.hashCode()) +
                "[billedFinanceChargeCccyamt=" + billedFinanceChargeCccyamt + ",appliedPaymentCccyamt=" + appliedPaymentCccyamt + "]";
        assertEquals(expected, previousCycleInfo.toString());
    }

    @Test
    void testHashCode() {
        PreviousCycleInfo anotherPreviousCycleInfo = new PreviousCycleInfo();
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        anotherPreviousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        anotherPreviousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        assertEquals(previousCycleInfo.hashCode(), anotherPreviousCycleInfo.hashCode());
    }

    @Test
    void testEquals() {
        PreviousCycleInfo anotherPreviousCycleInfo = new PreviousCycleInfo();
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        anotherPreviousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        anotherPreviousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        assertTrue(previousCycleInfo.equals(anotherPreviousCycleInfo));
    }

    @Test
    void testEqualsWithDifferentBilledFinanceChargeCccyamt() {
        PreviousCycleInfo anotherPreviousCycleInfo = new PreviousCycleInfo();
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        Cccyamt differentBilledFinanceChargeCccyamt = new Cccyamt();
        anotherPreviousCycleInfo.setBilledFinanceChargeCccyamt(differentBilledFinanceChargeCccyamt);
        anotherPreviousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        assertFalse(previousCycleInfo.equals(anotherPreviousCycleInfo));
    }

    @Test
    void testEqualsWithDifferentAppliedPaymentCccyamt() {
        PreviousCycleInfo anotherPreviousCycleInfo = new PreviousCycleInfo();
        Cccyamt billedFinanceChargeCccyamt = new Cccyamt();
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        
        previousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        Cccyamt differentAppliedPaymentCccyamt = new Cccyamt();
        anotherPreviousCycleInfo.setBilledFinanceChargeCccyamt(billedFinanceChargeCccyamt);
        anotherPreviousCycleInfo.setAppliedPaymentCccyamt(differentAppliedPaymentCccyamt);

        assertFalse(previousCycleInfo.equals(anotherPreviousCycleInfo));
    }

    @Test
    void testEqualsWithNullBilledFinanceChargeCccyamt() {
        PreviousCycleInfo anotherPreviousCycleInfo = new PreviousCycleInfo();
        previousCycleInfo.setBilledFinanceChargeCccyamt(null);
        Cccyamt appliedPaymentCccyamt = new Cccyamt();
        previousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        anotherPreviousCycleInfo.setBilledFinanceChargeCccyamt(null);
        anotherPreviousCycleInfo.setAppliedPaymentCccyamt(appliedPaymentCccyamt);

        assertTrue(previousCycleInfo.equals(anotherPreviousCycleInfo));
    }

    @Test
    void testEqualsWithDifferentClass() {
        String notAPreviousCycleInfo = "Not a PreviousCycleInfo";
        assertFalse(previousCycleInfo.equals(notAPreviousCycleInfo));
    }
}
