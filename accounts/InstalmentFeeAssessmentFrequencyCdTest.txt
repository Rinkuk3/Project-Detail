import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;

class InstalmentFeeAssessmentFrequencyCdTest {

    private InstalmentFeeAssessmentFrequencyCd instalmentFee;

    @BeforeEach
    void setUp() {
        instalmentFee = new InstalmentFeeAssessmentFrequencyCd();
    }

    @Test
    void testGetAndSetAmount() {
        BigDecimal amount = new BigDecimal("100.00");
        instalmentFee.setAmount(amount);
        assertEquals(amount, instalmentFee.getAmount());
    }

    @Test
    void testGetAndSetCurrencyCd() {
        String currencyCd = "USD";
        instalmentFee.setCurrencyCd(currencyCd);
        assertEquals(currencyCd, instalmentFee.getCurrencyCd());
    }

    @Test
    void testToString() {
        BigDecimal amount = new BigDecimal("100.00");
        String currencyCd = "USD";

        instalmentFee.setAmount(amount);
        instalmentFee.setCurrencyCd(currencyCd);

        String expectedString = "com.td.api.mbcca.response.account.InstalmentFeeAssessmentFrequencyCd@" + 
                Integer.toHexString(System.identityHashCode(instalmentFee)) + 
                "[amount=" + amount + 
                ",currencyCd=USD]";
        assertEquals(expectedString, instalmentFee.toString());
    }

    @Test
    void testHashCode() {
        BigDecimal amount = new BigDecimal("100.00");
        String currencyCd = "USD";

        instalmentFee.setAmount(amount);
        instalmentFee.setCurrencyCd(currencyCd);

        InstalmentFeeAssessmentFrequencyCd anotherInstalmentFee = new InstalmentFeeAssessmentFrequencyCd();
        anotherInstalmentFee.setAmount(amount);
        anotherInstalmentFee.setCurrencyCd(currencyCd);

        assertEquals(instalmentFee.hashCode(), anotherInstalmentFee.hashCode());
    }

    @Test
    void testEquals() {
        BigDecimal amount = new BigDecimal("100.00");
        String currencyCd = "USD";

        instalmentFee.setAmount(amount);
        instalmentFee.setCurrencyCd(currencyCd);

        InstalmentFeeAssessmentFrequencyCd anotherInstalmentFee = new InstalmentFeeAssessmentFrequencyCd();
        anotherInstalmentFee.setAmount(amount);
        anotherInstalmentFee.setCurrencyCd(currencyCd);

        assertTrue(instalmentFee.equals(anotherInstalmentFee));

        anotherInstalmentFee.setCurrencyCd("EUR");
        assertFalse(instalmentFee.equals(anotherInstalmentFee));
    }
}
