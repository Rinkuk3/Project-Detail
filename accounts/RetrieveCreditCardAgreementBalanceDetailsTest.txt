import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class RetrieveCreditCardAgreementBalanceDetailsTest {

    private RetrieveCreditCardAgreementBalanceDetails details;

    @BeforeEach
    public void setUp() {
        details = new RetrieveCreditCardAgreementBalanceDetails();
        details.setStatus(new Status());
        
        List<CurrentBalanceInfo> currentBalanceInfo = new ArrayList<>();
        currentBalanceInfo.add(new CurrentBalanceInfo());
        details.setCurrentBalanceInfo(currentBalanceInfo);
        
        List<PromotionTransactionCategoryInfo> promotionTransactionCategoryInfo = new ArrayList<>();
        promotionTransactionCategoryInfo.add(new PromotionTransactionCategoryInfo());
        details.setPromotionTransactionCategoryInfo(promotionTransactionCategoryInfo);
        
        List<PreviousBalanceInfo> previousBalanceInfo = new ArrayList<>();
        previousBalanceInfo.add(new PreviousBalanceInfo());
        details.setPreviousBalanceInfo(previousBalanceInfo);
    }

    @Test
    public void testToString() {
        String expectedToString = "RetrieveCreditCardAgreementBalanceDetails@" + Integer.toHexString(System.identityHashCode(details)) +
                "[status=" + details.getStatus() +
                ",currentBalanceInfo=" + details.getCurrentBalanceInfo() +
                ",promotionTransactionCategoryInfo=" + details.getPromotionTransactionCategoryInfo() +
                ",previousBalanceInfo=" + details.getPreviousBalanceInfo() +
                "]";
        
        assertTrue(details.toString().contains("RetrieveCreditCardAgreementBalanceDetails"));
        assertTrue(details.toString().contains("status"));
        assertTrue(details.toString().contains("currentBalanceInfo"));
        assertTrue(details.toString().contains("promotionTransactionCategoryInfo"));
        assertTrue(details.toString().contains("previousBalanceInfo"));
    }

    @Test
    public void testHashCode() {
        int expectedHashCode = details.hashCode();
        
        RetrieveCreditCardAgreementBalanceDetails anotherDetails = new RetrieveCreditCardAgreementBalanceDetails();
        anotherDetails.setStatus(new Status());
        List<CurrentBalanceInfo> currentBalanceInfo = new ArrayList<>();
        currentBalanceInfo.add(new CurrentBalanceInfo());
        anotherDetails.setCurrentBalanceInfo(currentBalanceInfo);
        
        List<PromotionTransactionCategoryInfo> promotionTransactionCategoryInfo = new ArrayList<>();
        promotionTransactionCategoryInfo.add(new PromotionTransactionCategoryInfo());
        anotherDetails.setPromotionTransactionCategoryInfo(promotionTransactionCategoryInfo);
        
        List<PreviousBalanceInfo> previousBalanceInfo = new ArrayList<>();
        previousBalanceInfo.add(new PreviousBalanceInfo());
        anotherDetails.setPreviousBalanceInfo(previousBalanceInfo);
        
        assertEquals(expectedHashCode, anotherDetails.hashCode());
    }

    @Test
    public void testEquals() {
        RetrieveCreditCardAgreementBalanceDetails equalDetails = new RetrieveCreditCardAgreementBalanceDetails();
        equalDetails.setStatus(new Status());
        List<CurrentBalanceInfo> currentBalanceInfo = new ArrayList<>();
        currentBalanceInfo.add(new CurrentBalanceInfo());
        equalDetails.setCurrentBalanceInfo(currentBalanceInfo);
        
        List<PromotionTransactionCategoryInfo> promotionTransactionCategoryInfo = new ArrayList<>();
        promotionTransactionCategoryInfo.add(new PromotionTransactionCategoryInfo());
        equalDetails.setPromotionTransactionCategoryInfo(promotionTransactionCategoryInfo);
        
        List<PreviousBalanceInfo> previousBalanceInfo = new ArrayList<>();
        previousBalanceInfo.add(new PreviousBalanceInfo());
        equalDetails.setPreviousBalanceInfo(previousBalanceInfo);
        
        assertTrue(details.equals(equalDetails));

        RetrieveCreditCardAgreementBalanceDetails notEqualDetails = new RetrieveCreditCardAgreementBalanceDetails();
        notEqualDetails.setStatus(new Status());
        assertFalse(details.equals(notEqualDetails));
    }
}
