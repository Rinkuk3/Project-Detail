package com.td.mbna.msec.midtier.content.payload.getlinkcontent;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for RequestPayload class.
 */
public class RequestPayloadTest {

    @Test
    public void testGetterSetter() {
        // Create an instance
        RequestPayload payload = new RequestPayload();
        
        // Set fields
        payload.setContentId("content123");
        payload.setLangId("en");
        payload.setPath("/path/to/content");

        // Test getter values
        assertEquals("content123", payload.getContentId());
        assertEquals("en", payload.getLangId());
        assertEquals("/path/to/content", payload.getPath());
    }

    @Test
    public void testToString_NullValues() {
        // Test `toString` with all fields set to null
        RequestPayload payload = new RequestPayload();
        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.RequestPayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[contentId=<null>,langId=<null>,path=<null>]";
        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testToString_WithValues() {
        // Test `toString` with valid values
        RequestPayload payload = new RequestPayload();
        payload.setContentId("content123");
        payload.setLangId("en");
        payload.setPath("/path/to/content");

        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.RequestPayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[contentId=content123,langId=en,path=/path/to/content]";
        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testHashCode_NullValues() {
        // Test `hashCode()` when all fields are null
        RequestPayload payload = new RequestPayload();
        assertEquals(1, payload.hashCode());
    }

    @Test
    public void testHashCode_WithValues() {
        // Test `hashCode()` when fields have valid values
        RequestPayload payload = new RequestPayload();
        payload.setContentId("content123");
        payload.setLangId("en");
        payload.setPath("/path/to/content");

        int expectedHashCode = 31 * (31 * (31 + "content123".hashCode()) + "/path/to/content".hashCode()) + "en".hashCode();
        assertEquals(expectedHashCode, payload.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        // Test equality with the same instance
        RequestPayload payload = new RequestPayload();
        payload.setContentId("content123");
        payload.setLangId("en");
        payload.setPath("/path/to/content");
        assertTrue(payload.equals(payload));
    }

    @Test
    public void testEquals_EqualValues() {
        // Test equality with two instances that have the same values
        RequestPayload payload1 = new RequestPayload();
        payload1.setContentId("content123");
        payload1.setLangId("en");
        payload1.setPath("/path/to/content");

        RequestPayload payload2 = new RequestPayload();
        payload2.setContentId("content123");
        payload2.setLangId("en");
        payload2.setPath("/path/to/content");

        assertTrue(payload1.equals(payload2));
    }

    @Test
    public void testEquals_DifferentValues() {
        // Test inequality when the fields differ
        RequestPayload payload1 = new RequestPayload();
        payload1.setContentId("content123");
        payload1.setLangId("en");
        payload1.setPath("/path/to/content");

        RequestPayload payload2 = new RequestPayload();
        payload2.setContentId("content321");
        payload2.setLangId("fr");
        payload2.setPath("/different/path");

        assertFalse(payload1.equals(payload2));
    }

    @Test
    public void testEquals_Null() {
        // Test equality comparison with null
        RequestPayload payload = new RequestPayload();
        assertFalse(payload.equals(null));
    }

    @Test
    public void testEquals_DifferentType() {
        // Test comparing with an object of a different type
        RequestPayload payload = new RequestPayload();
        assertFalse(payload.equals(new Object()));
    }
}
