package com.td.mbna.msec.midtier.content.payload.getlinkcontent;

import com.td.mbna.msec.midtier.types.common.BaseResponse;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit test for GetLinkContentResponse.
 */
public class GetLinkContentResponseTest {

    @Test
    public void testResponsePayloadGetterSetter() {
        // Verify Getter and Setter for responsePayload
        GetLinkContentResponse response = new GetLinkContentResponse();
        ResponsePayload payload = new ResponsePayload();
        payload.setField("TestValue");

        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());
    }

    @Test
    public void testToString_NullValues() {
        // Test toString with null fields
        GetLinkContentResponse response = new GetLinkContentResponse();
        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.GetLinkContentResponse@" +
            Integer.toHexString(System.identityHashCode(response)) +
            "[status=<null>,errorMsgs=<null>,responsePayload=<null>]";
        assertEquals(expectedString, response.toString());
    }

    @Test
    public void testToString_WithValues() {
        // Test toString with populated fields
        GetLinkContentResponse response = new GetLinkContentResponse();
        response.setStatus("SUCCESS");
        response.setErrorMessages("No errors.");
        ResponsePayload payload = new ResponsePayload();
        payload.setField("TestField");

        response.setResponsePayload(payload);

        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.GetLinkContentResponse@" +
            Integer.toHexString(System.identityHashCode(response)) +
            "[status=SUCCESS,errorMsgs=No errors.,responsePayload=" + payload + "]";
        assertEquals(expectedString, response.toString());
    }

    @Test
    public void testHashCode_NullValues() {
        // Test hashCode with null fields
        GetLinkContentResponse response = new GetLinkContentResponse();
        assertEquals(1, response.hashCode());
    }

    @Test
    public void testHashCode_WithValues() {
        // Test hashCode with valid non-null fields
        GetLinkContentResponse response = new GetLinkContentResponse();
        response.setStatus("SUCCESS");
        response.setErrorMessages("No errors.");
        ResponsePayload payload = new ResponsePayload();
        payload.setField("TestField");

        response.setResponsePayload(payload);

        int expectedHashCode = 31 * (31 * (31 + "No errors.".hashCode()) + payload.hashCode()) + "SUCCESS".hashCode();
        assertEquals(expectedHashCode, response.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        // Test equality with the same instance
        GetLinkContentResponse response = new GetLinkContentResponse();
        assertTrue(response.equals(response));
    }

    @Test
    public void testEquals_EqualValues() {
        // Test equality with two objects having the same values
        GetLinkContentResponse response1 = new GetLinkContentResponse();
        GetLinkContentResponse response2 = new GetLinkContentResponse();

        response1.setStatus("SUCCESS");
        response1.setErrorMessages("No errors.");
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setField("TestField");

        response1.setResponsePayload(payload1);

        response2.setStatus("SUCCESS");
        response2.setErrorMessages("No errors.");
        ResponsePayload payload2 = new ResponsePayload();
        payload2.setField("TestField");

        response2.setResponsePayload(payload2);

        assertTrue(response1.equals(response2));
    }

    @Test
    public void testEquals_DifferentValues() {
        // Test inequality when fields have different values
        GetLinkContentResponse response1 = new GetLinkContentResponse();
        GetLinkContentResponse response2 = new GetLinkContentResponse();

        response1.setStatus("ERROR");
        response1.setErrorMessages("Some error.");
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setField("Value1");

        response1.setResponsePayload(payload1);

        response2.setStatus("SUCCESS");
        response2.setErrorMessages("No errors.");
        ResponsePayload payload2 = new ResponsePayload();
        payload2.setField("Value2");

        response2.setResponsePayload(payload2);

        assertFalse(response1.equals(response2));
    }

    @Test
    public void testEquals_Null() {
        // Test equality comparison with null
        GetLinkContentResponse response = new GetLinkContentResponse();
        assertFalse(response.equals(null));
    }
}
