package com.td.mbna.msec.midtier.content.payload.getlinkcontent;

import com.td.mbna.msec.midtier.content.payload.LinkContentType;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for ResponsePayload class.
 */
public class ResponsePayloadTest {

    @Test
    public void testGetterSetter() {
        // Test getter and setter for linkContent
        ResponsePayload payload = new ResponsePayload();
        List<LinkContentType> linkContentList = new ArrayList<>();
        LinkContentType linkContent = new LinkContentType();
        linkContent.setLink("link123");
        linkContent.setAltText("altText123");
        linkContentList.add(linkContent);

        payload.setLinkContent(linkContentList);

        // Verify getter
        assertNotNull(payload.getLinkContent());
        assertEquals(1, payload.getLinkContent().size());
        assertEquals("link123", payload.getLinkContent().get(0).getLink());
        assertEquals("altText123", payload.getLinkContent().get(0).getAltText());
    }

    @Test
    public void testToString_EmptyList() {
        // Test toString() when linkContent is empty
        ResponsePayload payload = new ResponsePayload();
        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[linkContent=[]]";
        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testToString_WithValues() {
        // Test toString() with populated linkContent
        ResponsePayload payload = new ResponsePayload();
        List<LinkContentType> linkContentList = new ArrayList<>();
        LinkContentType linkContent = new LinkContentType();
        linkContent.setLink("link123");
        linkContent.setAltText("altText123");
        linkContentList.add(linkContent);

        payload.setLinkContent(linkContentList);

        String expectedString = "com.td.mbna.msec.midtier.content.payload.getlinkcontent.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[linkContent=[" + linkContentList + "]]";

        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testHashCode_EmptyList() {
        // Test hashCode() with empty list
        ResponsePayload payload = new ResponsePayload();
        assertEquals(1, payload.hashCode());
    }

    @Test
    public void testHashCode_WithValues() {
        // Test hashCode() with populated linkContent list
        ResponsePayload payload = new ResponsePayload();
        List<LinkContentType> linkContentList = new ArrayList<>();
        LinkContentType linkContent = new LinkContentType();
        linkContent.setLink("link123");
        linkContent.setAltText("altText123");
        linkContentList.add(linkContent);

        payload.setLinkContent(linkContentList);

        assertNotEquals(1, payload.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        // Test equality with the same instance
        ResponsePayload payload = new ResponsePayload();
        assertTrue(payload.equals(payload));
    }

    @Test
    public void testEquals_EqualValues() {
        // Test equality with two objects that have the same linkContent list
        ResponsePayload payload1 = new ResponsePayload();
        ResponsePayload payload2 = new ResponsePayload();

        List<LinkContentType> linkContentList = new ArrayList<>();
        LinkContentType linkContent = new LinkContentType();
        linkContent.setLink("link123");
        linkContent.setAltText("altText123");
        linkContentList.add(linkContent);

        payload1.setLinkContent(linkContentList);
        payload2.setLinkContent(linkContentList);

        assertTrue(payload1.equals(payload2));
    }

    @Test
    public void testEquals_DifferentValues() {
        // Test inequality when linkContent lists are different
        ResponsePayload payload1 = new ResponsePayload();
        ResponsePayload payload2 = new ResponsePayload();

        List<LinkContentType> list1 = new ArrayList<>();
        List<LinkContentType> list2 = new ArrayList<>();

        LinkContentType linkContent1 = new LinkContentType();
        linkContent1.setLink("link123");
        linkContent1.setAltText("altText123");

        LinkContentType linkContent2 = new LinkContentType();
        linkContent2.setLink("link456");
        linkContent2.setAltText("altText456");

        list1.add(linkContent1);
        list2.add(linkContent2);

        payload1.setLinkContent(list1);
        payload2.setLinkContent(list2);

        assertFalse(payload1.equals(payload2));
    }

    @Test
    public void testEquals_Null() {
        // Test equality comparison with null
        ResponsePayload payload = new ResponsePayload();
        assertFalse(payload.equals(null));
    }

    @Test
    public void testEquals_DifferentType() {
        // Test equality comparison with an object of a different type
        ResponsePayload payload = new ResponsePayload();
        assertFalse(payload.equals(new Object()));
    }
}
