package com.td.mbna.msec.midtier.content.payload.getpagecontent;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;

public class RequestPayloadTest {

    @Test
    public void testGetterSetter() {
        // Test getter and setter
        RequestPayload payload = new RequestPayload();
        payload.setPageId("page123");
        payload.setLangId("en");
        payload.setPageDisplayStyle(RequestPayload.PageDisplayStyle.POPUP);

        assertEquals("page123", payload.getPageId());
        assertEquals("en", payload.getLangId());
        assertEquals(RequestPayload.PageDisplayStyle.POPUP, payload.getPageDisplayStyle());
    }

    @Test
    public void testToString_AllNull() {
        // Test toString() when all fields are null
        RequestPayload payload = new RequestPayload();
        String expectedString = "com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[pageId=<null>,pageDisplayStyle=<null>,langId=<null>]";
        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testToString_WithFields() {
        // Test toString() with fields populated
        RequestPayload payload = new RequestPayload();
        payload.setPageId("page123");
        payload.setLangId("en");
        payload.setPageDisplayStyle(RequestPayload.PageDisplayStyle.REGULAR);

        String expectedString = "com.td.mbna.msec.midtier.content.payload.getpagecontent.RequestPayload@" +
                Integer.toHexString(System.identityHashCode(payload)) +
                "[pageId=page123,pageDisplayStyle=REGULAR,langId=en]";
        assertEquals(expectedString, payload.toString());
    }

    @Test
    public void testHashCode_EmptyFields() {
        // Test hashCode when fields are null
        RequestPayload payload = new RequestPayload();
        assertEquals(1, payload.hashCode());
    }

    @Test
    public void testHashCode_WithFields() {
        // Test hashCode with fields populated
        RequestPayload payload = new RequestPayload();
        payload.setPageId("page123");
        payload.setLangId("en");
        payload.setPageDisplayStyle(RequestPayload.PageDisplayStyle.REGULAR);

        int hashCode = payload.hashCode();
        assertNotEquals(1, hashCode);
    }

    @Test
    public void testEquals_SameObject() {
        // Test equals() comparing object with itself
        RequestPayload payload = new RequestPayload();
        assertTrue(payload.equals(payload));
    }

    @Test
    public void testEquals_EqualFields() {
        // Test equals with identical fields
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        payload1.setPageId("page123");
        payload2.setPageId("page123");
        payload1.setLangId("en");
        payload2.setLangId("en");
        payload1.setPageDisplayStyle(RequestPayload.PageDisplayStyle.REGULAR);
        payload2.setPageDisplayStyle(RequestPayload.PageDisplayStyle.REGULAR);

        assertTrue(payload1.equals(payload2));
    }

    @Test
    public void testEquals_DifferentFields() {
        // Test equals when fields differ
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();
        payload1.setPageId("page123");
        payload2.setPageId("page124");

        assertFalse(payload1.equals(payload2));
    }

    @Test
    public void testEquals_NullComparison() {
        // Test equals() with null comparison
        RequestPayload payload = new RequestPayload();
        assertFalse(payload.equals(null));
    }

    @Test
    public void testEquals_DifferentType() {
        // Test comparison with an object of a different type
        RequestPayload payload = new RequestPayload();
        assertFalse(payload.equals("String"));
    }

    @Test
    public void testPageDisplayStyle_Enum_ValidValue() {
        // Test PageDisplayStyle enum with valid values
        RequestPayload.PageDisplayStyle style = RequestPayload.PageDisplayStyle.fromValue("REGULAR");
        assertEquals(RequestPayload.PageDisplayStyle.REGULAR, style);
    }

    @Test
    public void testPageDisplayStyle_Enum_InvalidValue() {
        // Test PageDisplayStyle with invalid value
        assertThrows(IllegalArgumentException.class, () -> {
            RequestPayload.PageDisplayStyle.fromValue("INVALID");
        });
    }

    @Test
    public void testPageDisplayStyle_ToString() {
        // Test the toString method of the enum
        assertEquals("REGULAR", RequestPayload.PageDisplayStyle.REGULAR.toString());
        assertEquals("POPUP", RequestPayload.PageDisplayStyle.POPUP.toString());
    }
}
