package com.td.mbna.msec.midtier.content.payload.getpagecontent;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class ResponsePayloadTest {

    @Test
    public void testGetterSetter() {
        ResponsePayload responsePayload = new ResponsePayload();
        // Setting fields
        responsePayload.setTitle("Title");
        responsePayload.setContent("Content");
        responsePayload.setContentContent("ContentContent");
        responsePayload.setToDisplay("Display");
        responsePayload.setContentTablet("TabletContent");
        responsePayload.setContentMobile("MobileContent");
        responsePayload.setDesktopImage("DesktopImage");
        responsePayload.setTabletImage("TabletImage");
        responsePayload.setMobileImage("MobileImage");

        // Validating the getter methods
        assertEquals("Title", responsePayload.getTitle());
        assertEquals("Content", responsePayload.getContent());
        assertEquals("ContentContent", responsePayload.getContentContent());
        assertEquals("Display", responsePayload.getToDisplay());
        assertEquals("TabletContent", responsePayload.getContentTablet());
        assertEquals("MobileContent", responsePayload.getContentMobile());
        assertEquals("DesktopImage", responsePayload.getDesktopImage());
        assertEquals("TabletImage", responsePayload.getTabletImage());
        assertEquals("MobileImage", responsePayload.getMobileImage());
    }

    @Test
    public void testToString_AllNullFields() {
        ResponsePayload responsePayload = new ResponsePayload();
        String expectedString = "com.td.mbna.msec.midtier.content.payload.getpagecontent.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(responsePayload)) +
                "[title=<null>,content=<null>,contentContent=<null>,toDisplay=<null>,contentTablet=<null>,contentMobile=<null>,desktopImage=<null>,tabletImage=<null>,mobileImage=<null>]";
        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    public void testToString_WithValues() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setTitle("Title");
        responsePayload.setContent("Content");
        responsePayload.setToDisplay("Display");
        responsePayload.setContentTablet("Tablet");
        responsePayload.setContentMobile("Mobile");

        String expectedString = "com.td.mbna.msec.midtier.content.payload.getpagecontent.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(responsePayload)) +
                "[title=Title,content=Content,contentContent=<null>,toDisplay=Display,contentTablet=Tablet,contentMobile=Mobile,desktopImage=<null>,tabletImage=<null>,mobileImage=<null>]";
        assertEquals(expectedString, responsePayload.toString());
    }

    @Test
    public void testHashCode_AllNullFields() {
        ResponsePayload responsePayload = new ResponsePayload();
        // Testing hashCode with all fields null
        assertEquals(1, responsePayload.hashCode());
    }

    @Test
    public void testHashCode_WithFields() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setTabletImage("TabletImage");
        responsePayload.setContentTablet("ContentTablet");
        responsePayload.setMobileImage("MobileImage");
        responsePayload.setContentContent("ContentContent");
        responsePayload.setToDisplay("ToDisplay");

        int hashCode = responsePayload.hashCode();
        assertNotEquals(1, hashCode);
    }

    @Test
    public void testEquals_SameObject() {
        ResponsePayload responsePayload = new ResponsePayload();
        assertTrue(responsePayload.equals(responsePayload));
    }

    @Test
    public void testEquals_IdenticalObjects() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload1.setTabletImage("TabletImage");
        responsePayload1.setContentTablet("ContentTablet");
        responsePayload1.setMobileImage("MobileImage");

        responsePayload2.setTabletImage("TabletImage");
        responsePayload2.setContentTablet("ContentTablet");
        responsePayload2.setMobileImage("MobileImage");

        assertTrue(responsePayload1.equals(responsePayload2));
    }

    @Test
    public void testEquals_DifferentObjects() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload1.setTabletImage("TabletImage");

        responsePayload2.setContentTablet("ContentTablet");

        assertFalse(responsePayload1.equals(responsePayload2));
    }

    @Test
    public void testEquals_NullComparison() {
        ResponsePayload responsePayload = new ResponsePayload();
        assertFalse(responsePayload.equals(null));
    }

    @Test
    public void testEquals_DifferentTypeComparison() {
        ResponsePayload responsePayload = new ResponsePayload();
        assertFalse(responsePayload.equals("String"));
    }
}
