package com.td.mbna.msec.midtier.creditcard.payload.requestcheque;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

public class ResponsePayloadTest {

    private ResponsePayload responsePayload;

    @BeforeEach
    void setUp() {
        responsePayload = new ResponsePayload();
    }

    @Test
    void testSetAndGetStatus() {
        responsePayload.setStatus(true);
        assertThat(responsePayload.getStatus()).isTrue();
    }

    @Test
    void testSetAndGetEmailSent() {
        responsePayload.setEmailSent(true);
        assertThat(responsePayload.getEmailSent()).isTrue();
    }

    @Test
    void testSetAndGetStatusCode() {
        responsePayload.setStatusCode("200");
        assertThat(responsePayload.getStatusCode()).isEqualTo("200");
    }

    @Test
    void testToString() {
        responsePayload.setStatus(true);
        responsePayload.setEmailSent(false);
        responsePayload.setStatusCode("OK");

        String expectedString = "com.td.mbna.msec.midtier.creditcard.payload.requestcheque.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(responsePayload)) +
                "[status=true,emailSent=false,statusCode=OK]";
        
        assertThat(responsePayload.toString()).isEqualTo(expectedString);
    }

    @Test
    void testHashCode() {
        responsePayload.setStatus(true);
        responsePayload.setEmailSent(true);
        responsePayload.setStatusCode("200");

        int hashCode = responsePayload.hashCode();
        assertThat(hashCode).isNotZero();
    }

    @Test
    void testEquals() {
        ResponsePayload other = new ResponsePayload();
        other.setStatus(true);
        other.setEmailSent(true);
        other.setStatusCode("200");

        assertThat(responsePayload).isNotEqualTo(other);

        responsePayload.setStatus(true);
        responsePayload.setEmailSent(true);
        responsePayload.setStatusCode("200");

        assertThat(responsePayload).isEqualTo(other);
    }

    @Test
    void testEqualsWithNull() {
        assertThat(responsePayload).isNotEqualTo(null);
    }

    @Test
    void testEqualsWhenFieldsAreNull() {
        ResponsePayload other = new ResponsePayload();
        assertThat(responsePayload).isEqualTo(other);
    }

    @Test
    void testHashCodeWhenFieldsAreNull() {
        int hashCode = responsePayload.hashCode();
        assertThat(hashCode).isNotZero();
    }

    @Test
    void testSetStatusNull() {
        responsePayload.setStatus(null);
        assertThat(responsePayload.getStatus()).isNull();
    }

    @Test
    void testSetEmailSentNull() {
        responsePayload.setEmailSent(null);
        assertThat(responsePayload.getEmailSent()).isNull();
    }

    @Test
    void testSetStatusCodeNull() {
        responsePayload.setStatusCode(null);
        assertThat(responsePayload.getStatusCode()).isNull();
    }
}
