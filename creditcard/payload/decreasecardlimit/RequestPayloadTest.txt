package com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit;

import com.td.mbna.msec.midtier.types.common.EmailNotificationInfoType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

/** Unit Tests for RequestPayload class */
public class RequestPayloadTest {

    private RequestPayload payload;

    @BeforeEach
    void setUp() {
        payload = new RequestPayload();
    }

    /** Test Getter & Setter for custId */
    @Test
    public void testCustIdGetterSetter() {
        payload.setCustId("12345");
        assertEquals("12345", payload.getCustId());
    }

    /** Test Getter & Setter for custName */
    @Test
    public void testCustNameGetterSetter() {
        payload.setCustName("John Doe");
        assertEquals("John Doe", payload.getCustName());
    }

    /** Test Getter & Setter for acctId */
    @Test
    public void testAcctIdGetterSetter() {
        payload.setAcctId("ACCT001");
        assertEquals("ACCT001", payload.getAcctId());
    }

    /** Test Getter & Setter for cardNum */
    @Test
    public void testCardNumGetterSetter() {
        payload.setCardNum("1234567890123456");
        assertEquals("1234567890123456", payload.getCardNum());
    }

    /** Test Getter & Setter for creditLimit */
    @Test
    public void testCreditLimitGetterSetter() {
        payload.setCreditLimit(new BigDecimal("1000.00"));
        assertEquals(new BigDecimal("1000.00"), payload.getCreditLimit());
    }

    /** Test Getter & Setter for currentCreditLimit */
    @Test
    public void testCurrentCreditLimitGetterSetter() {
        payload.setCurrentCreditLimit(new BigDecimal("500.00"));
        assertEquals(new BigDecimal("500.00"), payload.getCurrentCreditLimit());
    }

    /** Test Getter & Setter for currentBalance */
    @Test
    public void testCurrentBalanceGetterSetter() {
        payload.setCurrentBalance(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), payload.getCurrentBalance());
    }

    /** Test Getter & Setter for unbilledAmount */
    @Test
    public void testUnbilledAmountGetterSetter() {
        payload.setUnbilledAmount(new BigDecimal("200.00"));
        assertEquals(new BigDecimal("200.00"), payload.getUnbilledAmount());
    }

    /** Test Getter & Setter for email */
    @Test
    public void testEmailGetterSetter() {
        payload.setEmail("test@example.com");
        assertEquals("test@example.com", payload.getEmail());
    }

    /** Test Getter & Setter for phone */
    @Test
    public void testPhoneGetterSetter() {
        payload.setPhone("123-456-7890");
        assertEquals("123-456-7890", payload.getPhone());
    }

    /** Test Getter & Setter for confirmed */
    @Test
    public void testConfirmedGetterSetter() {
        payload.setConfirmed(true);
        assertEquals(true, payload.getConfirmed());
    }

    /** Test Getter & Setter for emailRequired */
    @Test
    public void testEmailRequiredGetterSetter() {
        payload.setEmailRequired(true);
        assertEquals(true, payload.getEmailRequired());
    }

    /** Test Getter & Setter for emailNotificationInfo */
    @Test
    public void testEmailNotificationInfoGetterSetter() {
        EmailNotificationInfoType emailInfo = new EmailNotificationInfoType();
        payload.setEmailNotificationInfo(emailInfo);
        assertEquals(emailInfo, payload.getEmailNotificationInfo());
    }

    /** Test toString() logic */
    @Test
    public void testToString() {
        payload.setCustId("12345");
        payload.setCustName("John Doe");
        payload.setAcctId("ACCT001");
        payload.setCardNum("1234567890123456");

        String result = payload.toString();
        assertNotNull(result);
        assertTrue(result.contains("custId"));
        assertTrue(result.contains("custName"));
        assertTrue(result.contains("acctId"));
        assertTrue(result.contains("cardNum"));
    }

    /** Test hashCode() logic */
    @Test
    public void testHashCode() {
        payload.setCurrentCreditLimit(new BigDecimal("500"));
        payload.setCurrentBalance(new BigDecimal("250"));
        payload.setAcctId("ACCT001");

        int hashCode = payload.hashCode();
        assertTrue(hashCode != 0);
    }

    /** Test equals() with same object values */
    @Test
    public void testEquals_SameValues() {
        RequestPayload anotherPayload = new RequestPayload();
        anotherPayload.setCurrentCreditLimit(new BigDecimal("500"));
        anotherPayload.setCurrentBalance(new BigDecimal("250"));
        anotherPayload.setAcctId("ACCT001");

        payload.setCurrentCreditLimit(new BigDecimal("500"));
        payload.setCurrentBalance(new BigDecimal("250"));
        payload.setAcctId("ACCT001");

        assertTrue(payload.equals(anotherPayload));
    }

    /** Test equals() with different object states */
    @Test
    public void testEquals_DifferentValues() {
        RequestPayload anotherPayload = new RequestPayload();
        anotherPayload.setCurrentCreditLimit(new BigDecimal("100"));
        anotherPayload.setCurrentBalance(new BigDecimal("300"));
        anotherPayload.setAcctId("DIFFERENT");

        assertFalse(payload.equals(anotherPayload));
    }

    /** Test hashCode with null values */
    @Test
    public void testHashCodeWithNullValues() {
        payload.setAcctId(null);
        payload.setCurrentCreditLimit(null);

        int hashCode = payload.hashCode();
        assertTrue(hashCode != 0);
    }
}
