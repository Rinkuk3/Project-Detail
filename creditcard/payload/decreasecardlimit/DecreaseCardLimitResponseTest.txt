package com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit;

import com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit.DecreaseCardLimitResponse;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/** Test Class for DecreaseCardLimitResponse */
public class DecreaseCardLimitResponseTest {

    private DecreaseCardLimitResponse response;

    @BeforeEach
    void setUp() {
        response = new DecreaseCardLimitResponse();
    }

    /** Test Getter & Setter for responsePayload */
    @Test
    public void testResponsePayloadGetterSetter() {
        ResponsePayload payload = new ResponsePayload();
        response.setResponsePayload(payload);
        assertEquals(payload, response.getResponsePayload());
    }

    /** Test toString() logic */
    @Test
    public void testToString() {
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("Success");
        response.setErrorMessages("No Errors");
        
        String result = response.toString();
        assertNotNull(result);
        assertTrue(result.contains("DecreaseCardLimitResponse"));
        assertTrue(result.contains("responsePayload"));
        assertTrue(result.contains("status"));
        assertTrue(result.contains("errorMsgs"));
    }

    /** Test hashCode logic */
    @Test
    public void testHashCode() {
        response.setResponsePayload(new ResponsePayload());
        response.setStatus("Success");
        response.setErrorMessages("Error Occurred");

        int hashCode = response.hashCode();
        assertTrue(hashCode != 0);
    }

    /** Test equals logic for equality with matching object state */
    @Test
    public void testEquals_SameValues() {
        DecreaseCardLimitResponse anotherResponse = new DecreaseCardLimitResponse();
        anotherResponse.setResponsePayload(new ResponsePayload());
        anotherResponse.setStatus("Success");
        anotherResponse.setErrorMessages("Error Occurred");

        assertTrue(response.equals(anotherResponse));
    }

    /** Test equals logic for different object states */
    @Test
    public void testEquals_DifferentValues() {
        DecreaseCardLimitResponse anotherResponse = new DecreaseCardLimitResponse();
        anotherResponse.setResponsePayload(new ResponsePayload());
        anotherResponse.setStatus("Failure");
        anotherResponse.setErrorMessages("Error Occurred");

        response.setResponsePayload(new ResponsePayload());
        response.setStatus("Success");
        response.setErrorMessages("Error Occurred");

        assertFalse(response.equals(anotherResponse));
    }

    /** Test edge case: null comparison */
    @Test
    public void testEquals_NullComparison() {
        assertFalse(response.equals(null));
    }

    /** Test hashCode with no payload */
    @Test
    public void testHashCode_NoPayload() {
        response.setStatus("Failure");
        response.setErrorMessages(null);

        int hashCode = response.hashCode();
        assertTrue(hashCode != 0);
    }
}
