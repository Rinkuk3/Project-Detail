package com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.math.BigDecimal;

public class ResponsePayloadTest {

    @Test
    public void testGettersAndSetters() {
        ResponsePayload responsePayload = new ResponsePayload();

        // Test status
        responsePayload.setStatus(true);
        assertTrue(responsePayload.getStatus());
        
        // Test confirmationNumber
        responsePayload.setConfirmationNumber("123456");
        assertEquals("123456", responsePayload.getConfirmationNumber());
        
        // Test emailSent
        responsePayload.setEmailSent(true);
        assertTrue(responsePayload.getEmailSent());
        
        // Test creditLimitPrevAmtCurrency
        responsePayload.setCreditLimitPrevAmtCurrency("USD");
        assertEquals("USD", responsePayload.getCreditLimitPrevAmtCurrency());
        
        // Test creditLimitPrevAmt
        responsePayload.setCreditLimitPrevAmt(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), responsePayload.getCreditLimitPrevAmt());
        
        // Test creditLimitNewAmtCurrency
        responsePayload.setCreditLimitNewAmtCurrency("EUR");
        assertEquals("EUR", responsePayload.getCreditLimitNewAmtCurrency());
        
        // Test creditLimitNewAmt
        responsePayload.setCreditLimitNewAmt(new BigDecimal("200.00"));
        assertEquals(new BigDecimal("200.00"), responsePayload.getCreditLimitNewAmt());
        
        // Test tempLimitIndicator
        responsePayload.setTempLimitIndicator("LIMIT");
        assertEquals("LIMIT", responsePayload.getTempLimitIndicator());
        
        // Test cashLimitPrevAmtCurrency
        responsePayload.setCashLimitPrevAmtCurrency("GBP");
        assertEquals("GBP", responsePayload.getCashLimitPrevAmtCurrency());
        
        // Test cashLimitPrevAmt
        responsePayload.setCashLimitPrevAmt(new BigDecimal("50.00"));
        assertEquals(new BigDecimal("50.00"), responsePayload.getCashLimitPrevAmt());
        
        // Test cashLimitNewAmtCurrency
        responsePayload.setCashLimitNewAmtCurrency("JPY");
        assertEquals("JPY", responsePayload.getCashLimitNewAmtCurrency());
        
        // Test cashLimitNewAmt
        responsePayload.setCashLimitNewAmt(new BigDecimal("75.00"));
        assertEquals(new BigDecimal("75.00"), responsePayload.getCashLimitNewAmt());
    }

    @Test
    public void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setStatus(true);
        responsePayload.setConfirmationNumber("123456");
        responsePayload.setEmailSent(true);

        String result = responsePayload.toString();
        assertNotNull(result);
        assertTrue(result.contains("status=true"));
        assertTrue(result.contains("confirmationNumber=123456"));
        assertTrue(result.contains("emailSent=true"));
    }

    @Test
    public void testHashCodeAndEquals() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setStatus(true);
        responsePayload1.setConfirmationNumber("123456");
        responsePayload1.setEmailSent(true);

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setStatus(true);
        responsePayload2.setConfirmationNumber("123456");
        responsePayload2.setEmailSent(true);

        ResponsePayload responsePayload3 = new ResponsePayload();
        responsePayload3.setStatus(false);
        responsePayload3.setConfirmationNumber("654321");
        responsePayload3.setEmailSent(false);

        // Test equality with the same values
        assertTrue(responsePayload1.equals(responsePayload2));
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        // Test inequality with different values
        assertFalse(responsePayload1.equals(responsePayload3));
        assertNotEquals(responsePayload1.hashCode(), responsePayload3.hashCode());

        // Test self equality
        assertTrue(responsePayload1.equals(responsePayload1));
    }

    @Test
    public void testEdgeCasesForEqualsAndHashCode() {
        ResponsePayload responsePayload = new ResponsePayload();
        assertNotNull(responsePayload);

        // Test equality with null
        assertFalse(responsePayload.equals(null));

        // Test equality with different types
        assertFalse(responsePayload.equals("SomeString"));

        // Test hashCode consistency with fields left null
        assertDoesNotThrow(() -> responsePayload.hashCode());
    }

    @Test
    public void testSettersWithNullValues() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setStatus(null);
        responsePayload.setConfirmationNumber(null);
        responsePayload.setEmailSent(null);
        responsePayload.setCreditLimitPrevAmtCurrency(null);
        responsePayload.setCreditLimitPrevAmt(null);
        responsePayload.setCreditLimitNewAmtCurrency(null);
        responsePayload.setCreditLimitNewAmt(null);

        assertNull(responsePayload.getStatus());
        assertNull(responsePayload.getConfirmationNumber());
        assertNull(responsePayload.getEmailSent());
        assertNull(responsePayload.getCreditLimitPrevAmtCurrency());
        assertNull(responsePayload.getCreditLimitPrevAmt());
        assertNull(responsePayload.getCreditLimitNewAmtCurrency());
        assertNull(responsePayload.getCreditLimitNewAmt());
    }
}
