import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PastDueInfoTest {

    @Test
    public void testGettersAndSetters() {
        PastDueInfo pastDueInfo = new PastDueInfo();

        // Test setter and getter methods
        pastDueInfo.setCycleYm("2023-12");
        assertEquals("2023-12", pastDueInfo.getCycleYm());

        pastDueInfo.setPastDue84CycleDelinquencyLevelCd("Level1");
        assertEquals("Level1", pastDueInfo.getPastDue84CycleDelinquencyLevelCd());

        pastDueInfo.setPastDue12CycleDelinquencyLevelCd("Level2");
        assertEquals("Level2", pastDueInfo.getPastDue12CycleDelinquencyLevelCd());

        pastDueInfo.setPastDue12CycleOverLimitFeeInd(true);
        assertTrue(pastDueInfo.getPastDue12CycleOverLimitFeeInd());

        pastDueInfo.setPastDue12CycleLateFeeInd(false);
        assertFalse(pastDueInfo.getPastDue12CycleLateFeeInd());

        // Test setter with null values
        pastDueInfo.setCycleYm(null);
        assertNull(pastDueInfo.getCycleYm());

        pastDueInfo.setPastDue84CycleDelinquencyLevelCd(null);
        assertNull(pastDueInfo.getPastDue84CycleDelinquencyLevelCd());

        pastDueInfo.setPastDue12CycleDelinquencyLevelCd(null);
        assertNull(pastDueInfo.getPastDue12CycleDelinquencyLevelCd());

        pastDueInfo.setPastDue12CycleOverLimitFeeInd(null);
        assertNull(pastDueInfo.getPastDue12CycleOverLimitFeeInd());

        pastDueInfo.setPastDue12CycleLateFeeInd(null);
        assertNull(pastDueInfo.getPastDue12CycleLateFeeInd());
    }

    @Test
    public void testToString() {
        PastDueInfo pastDueInfo = new PastDueInfo();
        pastDueInfo.setCycleYm("2023-12");
        pastDueInfo.setPastDue84CycleDelinquencyLevelCd("Level1");
        pastDueInfo.setPastDue12CycleDelinquencyLevelCd("Level2");
        pastDueInfo.setPastDue12CycleOverLimitFeeInd(true);
        pastDueInfo.setPastDue12CycleLateFeeInd(false);

        String expectedString = "com.td.api.mbcca.creditcard.request.PastDueInfo@" + Integer.toHexString(pastDueInfo.hashCode()) +
                "[cycleYm=2023-12,pastDue84CycleDelinquencyLevelCd=Level1,pastDue12CycleDelinquencyLevelCd=Level2,pastDue12CycleOverLimitFeeInd=true,pastDue12CycleLateFeeInd=false]";
        assertTrue(pastDueInfo.toString().contains("cycleYm"));
    }

    @Test
    public void testHashCodeAndEquals() {
        PastDueInfo pastDueInfo1 = new PastDueInfo();
        pastDueInfo1.setCycleYm("2023-12");
        pastDueInfo1.setPastDue84CycleDelinquencyLevelCd("Level1");
        pastDueInfo1.setPastDue12CycleDelinquencyLevelCd("Level2");
        pastDueInfo1.setPastDue12CycleOverLimitFeeInd(true);
        pastDueInfo1.setPastDue12CycleLateFeeInd(false);

        PastDueInfo pastDueInfo2 = new PastDueInfo();
        pastDueInfo2.setCycleYm("2023-12");
        pastDueInfo2.setPastDue84CycleDelinquencyLevelCd("Level1");
        pastDueInfo2.setPastDue12CycleDelinquencyLevelCd("Level2");
        pastDueInfo2.setPastDue12CycleOverLimitFeeInd(true);
        pastDueInfo2.setPastDue12CycleLateFeeInd(false);

        PastDueInfo pastDueInfo3 = new PastDueInfo();
        pastDueInfo3.setCycleYm("2024-01");

        // Test equality
        assertTrue(pastDueInfo1.equals(pastDueInfo2));  // Same field values
        assertFalse(pastDueInfo1.equals(pastDueInfo3)); // Different field values

        // Test hashCode consistency
        assertEquals(pastDueInfo1.hashCode(), pastDueInfo2.hashCode());
        assertNotEquals(pastDueInfo1.hashCode(), pastDueInfo3.hashCode());
    }

    @Test
    public void testEqualsNull() {
        PastDueInfo pastDueInfo = new PastDueInfo();
        pastDueInfo.setCycleYm("2023-12");

        // Test equality with null
        assertFalse(pastDueInfo.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        PastDueInfo pastDueInfo = new PastDueInfo();
        pastDueInfo.setCycleYm("2023-12");

        // Test equality with object of different class
        Object obj = new Object();
        assertFalse(pastDueInfo.equals(obj));
    }
}
