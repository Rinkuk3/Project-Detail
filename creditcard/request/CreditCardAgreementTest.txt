import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CreditCardAgreementTest {

    @Test
    public void testGettersAndSetters() {
        CreditCardAgreement agreement = new CreditCardAgreement();
        
        // Test all getter and setter methods
        agreement.setAddressInfo(new AddressInfo());
        agreement.setFdrExtension(new FdrExtension());
        agreement.setAgreementLimitInfo(new AgreementLimitInfo());
        agreement.setCcapiExtension(new CcapiExtension());
        agreement.setBillingCycleDayOfMonthNum("10");
        agreement.setDisclosureGroupId("123");
        agreement.setAlternateDisclosureGroup(new AlternateDisclosureGroup());
        agreement.setPricingMethodSubtypeCd("Method1");
        agreement.setMinimumPaymentDueCccyamt(new Cccyamt());
        agreement.setHighBalanceCccyamt(new Cccyamt());
        agreement.setLastCheckRejectionFeeDateActionCd("Action1");
        agreement.setLastNotSufficientFundsFeeDateActionCd("Action2");
        agreement.setChargeOffStatus(new ChargeOffStatus());
        agreement.setReinstatementStatus(new ReinstatementStatus());
        agreement.setPastDueInfo(new PastDueInfo());
        
        // Assert all fields have been set correctly
        assertNotNull(agreement.getAddressInfo());
        assertNotNull(agreement.getFdrExtension());
        assertNotNull(agreement.getAgreementLimitInfo());
        assertNotNull(agreement.getCcapiExtension());
        assertEquals("10", agreement.getBillingCycleDayOfMonthNum());
        assertEquals("123", agreement.getDisclosureGroupId());
        assertNotNull(agreement.getAlternateDisclosureGroup());
        assertEquals("Method1", agreement.getPricingMethodSubtypeCd());
        assertNotNull(agreement.getMinimumPaymentDueCccyamt());
        assertNotNull(agreement.getHighBalanceCccyamt());
        assertEquals("Action1", agreement.getLastCheckRejectionFeeDateActionCd());
        assertEquals("Action2", agreement.getLastNotSufficientFundsFeeDateActionCd());
        assertNotNull(agreement.getChargeOffStatus());
        assertNotNull(agreement.getReinstatementStatus());
        assertNotNull(agreement.getPastDueInfo());
    }

    @Test
    public void testToString() {
        CreditCardAgreement agreement = new CreditCardAgreement();
        agreement.setAddressInfo(new AddressInfo());
        agreement.setBillingCycleDayOfMonthNum("10");

        String expectedString = "com.td.api.mbcca.creditcard.request.CreditCardAgreement@" + Integer.toHexString(agreement.hashCode()) + "[addressInfo=" + agreement.getAddressInfo() + ",billingCycleDayOfMonthNum=10,]";
        assertTrue(agreement.toString().contains("addressInfo"));
        assertTrue(agreement.toString().contains("billingCycleDayOfMonthNum"));
    }

    @Test
    public void testHashCodeAndEquals() {
        CreditCardAgreement agreement1 = new CreditCardAgreement();
        agreement1.setBillingCycleDayOfMonthNum("10");
        agreement1.setDisclosureGroupId("123");

        CreditCardAgreement agreement2 = new CreditCardAgreement();
        agreement2.setBillingCycleDayOfMonthNum("10");
        agreement2.setDisclosureGroupId("123");

        CreditCardAgreement agreement3 = new CreditCardAgreement();
        agreement3.setBillingCycleDayOfMonthNum("20");
        agreement3.setDisclosureGroupId("124");

        // Test equality
        assertTrue(agreement1.equals(agreement2));
        assertFalse(agreement1.equals(agreement3));

        // Test hashCode consistency
        assertEquals(agreement1.hashCode(), agreement2.hashCode());
        assertNotEquals(agreement1.hashCode(), agreement3.hashCode());
    }

    @Test
    public void testEqualsNull() {
        CreditCardAgreement agreement = new CreditCardAgreement();
        agreement.setBillingCycleDayOfMonthNum("10");

        // Test equality with null
        assertFalse(agreement.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        CreditCardAgreement agreement = new CreditCardAgreement();
        agreement.setBillingCycleDayOfMonthNum("10");

        // Test equality with object of different class
        Object obj = new Object();
        assertFalse(agreement.equals(obj));
    }
}
