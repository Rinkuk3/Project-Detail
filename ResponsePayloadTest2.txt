package com.td.mbna.msec.midtier.account.payload.getrewardssaml;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    @Test
    void testConstructor() {
        // Instantiate ResponsePayload
        ResponsePayload payload = new ResponsePayload();
        
        // Verify the default value of ssoSaml is null
        assertNull(payload.getSsoSaml(), "SSO Saml should be null by default.");
    }

    @Test
    void testGettersAndSetters() {
        ResponsePayload payload = new ResponsePayload();
        
        // Test setter and getter for ssoSaml
        String ssoSamlValue = "sampleSsoSamlValue";
        payload.setSsoSaml(ssoSamlValue);
        
        assertEquals(ssoSamlValue, payload.getSsoSaml(), "Getter and setter for ssoSaml should work correctly.");
    }

    @Test
    void testToString() {
        ResponsePayload payload = new ResponsePayload();
        
        // Set ssoSaml to a value
        payload.setSsoSaml("sampleSsoSamlValue");

        // Verify that toString method works without exceptions
        String result = payload.toString();
        assertNotNull(result, "toString should return a non-null string.");
        assertTrue(result.contains("ssoSaml"), "toString should include 'ssoSaml'.");
        assertTrue(result.contains("sampleSsoSamlValue"), "toString should include the value of ssoSaml.");
    }

    @Test
    void testHashCode() {
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setSsoSaml("sampleSsoSamlValue");
        
        ResponsePayload payload2 = new ResponsePayload();
        payload2.setSsoSaml("sampleSsoSamlValue");
        
        // Verify that two equal objects have the same hash code
        assertEquals(payload1.hashCode(), payload2.hashCode(), "HashCode should be equal for identical objects.");
    }

    @Test
    void testEquals() {
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setSsoSaml("sampleSsoSamlValue");
        
        ResponsePayload payload2 = new ResponsePayload();
        payload2.setSsoSaml("sampleSsoSamlValue");
        
        // Verify that two equal objects are considered equal
        assertTrue(payload1.equals(payload2), "Equals method should return true for identical objects.");
        
        // Modify one object and verify they are no longer equal
        payload2.setSsoSaml("anotherSsoSamlValue");
        assertFalse(payload1.equals(payload2), "Equals method should return false for different objects.");
        
        // Verify equality with self and null
        assertTrue(payload1.equals(payload1), "Equals should return true for the same object.");
        assertFalse(payload1.equals(null), "Equals should return false for null comparison.");
    }
}
