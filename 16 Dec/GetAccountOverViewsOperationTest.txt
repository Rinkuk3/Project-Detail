package com.td.mbna.msec.midtier.customerprofile;

import com.mbnaweb.xsd.msgs.account.GetAccountOverviewsRequest;
import com.mbnaweb.xsd.msgs.account.GetAccountOverviewsResponse;
import com.mbnaweb.xsd.types.common.AcctOverviewType;
import com.mbnaweb.xsd.types.common.CustAcctType;
import com.td.api.mbcca.CardInfo;
import com.td.mbna.msec.midtier.types.common.AcctSnapshotType;
import com.td.mbna.msec.midtier.util.ParallelServiceCaller;
import com.td.mbna.msec.midtier.util.ServiceCall;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class GetAccountOverViewsOperationTest {

    private GetAccountOverViewsOperation operation;

    @Mock
    private MbnaCCA mbnaCCA;

    @Mock
    private ParallelServiceCaller parallelCaller;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        operation = new GetAccountOverViewsOperation();
        operation.mbnaCCA = mbnaCCA;
    }

    @Test
    public void testScheduleCalls() throws Exception {
        GetAccountOverviewsRequest request = mockRequest();
        GetAccountOverviewsResponse mockResponse = mockResponse();
        when(mbnaCCA.retrieveAccountsOverview(anyString(), anyList(), anyString())).thenReturn(mockResponse);

        GetAccountOverviewsResponse response = operation.scheduleCalls(request, parallelCaller, "token");

        assertNotNull(response);
        verify(mbnaCCA).retrieveAccountsOverview(anyString(), anyList(), anyString());
        verify(parallelCaller, times(2)).scheduleCall(anyString(), any(ServiceCall.class));
    }

    @Test
    public void testGetResult() throws Exception {
        GetAccountOverviewsRequest request = mockRequest();
        GetAccountOverviewsResponse response = mockResponse();
        AcctSnapshotType snapshot = new AcctSnapshotType();
        snapshot.setTemporaryAuthorizationsToday(BigDecimal.valueOf(100));
        when(parallelCaller.getResponse(anyString(), eq(AcctSnapshotType.class))).thenReturn(snapshot);

        GetAccountOverviewsResponse result = operation.getResult(response, request, parallelCaller);

        assertNotNull(result);
        verify(parallelCaller, times(1)).getResponse(anyString(), eq(AcctSnapshotType.class));
    }

    private GetAccountOverviewsRequest mockRequest() {
        GetAccountOverviewsRequest request = new GetAccountOverviewsRequest();
        GetAccountOverviewsRequest.RequestPayload payload = new GetAccountOverviewsRequest.RequestPayload();
        List<CustAcctType> allAccts = new ArrayList<>();
        CustAcctType acct1 = new CustAcctType();
        acct1.setAcctNum("12345");
        CustAcctType acct2 = new CustAcctType();
        acct2.setAcctNum("67890");
        allAccts.add(acct1);
        allAccts.add(acct2);
        payload.setAllAccts(allAccts);
        request.setRequestPayload(payload);
        return request;
    }

    private GetAccountOverviewsResponse mockResponse() {
        GetAccountOverviewsResponse response = new GetAccountOverviewsResponse();
        GetAccountOverviewsResponse.ResponsePayload payload = new GetAccountOverviewsResponse.ResponsePayload();
        List<AcctOverviewType> custAccts = new ArrayList<>();
        AcctOverviewType acctOverview1 = new AcctOverviewType();
        acctOverview1.setAcctNum("12345");
        acctOverview1.setIsMultiCard(false);
        AcctOverviewType acctOverview2 = new AcctOverviewType();
        acctOverview2.setAcctNum("67890");
        acctOverview2.setIsMultiCard(true);
        custAccts.add(acctOverview1);
        custAccts.add(acctOverview2);
        payload.setCustAccts(custAccts);
        response.setResponsePayload(payload);
        return response;
    }
}
