package com.td.mbna.msec.midtier.customerprofile;

import static org.mockito.Mockito.*;

import com.mbnaweb.xsd.msgs.customerprofile.*;
import com.mbnaweb.xsd.types.common.CardHolderType;
import com.mbnaweb.xsd.types.common.CustAcctType;
import com.td.mbna.msec.midtier.tdwsservices.RcpFilter;
import com.td.mbna.msec.midtier.util.CustomerProfileUtil;
import com.td.mbna.msec.midtier.util.ParallelServiceCaller;
import com.td.mbna.msec.midtier.util.ServiceCall;
import com.td.mbna.msec.midtier.util.ods.OdsHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class OdsLogonHelperTest {

    private static final String LOGON_CUST_ID = "1234567890";
    private ParallelServiceCaller mockParallelServiceCaller;

    @BeforeEach
    void setUp() {
        mockParallelServiceCaller = mock(ParallelServiceCaller.class);
    }

    @Test
    void testScheduleLogonProfilesRetrieval() throws Exception {
        List<CustAcctType> enrolledAccts = createMockEnrolledAccounts();

        ArgumentCaptor<ServiceCall> serviceCallCaptor = ArgumentCaptor.forClass(ServiceCall.class);
        
        OdsLogonHelper.scheduleLogonProfilesRetrieval(LOGON_CUST_ID, enrolledAccts, mockParallelServiceCaller);

        verify(mockParallelServiceCaller).scheduleCall(eq(LOGON_CUST_ID), serviceCallCaptor.capture());

        ServiceCall<?> serviceCall = serviceCallCaptor.getValue();
        assertNotNull(serviceCall);
    }

    @Test
    void testLogonProfilesRetrieval() throws Exception {
        List<CustAcctType> enrolledAccts = createMockEnrolledAccounts();

        RetrieveLogonInfoResponse mockResponse = mock(RetrieveLogonInfoResponse.class);
        mockStatic(OdsHelper.class);
        when(OdsHelper.getCustomerProfile(LOGON_CUST_ID, RcpFilter.ALL)).thenReturn(mock(CustomerProfileType.class));

        RetrieveLogonInfoResponse response = OdsLogonHelper.logonProfilesRetrieval(LOGON_CUST_ID, enrolledAccts, mockParallelServiceCaller);

        assertNotNull(response);
    }

    @Test
    void testGetLogonProfilesRetrievalResult() throws Exception {
        RetrieveLogonInfoResponse mockResponse = mock(RetrieveLogonInfoResponse.class);
        when(mockParallelServiceCaller.getResponse(eq(LOGON_CUST_ID), eq(RetrieveLogonInfoResponse.class))).thenReturn(mockResponse);

        RetrieveLogonInfoResponse response = OdsLogonHelper.getLogonProfilesRetrievalResult(LOGON_CUST_ID, createMockEnrolledAccounts(), mockParallelServiceCaller);

        assertNotNull(response);
        assertEquals(mockResponse, response);
    }

    @Test
    void testPopulateRelatedUserInfo() throws Exception {
        List<CustAcctType> enrolledAccts = createMockEnrolledAccounts();
        CustomerProfileType mockCustomerProfile = mock(CustomerProfileType.class);
        List<ParallelServiceCaller> mockRelatedCallers = createMockRelatedCallers();

        OdsLogonHelper.populateRelatedUserInfo(enrolledAccts, mockCustomerProfile, mockRelatedCallers);

        for (ParallelServiceCaller caller : mockRelatedCallers) {
            verify(caller).sync();
        }
    }

    private List<CustAcctType> createMockEnrolledAccounts() {
        List<CustAcctType> enrolledAccts = new ArrayList<>();
        CustAcctType acct1 = mock(CustAcctType.class);
        when(acct1.getAcctNum()).thenReturn("111111");
        enrolledAccts.add(acct1);

        CustAcctType acct2 = mock(CustAcctType.class);
        when(acct2.getAcctNum()).thenReturn("222222");
        enrolledAccts.add(acct2);

        return enrolledAccts;
    }

    private List<ParallelServiceCaller> createMockRelatedCallers() {
        List<ParallelServiceCaller> callers = new ArrayList<>();
        ParallelServiceCaller caller1 = mock(ParallelServiceCaller.class);
        callers.add(caller1);

        ParallelServiceCaller caller2 = mock(ParallelServiceCaller.class);
        callers.add(caller2);

        return callers;
    }
}
