package com.td.mbna.msec.midtier.customerprofile;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.td.mbna.msec.midtier.customerprofile.payload.retrievevaletdata.RetrieveValetDataRequest;
import com.td.mbna.msec.midtier.customerprofile.payload.retrievevaletdata.RetrieveValetDataResponse;
import com.td.mbna.msec.midtier.mbcapd.MbnaCapd;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class RetrieveValetDataOperationTest {

    @Mock
    private MbnaCapd mbnaCapd;

    @InjectMocks
    private RetrieveValetDataOperation retrieveValetDataOperation;

    private RetrieveValetDataRequest request;
    private RetrieveValetDataResponse response;

    @BeforeEach
    public void setup() {
        request = new RetrieveValetDataRequest();
        response = new RetrieveValetDataResponse();
    }

    @Test
    public void testInvokeService_Success() {
        String[] tokens = {"token1"};

        when(mbnaCapd.retrieveValetData(request, tokens)).thenReturn(response);

        RetrieveValetDataResponse actualResponse = retrieveValetDataOperation.invokeService(request, tokens);

        assertNotNull(actualResponse);
        assertEquals(response, actualResponse);
        verify(mbnaCapd, times(1)).retrieveValetData(request, tokens);
    }

    @Test
    public void testInvokeService_NullResponse() {
        String[] tokens = {"token1"};

        when(mbnaCapd.retrieveValetData(request, tokens)).thenReturn(null);

        RetrieveValetDataResponse actualResponse = retrieveValetDataOperation.invokeService(request, tokens);

        assertNull(actualResponse);
        verify(mbnaCapd, times(1)).retrieveValetData(request, tokens);
    }

    @Test
    public void testRequiresDisclosureConsent() {
        assertFalse(retrieveValetDataOperation.requiresDisclosureConsent());
    }

    @Test
    public void testGetConsentDisclosureFailedMsgCode() {
        assertNull(retrieveValetDataOperation.getConsentDisclosureFailedMsgCode());
    }

    @Test
    public void testGenerateAutoComment() {
        assertFalse(retrieveValetDataOperation.generateAutoComment());
    }

    @Test
    public void testCreateAutoComment() {
        assertNull(retrieveValetDataOperation.createAutoComment(null, null));
    }

    @Test
    public void testGetEmailInfoBean() {
        assertNull(retrieveValetDataOperation.getEmailInfoBean(null, null));
    }

    @Test
    public void testGetValidator() {
        assertNull(retrieveValetDataOperation.getValidator());
    }
}
