package com.td.mbna.msec.midtier.customerprofile;

import static org.mockito.Mockito.*;

import com.td.mbna.msec.midtier.customerprofile.payload.savevaletdata.SaveValetDataRequest;
import com.td.mbna.msec.midtier.customerprofile.payload.savevaletdata.SaveValetDataResponse;
import com.td.mbna.msec.midtier.mbcapd.MbnaCapd;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class SaveValetDataOperationTest {

    @InjectMocks
    private SaveValetDataOperation saveValetDataOperation;

    @Mock
    private MbnaCapd mbnaCapd;

    @Mock
    private SaveValetDataRequest request;

    @Mock
    private SaveValetDataResponse response;

    @Mock
    private MbnaLogger logger;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() {
        String token = "valid_token";
        when(mbnaCapd.saveValetData(request, token)).thenReturn(response);

        SaveValetDataResponse actualResponse = saveValetDataOperation.invokeService(request, token);

        assertNotNull(actualResponse);
        verify(mbnaCapd, times(1)).saveValetData(request, token);
    }

    @Test
    void testInvokeService_NullResponse() {
        String token = "valid_token";
        when(mbnaCapd.saveValetData(request, token)).thenReturn(null);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            saveValetDataOperation.invokeService(request, token);
        });

        String expectedMessage = " Got a null response from mbnaCapd.saveValetData method. ";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
        verify(mbnaCapd, times(1)).saveValetData(request, token);
    }

    @Test
    void testRequiresDisclosureConsent() {
        assertFalse(saveValetDataOperation.requiresDisclosureConsent());
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        assertNull(saveValetDataOperation.getConsentDisclosureFailedMsgCode());
    }

    @Test
    void testGenerateAutoComment() {
        assertFalse(saveValetDataOperation.generateAutoComment());
    }

    @Test
    void testCreateAutoComment() {
        assertNull(saveValetDataOperation.createAutoComment(request, response));
    }

    @Test
    void testGetEmailInfoBean() {
        assertNull(saveValetDataOperation.getEmailInfoBean(request, response));
    }

    @Test
    void testGetValidator() {
        assertNull(saveValetDataOperation.getValidator());
    }
}
