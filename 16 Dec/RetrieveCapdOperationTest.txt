package com.td.mbna.msec.midtier.customerprofile;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.td.mbna.msec.midtier.customerprofile.payload.retrievecapd.RetrieveCapdRequest;
import com.td.mbna.msec.midtier.customerprofile.payload.retrievecapd.RetrieveCapdResponse;
import com.td.mbna.msec.midtier.mbcapd.MbnaCapd;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;

@ExtendWith(MockitoExtension.class)
class RetrieveCapdOperationTest {

    @InjectMocks
    private RetrieveCapdOperation retrieveCapdOperation;

    @Mock
    private MbnaCapd mbnaCapd;

    private RetrieveCapdRequest mockRequest;
    private RetrieveCapdResponse mockResponse;

    @BeforeEach
    void setUp() {
        mockRequest = new RetrieveCapdRequest();
        mockResponse = new RetrieveCapdResponse();
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        when(mbnaCapd.retrieveCapd(eq(mockRequest), any())).thenReturn(mockResponse);

        // Act
        RetrieveCapdResponse response = retrieveCapdOperation.invokeService(mockRequest);

        // Assert
        assertNotNull(response);
        assertEquals(mockResponse, response);
        verify(mbnaCapd, times(1)).retrieveCapd(eq(mockRequest), any());
    }

    @Test
    void testInvokeService_NullResponse() {
        // Arrange
        when(mbnaCapd.retrieveCapd(eq(mockRequest), any())).thenReturn(null);

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            retrieveCapdOperation.invokeService(mockRequest);
        });

        String expectedMessage = "Got a null response from mbnaCapd.retriveCapd method.";
        assertTrue(exception.getMessage().contains(expectedMessage));

        verify(mbnaCapd, times(1)).retrieveCapd(eq(mockRequest), any());
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act
        boolean result = retrieveCapdOperation.requiresDisclosureConsent();

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = retrieveCapdOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assertNull(result);
    }

    @Test
    void testGenerateAutoComment() {
        // Act
        boolean result = retrieveCapdOperation.generateAutoComment();

        // Assert
        assertTrue(result);
    }

    @Test
    void testCreateAutoComment() {
        // Act
        List<String> result = retrieveCapdOperation.createAutoComment(mockRequest, mockResponse);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetEmailInfoBean() {
        // Act
        EmailInfo result = retrieveCapdOperation.getEmailInfoBean(mockRequest, mockResponse);

        // Assert
        assertNull(result);
    }

    @Test
    void testGetValidator() {
        // Act
        MsecValidator result = retrieveCapdOperation.getValidator();

        // Assert
        assertNull(result);
    }
}
