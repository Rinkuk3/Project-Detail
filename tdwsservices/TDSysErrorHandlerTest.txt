package com.td.mbna.msec.midtier.tdwsservices;

import com.td.mbna.msec.midtier.configuration.beans.ExceptionInfoBean;
import com.td.mbna.msec.midtier.configuration.processor.ExceptionMappingProcessor;
import com.td.mbna.msec.midtier.util.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;

import javax.xml.soap.SOAPMessageContext;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import javax.xml.ws.soap.SOAPFaultException;
import java.util.Set;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class TDSysErrorHandlerTest {

    private TDSysErrorHandler sysErrorHandler;

    @Mock
    private SOAPMessageContext soapMessageContext;

    @Mock
    private SoapUtil.SoapMsgInfo soapMsgInfo;

    @Mock
    private ExceptionInfoBean exceptionInfoBean;

    @Mock
    private WebServiceInfoCallTracker webServiceInfoCallTracker;

    @Mock
    private SoapUtil soapUtil;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        sysErrorHandler = new TDSysErrorHandler();
    }

    @Test
    public void testGetHeaders() {
        Set<QName> headers = sysErrorHandler.getHeaders();
        assertNull(headers); // It should return null as per the implementation
    }

    @Test
    public void testHandleMessage() {
        // Test for handleMessage with a SoapMsgInfo
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(mock(HttpServletRequest.class));
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        boolean result = sysErrorHandler.handleMessage(soapMessageContext);
        assertTrue(result); // Should return true
    }

    @Test
    public void testHandleFault() {
        // Test for handleFault with a SoapMsgInfo
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(mock(HttpServletRequest.class));
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        boolean result = sysErrorHandler.handleFault(soapMessageContext);
        assertTrue(result); // Should return true
    }

    @Test
    public void testHandleFaultWithInDevMode() {
        // Simulating the scenario where InDevMode is true
        try (MockedStatic<ConfigUtil> configUtilMock = Mockito.mockStatic(ConfigUtil.class)) {
            configUtilMock.when(() -> ConfigUtil.inDevMode()).thenReturn(true);
            when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
            when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(mock(HttpServletRequest.class));
            when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));

            sysErrorHandler.handleFault(soapMessageContext);
            verify(webServiceInfoCallTracker, times(1)).setSoapFaultEncountered(true);
        }
    }

    @Test
    public void testCheckInboundFaultWithSocketTimeoutException() {
        // Test to check if SocketTimeoutException is correctly handled
        when(soapMsgInfo.getFaultString()).thenReturn("SocketTimeoutException");
        try {
            sysErrorHandler.checkInboundFault(soapMsgInfo);
        } catch (SOAPFaultException e) {
            assertTrue(e.getMessage().contains("MS502"));
        }
    }

    @Test(expected = SOAPFaultException.class)
    public void testCheckInboundFaultWithNonSocketTimeoutException() {
        // Test if a generic exception is correctly handled
        when(soapMsgInfo.getFaultString()).thenReturn("Some other error");
        sysErrorHandler.checkInboundFault(soapMsgInfo); // This should throw an exception
    }

    @Test
    public void testCreateSOAPFaultExceptionWithErrorCode() throws Exception {
        // Test createSOAPFaultException with errorCode and description
        SOAPFaultException exception = sysErrorHandler.createSOAPFaultException("SystemError", "MS502", "Timeout error");
        assertNotNull(exception);
        assertTrue(exception.getMessage().contains("MS502"));
    }

    @Test
    public void testCreateSOAPFaultExceptionWithExceptionInfoBean() throws Exception {
        // Test createSOAPFaultException with ExceptionInfoBean
        when(exceptionInfoBean.getErrorCode()).thenReturn("MS502");
        when(exceptionInfoBean.getSeverity()).thenReturn("ERROR");
        when(exceptionInfoBean.getErrorDescription()).thenReturn("Timeout error");
        when(exceptionInfoBean.getSoapExceptionMessage()).thenReturn("Exception occurred");

        SOAPFaultException exception = sysErrorHandler.createSOAPFaultException("SystemError", exceptionInfoBean);
        assertNotNull(exception);
        assertTrue(exception.getMessage().contains("MS502"));
    }

    @Test
    public void testLogMessage() {
        // Test logMessage with SoapMsgInfo
        when(soapMsgInfo.isResponse()).thenReturn(true);
        when(soapMsgInfo.getMsg()).thenReturn("Sample SOAP Message");
        
        sysErrorHandler.logMessage(soapMsgInfo);
        // The test will ensure that no exception is thrown, and log messages are printed accordingly
    }

    @Test
    public void testGetOriginator() {
        // Test getOriginator with a mock SOAPMessageContext
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        
        String originator = sysErrorHandler.getOriginator(soapMessageContext);
        assertEquals(ExceptionMappingProcessor.TD_MISC, originator);
    }

    @Test
    public void testGetSoapFaultCodeAndMessage() {
        // Test getSoapFaultCodeAndMessage
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        String faultInfo = sysErrorHandler.getSoapFaultCodeAndMessage(soapMessageContext);
        assertNotNull(faultInfo);
    }

    @Test
    public void testGetTdFaultMessage() {
        // Test getTdFaultMessage
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        String faultMessage = sysErrorHandler.getTdFaultMessage(soapMessageContext);
        assertNull(faultMessage); // Should be null for this test case since no actual fault message is set
    }

    @Test
    public void testGetTdFaultCode() {
        // Test getTdFaultCode
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        String faultCode = sysErrorHandler.getTdFaultCode(soapMessageContext);
        assertNull(faultCode); // Should be null for this test case since no actual fault code is set
    }

    @Test
    public void testGetSoapFaultString() {
        // Test getSoapFaultString
        when(soapMessageContext.get(SOAPMessageContext.SOAP_MESSAGE)).thenReturn(mock(javax.xml.soap.SOAPMessage.class));
        
        String faultString = sysErrorHandler.getSoapFaultString(soapMessageContext);
        assertNull(faultString); // Should be null for this test case since no actual fault string is set
    }
}
