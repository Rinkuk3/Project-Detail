package com.td.mbna.msec.midtier.tdwsservices;

import com.td.mbna.msec.midtier.util.ConfigUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import javax.servlet.http.HttpServletRequest;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import java.net.InetAddress;
import java.util.HashSet;
import java.util.Set;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class TDSoapFilterTest {

    private TDSoapFilter soapFilter;

    @Mock
    private SOAPMessageContext soapMessageContext;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private MessageContext messageContext;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        soapFilter = new TDSoapFilter();
    }

    @Test
    public void testGetHeaders() {
        Set<QName> headers = soapFilter.getHeaders();
        // Ensure the method returns null as per implementation.
        assertNull(headers);
    }

    @Test
    public void testHandleMessagePassThru() {
        // Set up for outbound message to be false
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.1.1");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");
        
        // Mock ConfigUtil.getProperty to return null (i.e., no uiIpAddr defined)
        mockStatic(ConfigUtil.class);
        when(ConfigUtil.getProperty("uiIpAddr")).thenReturn(null);
        
        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertTrue(result);
    }

    @Test
    public void testHandleMessageFail() {
        // Set up for outbound message to be false and ip address mismatch
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.1.2");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");
        
        // Mock ConfigUtil.getProperty to return null (i.e., no uiIpAddr defined)
        mockStatic(ConfigUtil.class);
        when(ConfigUtil.getProperty("uiIpAddr")).thenReturn(null);
        
        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertFalse(result);
    }

    @Test
    public void testHandleMessageWithUiIpAddr() {
        // Set up for outbound message to be false and uiIpAddr configured
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.1.2");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");
        
        // Mock ConfigUtil.getProperty to return uiIpAddr
        mockStatic(ConfigUtil.class);
        when(ConfigUtil.getProperty("uiIpAddr")).thenReturn("192.168.1.2");
        
        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertTrue(result);
    }

    @Test
    public void testHandleMessageWithInvalidUiIpAddr() {
        // Set up for outbound message to be false and mismatched uiIpAddr
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.1.2");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");

        // Mock ConfigUtil.getProperty to return an incorrect uiIpAddr
        mockStatic(ConfigUtil.class);
        when(ConfigUtil.getProperty("uiIpAddr")).thenReturn("192.168.1.3");

        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertFalse(result);
    }

    @Test
    public void testHandleFault() {
        boolean result = soapFilter.handleFault(soapMessageContext);
        assertTrue(result);
    }

    @Test
    public void testClose() {
        soapFilter.close(messageContext);
        // No assertion needed, just to make sure no exception is thrown
    }

    @Test
    public void testFilterWithValidLocalIp() throws Exception {
        // Set up for outbound message to be false
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("127.0.0.1");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");

        // Mock InetAddress.getLocalHost() to return a specific local address
        InetAddress mockInetAddress = InetAddress.getByName("127.0.0.1");
        mockStatic(InetAddress.class);
        when(InetAddress.getLocalHost()).thenReturn(mockInetAddress);

        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertTrue(result);
    }

    @Test
    public void testFilterWithInvalidIpAddress() throws Exception {
        // Set up for outbound message to be false
        when(soapMessageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY)).thenReturn(false);
        when(soapMessageContext.get(SOAPMessageContext.SERVLET_REQUEST)).thenReturn(httpServletRequest);
        when(httpServletRequest.getRemoteAddr()).thenReturn("192.168.1.2");
        when(httpServletRequest.getLocalAddr()).thenReturn("127.0.0.1");

        // Mock InetAddress.getLocalHost() to return a specific local address
        InetAddress mockInetAddress = InetAddress.getByName("127.0.0.1");
        mockStatic(InetAddress.class);
        when(InetAddress.getLocalHost()).thenReturn(mockInetAddress);

        boolean result = soapFilter.handleMessage(soapMessageContext);
        assertFalse(result);
    }

    @Test
    public void testGetServerAddress() throws Exception {
        // Simulate getting the server IP address
        InetAddress mockInetAddress = InetAddress.getByName("127.0.0.1");
        mockStatic(InetAddress.class);
        when(InetAddress.getLocalHost()).thenReturn(mockInetAddress);

        String serverAddress = TDSoapFilter.getServerAddress();
        assertEquals("127.0.0.1", serverAddress);
    }
}
