import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;

public class TdBaseServiceTest {

    private TdBaseService tdBaseService;
    private SpringBeanProvider springBeanProviderMock;
    private TDwsServiceUtil tdwsServiceUtilMock;
    private ApplicationContext applicationContextMock;

    @BeforeEach
    void setUp() {
        tdBaseService = new TdBaseService();
        springBeanProviderMock = mock(SpringBeanProvider.class);
        tdwsServiceUtilMock = mock(TDwsServiceUtil.class);
        applicationContextMock = mock(ApplicationContext.class);
        
        // Mock the SpringBeanProvider's getApplicationContext method
        when(springBeanProviderMock.getApplicationContext()).thenReturn(applicationContextMock);
    }

    @Test
    void testGetServicePortFromSpring() {
        String serviceName = TdBaseService.BEAN_TdCardService;
        Object mockService = new Object();
        
        // Mock the Spring application context to return a mocked service when requested
        when(applicationContextMock.getBean(serviceName)).thenReturn(mockService);
        
        Object result = TdBaseService.getServicePortFromSpring(serviceName);
        
        assertNotNull(result);
        assertEquals(mockService, result);
    }

    @Test
    void testIsSpringSupported() {
        // Directly calling the method as it is static
        assertTrue(tdBaseService.isSpringSupported());
    }

    @Test
    void testIsPropertyTrue_WhenPropertyIsTrue() {
        String key = "someKey";
        String value = "true";
        
        // Mocking TDwsServiceUtil's static method to return "true"
        try (MockedStatic<TDwsServiceUtil> mocked = mockStatic(TDwsServiceUtil.class)) {
            mocked.when(() -> TDwsServiceUtil.getTDServiceParam(key)).thenReturn(value);
            assertTrue(tdBaseService.isPropertyTrue(key));
        }
    }

    @Test
    void testIsPropertyTrue_WhenPropertyIsFalse() {
        String key = "someKey";
        String value = "false";
        
        // Mocking TDwsServiceUtil's static method to return "false"
        try (MockedStatic<TDwsServiceUtil> mocked = mockStatic(TDwsServiceUtil.class)) {
            mocked.when(() -> TDwsServiceUtil.getTDServiceParam(key)).thenReturn(value);
            assertFalse(tdBaseService.isPropertyTrue(key));
        }
    }

    @Test
    void testIsPropertyTrue_WhenPropertyIsNull() {
        String key = "someKey";
        
        // Mocking TDwsServiceUtil's static method to return null
        try (MockedStatic<TDwsServiceUtil> mocked = mockStatic(TDwsServiceUtil.class)) {
            mocked.when(() -> TDwsServiceUtil.getTDServiceParam(key)).thenReturn(null);
            assertFalse(tdBaseService.isPropertyTrue(key));
        }
    }

    @Test
    void testIsEnabled() {
        assertFalse(tdBaseService.isEnabled());
    }
}
