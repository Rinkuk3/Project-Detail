import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.schemas.tdct.srm.customerprofile.service.v1.*;
import com.td.schemas.tdct.srm.cps.soap_service.v1.*;
import javax.xml.ws.BindingProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.HashMap;
import java.util.Map;

class TdOdsCustomerProfileServiceTest {

    private TdOdsCustomerProfileService tdService;
    private CustomerProfilePortType mockPort;
    private TEnvCreateCustomerProfileRq createRequest;
    private TEnvRetrieveCustomerProfileRq retrieveRequest;
    private TEnvUpdateCustomerProfileRq updateRequest;
    private RcpFilter mockFilter;
    private TEnvRetrieveCustomerProfileRs mockRetrieveResponse;
    private TEnvUpdateCustomerProfileRs mockUpdateResponse;

    @BeforeEach
    void setUp() throws Exception {
        tdService = new TdOdsCustomerProfileService();
        mockPort = mock(CustomerProfilePortType.class);
        createRequest = mock(TEnvCreateCustomerProfileRq.class);
        retrieveRequest = mock(TEnvRetrieveCustomerProfileRq.class);
        updateRequest = mock(TEnvUpdateCustomerProfileRq.class);
        mockFilter = mock(RcpFilter.class);
        mockRetrieveResponse = mock(TEnvRetrieveCustomerProfileRs.class);
        mockUpdateResponse = mock(TEnvUpdateCustomerProfileRs.class);

        // Mocking static methods
        TdOdsCustomerProfileService mockService = mock(TdOdsCustomerProfileService.class);
        when(mockService.getServicePort()).thenReturn(mockPort);
    }

    @Test
    void testIsEnabled() {
        // Mocking the behavior of isPropertyTrue to return true
        TdOdsCustomerProfileService serviceMock = mock(TdOdsCustomerProfileService.class);
        when(serviceMock.isPropertyTrue(TDwsServiceUtil.TD_ODS_CUSTOMERPROFILE_SERVICE_ENABLED)).thenReturn(true);

        assertTrue(serviceMock.isEnabled());
    }

    @Test
    void testCreateCustomerProfile() throws Exception {
        // Mocking the actual call to the web service
        when(mockPort.createCustomerProfile(createRequest)).thenReturn(mock(TEnvCreateCustomerProfileRs.class));

        TEnvCreateCustomerProfileRs response = TdOdsCustomerProfileService.createCustomerProfile(createRequest);
        assertNotNull(response);
    }

    @Test
    void testRetrieveCustomerProfile() throws Exception {
        // Mocking the actual call to the web service
        when(mockPort.retrieveCustomerProfile(retrieveRequest)).thenReturn(mock(TEnvRetrieveCustomerProfileRs.class));

        TEnvRetrieveCustomerProfileRs response = TdOdsCustomerProfileService.retrieveCustomerProfile(retrieveRequest);
        assertNotNull(response);
    }

    @Test
    void testUpdateCustomer() throws Exception {
        // Mocking the actual call to the web service
        when(mockPort.updateCustomerProfile(updateRequest)).thenReturn(mock(TEnvUpdateCustomerProfileRs.class));

        TEnvUpdateCustomerProfileRs response = TdOdsCustomerProfileService.updateCustomer(updateRequest);
        assertNotNull(response);
    }

    @Test
    void testUpdateCustomer2() throws Exception {
        // Mocking the actual call to the web service
        byte[] expectedResponse = new byte[0];
        when(mockPort.updateCustomerProfile(updateRequest)).thenReturn(mockUpdateResponse);
        when(TDwsServiceUtil.convertObjectToStream(anyString(), eq(TEnvUpdateCustomerProfileRs.class), eq(mockUpdateResponse), anyString())).thenReturn(expectedResponse);

        byte[] response = TdOdsCustomerProfileService.updateCustomer2(updateRequest);
        assertArrayEquals(expectedResponse, response);
    }

    @Test
    void testRetrieveCustomerProfileViaPartyId() throws Exception {
        String partyId = "12345";
        when(mockFilter.getFilters()).thenReturn(new HashMap<>());
        when(mockPort.retrieveCustomerProfile(retrieveRequest)).thenReturn(mockRetrieveResponse);

        TEnvRetrieveCustomerProfileRs response = TdOdsCustomerProfileService.retrieveCustomerProfileViaPartyId(partyId, mockFilter);
        assertNotNull(response);
    }

    @Test
    void testRetrieveCustomerProfileViaAcctNum() throws Exception {
        String acctNum = "98765";
        when(mockFilter.getFilters()).thenReturn(new HashMap<>());
        when(mockPort.retrieveCustomerProfile(retrieveRequest)).thenReturn(mockRetrieveResponse);

        TEnvRetrieveCustomerProfileRs response = TdOdsCustomerProfileService.retrieveCustomerProfileViaAcctNum(acctNum, mockFilter);
        assertNotNull(response);
    }

    @Test
    void testRetrieveCustomerProfileCommon() throws Exception {
        Map<String, Object> params = new HashMap<>();
        params.put("idTypeCd", "PartyID");
        params.put("idNum", "12345");
        when(mockFilter.getFilters()).thenReturn(new HashMap<>());
        when(mockPort.retrieveCustomerProfile(retrieveRequest)).thenReturn(mockRetrieveResponse);

        TEnvRetrieveCustomerProfileRs response = TdOdsCustomerProfileService.retrieveCustomerProfileCommon(params, mockFilter);
        assertNotNull(response);
    }

    @Test
    void testGetServicePort_SpringSupported() throws Exception {
        // Mocking the case where Spring is supported
        TdOdsCustomerProfileService mockService = mock(TdOdsCustomerProfileService.class);
        when(mockService.isSpringSupported()).thenReturn(true);
        when(mockService.getServicePortFromSpring(TdBaseService.BEAN_TdOdsCustomerProfile)).thenReturn(mockPort);

        CustomerProfilePortType port = mockService.getServicePort();
        assertNotNull(port);
        assertEquals(mockPort, port);
    }

    @Test
    void testGetServicePort_WithoutSpring() throws Exception {
        // Mocking the case where Spring is not supported
        TdOdsCustomerProfileService mockService = mock(TdOdsCustomerProfileService.class);
        when(mockService.isSpringSupported()).thenReturn(false);

        URL asUrl = new URL(TdOdsCustomerProfileService.srvcEndPoint);
        QName qname = new QName(TdOdsCustomerProfileService.SrvcNameSpace, TdOdsCustomerProfileService.SrvcName);
        CustomerProfileService service = mock(CustomerProfileService.class);
        CustomerProfilePortType port = mock(CustomerProfilePortType.class);

        when(service.getPort(CustomerProfilePortType.class)).thenReturn(port);
        when(new CustomerProfileService(asUrl, qname)).thenReturn(service);

        CustomerProfilePortType resultPort = mockService.getServicePort();
        assertNotNull(resultPort);
    }
}
