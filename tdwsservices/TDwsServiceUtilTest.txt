package com.td.mbna.msec.midtier.tdwsservices;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.ClassPathResource;
import java.io.InputStream;
import java.util.Properties;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class TDwsServiceUtilTest {

    @Mock
    private ApiConfig apiConfig;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        // Mocking the static configuration load
        Properties mockProperties = mock(Properties.class);
        when(mockProperties.getProperty("TDwsServices.properties")).thenReturn("mockedValue");
        TDwsServiceUtil.setEndPtProps(mockProperties);
    }

    @Test
    public void testGetTDServiceParam_withValidParam() {
        String paramName = "TD_CARD_ENDPT";
        String expected = "mockedValue";
        
        // Simulate the case where the value is returned from the properties file
        when(TDwsServiceUtil.getTDServiceParam(paramName)).thenReturn(expected);

        String result = TDwsServiceUtil.getTDServiceParam(paramName);

        assertNotNull(result);
        assertEquals(expected, result);
    }

    @Test
    public void testGetTDServiceParam_withNullValue() {
        String paramName = "NON_EXISTENT_PARAM";
        String expected = "";

        // Simulate the case where the property does not exist
        when(TDwsServiceUtil.getTDServiceParam(paramName)).thenReturn(expected);

        String result = TDwsServiceUtil.getTDServiceParam(paramName);

        assertNotNull(result);
        assertEquals(expected, result);
    }

    @Test
    public void testConvertObjectToStream_withValidData() throws Exception {
        String contextPath = "com.td.mbna.msec";
        Class<?> type = MyClass.class;
        Object inObj = new MyClass("test");
        String tagname = "TestTag";
        String namespace = "http://www.example.com";

        byte[] result = TDwsServiceUtil.convertObjectToStream(contextPath, type, inObj, tagname, namespace);

        assertNotNull(result);
        assertTrue(result.length > 0);
    }

    @Test(expected = Exception.class)
    public void testConvertObjectToStream_withException() throws Exception {
        String contextPath = "com.td.mbna.msec";
        Class<?> type = MyClass.class;
        Object inObj = null; // Invalid object to trigger exception
        String tagname = "TestTag";
        String namespace = "http://www.example.com";

        TDwsServiceUtil.convertObjectToStream(contextPath, type, inObj, tagname, namespace);
    }

    @Test
    public void testSuppressCardNoAndPin_withValidString() {
        String input = "CardNO>1234567890123456<";
        String expected = "CardNO>************3456<";

        String result = TDwsServiceUtil.suppressCardNoAndPin(input);

        assertNotNull(result);
        assertEquals(expected, result);
    }

    @Test
    public void testSuppressCardNoAndPin_withEmptyString() {
        String input = "";
        String result = TDwsServiceUtil.suppressCardNoAndPin(input);
        assertNotNull(result);
        assertEquals("", result);
    }

    @Test
    public void testSuppressCardNoAndPin_withInvalidCardNumber() {
        String input = "CardNO>123<";
        String result = TDwsServiceUtil.suppressCardNoAndPin(input);
        assertNotNull(result);
        assertEquals("CardNO>123<", result);  // no change as it doesn't match pattern
    }

    @Test
    public void testInit_withValidContext() {
        // Just testing if the method runs without exceptions
        TDwsServiceUtil.init();
    }

    @Test
    public void testStaticBlock_loadingProperties() {
        try {
            // Try to invoke the static block and see if properties are being loaded correctly
            Properties props = TDwsServiceUtil.getEndPtProps();
            assertNotNull(props);
        } catch (Exception e) {
            fail("Static block failed to load properties: " + e.getMessage());
        }
    }

    // Mocked MyClass for testing JAXB context marshalling
    public static class MyClass {
        private String name;

        public MyClass(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }
}
