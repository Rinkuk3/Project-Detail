import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.schemas.tdct.srm.cars.service.v2.*;
import com.td.schemas.tdct.srm.cars.soap_service.v2.*;
import javax.xml.ws.BindingProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.net.URL;

class TdOdsCustomerAccountRelationshipServiceTest {

    private TdOdsCustomerAccountRelationshipService tdService;
    private CustomerAccountRelationshipPortType mockPort;
    private TEnvCreateCustomerAccountRelationshipRq createRequest;
    private TEnvUpdateCustomerAccountRelationshipRq updateRequest;

    @BeforeEach
    void setUp() throws Exception {
        tdService = new TdOdsCustomerAccountRelationshipService();
        mockPort = mock(CustomerAccountRelationshipPortType.class);
        createRequest = mock(TEnvCreateCustomerAccountRelationshipRq.class);
        updateRequest = mock(TEnvUpdateCustomerAccountRelationshipRq.class);

        // Mocking static methods
        TdOdsCustomerAccountRelationshipService mockService = mock(TdOdsCustomerAccountRelationshipService.class);
        when(mockService.getServicePort()).thenReturn(mockPort);
    }

    @Test
    void testIsEnabled() {
        // Mocking the behavior of isPropertyTrue to return true
        TdOdsCustomerAccountRelationshipService serviceMock = mock(TdOdsCustomerAccountRelationshipService.class);
        when(serviceMock.isPropertyTrue(TDwsServiceUtil.TD_ODS_CUSTOMERACCOUNTRELATIONSHIP_SERVICE_ENABLED)).thenReturn(true);

        assertTrue(serviceMock.isEnabled());
    }

    @Test
    void testCreateAccountRelationship() throws Exception {
        // Mocking the actual call to the web service
        TEnvCreateCustomerAccountRelationshipRs mockResponse = mock(TEnvCreateCustomerAccountRelationshipRs.class);
        when(mockPort.createAccountRelationship(createRequest)).thenReturn(mockResponse);

        TEnvCreateCustomerAccountRelationshipRs response = TdOdsCustomerAccountRelationshipService.createAccountRelationship(createRequest);
        assertNotNull(response);
        assertEquals(mockResponse, response);
    }

    @Test
    void testUpdateAccountRelationship() throws Exception {
        // Mocking the actual call to the web service
        TEnvUpdateCustomerAccountRelationshipRs mockResponse = mock(TEnvUpdateCustomerAccountRelationshipRs.class);
        when(mockPort.updateAccountRelationship(updateRequest)).thenReturn(mockResponse);

        TEnvUpdateCustomerAccountRelationshipRs response = TdOdsCustomerAccountRelationshipService.updateAccountRelationship(updateRequest);
        assertNotNull(response);
        assertEquals(mockResponse, response);
    }

    @Test
    void testGetServicePort_SpringSupported() throws Exception {
        // Mocking the case where Spring is supported
        TdOdsCustomerAccountRelationshipService mockService = mock(TdOdsCustomerAccountRelationshipService.class);
        when(mockService.isSpringSupported()).thenReturn(true);
        when(mockService.getServicePortFromSpring(TdBaseService.BEAN_TdOdsCustomerAccountRelationship)).thenReturn(mockPort);

        CustomerAccountRelationshipPortType port = mockService.getServicePort();
        assertNotNull(port);
        assertEquals(mockPort, port);
    }

    @Test
    void testGetServicePort_WithoutSpring() throws Exception {
        // Mocking the case where Spring is not supported
        TdOdsCustomerAccountRelationshipService mockService = mock(TdOdsCustomerAccountRelationshipService.class);
        when(mockService.isSpringSupported()).thenReturn(false);

        URL asUrl = new URL(TdOdsCustomerAccountRelationshipService.srvcEndPoint);
        QName qname = new QName(TdOdsCustomerAccountRelationshipService.SrvcNameSpace, TdOdsCustomerAccountRelationshipService.SrvcName);
        CustomerAccountRelationshipService service = mock(CustomerAccountRelationshipService.class);
        CustomerAccountRelationshipPortType port = mock(CustomerAccountRelationshipPortType.class);

        when(service.getPort(CustomerAccountRelationshipPortType.class)).thenReturn(port);
        when(new CustomerAccountRelationshipService(asUrl, qname)).thenReturn(service);

        CustomerAccountRelationshipPortType resultPort = mockService.getServicePort();
        assertNotNull(resultPort);
    }
}
