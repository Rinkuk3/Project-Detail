import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class TowTermTest {

    private TowTerm towTerm;

    @BeforeEach
    public void setUp() {
        towTerm = new TowTerm();
    }

    @Test
    public void testSetAndGetUntilAgeCd() {
        String untilAgeCd = "ageCd";
        towTerm.setUntilAgeCd(untilAgeCd);
        assertEquals(untilAgeCd, towTerm.getUntilAgeCd());
    }

    @Test
    public void testSetAndGetUntilAgeNum() {
        String untilAgeNum = "ageNum";
        towTerm.setUntilAgeNum(untilAgeNum);
        assertEquals(untilAgeNum, towTerm.getUntilAgeNum());
    }

    @Test
    public void testSetAndGetFixedEndDt() {
        String fixedEndDt = "2025-12-31";
        towTerm.setFixedEndDt(fixedEndDt);
        assertEquals(fixedEndDt, towTerm.getFixedEndDt());
    }

    @Test
    public void testToString() {
        String untilAgeCd = "ageCd";
        String untilAgeNum = "ageNum";
        String fixedEndDt = "2025-12-31";

        towTerm.setUntilAgeCd(untilAgeCd);
        towTerm.setUntilAgeNum(untilAgeNum);
        towTerm.setFixedEndDt(fixedEndDt);

        String expected = "com.td.api.mbofp.response.retrievecampaign.TowTerm@" 
                + Integer.toHexString(System.identityHashCode(towTerm)) 
                + "[untilAgeCd=" + untilAgeCd + ",untilAgeNum=" + untilAgeNum 
                + ",fixedEndDt=" + fixedEndDt + "]";
        
        assertEquals(expected, towTerm.toString());
    }

    @Test
    public void testHashCode() {
        String untilAgeCd = "ageCd";
        String untilAgeNum = "ageNum";
        String fixedEndDt = "2025-12-31";

        towTerm.setUntilAgeCd(untilAgeCd);
        towTerm.setUntilAgeNum(untilAgeNum);
        towTerm.setFixedEndDt(fixedEndDt);

        int expectedHashCode = 31 + (untilAgeCd == null ? 0 : untilAgeCd.hashCode())
                + (fixedEndDt == null ? 0 : fixedEndDt.hashCode())
                + (untilAgeNum == null ? 0 : untilAgeNum.hashCode());

        assertEquals(expectedHashCode, towTerm.hashCode());
    }

    @Test
    public void testEquals() {
        String untilAgeCd = "ageCd";
        String untilAgeNum = "ageNum";
        String fixedEndDt = "2025-12-31";
        
        towTerm.setUntilAgeCd(untilAgeCd);
        towTerm.setUntilAgeNum(untilAgeNum);
        towTerm.setFixedEndDt(fixedEndDt);

        TowTerm anotherTowTerm = new TowTerm();
        anotherTowTerm.setUntilAgeCd(untilAgeCd);
        anotherTowTerm.setUntilAgeNum(untilAgeNum);
        anotherTowTerm.setFixedEndDt(fixedEndDt);

        assertTrue(towTerm.equals(anotherTowTerm));

        anotherTowTerm.setUntilAgeCd("different");
        assertFalse(towTerm.equals(anotherTowTerm));

        anotherTowTerm.setUntilAgeCd(untilAgeCd);
        anotherTowTerm.setUntilAgeNum("different");
        assertFalse(towTerm.equals(anotherTowTerm));

        anotherTowTerm.setUntilAgeNum(untilAgeNum);
        anotherTowTerm.setFixedEndDt("different");
        assertFalse(towTerm.equals(anotherTowTerm));

        anotherTowTerm.setFixedEndDt(fixedEndDt);
        assertTrue(towTerm.equals(anotherTowTerm));

        assertFalse(towTerm.equals(null));
        assertFalse(towTerm.equals(new Object()));
    }
}
