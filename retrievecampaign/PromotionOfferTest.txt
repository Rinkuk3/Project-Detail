import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class PromotionOfferTest {

    private PromotionOffer promotionOffer;

    @BeforeEach
    public void setUp() {
        promotionOffer = new PromotionOffer();
    }

    @Test
    public void testSetAndGetOffer() {
        Offer offer = new Offer();
        promotionOffer.setOffer(offer);
        assertEquals(offer, promotionOffer.getOffer());
    }

    @Test
    public void testSetAndGetPromotion() {
        Promotion promotion = new Promotion();
        promotionOffer.setPromotion(promotion);
        assertEquals(promotion, promotionOffer.getPromotion());
    }

    @Test
    public void testToString() {
        Offer offer = new Offer();
        promotionOffer.setOffer(offer);
        Promotion promotion = new Promotion();
        promotionOffer.setPromotion(promotion);

        String expected = "com.td.api.mbofp.response.retrievecampaign.PromotionOffer@" 
                + Integer.toHexString(System.identityHashCode(promotionOffer)) 
                + "[offer=" + offer + ",promotion=" + promotion + "]";
        
        assertEquals(expected, promotionOffer.toString());
    }

    @Test
    public void testHashCode() {
        Offer offer = new Offer();
        promotionOffer.setOffer(offer);
        Promotion promotion = new Promotion();
        promotionOffer.setPromotion(promotion);

        int expectedHashCode = 31 * (31 + (promotionOffer.getOffer() == null ? 0 : promotionOffer.getOffer().hashCode())) 
                + (promotionOffer.getPromotion() == null ? 0 : promotionOffer.getPromotion().hashCode());

        assertEquals(expectedHashCode, promotionOffer.hashCode());
    }

    @Test
    public void testEquals() {
        Offer offer = new Offer();
        promotionOffer.setOffer(offer);
        Promotion promotion = new Promotion();
        promotionOffer.setPromotion(promotion);

        PromotionOffer anotherPromotionOffer = new PromotionOffer();
        anotherPromotionOffer.setOffer(offer);
        anotherPromotionOffer.setPromotion(promotion);

        assertTrue(promotionOffer.equals(anotherPromotionOffer));

        anotherPromotionOffer.setOffer(new Offer());
        assertFalse(promotionOffer.equals(anotherPromotionOffer));

        anotherPromotionOffer.setOffer(offer);
        anotherPromotionOffer.setPromotion(new Promotion());
        assertFalse(promotionOffer.equals(anotherPromotionOffer));
    }
}
