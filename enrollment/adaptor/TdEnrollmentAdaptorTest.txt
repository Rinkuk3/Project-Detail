package com.td.mbna.msec.midtier.enrollment.adaptor;

import com.td.api.enrollment.retrieve.ProductCustomer;
import com.td.api.enrollment.retrieve.Relationship;
import com.td.api.enrollment.retrieve.RetrieveProductCustomer;
import com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment.ResponsePayload;
import com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment.RetrieveEnrollmentResponse;
import com.td.mbna.msec.midtier.types.common.CustAcctType;
import com.td.mbna.msec.midtier.util.ExceptionUtil;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

class TdEnrollmentAdaptorTest {

    @InjectMocks
    private TdEnrollmentAdaptor tdEnrollmentAdaptor;

    @Mock
    private MbnaLogger logger;

    @Mock
    private RetrieveProductCustomer retrieveProductCustomer;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testConvertToEnrollmentResponse_NoProductCustomer() {
        Mockito.when(retrieveProductCustomer.getProductCustomer()).thenReturn(null);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            tdEnrollmentAdaptor.convertToEnrollmentResponse(retrieveProductCustomer, "testConnectId");
        });

        assertTrue(exception.getMessage().contains("no customer found in enrollments API"));
    }

    @Test
    void testConvertToEnrollmentResponse_NoMbnaProductCd() {
        List<ProductCustomer> productCustomers = new ArrayList<>();
        Mockito.when(retrieveProductCustomer.getProductCustomer()).thenReturn(productCustomers);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            tdEnrollmentAdaptor.convertToEnrollmentResponse(retrieveProductCustomer, "testConnectId");
        });

        assertTrue(exception.getMessage().contains("no WEBMBNA found in enrollments API"));
    }

    @Test
    void testConvertToEnrollmentResponse_NoMdmKeyRelationship() {
        List<ProductCustomer> productCustomers = new ArrayList<>();
        ProductCustomer productCustomer = Mockito.mock(ProductCustomer.class);
        Relationship relationship = Mockito.mock(Relationship.class);
        List<Relationship> relationships = new ArrayList<>();
        relationships.add(relationship);

        Mockito.when(productCustomer.getProductCd()).thenReturn("WEBMBNA");
        Mockito.when(productCustomer.getRelationship()).thenReturn(relationships);
        productCustomers.add(productCustomer);

        Mockito.when(retrieveProductCustomer.getProductCustomer()).thenReturn(productCustomers);
        Mockito.when(relationship.getRelationshipCd()).thenReturn("OTHERKEY");

        Exception exception = assertThrows(RuntimeException.class, () -> {
            tdEnrollmentAdaptor.convertToEnrollmentResponse(retrieveProductCustomer, "testConnectId");
        });

        assertTrue(exception.getMessage().contains("no MDMKEY found in enrollments API"));
    }

    @Test
    void testConvertToEnrollmentResponse_Success() {
        List<ProductCustomer> productCustomers = new ArrayList<>();
        ProductCustomer productCustomer = Mockito.mock(ProductCustomer.class);
        Relationship relationship = Mockito.mock(Relationship.class);

        List<Relationship> relationships = new ArrayList<>();
        relationships.add(relationship);

        Mockito.when(productCustomer.getProductCd()).thenReturn("WEBMBNA");
        Mockito.when(productCustomer.getProductVal()).thenReturn("12345");
        Mockito.when(productCustomer.getRelationship()).thenReturn(relationships);
        productCustomers.add(productCustomer);

        Mockito.when(retrieveProductCustomer.getProductCustomer()).thenReturn(productCustomers);
        Mockito.when(relationship.getRelationshipCd()).thenReturn("MDMKEY");
        Mockito.when(relationship.getRelationshipVal()).thenReturn("customerId");

        RetrieveEnrollmentResponse response = tdEnrollmentAdaptor.convertToEnrollmentResponse(retrieveProductCustomer, "testConnectId");

        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertEquals("customerId", response.getResponsePayload().getCustId());
        assertEquals(1, response.getResponsePayload().getEnrolledAccts().size());
        assertEquals("12345", response.getResponsePayload().getEnrolledAccts().get(0).getAcctNum());
    }

    @Test
    void testConvertToEnrollmentResponse_Success_WithEmptyRelationship() {
        List<ProductCustomer> productCustomers = new ArrayList<>();
        ProductCustomer productCustomer = Mockito.mock(ProductCustomer.class);
        Mockito.when(productCustomer.getProductCd()).thenReturn("WEBMBNA");
        Mockito.when(productCustomer.getProductVal()).thenReturn("12345");
        Mockito.when(productCustomer.getRelationship()).thenReturn(new ArrayList<>());
        productCustomers.add(productCustomer);

        Mockito.when(retrieveProductCustomer.getProductCustomer()).thenReturn(productCustomers);

        Exception exception = assertThrows(RuntimeException.class, () -> {
            tdEnrollmentAdaptor.convertToEnrollmentResponse(retrieveProductCustomer, "testConnectId");
        });

        assertTrue(exception.getMessage().contains("no MDMKEY found in enrollments API"));
    }
}
