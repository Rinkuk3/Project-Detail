package com.td.mbna.msec.midtier.mbalert.facade;

import com.td.api.mbalert.request.addalertevent.AlertEventRequest;
import com.td.api.mbalert.response.addalertevent.AlertEventResponse;
import com.td.mbna.msec.midtier.mbalert.adaptor.AlertEventAdaptor;
import com.td.mbna.msec.midtier.service.EmailInfo;
import com.td.mbna.msec.midtier.services.IMBNAConstants;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class MbnaAlertFacadeTest {

    @InjectMocks
    private MbnaAlertFacade mbnaAlertFacade;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private AlertEventAdaptor alertEventAdaptor;

    @Mock
    private EmailInfo emailInfo;

    @Mock
    private MbnaLogger logger;

    @BeforeEach
    void setUp() {
        mbnaAlertFacade = new MbnaAlertFacade();
    }

    @Test
    void testAddAlertEventWithNullEmailInfo() {
        boolean result = mbnaAlertFacade.addAlertEvent(null);
        assertFalse(result);
    }

    @Test
    void testAddAlertEventWithInvalidBusinessEventID() {
        when(emailInfo.getBusinessEventID()).thenReturn("");
        when(emailInfo.getAcctNum()).thenReturn("12345");

        boolean result = mbnaAlertFacade.addAlertEvent(emailInfo);

        assertFalse(result);
    }

    @Test
    void testAddAlertEventWithInvalidPrimaryEmailAddress() {
        when(emailInfo.getBusinessEventID()).thenReturn("EventID");
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("");

        boolean result = mbnaAlertFacade.addAlertEvent(emailInfo);

        assertFalse(result);
    }

    @Test
    void testAddAlertEventWithContentCdBttocreditor() {
        when(emailInfo.getBusinessEventID()).thenReturn("EventID");
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(emailInfo.getAttribute("contentCd")).thenReturn("bttocreditor");
        when(emailInfo.getConfirmationNumbers()).thenReturn(new String[] {"123", "456"});
        when(alertEventAdaptor.getRequest(emailInfo)).thenReturn(mock(AlertEventRequest.class));

        boolean result = mbnaAlertFacade.addAlertEvent(emailInfo);

        assertTrue(result);
    }

    @Test
    void testAddAlertEventWithInvalidBTReferenceNumber() {
        when(emailInfo.getBusinessEventID()).thenReturn("EventID");
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(emailInfo.getAttribute("contentCd")).thenReturn("bttocreditor");
        when(emailInfo.getConfirmationNumbers()).thenReturn(new String[] {"123", "456"});
        when(alertEventAdaptor.getRequest(emailInfo)).thenReturn(mock(AlertEventRequest.class));
        when(mbnaAlertFacade.sendEmail(emailInfo)).thenReturn(false);

        boolean result = mbnaAlertFacade.addAlertEvent(emailInfo);

        assertFalse(result);
    }

    @Test
    void testAddAlertEventWithAlertTypeIPEnrollment() {
        when(emailInfo.getBusinessEventID()).thenReturn(IMBNAConstants.ALERT_TYPE_CD_IPENROLLMENT);
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(alertEventAdaptor.getRequest(emailInfo)).thenReturn(mock(AlertEventRequest.class));
        when(mbnaAlertFacade.sendEmail(emailInfo)).thenReturn(false);

        boolean result = mbnaAlertFacade.addAlertEvent(emailInfo);

        assertFalse(result);
    }

    @Test
    void testSendEmailWithValidData() {
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(alertEventAdaptor.getRequest(emailInfo)).thenReturn(mock(AlertEventRequest.class));
        when(restTemplate.exchange(eq(TDRestServiceUtil.getTDServiceParam(MSECConstants.TD_ALERT_EVENT_ENDPT)),
                eq(HttpMethod.POST), any(HttpEntity.class), eq(AlertEventResponse.class)))
                .thenReturn(new ResponseEntity<>(mock(AlertEventResponse.class), HttpStatus.OK));

        boolean result = mbnaAlertFacade.sendEmail(emailInfo);

        assertTrue(result);
    }

    @Test
    void testSendEmailWithException() {
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(alertEventAdaptor.getRequest(emailInfo)).thenReturn(mock(AlertEventRequest.class));
        when(restTemplate.exchange(eq(TDRestServiceUtil.getTDServiceParam(MSECConstants.TD_ALERT_EVENT_ENDPT)),
                eq(HttpMethod.POST), any(HttpEntity.class), eq(AlertEventResponse.class)))
                .thenThrow(new RuntimeException("API call failed"));

        boolean result = mbnaAlertFacade.sendEmail(emailInfo);

        assertFalse(result);
    }

    @Test
    void testAddAuthorizationHeader() {
        String token = "testToken";
        HttpHeaders headers = mbnaAlertFacade.addAuthorizationHeader(token);

        assertNotNull(headers);
        assertEquals("testToken", headers.getFirst(MSECConstants.AUTHORIZATION));
    }

    @Test
    void testLogIPEmailInfo() {
        when(emailInfo.getAcctNum()).thenReturn("12345");
        when(emailInfo.getPrimaryLanguagePref()).thenReturn("EN");
        when(emailInfo.getBusinessEventID()).thenReturn("EventID");
        when(emailInfo.getPrimaryEmailAddress()).thenReturn("test@example.com");
        when(emailInfo.getPrimaryUserInfo().getFirstName()).thenReturn("John");
        when(emailInfo.getAttribute("appDate")).thenReturn("2024-01-01");
        when(emailInfo.getCardEnding()).thenReturn("1234");
        when(emailInfo.getConnectId()).thenReturn("connect123");

        ArgumentCaptor<String> logCaptor = ArgumentCaptor.forClass(String.class);
        mbnaAlertFacade.logIPEmailInfo(emailInfo);

        verify(logger).mandatory(logCaptor.capture());
        assertTrue(logCaptor.getValue().contains("==SEND IP EMAIL FAILED INFO START"));
        assertTrue(logCaptor.getValue().contains("acctNum=12345"));
    }

}
