import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class InternalPartyIdentificationTest {

    @Test
    void testGetterAndSetterForTypeCd() {
        InternalPartyIdentification internalPartyIdentification = new InternalPartyIdentification();
        internalPartyIdentification.setTypeCd("Type123");
        assertEquals("Type123", internalPartyIdentification.getTypeCd());
    }

    @Test
    void testGetterAndSetterForPartyId() {
        InternalPartyIdentification internalPartyIdentification = new InternalPartyIdentification();
        internalPartyIdentification.setPartyId("Party456");
        assertEquals("Party456", internalPartyIdentification.getPartyId());
    }

    @Test
    void testToString() {
        InternalPartyIdentification internalPartyIdentification = new InternalPartyIdentification();
        internalPartyIdentification.setTypeCd("Type123");
        internalPartyIdentification.setPartyId("Party456");
        String expected = "InternalPartyIdentification(typeCd=Type123, partyId=Party456)";
        assertEquals(expected, internalPartyIdentification.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        InternalPartyIdentification internalParty1 = new InternalPartyIdentification();
        internalParty1.setTypeCd("Type123");
        internalParty1.setPartyId("Party456");
        
        InternalPartyIdentification internalParty2 = new InternalPartyIdentification();
        internalParty2.setTypeCd("Type123");
        internalParty2.setPartyId("Party456");
        
        assertEquals(internalParty1, internalParty2);
        assertEquals(internalParty1.hashCode(), internalParty2.hashCode());
    }

    @Test
    void testEqualsWithNull() {
        InternalPartyIdentification internalPartyIdentification = new InternalPartyIdentification();
        assertNotEquals(internalPartyIdentification, null);
    }

    @Test
    void testEqualsWithDifferentType() {
        InternalPartyIdentification internalPartyIdentification = new InternalPartyIdentification();
        assertNotEquals(internalPartyIdentification, new Object());
    }

    @Test
    void testHashCodeWithDifferentValues() {
        InternalPartyIdentification internalParty1 = new InternalPartyIdentification();
        internalParty1.setTypeCd("Type123");
        internalParty1.setPartyId("Party456");
        
        InternalPartyIdentification internalParty2 = new InternalPartyIdentification();
        internalParty2.setTypeCd("Type789");
        internalParty2.setPartyId("Party987");
        
        assertNotEquals(internalParty1.hashCode(), internalParty2.hashCode());
    }
}
