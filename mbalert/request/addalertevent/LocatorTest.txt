import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LocatorTest {

    @Test
    void testGetterAndSetterForEmailAddress() {
        Locator locator = new Locator();
        EmailAddress email = new EmailAddress();
        email.setEmail("test@example.com");
        locator.setEmailAddress(email);
        assertEquals(email, locator.getEmailAddress());
    }

    @Test
    void testGetterAndSetterForTelephoneNumber() {
        Locator locator = new Locator();
        TelephoneNumber telephone = new TelephoneNumber();
        telephone.setNumber("123456789");
        locator.setTelephoneNumber(telephone);
        assertEquals(telephone, locator.getTelephoneNumber());
    }

    @Test
    void testGetterAndSetterForSecureMessageBox() {
        Locator locator = new Locator();
        SecureMessageBox secureMessageBox = new SecureMessageBox();
        secureMessageBox.setBoxId("SMB123");
        locator.setSecureMessageBox(secureMessageBox);
        assertEquals(secureMessageBox, locator.getSecureMessageBox());
    }

    @Test
    void testGetterAndSetterForMobilePush() {
        Locator locator = new Locator();
        MobilePush mobilePush = new MobilePush();
        mobilePush.setPushId("MP123");
        locator.setMobilePush(mobilePush);
        assertEquals(mobilePush, locator.getMobilePush());
    }

    @Test
    void testToString() {
        Locator locator = new Locator();
        EmailAddress email = new EmailAddress();
        email.setEmail("test@example.com");
        locator.setEmailAddress(email);
        TelephoneNumber telephone = new TelephoneNumber();
        telephone.setNumber("123456789");
        locator.setTelephoneNumber(telephone);
        SecureMessageBox secureMessageBox = new SecureMessageBox();
        secureMessageBox.setBoxId("SMB123");
        locator.setSecureMessageBox(secureMessageBox);
        MobilePush mobilePush = new MobilePush();
        mobilePush.setPushId("MP123");
        locator.setMobilePush(mobilePush);
        
        String expected = "Locator(emailAddress=" + email + ", telephoneNumber=" + telephone + 
                          ", secureMessageBox=" + secureMessageBox + ", mobilePush=" + mobilePush + ")";
        assertEquals(expected, locator.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        Locator locator1 = new Locator();
        EmailAddress email1 = new EmailAddress();
        email1.setEmail("test@example.com");
        locator1.setEmailAddress(email1);
        
        Locator locator2 = new Locator();
        EmailAddress email2 = new EmailAddress();
        email2.setEmail("test@example.com");
        locator2.setEmailAddress(email2);

        assertEquals(locator1, locator2);
        assertEquals(locator1.hashCode(), locator2.hashCode());
    }

    @Test
    void testEqualsWithNull() {
        Locator locator = new Locator();
        assertNotEquals(locator, null);
    }

    @Test
    void testEqualsWithDifferentType() {
        Locator locator = new Locator();
        assertNotEquals(locator, new Object());
    }

    @Test
    void testHashCodeWithDifferentValues() {
        Locator locator1 = new Locator();
        EmailAddress email1 = new EmailAddress();
        email1.setEmail("test@example.com");
        locator1.setEmailAddress(email1);
        
        Locator locator2 = new Locator();
        EmailAddress email2 = new EmailAddress();
        email2.setEmail("different@example.com");
        locator2.setEmailAddress(email2);
        
        assertNotEquals(locator1.hashCode(), locator2.hashCode());
    }
}
