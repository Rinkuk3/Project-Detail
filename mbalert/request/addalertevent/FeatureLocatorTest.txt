package com.td.api.mbalert.request.addalertevent;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class FeatureLocatorTest {

    @Test
    void testFeatureLocator() {
        // Create an instance of FeatureLocator
        FeatureLocator featureLocator = new FeatureLocator();

        // Test default value of doNotDisturbFeatureLocator
        assertNull(featureLocator.getDoNotDisturbFeatureLocator());

        // Create an instance of DoNotDisturbFeatureLocator
        DoNotDisturbFeatureLocator doNotDisturbFeatureLocator = new DoNotDisturbFeatureLocator();
        doNotDisturbFeatureLocator.setLocatorSubtypeCd("subtype");
        doNotDisturbFeatureLocator.setFromTimePeriodTm("08:00");
        doNotDisturbFeatureLocator.setToTimePeriodTm("18:00");
        doNotDisturbFeatureLocator.setTimeZoneCd("UTC");

        // Set doNotDisturbFeatureLocator in FeatureLocator
        featureLocator.setDoNotDisturbFeatureLocator(doNotDisturbFeatureLocator);

        // Test getter and setter for doNotDisturbFeatureLocator
        assertNotNull(featureLocator.getDoNotDisturbFeatureLocator());
        assertEquals("subtype", featureLocator.getDoNotDisturbFeatureLocator().getLocatorSubtypeCd());
        assertEquals("08:00", featureLocator.getDoNotDisturbFeatureLocator().getFromTimePeriodTm());
        assertEquals("18:00", featureLocator.getDoNotDisturbFeatureLocator().getToTimePeriodTm());
        assertEquals("UTC", featureLocator.getDoNotDisturbFeatureLocator().getTimeZoneCd());
    }

    @Test
    void testEqualsAndHashCode() {
        // Create two instances of FeatureLocator with the same properties
        FeatureLocator featureLocator1 = new FeatureLocator();
        DoNotDisturbFeatureLocator doNotDisturbFeatureLocator1 = new DoNotDisturbFeatureLocator();
        doNotDisturbFeatureLocator1.setLocatorSubtypeCd("subtype1");
        featureLocator1.setDoNotDisturbFeatureLocator(doNotDisturbFeatureLocator1);

        FeatureLocator featureLocator2 = new FeatureLocator();
        DoNotDisturbFeatureLocator doNotDisturbFeatureLocator2 = new DoNotDisturbFeatureLocator();
        doNotDisturbFeatureLocator2.setLocatorSubtypeCd("subtype1");
        featureLocator2.setDoNotDisturbFeatureLocator(doNotDisturbFeatureLocator2);

        // Test equality
        assertTrue(featureLocator1.equals(featureLocator2));

        // Test hashCode
        assertEquals(featureLocator1.hashCode(), featureLocator2.hashCode());

        // Modify one object and test inequality
        doNotDisturbFeatureLocator2.setLocatorSubtypeCd("subtype2");
        assertFalse(featureLocator1.equals(featureLocator2));
    }

    @Test
    void testToString() {
        // Create an instance of FeatureLocator
        FeatureLocator featureLocator = new FeatureLocator();
        DoNotDisturbFeatureLocator doNotDisturbFeatureLocator = new DoNotDisturbFeatureLocator();
        doNotDisturbFeatureLocator.setLocatorSubtypeCd("subtype");
        doNotDisturbFeatureLocator.setFromTimePeriodTm("08:00");
        doNotDisturbFeatureLocator.setToTimePeriodTm("18:00");
        doNotDisturbFeatureLocator.setTimeZoneCd("UTC");
        featureLocator.setDoNotDisturbFeatureLocator(doNotDisturbFeatureLocator);

        // Test the toString() method
        String toStringResult = featureLocator.toString();
        assertTrue(toStringResult.contains("doNotDisturbFeatureLocator"));
    }
}
