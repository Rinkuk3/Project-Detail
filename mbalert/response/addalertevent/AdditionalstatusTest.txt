import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;

class AdditionalstatusTest {

    @Test
    void testGetterAndSetterForStatusCode() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setStatusCode(200);
        assertEquals(200, additionalstatus.getStatusCode());
    }

    @Test
    void testGetterAndSetterForServerStatusCode() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setServerStatusCode("OK");
        assertEquals("OK", additionalstatus.getServerStatusCode());
    }

    @Test
    void testGetterAndSetterForSeverity() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setSeverity(Additionalstatus.Severity.ERROR);
        assertEquals(Additionalstatus.Severity.ERROR, additionalstatus.getSeverity());
    }

    @Test
    void testGetterAndSetterForStatusDesc() {
        Additionalstatus additionalstatus = new Additionalstatus();
        additionalstatus.setStatusDesc("Transaction Failed");
        assertEquals("Transaction Failed", additionalstatus.getStatusDesc());
    }

    @Test
    void testSeverityEnumToString() {
        assertEquals("Info", Additionalstatus.Severity.INFO.toString());
        assertEquals("Warning", Additionalstatus.Severity.WARNING.toString());
        assertEquals("Error", Additionalstatus.Severity.ERROR.toString());
    }

    @Test
    void testSeverityEnumValue() {
        assertEquals("Info", Additionalstatus.Severity.INFO.value());
        assertEquals("Warning", Additionalstatus.Severity.WARNING.value());
        assertEquals("Error", Additionalstatus.Severity.ERROR.value());
    }

    @Test
    void testSeverityEnumFromValue() {
        assertEquals(Additionalstatus.Severity.INFO, Additionalstatus.Severity.fromValue("Info"));
        assertEquals(Additionalstatus.Severity.WARNING, Additionalstatus.Severity.fromValue("Warning"));
        assertEquals(Additionalstatus.Severity.ERROR, Additionalstatus.Severity.fromValue("Error"));
    }

    @Test
    void testSeverityEnumFromValueWithInvalidValue() {
        assertThrows(IllegalArgumentException.class, () -> {
            Additionalstatus.Severity.fromValue("Invalid");
        });
    }

    @Test
    void testEqualsAndHashCode() {
        Additionalstatus status1 = new Additionalstatus();
        status1.setStatusCode(200);
        status1.setServerStatusCode("OK");
        status1.setSeverity(Additionalstatus.Severity.INFO);
        status1.setStatusDesc("Transaction Completed");

        Additionalstatus status2 = new Additionalstatus();
        status2.setStatusCode(200);
        status2.setServerStatusCode("OK");
        status2.setSeverity(Additionalstatus.Severity.INFO);
        status2.setStatusDesc("Transaction Completed");

        assertEquals(status1, status2);
        assertEquals(status1.hashCode(), status2.hashCode());
    }

    @Test
    void testEqualsWithNull() {
        Additionalstatus status = new Additionalstatus();
        assertNotEquals(status, null);
    }

    @Test
    void testEqualsWithDifferentType() {
        Additionalstatus status = new Additionalstatus();
        assertNotEquals(status, new Object());
    }

    @Test
    void testHashCodeWithDifferentValues() {
        Additionalstatus status1 = new Additionalstatus();
        status1.setStatusCode(200);
        status1.setServerStatusCode("OK");
        status1.setSeverity(Additionalstatus.Severity.INFO);
        status1.setStatusDesc("Transaction Completed");

        Additionalstatus status2 = new Additionalstatus();
        status2.setStatusCode(500);
        status2.setServerStatusCode("Server Error");
        status2.setSeverity(Additionalstatus.Severity.ERROR);
        status2.setStatusDesc("Transaction Failed");

        assertNotEquals(status1.hashCode(), status2.hashCode());
    }

    @Test
    void testToString() {
        Additionalstatus status = new Additionalstatus();
        status.setStatusCode(200);
        status.setServerStatusCode("OK");
        status.setSeverity(Additionalstatus.Severity.INFO);
        status.setStatusDesc("Transaction Completed");

        String expected = "Additionalstatus(statusCode=200, serverStatusCode=OK, severity=INFO, statusDesc=Transaction Completed)";
        assertEquals(expected, status.toString());
    }
}
