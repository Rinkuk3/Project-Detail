import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.google.gson.Gson;
import com.td.api.mbcapd.request.retrievecapd.AgreementInquiryRequest;
import com.td.api.mbcapd.response.retrievecapd.*;
import com.td.mbna.msec.midtier.customerprofile.payload.retrievecapd.*;
import com.td.mbna.msec.midtier.util.ConfigUtil;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;

class MbnaCapdAdaptorTest {

    @InjectMocks
    private MbnaCapdAdaptor mbnaCapdAdaptor;

    @Mock
    private ConfigUtil configUtil;

    @Mock
    private TDRestServiceUtil tdRestServiceUtil;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetResponseWithMockContent() {
        String connectId = "12345";
        String mockContent = "{\"capdAccounts\":[]}";
        String filePath = "mockPath/cpafMock_12345.json";

        when(configUtil.getConfigDirectory()).thenReturn("mockPath/");
        when(tdRestServiceUtil.readLineByLineJava8(filePath)).thenReturn(mockContent);

        RetrieveCapdResponse response = mbnaCapdAdaptor.getResponse(connectId);

        assertNotNull(response);
        assertNull(response.getResponsePayload());
    }

    @Test
    void testGetResponseWithoutMockContent() {
        String connectId = "12345";

        RetrieveCapdResponse response = mbnaCapdAdaptor.getResponse(connectId);

        assertNotNull(response);
        assertNull(response.getResponsePayload());
    }

    @Test
    void testGetRequest() {
        RetrieveCapdRequest retrieveCapdRequest = new RetrieveCapdRequest();
        RequestPayload payload = new RequestPayload();
        payload.setCustId("cust123");
        payload.setAcctIds(Arrays.asList("acc1", "acc2"));
        retrieveCapdRequest.setRequestPayload(payload);

        AgreementInquiryRequest agreementInquiryRequest = mbnaCapdAdaptor.getRequest(retrieveCapdRequest);

        assertNotNull(agreementInquiryRequest);
        assertEquals("cust123", agreementInquiryRequest.getPartyKey());
        assertEquals(Arrays.asList("acc1", "acc2"), agreementInquiryRequest.getAgreementKey());
    }

    @Test
    void testGetRequestWithNullRequest() {
        AgreementInquiryRequest agreementInquiryRequest = mbnaCapdAdaptor.getRequest(null);
        assertNull(agreementInquiryRequest);
    }

    @Test
    void testGetRequestWithNullPayload() {
        RetrieveCapdRequest retrieveCapdRequest = new RetrieveCapdRequest();
        AgreementInquiryRequest agreementInquiryRequest = mbnaCapdAdaptor.getRequest(retrieveCapdRequest);
        assertNull(agreementInquiryRequest);
    }

    @Test
    void testGetResponseFromBody() {
        AgreementInquiryResponse body = new AgreementInquiryResponse();
        Agreement agreement = new Agreement();
        agreement.setAgreementKey("acc123");

        AlertSetup alertSetup = new AlertSetup();
        alertSetup.setAlertTypeCd("OL");
        alertSetup.setDeliveryMethodCd("EMAIL,SMS");
        agreement.setAlertSetup(Collections.singletonList(alertSetup));

        Contact contact = new Contact();
        contact.setAddressSubtypeCd("Email");
        AlertBlocklistSetup alertBlocklistSetup = new AlertBlocklistSetup();
        AlertGroup alertGroup = new AlertGroup();
        alertGroup.setGroupCd("CA_MBNA_CPF_OVERLIMIT");
        alertGroup.setBlocklistedInd(true);
        alertBlocklistSetup.setAlertGroup(Collections.singletonList(alertGroup));
        contact.setAlertBlocklistSetup(Collections.singletonList(alertBlocklistSetup));
        agreement.setContact(Collections.singletonList(contact));

        body.setAgreement(Collections.singletonList(agreement));

        RetrieveCapdResponse response = mbnaCapdAdaptor.getResponse(body);

        assertNotNull(response);
        assertEquals("Success", response.getStatus());
        assertNotNull(response.getResponsePayload());
        List<CapdAccount> capdAccounts = response.getResponsePayload().getCapdAccounts();
        assertEquals(1, capdAccounts.size());
        assertEquals("acc123", capdAccounts.get(0).getaccountId());
        assertEquals("0", capdAccounts.get(0).getOverLimitPref());
    }

    @Test
    void testGetResponseFromBodyWithNullBody() {
        RetrieveCapdResponse response = mbnaCapdAdaptor.getResponse((AgreementInquiryResponse) null);

        assertNotNull(response);
        assertEquals("Success", response.getStatus());
        assertNotNull(response.getResponsePayload());
        assertTrue(response.getResponsePayload().getCapdAccounts().isEmpty());
    }
}
