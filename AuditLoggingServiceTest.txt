import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import com.td.mbna.msec.auditlogging.model.LoggingAuditRequest;
import com.td.mbna.msec.auditlogging.model.LoggingResponse;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;
import java.util.Date;

public class AuditLoggingServiceTest {

    @InjectMocks
    private AuditLoggingService auditLoggingService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private HttpServletRequest httpServletRequest;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCreateAuditLogs_Success() {
        // Arrange
        LoggingAuditRequest request = new LoggingAuditRequest();
        request.setAccountNumber("12345");
        request.setEventCode("SS1002");
        request.setEventMessage("Multi-account");

        when(sessionProvider.getCurrentAccount().getAccountId()).thenReturn("12345");
        when(sessionProvider.getLocale()).thenReturn("en");
        
        // Mock midTierServiceHelper
        doNothing().when(midTierServiceHelper).createAuditLog(anyString(), anyString(), anyString());

        // Act
        LoggingResponse response = auditLoggingService.createAuditLogs(request, httpServletRequest);

        // Assert
        assertEquals("success", response.getStatus());
        assertEquals("Succesfully submitted.", response.getMessage());
        verify(sessionProvider).setSessionAttribute("MBNA_BUSINESS_EVENT_REASON", "Multi-account");
    }

    @Test
    public void testCreateAuditLogs_ExceptionHandling() {
        // Arrange
        LoggingAuditRequest request = new LoggingAuditRequest();
        request.setEventCode("SS1002");

        when(sessionProvider.getCurrentAccount().getAccountId()).thenReturn("12345");
        when(sessionProvider.getLocale()).thenReturn("en");
        doThrow(new RuntimeException("Test exception")).when(midTierServiceHelper).createAuditLog(anyString(), anyString(), anyString());

        // Act
        LoggingResponse response = auditLoggingService.createAuditLogs(request, httpServletRequest);

        // Assert
        assertEquals("failure", response.getStatus());
        assertEquals("Failed to submit.", response.getMessage());
    }

    @Test
    public void testCreateAuditLogs_DuplicateSubmission() {
        // Arrange
        LoggingAuditRequest request = new LoggingAuditRequest();
        request.setEventCode("SS2701");

        when(sessionProvider.getSessionAttribute("MBNA_BUSINESS_EVENT_LASTTIME" + "SS2701")).thenReturn(new Date().getTime() - 500);
        when(sessionProvider.getCurrentAccount().getAccountId()).thenReturn("12345");

        // Act
        LoggingResponse response = auditLoggingService.createAuditLogs(request, httpServletRequest);

        // Assert
        assertEquals("failure", response.getStatus());
        assertEquals("Failed to submit.", response.getMessage());
    }

    @Test
    public void testCreateAuditLogs_SetRequestSessionFromLoggingAuditRequest() {
        // Arrange
        LoggingAuditRequest request = new LoggingAuditRequest();
        request.setAccountNumber("12345");

        when(sessionProvider.getCurrentAccount().getAccountId()).thenReturn("12345");
        when(sessionProvider.getLocale()).thenReturn("en");

        // Act
        auditLoggingService.createAuditLogs(request, httpServletRequest);

        // Assert
        verify(sessionProvider).setSessionAttribute("MBNA_BUSINESS_EVENT_REASON", "Multi-account");
    }

    @Test
    public void testCreateAuditLogs_SpecificEventCode() {
        // Arrange
        LoggingAuditRequest request = new LoggingAuditRequest();
        request.setEventCode("SS6012");
        request.setEventMessage("OL");

        when(sessionProvider.getCurrentAccount().getAccountId()).thenReturn("12345");
        when(sessionProvider.getLocale()).thenReturn("en");

        // Act
        auditLoggingService.createAuditLogs(request, httpServletRequest);

        // Assert
        verify(sessionProvider).setSessionAttribute("MBNA_BUSINESS_EVENT_REASON", "Overlimit");
    }
}
