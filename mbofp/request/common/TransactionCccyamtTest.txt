import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class TransactionCccyamtTest {

    private TransactionCccyamt transactionCccyamt;

    @BeforeEach
    void setUp() {
        transactionCccyamt = new TransactionCccyamt();
    }

    @Test
    void testGetAndSetAmount() {
        BigDecimal amount = new BigDecimal("100.50");
        transactionCccyamt.setAmount(amount);
        assertEquals(amount, transactionCccyamt.getAmount());
    }

    @Test
    void testGetAndSetCurrencyCd() {
        String currencyCd = "USD";
        transactionCccyamt.setCurrencyCd(currencyCd);
        assertEquals(currencyCd, transactionCccyamt.getCurrencyCd());
    }

    @Test
    void testToString() {
        transactionCccyamt.setAmount(new BigDecimal("100.50"));
        transactionCccyamt.setCurrencyCd("USD");

        String expected = "com.td.api.mbofp.request.common.TransactionCccyamt@"
            + Integer.toHexString(transactionCccyamt.hashCode()) + "[amount=100.50,currencyCd=USD]";

        assertEquals(expected, transactionCccyamt.toString());
    }

    @Test
    void testHashCodeAndEquals() {
        TransactionCccyamt transaction1 = new TransactionCccyamt();
        transaction1.setAmount(new BigDecimal("100.50"));
        transaction1.setCurrencyCd("USD");

        TransactionCccyamt transaction2 = new TransactionCccyamt();
        transaction2.setAmount(new BigDecimal("100.50"));
        transaction2.setCurrencyCd("USD");

        assertTrue(transaction1.equals(transaction2));
        assertEquals(transaction1.hashCode(), transaction2.hashCode());
    }

    @Test
    void testHashCodeAndEqualsNotEqual() {
        TransactionCccyamt transaction1 = new TransactionCccyamt();
        transaction1.setAmount(new BigDecimal("100.50"));
        transaction1.setCurrencyCd("USD");

        TransactionCccyamt transaction2 = new TransactionCccyamt();
        transaction2.setAmount(new BigDecimal("200.75"));
        transaction2.setCurrencyCd("EUR");

        assertFalse(transaction1.equals(transaction2));
        assertNotEquals(transaction1.hashCode(), transaction2.hashCode());
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(transactionCccyamt.equals(new Object()));
    }

    @Test
    void testNullEquals() {
        assertFalse(transactionCccyamt.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(transactionCccyamt.equals(transactionCccyamt));
    }
}
