import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BranchAddressTest {

    private BranchAddress branchAddress;

    @BeforeEach
    void setUp() {
        branchAddress = new BranchAddress();
    }

    @Test
    void testGetAndSetAddressLine1() {
        String addressLine1 = "123 Main St";
        branchAddress.setAddressLine1(addressLine1);
        assertEquals(addressLine1, branchAddress.getAddressLine1());
    }

    @Test
    void testGetAndSetAddressLine2() {
        String addressLine2 = "Apt 101";
        branchAddress.setAddressLine2(addressLine2);
        assertEquals(addressLine2, branchAddress.getAddressLine2());
    }

    @Test
    void testGetAndSetCity() {
        String city = "Toronto";
        branchAddress.setCity(city);
        assertEquals(city, branchAddress.getCity());
    }

    @Test
    void testGetAndSetTerritory() {
        String territory = "ON";
        branchAddress.setTerritory(territory);
        assertEquals(territory, branchAddress.getTerritory());
    }

    @Test
    void testGetAndSetPostalCode() {
        String postalCode = "M5A 1A1";
        branchAddress.setPostalCode(postalCode);
        assertEquals(postalCode, branchAddress.getPostalCode());
    }

    @Test
    void testToString() {
        branchAddress.setAddressLine1("123 Main St");
        branchAddress.setAddressLine2("Apt 101");
        branchAddress.setCity("Toronto");
        branchAddress.setTerritory("ON");
        branchAddress.setPostalCode("M5A 1A1");

        String expected = "com.td.api.mbofp.request.balancetransfer.BranchAddress@" 
            + Integer.toHexString(branchAddress.hashCode()) 
            + "[addressLine1=123 Main St,addressLine2=Apt 101,city=Toronto,territory=ON,postalCode=M5A 1A1]";

        assertEquals(expected, branchAddress.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        BranchAddress otherBranchAddress = new BranchAddress();
        branchAddress.setAddressLine1("123 Main St");
        branchAddress.setAddressLine2("Apt 101");
        branchAddress.setCity("Toronto");
        branchAddress.setTerritory("ON");
        branchAddress.setPostalCode("M5A 1A1");

        otherBranchAddress.setAddressLine1("123 Main St");
        otherBranchAddress.setAddressLine2("Apt 101");
        otherBranchAddress.setCity("Toronto");
        otherBranchAddress.setTerritory("ON");
        otherBranchAddress.setPostalCode("M5A 1A1");

        assertTrue(branchAddress.equals(otherBranchAddress));
        assertEquals(branchAddress.hashCode(), otherBranchAddress.hashCode());
    }

    @Test
    void testNotEquals() {
        BranchAddress otherBranchAddress = new BranchAddress();
        branchAddress.setAddressLine1("123 Main St");

        otherBranchAddress.setAddressLine1("456 Oak St");

        assertFalse(branchAddress.equals(otherBranchAddress));
    }

    @Test
    void testNullEquals() {
        assertFalse(branchAddress.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(branchAddress.equals(branchAddress));
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(branchAddress.equals(new Object()));
    }
}
