import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BalanceTransferTest {

    private BalanceTransfer balanceTransfer;

    @BeforeEach
    void setUp() {
        balanceTransfer = new BalanceTransfer();
    }

    @Test
    void testGetAndSetProductId() {
        balanceTransfer.setProductId("product123");
        assertEquals("product123", balanceTransfer.getProductId());
    }

    @Test
    void testGetAndSetProductGroupId() {
        balanceTransfer.setProductGroupId("group123");
        assertEquals("group123", balanceTransfer.getProductGroupId());
    }

    @Test
    void testGetAndSetTransactionCccyamt() {
        TransactionCccyamt transactionCccyamt = new TransactionCccyamt();
        balanceTransfer.setTransactionCccyamt(transactionCccyamt);
        assertEquals(transactionCccyamt, balanceTransfer.getTransactionCccyamt());
    }

    @Test
    void testGetAndSetNegotiatedFeeTypeCd() {
        balanceTransfer.setNegotiatedFeeTypeCd("fee123");
        assertEquals("fee123", balanceTransfer.getNegotiatedFeeTypeCd());
    }

    @Test
    void testGetAndSetOriginatingUserId() {
        balanceTransfer.setOriginatingUserId("user123");
        assertEquals("user123", balanceTransfer.getOriginatingUserId());
    }

    @Test
    void testGetAndSetOriginatingUserFunctionCd() {
        balanceTransfer.setOriginatingUserFunctionCd("function123");
        assertEquals("function123", balanceTransfer.getOriginatingUserFunctionCd());
    }

    @Test
    void testGetAndSetSolicitationChannelTypeCd() {
        balanceTransfer.setSolicitationChannelTypeCd("channel123");
        assertEquals("channel123", balanceTransfer.getSolicitationChannelTypeCd());
    }

    @Test
    void testGetAndSetAccessChannelTypeCd() {
        balanceTransfer.setAccessChannelTypeCd("access123");
        assertEquals("access123", balanceTransfer.getAccessChannelTypeCd());
    }

    @Test
    void testToString() {
        balanceTransfer.setProductId("product123");
        balanceTransfer.setProductGroupId("group123");
        balanceTransfer.setNegotiatedFeeTypeCd("fee123");
        balanceTransfer.setOriginatingUserId("user123");
        balanceTransfer.setOriginatingUserFunctionCd("function123");
        balanceTransfer.setSolicitationChannelTypeCd("channel123");
        balanceTransfer.setAccessChannelTypeCd("access123");

        String expected = "com.td.api.mbofp.request.balancetransfer.BalanceTransfer@" + Integer.toHexString(balanceTransfer.hashCode()) + "[productId=product123,productGroupId=group123,transactionCccyamt=<null>,negotiatedFeeTypeCd=fee123,originatingUserId=user123,originatingUserFunctionCd=function123,solicitationChannelTypeCd=channel123,accessChannelTypeCd=access123,]";

        assertEquals(expected, balanceTransfer.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        BalanceTransfer otherBalanceTransfer = new BalanceTransfer();
        otherBalanceTransfer.setProductId("product123");
        otherBalanceTransfer.setProductGroupId("group123");
        otherBalanceTransfer.setNegotiatedFeeTypeCd("fee123");
        otherBalanceTransfer.setOriginatingUserId("user123");
        otherBalanceTransfer.setOriginatingUserFunctionCd("function123");
        otherBalanceTransfer.setSolicitationChannelTypeCd("channel123");
        otherBalanceTransfer.setAccessChannelTypeCd("access123");

        balanceTransfer.setProductId("product123");
        balanceTransfer.setProductGroupId("group123");
        balanceTransfer.setNegotiatedFeeTypeCd("fee123");
        balanceTransfer.setOriginatingUserId("user123");
        balanceTransfer.setOriginatingUserFunctionCd("function123");
        balanceTransfer.setSolicitationChannelTypeCd("channel123");
        balanceTransfer.setAccessChannelTypeCd("access123");

        assertTrue(balanceTransfer.equals(otherBalanceTransfer));
        assertEquals(balanceTransfer.hashCode(), otherBalanceTransfer.hashCode());
    }

    @Test
    void testNotEquals() {
        BalanceTransfer otherBalanceTransfer = new BalanceTransfer();
        otherBalanceTransfer.setProductId("product123");

        balanceTransfer.setProductId("product124");

        assertFalse(balanceTransfer.equals(otherBalanceTransfer));
    }

    @Test
    void testNullEquals() {
        assertFalse(balanceTransfer.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(balanceTransfer.equals(balanceTransfer));
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(balanceTransfer.equals(new Object()));
    }
}
