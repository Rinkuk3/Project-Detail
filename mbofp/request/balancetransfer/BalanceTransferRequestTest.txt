import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BalanceTransferRequestTest {

    private BalanceTransferRequest balanceTransferRequest;

    @BeforeEach
    void setUp() {
        balanceTransferRequest = new BalanceTransferRequest();
    }

    @Test
    void testGetAndSetBalanceTransfer() {
        BalanceTransfer balanceTransfer = new BalanceTransfer();
        balanceTransferRequest.setBalanceTransfer(balanceTransfer);
        assertEquals(balanceTransfer, balanceTransferRequest.getBalanceTransfer());
    }

    @Test
    void testGetAndSetFundsTransfer() {
        FundsTransfer fundsTransfer = new FundsTransfer();
        balanceTransferRequest.setFundsTransfer(fundsTransfer);
        assertEquals(fundsTransfer, balanceTransferRequest.getFundsTransfer());
    }

    @Test
    void testGetAndSetRecipient() {
        Recipient recipient = new Recipient();
        balanceTransferRequest.setRecipient(recipient);
        assertEquals(recipient, balanceTransferRequest.getRecipient());
    }

    @Test
    void testToString() {
        BalanceTransfer balanceTransfer = new BalanceTransfer();
        FundsTransfer fundsTransfer = new FundsTransfer();
        Recipient recipient = new Recipient();

        balanceTransferRequest.setBalanceTransfer(balanceTransfer);
        balanceTransferRequest.setFundsTransfer(fundsTransfer);
        balanceTransferRequest.setRecipient(recipient);

        String expected = "com.td.api.mbofp.request.balancetransfer.BalanceTransferRequest@" 
            + Integer.toHexString(balanceTransferRequest.hashCode()) 
            + "[balanceTransfer=" + balanceTransfer 
            + ",fundsTransfer=" + fundsTransfer 
            + ",recipient=" + recipient + "]";

        assertEquals(expected, balanceTransferRequest.toString());
    }

    @Test
    void testEqualsAndHashCode() {
        BalanceTransferRequest otherBalanceTransferRequest = new BalanceTransferRequest();
        BalanceTransfer balanceTransfer = new BalanceTransfer();
        FundsTransfer fundsTransfer = new FundsTransfer();
        Recipient recipient = new Recipient();

        otherBalanceTransferRequest.setBalanceTransfer(balanceTransfer);
        otherBalanceTransferRequest.setFundsTransfer(fundsTransfer);
        otherBalanceTransferRequest.setRecipient(recipient);

        balanceTransferRequest.setBalanceTransfer(balanceTransfer);
        balanceTransferRequest.setFundsTransfer(fundsTransfer);
        balanceTransferRequest.setRecipient(recipient);

        assertTrue(balanceTransferRequest.equals(otherBalanceTransferRequest));
        assertEquals(balanceTransferRequest.hashCode(), otherBalanceTransferRequest.hashCode());
    }

    @Test
    void testNotEquals() {
        BalanceTransferRequest otherBalanceTransferRequest = new BalanceTransferRequest();
        otherBalanceTransferRequest.setBalanceTransfer(new BalanceTransfer());

        balanceTransferRequest.setBalanceTransfer(new BalanceTransfer());

        assertFalse(balanceTransferRequest.equals(otherBalanceTransferRequest));
    }

    @Test
    void testNullEquals() {
        assertFalse(balanceTransferRequest.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(balanceTransferRequest.equals(balanceTransferRequest));
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(balanceTransferRequest.equals(new Object()));
    }
}
