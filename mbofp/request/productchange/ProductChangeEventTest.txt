import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ProductChangeEventTest {

    private ProductChangeEvent productChangeEvent;
    private AgreementAltkey agreementAltkey;
    private Party party;

    @BeforeEach
    void setUp() {
        productChangeEvent = new ProductChangeEvent();
        agreementAltkey = new AgreementAltkey(); // Assuming AgreementAltkey has a constructor or setter
        party = new Party(); // Assuming Party has a constructor or setter
    }

    @Test
    void testGetAndSetAgreementAltkey() {
        productChangeEvent.setAgreementAltkey(agreementAltkey);
        assertEquals(agreementAltkey, productChangeEvent.getAgreementAltkey());
    }

    @Test
    void testGetAndSetProductId() {
        String productId = "P123";
        productChangeEvent.setProductId(productId);
        assertEquals(productId, productChangeEvent.getProductId());
    }

    @Test
    void testGetAndSetEventReasonCd() {
        String eventReasonCd = "REASON01";
        productChangeEvent.setEventReasonCd(eventReasonCd);
        assertEquals(eventReasonCd, productChangeEvent.getEventReasonCd());
    }

    @Test
    void testGetAndSetParty() {
        productChangeEvent.setParty(party);
        assertEquals(party, productChangeEvent.getParty());
    }

    @Test
    void testGetAndSetOriginatingUserId() {
        String originatingUserId = "user123";
        productChangeEvent.setOriginatingUserId(originatingUserId);
        assertEquals(originatingUserId, productChangeEvent.getOriginatingUserId());
    }

    @Test
    void testGetAndSetOriginatingUserFunctionCd() {
        String originatingUserFunctionCd = "FUNC001";
        productChangeEvent.setOriginatingUserFunctionCd(originatingUserFunctionCd);
        assertEquals(originatingUserFunctionCd, productChangeEvent.getOriginatingUserFunctionCd());
    }

    @Test
    void testGetAndSetSolicitationChannelTypeCd() {
        String solicitationChannelTypeCd = "EMAIL";
        productChangeEvent.setSolicitationChannelTypeCd(solicitationChannelTypeCd);
        assertEquals(solicitationChannelTypeCd, productChangeEvent.getSolicitationChannelTypeCd());
    }

    @Test
    void testGetAndSetAccessChannelTypeCd() {
        String accessChannelTypeCd = "WEB";
        productChangeEvent.setAccessChannelTypeCd(accessChannelTypeCd);
        assertEquals(accessChannelTypeCd, productChangeEvent.getAccessChannelTypeCd());
    }

    @Test
    void testToString() {
        productChangeEvent.setAgreementAltkey(agreementAltkey);
        productChangeEvent.setProductId("P123");
        productChangeEvent.setEventReasonCd("REASON01");
        productChangeEvent.setParty(party);
        productChangeEvent.setOriginatingUserId("user123");
        productChangeEvent.setOriginatingUserFunctionCd("FUNC001");
        productChangeEvent.setSolicitationChannelTypeCd("EMAIL");
        productChangeEvent.setAccessChannelTypeCd("WEB");

        String expected = "com.td.api.mbofp.request.productchange.ProductChangeEvent@" +
                          Integer.toHexString(productChangeEvent.hashCode()) +
                          "[agreementAltkey=" + agreementAltkey +
                          ",productId=P123,eventReasonCd=REASON01,party=" + party +
                          ",originatingUserId=user123,originatingUserFunctionCd=FUNC001," +
                          "solicitationChannelTypeCd=EMAIL,accessChannelTypeCd=WEB]";

        assertEquals(expected, productChangeEvent.toString());
    }

    @Test
    void testHashCode() {
        productChangeEvent.setAgreementAltkey(agreementAltkey);
        productChangeEvent.setProductId("P123");
        productChangeEvent.setEventReasonCd("REASON01");
        productChangeEvent.setParty(party);
        productChangeEvent.setOriginatingUserId("user123");
        productChangeEvent.setOriginatingUserFunctionCd("FUNC001");
        productChangeEvent.setSolicitationChannelTypeCd("EMAIL");
        productChangeEvent.setAccessChannelTypeCd("WEB");

        int expectedHashCode = 1;
        expectedHashCode = 31 * expectedHashCode + (agreementAltkey == null ? 0 : agreementAltkey.hashCode());
        expectedHashCode = 31 * expectedHashCode + ("P123" == null ? 0 : "P123".hashCode());
        expectedHashCode = 31 * expectedHashCode + ("REASON01" == null ? 0 : "REASON01".hashCode());
        expectedHashCode = 31 * expectedHashCode + (party == null ? 0 : party.hashCode());
        expectedHashCode = 31 * expectedHashCode + ("user123" == null ? 0 : "user123".hashCode());
        expectedHashCode = 31 * expectedHashCode + ("FUNC001" == null ? 0 : "FUNC001".hashCode());
        expectedHashCode = 31 * expectedHashCode + ("EMAIL" == null ? 0 : "EMAIL".hashCode());
        expectedHashCode = 31 * expectedHashCode + ("WEB" == null ? 0 : "WEB".hashCode());

        assertEquals(expectedHashCode, productChangeEvent.hashCode());
    }

    @Test
    void testEquals() {
        productChangeEvent.setAgreementAltkey(agreementAltkey);
        productChangeEvent.setProductId("P123");
        productChangeEvent.setEventReasonCd("REASON01");
        productChangeEvent.setParty(party);
        productChangeEvent.setOriginatingUserId("user123");
        productChangeEvent.setOriginatingUserFunctionCd("FUNC001");
        productChangeEvent.setSolicitationChannelTypeCd("EMAIL");
        productChangeEvent.setAccessChannelTypeCd("WEB");

        ProductChangeEvent otherEvent = new ProductChangeEvent();
        otherEvent.setAgreementAltkey(agreementAltkey);
        otherEvent.setProductId("P123");
        otherEvent.setEventReasonCd("REASON01");
        otherEvent.setParty(party);
        otherEvent.setOriginatingUserId("user123");
        otherEvent.setOriginatingUserFunctionCd("FUNC001");
        otherEvent.setSolicitationChannelTypeCd("EMAIL");
        otherEvent.setAccessChannelTypeCd("WEB");

        assertTrue(productChangeEvent.equals(otherEvent));

        otherEvent.setProductId("P124");
        assertFalse(productChangeEvent.equals(otherEvent));

        otherEvent.setProductId("P123");
        otherEvent.setOriginatingUserId("user124");
        assertFalse(productChangeEvent.equals(otherEvent));

        assertFalse(productChangeEvent.equals(null));
        assertFalse(productChangeEvent.equals(new Object()));
    }
}
