import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AddTargetPromotionAgreementFinancialEventRequestTest {

    private AddTargetPromotionAgreementFinancialEventRequest request;
    private TargetPromotionAgreementFinancialEvent targetPromotionAgreementFinancialEvent;

    @BeforeEach
    void setUp() {
        request = new AddTargetPromotionAgreementFinancialEventRequest();
        targetPromotionAgreementFinancialEvent = new TargetPromotionAgreementFinancialEvent(); // Assuming a default constructor
    }

    @Test
    void testGetAndSetTargetPromotionAgreementFinancialEvent() {
        request.setTargetPromotionAgreementFinancialEvent(targetPromotionAgreementFinancialEvent);
        assertEquals(targetPromotionAgreementFinancialEvent, request.getTargetPromotionAgreementFinancialEvent());
    }

    @Test
    void testToString() {
        request.setTargetPromotionAgreementFinancialEvent(targetPromotionAgreementFinancialEvent);

        String expected = "com.td.api.mbofp.request.installmentplan.AddTargetPromotionAgreementFinancialEventRequest@" 
            + Integer.toHexString(request.hashCode()) + "[targetPromotionAgreementFinancialEvent=" + targetPromotionAgreementFinancialEvent + "]";
        
        assertEquals(expected, request.toString());
    }

    @Test
    void testHashCodeAndEquals() {
        TargetPromotionAgreementFinancialEvent event1 = new TargetPromotionAgreementFinancialEvent();
        TargetPromotionAgreementFinancialEvent event2 = new TargetPromotionAgreementFinancialEvent();

        AddTargetPromotionAgreementFinancialEventRequest request1 = new AddTargetPromotionAgreementFinancialEventRequest();
        request1.setTargetPromotionAgreementFinancialEvent(event1);

        AddTargetPromotionAgreementFinancialEventRequest request2 = new AddTargetPromotionAgreementFinancialEventRequest();
        request2.setTargetPromotionAgreementFinancialEvent(event1);

        AddTargetPromotionAgreementFinancialEventRequest request3 = new AddTargetPromotionAgreementFinancialEventRequest();
        request3.setTargetPromotionAgreementFinancialEvent(event2);

        assertTrue(request1.equals(request2));
        assertFalse(request1.equals(request3));
        assertEquals(request1.hashCode(), request2.hashCode());
        assertNotEquals(request1.hashCode(), request3.hashCode());
    }

    @Test
    void testHashCodeAndEqualsNotEqual() {
        AddTargetPromotionAgreementFinancialEventRequest request1 = new AddTargetPromotionAgreementFinancialEventRequest();
        request1.setTargetPromotionAgreementFinancialEvent(targetPromotionAgreementFinancialEvent);

        AddTargetPromotionAgreementFinancialEventRequest request2 = new AddTargetPromotionAgreementFinancialEventRequest();
        request2.setTargetPromotionAgreementFinancialEvent(null);

        assertFalse(request1.equals(request2));
        assertNotEquals(request1.hashCode(), request2.hashCode());
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(request.equals(new Object()));
    }

    @Test
    void testNullEquals() {
        assertFalse(request.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(request.equals(request));
    }
}
