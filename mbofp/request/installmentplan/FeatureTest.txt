import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class FeatureTest {

    private Feature feature;

    @BeforeEach
    void setUp() {
        feature = new Feature();
    }

    @Test
    void testGetAndSetFrontEndFeeInd() {
        Boolean frontEndFeeInd = true;
        feature.setFrontEndFeeInd(frontEndFeeInd);
        assertEquals(frontEndFeeInd, feature.getFrontEndFeeInd());

        frontEndFeeInd = false;
        feature.setFrontEndFeeInd(frontEndFeeInd);
        assertEquals(frontEndFeeInd, feature.getFrontEndFeeInd());

        feature.setFrontEndFeeInd(null);
        assertNull(feature.getFrontEndFeeInd());
    }

    @Test
    void testToString() {
        feature.setFrontEndFeeInd(true);
        String expected = "com.td.api.mbofp.request.installmentplan.Feature@" 
            + Integer.toHexString(feature.hashCode()) 
            + "[frontEndFeeInd=true]";
        assertEquals(expected, feature.toString());

        feature.setFrontEndFeeInd(false);
        expected = "com.td.api.mbofp.request.installmentplan.Feature@" 
            + Integer.toHexString(feature.hashCode()) 
            + "[frontEndFeeInd=false]";
        assertEquals(expected, feature.toString());

        feature.setFrontEndFeeInd(null);
        expected = "com.td.api.mbofp.request.installmentplan.Feature@" 
            + Integer.toHexString(feature.hashCode()) 
            + "[frontEndFeeInd=<null>]";
        assertEquals(expected, feature.toString());
    }

    @Test
    void testHashCodeAndEquals() {
        Feature feature1 = new Feature();
        feature1.setFrontEndFeeInd(true);

        Feature feature2 = new Feature();
        feature2.setFrontEndFeeInd(true);

        Feature feature3 = new Feature();
        feature3.setFrontEndFeeInd(false);

        assertTrue(feature1.equals(feature2));
        assertFalse(feature1.equals(feature3));
        assertEquals(feature1.hashCode(), feature2.hashCode());
        assertNotEquals(feature1.hashCode(), feature3.hashCode());
    }

    @Test
    void testEqualsWithNull() {
        assertFalse(feature.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        assertFalse(feature.equals(new Object()));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(feature.equals(feature));
    }

    @Test
    void testEqualsWithNullFrontEndFeeInd() {
        Feature feature1 = new Feature();
        feature1.setFrontEndFeeInd(null);

        Feature feature2 = new Feature();
        feature2.setFrontEndFeeInd(null);

        assertTrue(feature1.equals(feature2));
    }

    @Test
    void testEqualsWithNullFrontEndFeeIndAndNonNull() {
        Feature feature1 = new Feature();
        feature1.setFrontEndFeeInd(null);

        Feature feature2 = new Feature();
        feature2.setFrontEndFeeInd(true);

        assertFalse(feature1.equals(feature2));
    }
}
