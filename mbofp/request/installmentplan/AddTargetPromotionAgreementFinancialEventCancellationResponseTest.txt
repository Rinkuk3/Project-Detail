import com.td.api.mbofp.shared.Status;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AddTargetPromotionAgreementFinancialEventCancellationResponseTest {

    private AddTargetPromotionAgreementFinancialEventCancellationResponse response;

    @BeforeEach
    void setUp() {
        response = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
    }

    @Test
    void testGetAndSetStatus() {
        Status status = new Status(); // Assuming Status class has a default constructor
        response.setStatus(status);
        assertEquals(status, response.getStatus());
    }

    @Test
    void testToString() {
        Status status = new Status(); // Assuming Status class has a default constructor
        response.setStatus(status);
        
        String expected = "com.td.api.mbofp.request.installmentplan.AddTargetPromotionAgreementFinancialEventCancellationResponse@" 
            + Integer.toHexString(response.hashCode()) + "[status=" + status + "]";
        
        assertEquals(expected, response.toString());
    }

    @Test
    void testHashCodeAndEquals() {
        Status status1 = new Status(); // Assuming Status class has a default constructor
        Status status2 = new Status(); // Assuming Status class has a default constructor

        AddTargetPromotionAgreementFinancialEventCancellationResponse response1 = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
        response1.setStatus(status1);

        AddTargetPromotionAgreementFinancialEventCancellationResponse response2 = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
        response2.setStatus(status1);

        AddTargetPromotionAgreementFinancialEventCancellationResponse response3 = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
        response3.setStatus(status2);

        assertTrue(response1.equals(response2));
        assertFalse(response1.equals(response3));
        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    void testHashCodeAndEqualsNotEqual() {
        AddTargetPromotionAgreementFinancialEventCancellationResponse response1 = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
        response1.setStatus(new Status()); // Assuming Status class has a default constructor

        AddTargetPromotionAgreementFinancialEventCancellationResponse response2 = new AddTargetPromotionAgreementFinancialEventCancellationResponse();
        response2.setStatus(null);

        assertFalse(response1.equals(response2));
        assertNotEquals(response1.hashCode(), response2.hashCode());
    }

    @Test
    void testEqualsDifferentClass() {
        assertFalse(response.equals(new Object()));
    }

    @Test
    void testNullEquals() {
        assertFalse(response.equals(null));
    }

    @Test
    void testSameObjectEquals() {
        assertTrue(response.equals(response));
    }
}
