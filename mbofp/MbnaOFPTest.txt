import com.td.api.mbofp.response.installmentplan.AddTargetPromotionAgreementFinancialEventResponse;
import com.td.mbna.msec.midtier.mbofp.facade.MbnaOfpFacade;
import com.td.mbna.msec.midtier.offers.payload.requestInstallmentPlan.RequestInstallmentPlanRequest;
import com.td.mbna.msec.midtier.offers.payload.requestinsurance.RequestInsuranceResponse;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeResponse;
import com.td.mbna.msec.midtier.offers.payload.retrieveoffers.RetrieveOffersResponse;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorResponse;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.DepositToChequingResponse;
import com.td.mbna.msec.midtier.types.common.IpCalculation;
import com.td.mbna.msec.midtier.util.FeeUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class MbnaOFPTest {

    @InjectMocks
    private MbnaOFPImpl mbnaOFP;

    @Mock
    private MbnaOfpFacade mbnaOfpFacade;

    @Mock
    private FeeUtil feeUtil;

    @Mock
    private RetrieveOffersResponse retrieveOffersResponse;

    @Mock
    private RequestInsuranceResponse requestInsuranceResponse;

    @Mock
    private RequestProductChangeResponse requestProductChangeResponse;

    @Mock
    private DepositToChequingResponse depositToChequingResponse;

    @Mock
    private BalanceTransferToCreditorResponse balanceTransferToCreditorResponse;

    @Mock
    private IpCalculation ipCalculation;

    @Mock
    private AddTargetPromotionAgreementFinancialEventResponse addTargetPromotionAgreementFinancialEventResponse;

    private Map<String, String> params;
    private String token = "test-token";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        params = new HashMap<>();
        params.put("key", "value");
    }

    @Test
    void testRetrieveOfferList() {
        when(mbnaOfpFacade.retrieveOfferList(params, token)).thenReturn(retrieveOffersResponse);
        
        RetrieveOffersResponse response = mbnaOFP.retrieveOfferList(params, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).retrieveOfferList(params, token);
    }

    @Test
    void testUpdateOfferDisposition() {
        doNothing().when(mbnaOfpFacade).updateOfferDisposition(params, token);
        
        mbnaOFP.updateOfferDisposition(params, token);
        
        verify(mbnaOfpFacade, times(1)).updateOfferDisposition(params, token);
    }

    @Test
    void testInsuranceEnrolment() {
        when(mbnaOfpFacade.insuranceEnrolment(params, token)).thenReturn(requestInsuranceResponse);
        
        RequestInsuranceResponse response = mbnaOFP.insuranceEnrolment(params, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).insuranceEnrolment(params, token);
    }

    @Test
    void testRequestProductChange() {
        when(mbnaOfpFacade.requestProductChange(params, token)).thenReturn(requestProductChangeResponse);
        
        RequestProductChangeResponse response = mbnaOFP.requestProductChange(params, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).requestProductChange(params, token);
    }

    @Test
    void testDepositToChequing() {
        when(mbnaOfpFacade.depositToChequing(params, token)).thenReturn(depositToChequingResponse);
        
        DepositToChequingResponse response = mbnaOFP.depositToChequing(params, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).depositToChequing(params, token);
    }

    @Test
    void testBalanceTransferToCreditor() {
        when(mbnaOfpFacade.balanceTransferToCreditor(params, token)).thenReturn(balanceTransferToCreditorResponse);
        
        BalanceTransferToCreditorResponse response = mbnaOFP.balanceTransferToCreditor(params, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).balanceTransferToCreditor(params, token);
    }

    @Test
    void testCalculateIpPaymentDetails() {
        BigDecimal interestRate = BigDecimal.valueOf(10);
        BigDecimal contractAnnualRate = BigDecimal.valueOf(15);
        BigDecimal setupFee = BigDecimal.valueOf(5);
        BigDecimal transactionAmt = BigDecimal.valueOf(1000);
        int duration = 12;
        String offerId = "offer123";
        
        when(FeeUtil.calculateIpPaymentDetails(interestRate, contractAnnualRate, setupFee, transactionAmt, duration, offerId)).thenReturn(ipCalculation);
        
        IpCalculation response = mbnaOFP.calculateIpPaymentDetails(interestRate, contractAnnualRate, setupFee, transactionAmt, duration, offerId);
        
        assertNotNull(response);
        verify(feeUtil, times(1)).calculateIpPaymentDetails(interestRate, contractAnnualRate, setupFee, transactionAmt, duration, offerId);
    }

    @Test
    void testRequestInstallmentPlan() {
        RequestInstallmentPlanRequest request = new RequestInstallmentPlanRequest();
        
        when(mbnaOfpFacade.requestInstallmentPlan(request, token)).thenReturn(addTargetPromotionAgreementFinancialEventResponse);
        
        AddTargetPromotionAgreementFinancialEventResponse response = mbnaOFP.requestInstallmentPlan(request, token);
        
        assertNotNull(response);
        verify(mbnaOfpFacade, times(1)).requestInstallmentPlan(request, token);
    }
}
