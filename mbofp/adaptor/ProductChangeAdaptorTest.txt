package com.td.mbna.msec.midtier.mbofp.adaptor;

import com.td.api.mbofp.request.productchange.ProductChangeRequest;
import com.td.api.mbofp.response.productchange.ProductChangeResponse;
import com.td.mbna.msec.midtier.offers.payload.requestproductchange.RequestProductChangeResponse;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ProductChangeAdaptorTest {

    @InjectMocks
    private ProductChangeAdaptor productChangeAdaptor;

    @Mock
    private ProductChangeResponse mockProductChangeResponse;

    private Map<String, Object> params;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        params = new HashMap<>();
        params.put("PARAM_CARD_NO", "1234567890123456");
        params.put("PARAM_LANG_PREF", "EN");
        params.put("PARAM_SUBPRODUCT_ID", "PROD123");
    }

    @Test
    public void testGetRequest() {
        ProductChangeRequest productChangeRequest = productChangeAdaptor.getRequest(params);

        // Assert that the request is not null
        assertEquals("1234567890123456", productChangeRequest.getProductChangeEvent().getAgreementAltkey().getCardNum());
        assertEquals("EN", productChangeRequest.getProductChangeEvent().getParty().getLanguageTypeCd());
        assertEquals("PROD123", productChangeRequest.getProductChangeEvent().getProductId());
        assertEquals(MSECConstants.INTERNET_SECURE, productChangeRequest.getProductChangeEvent().getSolicitationChannelTypeCd());
        assertEquals(MSECConstants.ONLINE_SECURE_SITE, productChangeRequest.getProductChangeEvent().getAccessChannelTypeCd());
    }

    @Test
    public void testGetResponse_StatusTrue() {
        when(mockProductChangeResponse.getEventId()).thenReturn("Event123");

        RequestProductChangeResponse response = productChangeAdaptor.getResponse(mockProductChangeResponse);

        // Assert that the response status is true when eventId is present
        assertEquals(true, response.getResponsePayload().getStatus());
    }

    @Test
    public void testGetResponse_StatusFalse() {
        when(mockProductChangeResponse.getEventId()).thenReturn(null);

        RequestProductChangeResponse response = productChangeAdaptor.getResponse(mockProductChangeResponse);

        // Assert that the response status is false when eventId is null
        assertEquals(false, response.getResponsePayload().getStatus());
    }
}
