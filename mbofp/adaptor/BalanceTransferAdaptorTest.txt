package com.td.mbna.msec.midtier.mbofp.adaptor;

import com.td.api.mbofp.request.balancetransfer.*;
import com.td.api.mbofp.response.balancetransfer.BalanceTransferResponse;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.BalanceTransferToCreditorResponse;
import com.td.mbna.msec.midtier.transfer.payload.balancetransfertocreditor.ResponsePayload;
import com.td.mbna.msec.midtier.transfer.payload.BTConfirmationType;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class BalanceTransferAdaptorTest {

    private BalanceTransferAdaptor balanceTransferAdaptor;

    @BeforeEach
    public void setUp() {
        balanceTransferAdaptor = new BalanceTransferAdaptor();
    }

    @Test
    public void testGetResponse_withValidEventId() {
        BalanceTransferResponse balanceTransferResponse = new BalanceTransferResponse();
        balanceTransferResponse.setEventId("event123");

        BalanceTransferToCreditorResponse response = balanceTransferAdaptor.getResponse(balanceTransferResponse);

        assertNotNull(response);
        assertTrue(response.getResponsePayload().getConfirmation().size() > 0);
        assertTrue(response.getResponsePayload().getConfirmation().get(0).isStatus());
        assertEquals("event123", response.getResponsePayload().getConfirmation().get(0).getRefId());
    }

    @Test
    public void testGetResponse_withNullEventId() {
        BalanceTransferResponse balanceTransferResponse = new BalanceTransferResponse();
        balanceTransferResponse.setEventId(null);

        BalanceTransferToCreditorResponse response = balanceTransferAdaptor.getResponse(balanceTransferResponse);

        assertNotNull(response);
        assertTrue(response.getResponsePayload().getConfirmation().size() > 0);
        assertFalse(response.getResponsePayload().getConfirmation().get(0).isStatus());
    }

    @Test
    public void testGetRequest() {
        Map<String, Object> params = new HashMap<>();
        params.put("PARAM_AMOUNT", new BigDecimal("100.50"));
        params.put("PARAM_SUBPRODUCT_ID", "subproduct123");
        params.put("PARAM_FEETYPE", "fee123");
        params.put("PARAM_ACCT_ID", "acct123");
        params.put("PARAM_CARDNUM", "card123");
        params.put("PARAM_MERCHANTID", "merchant123");
        params.put("PARAM_PAYEE_CARDNUM", "payee123");
        params.put("PARAM_FIRST_NAME", "John");
        params.put("PARAM_LAST_NAME", "Doe");

        BalanceTransferRequest request = balanceTransferAdaptor.getRequest(params);

        assertNotNull(request);
        assertNotNull(request.getBalanceTransfer());
        assertNotNull(request.getBalanceTransfer().getTransactionCccyamt());
        assertEquals(new BigDecimal("100.50"), request.getBalanceTransfer().getTransactionCccyamt().getAmount());
        assertNotNull(request.getFundsTransfer());
        assertNotNull(request.getFundsTransfer().getRequestFundsSource());
        assertNotNull(request.getFundsTransfer().getRequestFundsDestination());
        assertEquals("merchant123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationExternalCreditorAccount().getCreditorPartyIdentificationNum());
        assertEquals("payee123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationExternalCreditorAccount().getAccountNum());
        assertNotNull(request.getRecipient());
        assertEquals("John", request.getRecipient().getIndividualFirstName());
        assertEquals("Doe", request.getRecipient().getIndividualLastName());
    }
}
