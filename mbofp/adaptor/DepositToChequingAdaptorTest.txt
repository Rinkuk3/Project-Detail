package com.td.mbna.msec.midtier.mbofp.adaptor;

import com.td.api.mbofp.request.balancetransfer.*;
import com.td.api.mbofp.response.balancetransfer.BalanceTransferResponse;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.DepositToChequingResponse;
import com.td.mbna.msec.midtier.transfer.payload.deposittochequing.ResponsePayload;
import com.td.mbna.msec.midtier.util.services.MSECConstants;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class DepositToChequingAdaptorTest {

    private DepositToChequingAdaptor depositToChequingAdaptor;

    @BeforeEach
    public void setUp() {
        depositToChequingAdaptor = new DepositToChequingAdaptor();
    }

    @Test
    public void testGetResponse_withValidEventId() {
        BalanceTransferResponse balanceTransferResponse = new BalanceTransferResponse();
        balanceTransferResponse.setEventId("event123");

        DepositToChequingResponse response = depositToChequingAdaptor.getResponse(balanceTransferResponse);

        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertTrue(response.getResponsePayload().isStatus());
        assertEquals("event123", response.getResponsePayload().getRefId());
    }

    @Test
    public void testGetResponse_withNullEventId() {
        BalanceTransferResponse balanceTransferResponse = new BalanceTransferResponse();
        balanceTransferResponse.setEventId(null);

        DepositToChequingResponse response = depositToChequingAdaptor.getResponse(balanceTransferResponse);

        assertNotNull(response);
        assertNotNull(response.getResponsePayload());
        assertFalse(response.getResponsePayload().isStatus());
    }

    @Test
    public void testGetRequest() {
        Map<String, Object> params = new HashMap<>();
        params.put("PARAM_AMOUNT", new BigDecimal("100.50"));
        params.put("PARAM_SUBPRODUCT_ID", "subproduct123");
        params.put("PARAM_FEETYPE", "fee123");
        params.put("PARAM_ACCT_ID", "acct123");
        params.put("PARAM_CARDNUM", "card123");
        params.put("PARAM_PAYEE_BANKID", "bank123");
        params.put("PARAM_PAYEE_BANKNAME", "BankName");
        params.put("PARAM_PAYEE_BANKTRANSIT", "transit123");
        params.put("PARAM_PAYEE_ACCTNUM", "acctnum123");
        params.put("PARAM_ADDRESSLINE1", "Address1");
        params.put("PARAM_ADDRESSLINE2", "Address2");
        params.put("PARAM_CITY", "City");
        params.put("PARAM_POSTALCODE", "12345");
        params.put("PARAM_PROVINCE", "Province");
        params.put("PARAM_PAYEE_NAME", "Payee Name");

        BalanceTransferRequest request = depositToChequingAdaptor.getRequest(params);

        assertNotNull(request);
        assertNotNull(request.getBalanceTransfer());
        assertNotNull(request.getBalanceTransfer().getTransactionCccyamt());
        assertEquals(new BigDecimal("100.50"), request.getBalanceTransfer().getTransactionCccyamt().getAmount());
        assertNotNull(request.getFundsTransfer());
        assertNotNull(request.getFundsTransfer().getRequestFundsSource());
        assertNotNull(request.getFundsTransfer().getRequestFundsDestination());
        assertNotNull(request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationExternalBankAccount());
        assertEquals("bank123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationExternalBankAccount().getBankNum());
        assertEquals("acctnum123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationExternalBankAccount().getAccountNum());
        assertNotNull(request.getRecipient());
        assertEquals("Payee Name", request.getRecipient().getFullName());
    }

    @Test
    public void testGetRequest_withEmptyBankId() {
        Map<String, Object> params = new HashMap<>();
        params.put("PARAM_AMOUNT", new BigDecimal("100.50"));
        params.put("PARAM_SUBPRODUCT_ID", "subproduct123");
        params.put("PARAM_FEETYPE", "fee123");
        params.put("PARAM_ACCT_ID", "acct123");
        params.put("PARAM_CARDNUM", "card123");
        params.put("PARAM_PAYEE_BANKID", "");
        params.put("PARAM_PAYEE_BANKNAME", "BankName");
        params.put("PARAM_PAYEE_BANKTRANSIT", "transit123");
        params.put("PARAM_PAYEE_ACCTNUM", "acctnum123");
        params.put("PARAM_ADDRESSLINE1", "Address1");
        params.put("PARAM_ADDRESSLINE2", "Address2");
        params.put("PARAM_CITY", "City");
        params.put("PARAM_POSTALCODE", "12345");
        params.put("PARAM_PROVINCE", "Province");
        params.put("PARAM_PAYEE_NAME", "Payee Name");

        BalanceTransferRequest request = depositToChequingAdaptor.getRequest(params);

        assertNotNull(request);
        assertNotNull(request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationDepositTransactionAgreement());
        assertEquals("transit123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationDepositTransactionAgreement().getBranchNum());
        assertEquals("acctnum123", request.getFundsTransfer().getRequestFundsDestination().getRequestDestinationDepositTransactionAgreement().getAccountNum());
    }
}
