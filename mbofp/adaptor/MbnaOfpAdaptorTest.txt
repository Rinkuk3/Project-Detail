package com.td.mbna.msec.midtier.mbofp.adaptor;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class MbnaOfpAdaptorTest {

    @Test
    public void testOfferTypeMapContainsExpectedKeys() {
        // Test that the offerTypeMap contains all the expected keys.
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_BT));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_CLI));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_PC));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_CA));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_RT));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_CI));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_IP));
        assertTrue(MbnaOfpAdaptor.offerTypeMap.containsKey(MbnaOfpAdaptor.OFP_OFFER_TYPE_MPD));
    }

    @Test
    public void testOfferTypeMapContainsExpectedValues() {
        // Test that the offerTypeMap contains the correct values for each key.
        assertEquals("BalanceTransfer", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_BT));
        assertEquals("CreditLineIncrease", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_CLI));
        assertEquals("ProductChange", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_PC));
        assertEquals("CashAdvance", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_CA));
        assertEquals("Retail", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_RT));
        assertEquals("BalanceProtection", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_CI));
        assertEquals("InstallmentPlan", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_IP));
        assertEquals("MIN-PAY-OFFER", MbnaOfpAdaptor.offerTypeMap.get(MbnaOfpAdaptor.OFP_OFFER_TYPE_MPD));
    }

    @Test
    public void testConstantFields() {
        // Test that the constants are correctly initialized
        assertEquals("SOLD", MbnaOfpAdaptor.TYPECD_SOLD);
        assertEquals("STANDARD_RATE_BT", MbnaOfpAdaptor.STANDARD_RATE_BT);
        assertEquals("a", MbnaOfpAdaptor.TYPECD_ACCOUNT);
        assertEquals("CHEQUING", MbnaOfpAdaptor.TYPE_CHEQUING);
        assertEquals("PEFT", MbnaOfpAdaptor.TYPE_PEFT);
        assertEquals("CEFT", MbnaOfpAdaptor.TYPE_CEFT);
        assertEquals("roleCD", MbnaOfpAdaptor.PARAM_ROLECD);
        assertEquals("customerId", MbnaOfpAdaptor.PARAM_CUSTOMER_ID);
        assertEquals("cardNumber", MbnaOfpAdaptor.PARAM_CARD_NO);
        assertEquals("acctId", MbnaOfpAdaptor.PARAM_ACCT_ID);
        assertEquals("langPref", MbnaOfpAdaptor.PARAM_LANG_PREF);
        assertEquals("subProductId", MbnaOfpAdaptor.PARAM_SUBPRODUCT_ID);
        assertEquals("feeType", MbnaOfpAdaptor.PARAM_FEETYPE);
        assertEquals("amount", MbnaOfpAdaptor.PARAM_AMOUNT);
        assertEquals("cardNum", MbnaOfpAdaptor.PARAM_CARDNUM);
        assertEquals("payeeCardNum", MbnaOfpAdaptor.PARAM_PAYEE_CARDNUM);
        assertEquals("payeeBankId", MbnaOfpAdaptor.PARAM_PAYEE_BANKID);
        assertEquals("payeeBankName", MbnaOfpAdaptor.PARAM_PAYEE_BANKNAME);
        assertEquals("payeeAcctNum", MbnaOfpAdaptor.PARAM_PAYEE_ACCTNUM);
        assertEquals("payeeBankTransit", MbnaOfpAdaptor.PARAM_PAYEE_BANKTRANSIT);
        assertEquals("merchantId", MbnaOfpAdaptor.PARAM_MERCHANTID);
        assertEquals("payeeName", MbnaOfpAdaptor.PARAM_PAYEE_NAME);
        assertEquals("firstName", MbnaOfpAdaptor.PARAM_FIRST_NAME);
        assertEquals("lastName", MbnaOfpAdaptor.PARAM_LAST_NAME);
        assertEquals("addressLine1", MbnaOfpAdaptor.PARAM_ADDRESSLINE1);
        assertEquals("addressLine2", MbnaOfpAdaptor.PARAM_ADDRESSLINE2);
        assertEquals("city", MbnaOfpAdaptor.PARAM_CITY);
        assertEquals("postalCode", MbnaOfpAdaptor.PARAM_POSTALCODE);
        assertEquals("province", MbnaOfpAdaptor.PARAM_PROVINCE);
        assertEquals("PRODUCT-CHANGE-OFFER", MbnaOfpAdaptor.EVENT_REASON_CODE_PC);
    }
}
