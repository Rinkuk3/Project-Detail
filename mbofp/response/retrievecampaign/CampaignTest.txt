import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

class CampaignTest {

    private Campaign campaign;

    @BeforeEach
    void setUp() {
        campaign = new Campaign();
    }

    @Test
    void testGetAndSetCampaignId() {
        String campaignId = "C123";
        campaign.setCampaignId(campaignId);
        assertEquals(campaignId, campaign.getCampaignId());
    }

    @Test
    void testGetAndSetStartDt() {
        String startDt = "2024-01-01";
        campaign.setStartDt(startDt);
        assertEquals(startDt, campaign.getStartDt());
    }

    @Test
    void testGetAndSetEndDt() {
        String endDt = "2024-12-31";
        campaign.setEndDt(endDt);
        assertEquals(endDt, campaign.getEndDt());
    }

    @Test
    void testGetAndSetAdjudicationMethodTypeCd() {
        String adjudicationMethodTypeCd = "AMT001";
        campaign.setAdjudicationMethodTypeCd(adjudicationMethodTypeCd);
        assertEquals(adjudicationMethodTypeCd, campaign.getAdjudicationMethodTypeCd());
    }

    @Test
    void testGetAndSetParentCampaignId() {
        String parentCampaignId = "PC123";
        campaign.setParentCampaignId(parentCampaignId);
        assertEquals(parentCampaignId, campaign.getParentCampaignId());
    }

    @Test
    void testGetAndSetChannel() {
        Channel channel1 = new Channel();  // Assuming Channel class exists
        Channel channel2 = new Channel();  // Assuming Channel class exists
        campaign.setChannel(Arrays.asList(channel1, channel2));
        assertEquals(2, campaign.getChannel().size());
        assertTrue(campaign.getChannel().contains(channel1));
        assertTrue(campaign.getChannel().contains(channel2));
    }

    @Test
    void testToString() {
        Channel channel1 = new Channel();  // Assuming Channel class exists
        campaign.setCampaignId("C123");
        campaign.setStartDt("2024-01-01");
        campaign.setEndDt("2024-12-31");
        campaign.setAdjudicationMethodTypeCd("AMT001");
        campaign.setParentCampaignId("PC123");
        campaign.setChannel(Arrays.asList(channel1));

        String expectedString = "com.td.api.mbofp.response.retrievecampaign.Campaign@" +
                                Integer.toHexString(campaign.hashCode()) +
                                "[campaignId=C123,startDt=2024-01-01,endDt=2024-12-31," +
                                "adjudicationMethodTypeCd=AMT001,parentCampaignId=PC123,channel=[<null>]]";
        assertEquals(expectedString, campaign.toString());
    }

    @Test
    void testHashCode() {
        campaign.setCampaignId("C123");
        campaign.setStartDt("2024-01-01");
        campaign.setEndDt("2024-12-31");
        campaign.setAdjudicationMethodTypeCd("AMT001");
        campaign.setParentCampaignId("PC123");
        
        Channel channel1 = new Channel();  // Assuming Channel class exists
        campaign.setChannel(Arrays.asList(channel1));

        int expectedHashCode = 1;
        expectedHashCode = 31 * expectedHashCode + (campaign.getAdjudicationMethodTypeCd() == null ? 0 : campaign.getAdjudicationMethodTypeCd().hashCode());
        expectedHashCode = 31 * expectedHashCode + (campaign.getCampaignId() == null ? 0 : campaign.getCampaignId().hashCode());
        expectedHashCode = 31 * expectedHashCode + (campaign.getChannel() == null ? 0 : campaign.getChannel().hashCode());
        expectedHashCode = 31 * expectedHashCode + (campaign.getStartDt() == null ? 0 : campaign.getStartDt().hashCode());
        expectedHashCode = 31 * expectedHashCode + (campaign.getEndDt() == null ? 0 : campaign.getEndDt().hashCode());
        expectedHashCode = 31 * expectedHashCode + (campaign.getParentCampaignId() == null ? 0 : campaign.getParentCampaignId().hashCode());

        assertEquals(expectedHashCode, campaign.hashCode());
    }

    @Test
    void testEquals() {
        campaign.setCampaignId("C123");
        campaign.setStartDt("2024-01-01");
        campaign.setEndDt("2024-12-31");
        campaign.setAdjudicationMethodTypeCd("AMT001");
        campaign.setParentCampaignId("PC123");
        
        Channel channel1 = new Channel();  // Assuming Channel class exists
        campaign.setChannel(Arrays.asList(channel1));

        // Test equality with the same object
        assertTrue(campaign.equals(campaign));

        // Test equality with another object having the same field values
        Campaign anotherCampaign = new Campaign();
        anotherCampaign.setCampaignId("C123");
        anotherCampaign.setStartDt("2024-01-01");
        anotherCampaign.setEndDt("2024-12-31");
        anotherCampaign.setAdjudicationMethodTypeCd("AMT001");
        anotherCampaign.setParentCampaignId("PC123");
        anotherCampaign.setChannel(Arrays.asList(channel1));
        assertTrue(campaign.equals(anotherCampaign));

        // Test inequality with different field values
        Campaign differentCampaign = new Campaign();
        differentCampaign.setCampaignId("C124");
        assertFalse(campaign.equals(differentCampaign));

        // Test inequality with null
        assertFalse(campaign.equals(null));

        // Test inequality with an object of a different class
        assertFalse(campaign.equals(new Object()));
    }
}
