import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BalanceTransferResponseTest {

    private BalanceTransferResponse balanceTransferResponse;

    @BeforeEach
    void setUp() {
        balanceTransferResponse = new BalanceTransferResponse();
    }

    @Test
    void testGetAndSetEventId() {
        balanceTransferResponse.setEventId("event123");
        assertEquals("event123", balanceTransferResponse.getEventId());
    }

    @Test
    void testToString() {
        balanceTransferResponse.setEventId("event123");

        String expected = "com.td.api.mbofp.response.balancetransfer.BalanceTransferResponse@" +
                          Integer.toHexString(balanceTransferResponse.hashCode()) +
                          "[eventId=event123]";
        assertEquals(expected, balanceTransferResponse.toString());
    }

    @Test
    void testHashCode() {
        balanceTransferResponse.setEventId("event123");

        int expectedHashCode = 1;
        expectedHashCode = 31 * expectedHashCode + (balanceTransferResponse.getEventId() == null ? 0 : balanceTransferResponse.getEventId().hashCode());
        assertEquals(expectedHashCode, balanceTransferResponse.hashCode());
    }

    @Test
    void testEquals() {
        balanceTransferResponse.setEventId("event123");

        // Test equality with same object
        assertTrue(balanceTransferResponse.equals(balanceTransferResponse));

        // Test equality with another object having the same fields
        BalanceTransferResponse anotherBalanceTransferResponse = new BalanceTransferResponse();
        anotherBalanceTransferResponse.setEventId("event123");
        assertTrue(balanceTransferResponse.equals(anotherBalanceTransferResponse));

        // Test inequality with different eventId
        BalanceTransferResponse differentBalanceTransferResponse = new BalanceTransferResponse();
        differentBalanceTransferResponse.setEventId("event456");
        assertFalse(balanceTransferResponse.equals(differentBalanceTransferResponse));

        // Test inequality with null
        assertFalse(balanceTransferResponse.equals(null));

        // Test inequality with an object of a different class
        assertFalse(balanceTransferResponse.equals(new Object()));
    }
}
