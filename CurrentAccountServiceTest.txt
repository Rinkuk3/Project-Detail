import com.td.mbna.msec.account.application.CardManagementService;
import com.td.mbna.msec.account.application.NavigationTabService;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.account.domain.CardSummary;
import com.td.mbna.msec.account.domain.CurrentAccount;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.servlet.http.HttpServletRequest;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CurrentAccountServiceImplTest {

    @InjectMocks
    private CurrentAccountServiceImpl currentAccountService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private NavigationTabService navigationTabService;

    @Mock
    private CardManagementService cardManagementService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private CardSummary cardSummary;

    @BeforeEach
    void setUp() {
        // Common setup for mocks can be added here if needed
    }

    @Test
    void testGetCurrentAccount_success() {
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.getAcctEnding()).thenReturn("1234");
        when(accountDetails.getBalance()).thenReturn(1000.0);
        when(accountDetails.getCreditAvailable()).thenReturn(500.0);
        when(accountDetails.getAccountNumber()).thenReturn("123456789");
        when(navigationTabService.getNavigationTabs(accountDetails)).thenReturn(List.of("Tab1", "Tab2"));
        when(cardManagementService.getCardArtInfos(accountDetails, httpServletRequest)).thenReturn(List.of());

        CurrentAccount result = currentAccountService.getCurrentAccount(httpServletRequest);

        assertNotNull(result);
        assertEquals("123456789", result.getAccountNumber());
        assertEquals(1000.0, result.getCardSummary().getCurrentBalance());
        assertEquals(500.0, result.getCardSummary().getCreditAvailable());
        assertEquals("1234", result.getCardSummary().getEndingIn());
        assertEquals(List.of("Tab1", "Tab2"), result.getNavigationTabs());
    }

    @Test
    void testGetCurrentAccount_nullAccount() {
        when(sessionProvider.getCurrentAccount()).thenReturn(null);

        CurrentAccount result = currentAccountService.getCurrentAccount(httpServletRequest);

        assertNull(result);
        verify(sessionProvider).getCurrentAccount();
        verify(navigationTabService, never()).getNavigationTabs(any());
        verify(cardManagementService, never()).getCardArtInfos(any(), any());
    }

    @Test
    void testGetEmailConfirmation_emailPresent() {
        when(accountDetails.isAllowedStandardEForms()).thenReturn(true);
        when(accountDetails.getContactInfo()).thenReturn(new ContactInfo("test@example.com"));

        boolean result = currentAccountService.getEmailConfirmation(accountDetails);

        assertFalse(result);
    }

    @Test
    void testGetEmailConfirmation_emailNull() {
        when(accountDetails.isAllowedStandardEForms()).thenReturn(true);
        when(accountDetails.getContactInfo()).thenReturn(new ContactInfo(null));

        boolean result = currentAccountService.getEmailConfirmation(accountDetails);

        assertTrue(result);
    }

    @Test
    void testGetEmailConfirmation_emailEmpty() {
        when(accountDetails.isAllowedStandardEForms()).thenReturn(true);
        when(accountDetails.getContactInfo()).thenReturn(new ContactInfo("   "));

        boolean result = currentAccountService.getEmailConfirmation(accountDetails);

        assertTrue(result);
    }

    @Test
    void testGetEmailConfirmation_notAllowed() {
        when(accountDetails.isAllowedStandardEForms()).thenReturn(false);

        boolean result = currentAccountService.getEmailConfirmation(accountDetails);

        assertFalse(result);
    }

    @Test
    void testSetCurrentAccount() {
        String accountId = "123456789";

        currentAccountService.setCurrentAccount(accountId);

        verify(sessionProvider).setCurrentAccount(accountId);
    }

    // Helper class to mock ContactInfo
    private static class ContactInfo {
        private String emailAddr;

        public ContactInfo(String emailAddr) {
            this.emailAddr = emailAddr;
        }

        public String getEmailAddr() {
            return emailAddr;
        }
    }
}
