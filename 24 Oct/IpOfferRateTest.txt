package com.td.mbna.msec.offers.domain.ip;

import com.td.mbna.msec.offers.domain.OfferDetails;
import com.td.mbna.msec.offers.domain.Rate;
import com.td.mbna.msec.offers.domain.IpOffer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.assertThat;

public class IpOfferRateTest {

    private OfferDetails offerDetails;
    private IpOffer ipOffer;
    private Rate rate;

    @BeforeEach
    public void setUp() {
        // Create mock objects
        offerDetails = mock(OfferDetails.class);
        ipOffer = mock(IpOffer.class);
        rate = mock(Rate.class);

        // Set up mocks and return values
        when(offerDetails.getOfferID()).thenReturn("IP56100002");
        when(offerDetails.getIpOffer()).thenReturn(ipOffer);
        when(ipOffer.getRate()).thenReturn(List.of(rate));
        when(rate.getUntilAgeNum()).thenReturn("3");
        when(rate.getFixedRate()).thenReturn(BigDecimal.valueOf(5.5));
        when(ipOffer.getFeePercentage()).thenReturn(BigDecimal.valueOf(100.00));
    }

    @Test
    public void testConstructorAndGetters() {
        // When
        IpOfferRate ipOfferRate = new IpOfferRate(offerDetails);

        // Then
        assertThat(ipOfferRate.getOfferId()).isEqualTo("IP56100002");
        assertThat(ipOfferRate.getDuration()).isEqualTo(3);
        assertThat(ipOfferRate.getInterest()).isEqualTo(BigDecimal.valueOf(5.5));
        assertThat(ipOfferRate.getSetupFees()).isEqualTo(BigDecimal.valueOf(100.00));
    }

    @Test
    public void testSetters() {
        // Given
        IpOfferRate ipOfferRate = new IpOfferRate(offerDetails);
        ipOfferRate.setMonthlyPayment(BigDecimal.valueOf(50.00));

        // When setting new values
        ipOfferRate.setOfferId("NewOfferId");
        ipOfferRate.setDuration(5);
        ipOfferRate.setInterest(BigDecimal.valueOf(4.5));
        ipOfferRate.setSetupFees(BigDecimal.valueOf(200.00));

        // Then verify that getters return updated values
        assertThat(ipOfferRate.getOfferId()).isEqualTo("NewOfferId");
        assertThat(ipOfferRate.getDuration()).isEqualTo(5);
        assertThat(ipOfferRate.getInterest()).isEqualTo(BigDecimal.valueOf(4.5));
        assertThat(ipOfferRate.getSetupFees()).isEqualTo(BigDecimal.valueOf(200.00));
        assertThat(ipOfferRate.getMonthlyPayment()).isEqualTo(BigDecimal.valueOf(50.00)); // Monthly payment remains unchanged
    }
}
