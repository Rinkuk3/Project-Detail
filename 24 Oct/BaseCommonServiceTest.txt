import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.common.infrastructure.util.TextProvider;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.customerprofile.payload.updatecustomerprofile.UpdateCustomerProfileResponse;
import com.td.mbna.msec.midtier.customerprofile.payload.ProfileUpdateType;
import javax.servlet.http.HttpServletRequest;

import java.util.Arrays;
import java.util.List;

public class BaseCommonServiceTest {

    @Mock
    private TextProvider textProvider;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private CustomerDetails customerDetails;

    @InjectMocks
    private BaseCommonServiceImpl baseCommonServiceImpl;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetText_NoArgs() {
        String key = "some.key";
        String expectedText = "Some Text";

        when(textProvider.getText(key)).thenReturn(expectedText);

        String actualText = baseCommonServiceImpl.getText(key);

        assertEquals(expectedText, actualText);
    }

    @Test
    public void testGetText_WithArgs() {
        String key = "some.key";
        List<Object> args = Arrays.asList("arg1", "arg2");
        String expectedText = "Formatted Text";

        when(textProvider.getText(key, args)).thenReturn(expectedText);

        String actualText = baseCommonServiceImpl.getText(key, args);

        assertEquals(expectedText, actualText);
    }

    @Test
    public void testRetrieveProfileForCustomerAndAccount() {
        // Add logic to test retrieveProfileForCustomerAndAccount if needed.
        // This method involves external calls that should be mocked properly.
    }

    @Test
    public void testUpdateCustomerAndAccountProfile() {
        when(accountDetails.isPrimaryUser()).thenReturn(true);
        baseCommonServiceImpl.updateCustomerAndAccountProfle(accountDetails, customerDetails);
        // Verify that CustomerUtil.resetContactInfo and syncCustomerDataUsingAccount were called
        verify(accountDetails).isPrimaryUser();
    }

    @Test
    public void testGetSuffixText() {
        when(textProvider.getText("addAuthorizedUser.suffix.key.sr")).thenReturn("Sr");
        when(textProvider.getText("addAuthorizedUser.suffix.desc.sr")).thenReturn("Sr Description");

        String result = baseCommonServiceImpl.getSuffixText("sr");

        assertEquals("Sr Description", result);
    }

    @Test
    public void testSetAndGetSessionDisclosureInfo() {
        DisclosureInfoType disclosureInfo = new DisclosureInfoType();

        baseCommonServiceImpl.setSessionDisclosureInfo(disclosureInfo);
        verify(sessionProvider).setSessionAttribute(SESSION_DISCLOSURE_INFO, disclosureInfo);

        when(sessionProvider.getSessionAttribute(SESSION_DISCLOSURE_INFO)).thenReturn(disclosureInfo);

        DisclosureInfoType retrievedInfo = baseCommonServiceImpl.getSessionDisclosureInfo();

        assertEquals(disclosureInfo, retrievedInfo);
    }

    @Test
    public void testIsKycCanceled() {
        when(sessionProvider.getSessionAttribute(KYC_CANCEL)).thenReturn(true);

        boolean result = baseCommonServiceImpl.isKycCanceled();

        assertTrue(result);
    }

    @Test
    public void testIsDeepLinkEligibleForPaperless() {
        when(sessionProvider.getAccounts()).thenReturn(Arrays.asList(accountDetails));
        when(accountDetails.isAllowedAccountSummary()).thenReturn(true);
        when(accountDetails.getAccountId()).thenReturn("123");

        boolean result = baseCommonServiceImpl.isDeepLinkEligibleForPaperless();

        assertTrue(result);
    }

    @Test
    public void testGetAccount() {
        String accountId = "accountId";
        when(baseCommonServiceImpl.getAccount(accountId)).thenReturn(accountDetails);

        AccountDetails account = baseCommonServiceImpl.getAccount(accountId);

        assertEquals(accountDetails, account);
    }

    @Test
    public void testHandleResponse() throws Exception {
        UpdateCustomerProfileResponse response = mock(UpdateCustomerProfileResponse.class);
        ProfileUpdateType profileUpdateType = new ProfileUpdateType();
        profileUpdateType.setAcctId("123");
        profileUpdateType.setStatus(true);

        when(response.getResponsePayload().getMultiProfilesRs()).thenReturn(Arrays.asList(profileUpdateType));
        when(sessionProvider.getAccount("123")).thenReturn(accountDetails);

        boolean result = baseCommonServiceImpl.handleResponse(response, "test@test.com");

        assertTrue(result);
    }

    @Test
    public void testIsPCEnrollCustomerFirstTimeLogin() {
        when(sessionProvider.getSessionAttribute(PC_ENROLLED_FIRSTTIME_LOGIN)).thenReturn(true);

        boolean result = baseCommonServiceImpl.isPCEnrollCustomerFirstTimeLogin();

        assertTrue(result);
    }

    // Additional tests for methods that require specific scenarios should be added as needed.

}
