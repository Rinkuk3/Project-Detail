package com.td.mbna.msec.transfertochequing.domain;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class TransferToChequingVerificationResponseTest {

    @Test
    void testBuilder() {
        // Arrange
        String transferTo = "John Doe";
        String transitNum = "123456";
        String bankId = "BANK123";
        String accountNum = "ACC123456";
        BigDecimal transferAmt = BigDecimal.valueOf(100.00);
        BigDecimal transferFee = BigDecimal.valueOf(2.50);
        BigDecimal totalAmt = transferAmt.add(transferFee);
        BigDecimal transferFeePercentage = BigDecimal.valueOf(2.5);
        BigDecimal interestRate = BigDecimal.valueOf(3.5);
        String rateExpiryDate = "2025-12-31";
        BigDecimal standardRate = BigDecimal.valueOf(4.0);

        // Act
        TransferToChequingVerificationResponse response = TransferToChequingVerificationResponse.builder()
                .transferTo(transferTo)
                .transitNum(transitNum)
                .bankId(bankId)
                .accountNum(accountNum)
                .transferAmt(transferAmt)
                .transferFee(transferFee)
                .totalAmt(totalAmt)
                .transferFeePercentage(transferFeePercentage)
                .interestRate(interestRate)
                .rateExpiryDate(rateExpiryDate)
                .standardRate(standardRate)
                .build();

        // Assert
        assertEquals(transferTo, response.getTransferTo());
        assertEquals(transitNum, response.getTransitNum());
        assertEquals(bankId, response.getBankId());
        assertEquals(accountNum, response.getAccountNum());
        assertEquals(transferAmt, response.getTransferAmt());
        assertEquals(transferFee, response.getTransferFee());
        assertEquals(totalAmt, response.getTotalAmt());
        assertEquals(transferFeePercentage, response.getTransferFeePercentage());
        assertEquals(interestRate, response.getInterestRate());
        assertEquals(rateExpiryDate, response.getRateExpiryDate());
        assertEquals(standardRate, response.getStandardRate());
    }

    @Test
    void testEqualsAndHashCode() {
        // Arrange
        TransferToChequingVerificationResponse response1 = TransferToChequingVerificationResponse.builder()
                .transferTo("John Doe")
                .transitNum("123456")
                .bankId("BANK123")
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .transferFeePercentage(BigDecimal.valueOf(2.5))
                .interestRate(BigDecimal.valueOf(3.5))
                .rateExpiryDate("2025-12-31")
                .standardRate(BigDecimal.valueOf(4.0))
                .build();

        TransferToChequingVerificationResponse response2 = TransferToChequingVerificationResponse.builder()
                .transferTo("John Doe")
                .transitNum("123456")
                .bankId("BANK123")
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .transferFeePercentage(BigDecimal.valueOf(2.5))
                .interestRate(BigDecimal.valueOf(3.5))
                .rateExpiryDate("2025-12-31")
                .standardRate(BigDecimal.valueOf(4.0))
                .build();

        TransferToChequingVerificationResponse response3 = TransferToChequingVerificationResponse.builder()
                .transferTo("Jane Doe")
                .transitNum("654321")
                .bankId("BANK456")
                .accountNum("ACC654321")
                .transferAmt(BigDecimal.valueOf(200.00))
                .transferFee(BigDecimal.valueOf(5.00))
                .totalAmt(BigDecimal.valueOf(205.00))
                .transferFeePercentage(BigDecimal.valueOf(2.5))
                .interestRate(BigDecimal.valueOf(3.5))
                .rateExpiryDate("2025-12-31")
                .standardRate(BigDecimal.valueOf(4.0))
                .build();

        // Assert Equals
        assertEquals(response1, response2);
        assertNotEquals(response1, response3);
        assertNotEquals(response2, response3);

        // Assert HashCode
        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    void testToString() {
        // Arrange
        TransferToChequingVerificationResponse response = TransferToChequingVerificationResponse.builder()
                .transferTo("John Doe")
                .transitNum("123456")
                .bankId("BANK123")
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .transferFeePercentage(BigDecimal.valueOf(2.5))
                .interestRate(BigDecimal.valueOf(3.5))
                .rateExpiryDate("2025-12-31")
                .standardRate(BigDecimal.valueOf(4.0))
                .build();

        // Act
        String expectedString = "TransferToChequingVerificationResponse(transferTo=John Doe, transitNum=123456, bankId=BANK123, accountNum=ACC123456, transferAmt=100.00, transferFee=2.50, totalAmt=102.50, transferFeePercentage=2.5, interestRate=3.5, rateExpiryDate=2025-12-31, standardRate=4.0)";

        // Assert
        assertEquals(expectedString, response.toString());
    }
}
