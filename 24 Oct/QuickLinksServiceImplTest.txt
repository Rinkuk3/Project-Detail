import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.account.repository.AccountRepository;
import com.td.mbna.msec.offers.application.PaperlessOfferService;
import com.td.mbna.msec.quicklink.model.QuickLinks;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.CardActivationEligibilityRequest;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.CardActivationEligibilityResponses;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.RequestPayload;
import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class QuickLinksServiceImplTest {

    @InjectMocks
    private QuickLinksServiceImpl quickLinksService;

    @Mock
    private PaperlessOfferService paperlessService;

    @Mock
    private AccountRepository accountRepository;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    private AccountDetails account;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        account = new AccountDetails();
        account.setCardNumber("123456789012");
        account.setAliasCustId("aliasId");
        account.setAllowedCardActivation(true);
        account.setCardActivated(false);
        account.setPrimaryUser(true);
        account.setAuthorizedUsers(new ArrayList<>());
        account.setMultiCard(true);
        account.setCardActivationEligibleAUs(new ArrayList<>());
    }

    @Test
    public void testShowCardActivation_MultiCardPrimaryUser_AllowedActivation() {
        when(accountRepository.hasExceededMaxActivateAttempts(anyString())).thenReturn(false);
        assertTrue(quickLinksService.showCardActivation(account));
    }

    @Test
    public void testShowCardActivation_SingleCard_AllowedActivation() {
        account.setMultiCard(false);
        assertTrue(quickLinksService.showCardActivation(account));
    }

    @Test
    public void testShowCardActivation_CardActivated() {
        account.setCardActivated(true);
        assertFalse(quickLinksService.showCardActivation(account));
    }

    @Test
    public void testShowPaperless() {
        account.setAllowedSegment2(true);
        when(accountRepository.hasExceededMaxActivateAttempts(anyString())).thenReturn(false);
        assertTrue(quickLinksService.showPaperless(account));
    }

    @Test
    public void testShowEmailNotifications() {
        account.setAllowedStandardEForms(true);
        account.getProfile().setConfirmationEmailWanted(false);
        assertTrue(quickLinksService.showEmailNotifications(account));
    }

    @Test
    public void testShowAccountServices() {
        account.setAllowedAccountSummary(true);
        assertTrue(quickLinksService.showAccountServices(account));
    }

    @Test
    public void testGetQuickLinks() {
        when(accountRepository.hasExceededMaxActivateAttempts(anyString())).thenReturn(false);
        QuickLinks quickLinks = quickLinksService.getQuickLinks(account);
        assertNotNull(quickLinks);
        assertTrue(quickLinks.isShowCardActivation());
        assertTrue(quickLinks.isShowPaperless());
        assertTrue(quickLinks.isShowEmailNotifications());
        assertTrue(quickLinks.isShowAccountServices());
        assertEquals(account.getCardActivationMessageId(), quickLinks.getCardActivationMessageId());
    }

    @Test
    public void testGetQuickLinks_AllHidden() {
        when(accountRepository.hasExceededMaxActivateAttempts(anyString())).thenReturn(true);
        QuickLinks quickLinks = quickLinksService.getQuickLinks(account);
        assertNull(quickLinks);
    }

    @Test
    public void testPopulateCardActivationEligibility_NoAccounts() {
        quickLinksService.populateCardActivationEligibility(null);
        // No exception should be thrown
    }

    @Test
    public void testPopulateCardActivationEligibility_EligibleMultiCard() {
        account.setAuthorizedUsers(List.of(new com.td.mbna.msec.midtier.types.common.CardHolderType()));
        List<AccountDetails> accountList = List.of(account);

        when(accountRepository.hasExceededMaxActivateAttempts(anyString())).thenReturn(false);
        when(midTierServiceHelper.findCardActivationEligibility(any())).thenReturn(new CardActivationEligibilityResponses());

        quickLinksService.populateCardActivationEligibility(accountList);
        
        assertTrue(account.isAllowedCardActivation());
        assertEquals(STANDARD_ACTIVATION_MSG, account.getCardActivationMessageId());
    }

    @Test
    public void testRetrieveCardActivationEligibility_NoEligibilityRequests() {
        quickLinksService.retrieveCardActivationEligibility(new ArrayList<>(), new ArrayList<>());
        // No exception should be thrown
    }

    @Test
    public void testRetrieveCardActivationEligibility_ValidEligibilityRequests() {
        // Prepare eligibility requests and responses
        List<CardActivationEligibilityRequest> requests = new ArrayList<>();
        CardActivationEligibilityRequest request = new CardActivationEligibilityRequest();
        request.setAcctNum(account.getCardNumber());
        requests.add(request);

        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(new ArrayList<>());
        
        when(midTierServiceHelper.findCardActivationEligibility(any())).thenReturn(responses);
        
        quickLinksService.retrieveCardActivationEligibility(requests, List.of(account));

        // Assert that no changes were made if there were no valid responses
        assertFalse(account.isAllowedCardActivation());
        assertNull(account.getCardActivationMessageId());
    }
}
