package com.td.mbna.msec.interceptor.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class FormVariableTest {

    private FormVariable formVariable;

    @BeforeEach
    void setUp() {
        formVariable = new FormVariable();
    }

    @Test
    void testSetAndGetName() {
        // Test setter and getter for name
        String name = "variableName";
        formVariable.setName(name);
        assertEquals(name, formVariable.getName());

        // Test setting name to null
        formVariable.setName(null);
        assertNull(formVariable.getName());
    }

    @Test
    void testSetAndGetValue() {
        // Test setter and getter for value
        String value = "variableValue";
        formVariable.setValue(value);
        assertEquals(value, formVariable.getValue());

        // Test setting value to null
        formVariable.setValue(null);
        assertNull(formVariable.getValue());
    }

    @Test
    void testFormVariableDefaults() {
        // Check if default values are null
        assertNull(formVariable.getName());
        assertNull(formVariable.getValue());
    }

    @Test
    void testEquality() {
        // Create another instance for equality check
        FormVariable anotherFormVariable = new FormVariable();
        formVariable.setName("name");
        formVariable.setValue("value");
        anotherFormVariable.setName("name");
        anotherFormVariable.setValue("value");

        // Test equality for objects with the same values
        assertTrue(formVariable.equals(anotherFormVariable));

        // Test inequality when values are different
        anotherFormVariable.setValue("differentValue");
        assertFalse(formVariable.equals(anotherFormVariable));
    }

    @Test
    void testHashCode() {
        // Set values to ensure hashCode has meaningful output
        formVariable.setName("name");
        formVariable.setValue("value");

        // Ensure the hashCode is consistent and non-zero
        assertNotEquals(0, formVariable.hashCode());
    }

    @Test
    void testToString() {
        // Set values to test the toString method
        formVariable.setName("name");
        formVariable.setValue("value");

        // Check the output of the toString method
        String expectedString = "FormVariable{name='name', value='value'}";
        assertTrue(formVariable.toString().contains("name='name'"));
        assertTrue(formVariable.toString().contains("value='value'"));
    }
}
