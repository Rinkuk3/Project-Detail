package com.td.mbna.msec.offers.domain;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class BPIOfferDisclosureResponseTest {

    @Test
    public void testBuilder() {
        // Given
        String wcmTitle = "Sample Title";
        String wcmText = "Sample Text";
        String disclosureText = "Sample Disclosure Text";

        // When
        BPIOfferDisclosureResponse response = BPIOfferDisclosureResponse.builder()
                .wcmTitle(wcmTitle)
                .wcmText(wcmText)
                .disclosureText(disclosureText)
                .build();

        // Then
        assertThat(response.getWcmTitle()).isEqualTo(wcmTitle);
        assertThat(response.getWcmText()).isEqualTo(wcmText);
        assertThat(response.getDisclosureText()).isEqualTo(disclosureText);
    }

    @Test
    public void testGetters() {
        // Given
        BPIOfferDisclosureResponse response = BPIOfferDisclosureResponse.builder()
                .wcmTitle("Title")
                .wcmText("Text")
                .disclosureText("Disclosure")
                .build();

        // Then
        assertThat(response.getWcmTitle()).isEqualTo("Title");
        assertThat(response.getWcmText()).isEqualTo("Text");
        assertThat(response.getDisclosureText()).isEqualTo("Disclosure");
    }

    @Test
    public void testEqualsAndHashCode() {
        // Given
        BPIOfferDisclosureResponse response1 = BPIOfferDisclosureResponse.builder()
                .wcmTitle("Title")
                .wcmText("Text")
                .disclosureText("Disclosure")
                .build();

        BPIOfferDisclosureResponse response2 = BPIOfferDisclosureResponse.builder()
                .wcmTitle("Title")
                .wcmText("Text")
                .disclosureText("Disclosure")
                .build();

        // Then
        assertThat(response1).isEqualTo(response2);
        assertThat(response1.hashCode()).isEqualTo(response2.hashCode());
    }

    @Test
    public void testToString() {
        // Given
        BPIOfferDisclosureResponse response = BPIOfferDisclosureResponse.builder()
                .wcmTitle("Title")
                .wcmText("Text")
                .disclosureText("Disclosure")
                .build();

        // When
        String toStringValue = response.toString();

        // Then
        assertThat(toStringValue).contains("BPIOfferDisclosureResponse");
        assertThat(toStringValue).contains("wcmTitle='Title'");
        assertThat(toStringValue).contains("wcmText='Text'");
        assertThat(toStringValue).contains("disclosureText='Disclosure'");
    }
}
