package com.td.mbna.msec.pin.application.impl;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import com.td.mbna.msec.core.session.SessionProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.SUCCESS;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PinTimeoutServiceImplTest {

    @InjectMocks
    private PinTimeoutServiceImpl pinTimeoutService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private AccountDetails accountDetails;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSetPinTimeout() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.getAccountId()).thenReturn("12345");

        // Act
        BaseMsecbffResponse response = pinTimeoutService.setPinTimeout();

        // Assert
        assertEquals(SUCCESS, response.getStatus());
        assertEquals("", response.getErrorCode());

        // Verify session attributes
        verify(sessionProvider).setSessionAttribute("CVV_AUTHENTICATED_FORPIN12345", false);
        verify(sessionProvider).setSessionAttribute("CVV_AUTHENTICATED_FORPINCHANGE12345", false);
        verify(sessionProvider).setSessionAttribute("UAPPA_OTP_AUTHENTICATED_FORPIN12345", false);
        verify(sessionProvider).removeSessionAttribute("PIN_SESSION12345");
        verify(sessionProvider).setSessionAttribute("PIN_TIMEDOUT", true);
        verify(midTierServiceHelper).createAuditLog("SS1460", null, false);
    }

    @Test
    void testIsAuthorized_WithAllowedPinManagement() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);

        // Act
        boolean isAuthorized = pinTimeoutService.isAuthorized();

        // Assert
        assertTrue(isAuthorized);
    }

    @Test
    void testIsAuthorized_WithNotAllowedPinManagement() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(false);

        // Act
        boolean isAuthorized = pinTimeoutService.isAuthorized();

        // Assert
        assertFalse(isAuthorized);
    }

    @Test
    void testIsAuthorized_WithNullAccount() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);

        // Act
        boolean isAuthorized = pinTimeoutService.isAuthorized();

        // Assert
        assertTrue(isAuthorized);
    }

    @Test
    void testIsAuthorized_WithNullCurrentAndRequestedAccount() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(null);

        // Act
        boolean isAuthorized = pinTimeoutService.isAuthorized();

        // Assert
        assertFalse(isAuthorized);
    }
}
