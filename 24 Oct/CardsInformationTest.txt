package com.td.mbna.msec.kyc.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Objects;

public class CardsInformationTest {

    @Test
    public void testDefaultConstructor() {
        CardsInformation cardsInformation = new CardsInformation();

        // Test default values
        assertEquals("", cardsInformation.getName());
        assertEquals("", cardsInformation.getEndingIn());
        assertNull(cardsInformation.getAddress());
        assertNull(cardsInformation.getPhone());
    }

    @Test
    public void testSetAndGetName() {
        CardsInformation cardsInformation = new CardsInformation();
        cardsInformation.setName("John Doe");
        assertEquals("John Doe", cardsInformation.getName());
    }

    @Test
    public void testSetAndGetEndingIn() {
        CardsInformation cardsInformation = new CardsInformation();
        cardsInformation.setEndingIn("1234");
        assertEquals("1234", cardsInformation.getEndingIn());
    }

    @Test
    public void testSetAndGetAddress() {
        CardsInformation cardsInformation = new CardsInformation();
        Address address = new Address();
        cardsInformation.setAddress(address);
        assertEquals(address, cardsInformation.getAddress());
    }

    @Test
    public void testSetAndGetPhone() {
        CardsInformation cardsInformation = new CardsInformation();
        Phone phone = new Phone(); // Assuming Phone is a valid class
        cardsInformation.setPhone(phone);
        assertEquals(phone, cardsInformation.getPhone());
    }

    @Test
    public void testEqualsAndHashCode() {
        CardsInformation cardInfo1 = new CardsInformation();
        CardsInformation cardInfo2 = new CardsInformation();

        assertEquals(cardInfo1, cardInfo2);
        assertEquals(cardInfo1.hashCode(), cardInfo2.hashCode());

        cardInfo1.setName("John Doe");
        assertNotEquals(cardInfo1, cardInfo2);

        cardInfo2.setName("John Doe");
        assertEquals(cardInfo1, cardInfo2);
        assertEquals(cardInfo1.hashCode(), cardInfo2.hashCode());

        cardInfo1.setEndingIn("1234");
        assertNotEquals(cardInfo1, cardInfo2);

        cardInfo2.setEndingIn("1234");
        assertEquals(cardInfo1, cardInfo2);
        assertEquals(cardInfo1.hashCode(), cardInfo2.hashCode());

        Address address1 = new Address();
        Address address2 = new Address();
        cardInfo1.setAddress(address1);
        cardInfo2.setAddress(address2);
        assertEquals(cardInfo1, cardInfo2);
        assertEquals(cardInfo1.hashCode(), cardInfo2.hashCode());

        Phone phone1 = new Phone(); // Assuming Phone has a suitable constructor
        Phone phone2 = new Phone();
        cardInfo1.setPhone(phone1);
        cardInfo2.setPhone(phone2);
        assertEquals(cardInfo1, cardInfo2);
        assertEquals(cardInfo1.hashCode(), cardInfo2.hashCode());
    }

    @Test
    public void testToString() {
        CardsInformation cardsInformation = new CardsInformation();
        cardsInformation.setName("John Doe");
        cardsInformation.setEndingIn("1234");
        Address address = new Address();
        cardsInformation.setAddress(address);
        Phone phone = new Phone();
        cardsInformation.setPhone(phone);

        String expectedString = "com.td.mbna.msec.kyc.dto.CardsInformation@" +
                Integer.toHexString(System.identityHashCode(cardsInformation)) +
                "[name=John Doe,endingIn=1234,address=" + address + ",phone=" + phone + "]";
        assertEquals(expectedString, cardsInformation.toString());
    }
}
