package com.td.mbna.msec.statement.application;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashSet;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.midtier.customerprofile.payload.ProfileUpdateType;
import com.td.mbna.msec.midtier.customerprofile.payload.updatecustomerprofile.RequestPayload;
import com.td.mbna.msec.midtier.customerprofile.payload.updatecustomerprofile.UpdateCustomerProfileResponse;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MultiAccountEstatementServiceImplTest {

    @InjectMocks
    private MultiAccountEstatementServiceImpl multiAccountEstatementService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    private CustomerDetails customerDetails;
    private AccountDetails accountDetails;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        customerDetails = new CustomerDetails();
        customerDetails.setId("customer-id");

        accountDetails = new AccountDetails();
        accountDetails.setAccountNumber("account-number");
        accountDetails.setAliasCustId("alias-customer-id");
        accountDetails.setPrimaryUser(true);
        accountDetails.setProfile(new Profile()); // Assuming Profile class is properly defined.
    }

    @Test
    public void testUpdateMultiProfiles_WithValidRequest() {
        // Given
        String[] selectedAccounts = {"account-id-1", "account-id-2"};
        PaperlessUpdateProfileRequest request = new PaperlessUpdateProfileRequest();
        request.setSelectedAccounts(selectedAccounts);
        request.setNewEmail("new.email@example.com");

        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(sessionProvider.getAccount("account-id-1")).thenReturn(accountDetails);
        when(sessionProvider.getAccount("account-id-2")).thenReturn(accountDetails);

        UpdateCustomerProfileResponse updateResponse = new UpdateCustomerProfileResponse();
        updateResponse.setSuccess(true);
        when(midTierServiceHelper.updateMultiProfiles(any(RequestPayload.class), anyString())).thenReturn(updateResponse);

        // When
        BaseMsecbffResponse response = multiAccountEstatementService.updateMultiProfiles(request, httpServletRequest);

        // Then
        assertTrue(Boolean.parseBoolean(response.getStatus()));
        verify(sessionProvider, times(1)).removeSessionAttribute(SESSION_PRECONSENT_INFO);
        verify(sessionProvider, times(1)).removeSessionAttribute(SESSION_PRECONSENT_TEXT);
        verify(sessionProvider, times(1)).removeSessionAttribute(SESSION_DISCLOSURE_INFO);
        verify(sessionProvider, times(1)).removeSessionAttribute(SESSION_DISCLOSURE_CONTENT);
    }

    @Test
    public void testUpdateMultiProfiles_WithNullRequest() {
        // Given
        PaperlessUpdateProfileRequest request = null;

        // When
        BaseMsecbffResponse response = multiAccountEstatementService.updateMultiProfiles(request, httpServletRequest);

        // Then
        assertEquals("true", response.getStatus()); // No email update, so status should remain true
    }

    @Test
    public void testUpdateMultiProfiles_WithEmptyEmail() {
        // Given
        String[] selectedAccounts = {"account-id-1"};
        PaperlessUpdateProfileRequest request = new PaperlessUpdateProfileRequest();
        request.setSelectedAccounts(selectedAccounts);
        request.setNewEmail("");

        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(sessionProvider.getAccount("account-id-1")).thenReturn(accountDetails);

        // When
        BaseMsecbffResponse response = multiAccountEstatementService.updateMultiProfiles(request, httpServletRequest);

        // Then
        assertTrue(Boolean.parseBoolean(response.getStatus())); // No email update, so status should remain true
    }

    @Test
    public void testPopulatePaperlessAccountList_WithValidAccounts() {
        // Given
        Set<AccountDetails> paperlessAccounts = new HashSet<>();
        String[] selectedAccounts = {"account-id-1"};

        when(sessionProvider.getAccount("account-id-1")).thenReturn(accountDetails);
        
        // When
        multiAccountEstatementService.populatePaperlessAccountList(paperlessAccounts, selectedAccounts);

        // Then
        assertFalse(paperlessAccounts.isEmpty());
        assertTrue(paperlessAccounts.contains(accountDetails));
        verify(sessionProvider, times(1)).setSessionAttribute(eq(SELECTED_PAPERLESS_ACCOUNTS), any());
    }

    @Test
    public void testPopulatePaperlessAccountList_WithInvalidAccount() {
        // Given
        Set<AccountDetails> paperlessAccounts = new HashSet<>();
        String[] selectedAccounts = {"invalid-account-id"};

        when(sessionProvider.getAccount("invalid-account-id")).thenReturn(null);

        // When
        multiAccountEstatementService.populatePaperlessAccountList(paperlessAccounts, selectedAccounts);

        // Then
        assertTrue(paperlessAccounts.isEmpty());
    }

    @Test
    public void testGenerateUpdateMuliProfilePayload_WithValidAccounts() {
        // Given
        Set<AccountDetails> updateEmailAccounts = new HashSet<>();
        updateEmailAccounts.add(accountDetails);

        // When
        RequestPayload payload = multiAccountEstatementService.generateUpdateMuliProfilePayload(updateEmailAccounts, "new.email@example.com");

        // Then
        assertNotNull(payload);
        assertEquals("customer-id", payload.getCustId());
        assertEquals("new.email@example.com", payload.getEmail());
        assertEquals(1, payload.getMultiProfilesRq().size());
    }

    @Test
    public void testIsAccountEligibleForEmail_WithEligibleAccount() {
        // Given
        AccountDetails eligibleAccount = new AccountDetails();
        Profile profile = new Profile();
        profile.setEmail(""); // Empty email
        eligibleAccount.setProfile(profile);

        // When
        boolean result = multiAccountEstatementService.isAccountEligibleForEmail(eligibleAccount);

        // Then
        assertTrue(result);
    }

    @Test
    public void testIsAccountEligibleForEmail_WithIneligibleAccount() {
        // Given
        AccountDetails ineligibleAccount = new AccountDetails();
        Profile profile = new Profile();
        profile.setEmail("existing.email@example.com"); // Existing email
        ineligibleAccount.setProfile(profile);

        // When
        boolean result = multiAccountEstatementService.isAccountEligibleForEmail(ineligibleAccount);

        // Then
        assertFalse(result);
    }

    @Test
    public void testPopulateUpdateEmailAccountList_WithEligibleAccounts() {
        // Given
        Set<AccountDetails> paperlessAccounts = new HashSet<>();
        paperlessAccounts.add(accountDetails);

        // When
        Set<AccountDetails> updateEmailAccounts = new HashSet<>();
        multiAccountEstatementService.populateUpdateEmailAccountList(updateEmailAccounts, paperlessAccounts);

        // Then
        assertFalse(updateEmailAccounts.isEmpty());
    }

    @Test
    public void testPopulateUpdateEmailAccountList_WithIneligibleAccounts() {
        // Given
        AccountDetails ineligibleAccount = new AccountDetails();
        Profile profile = new Profile();
        profile.setEmail("existing.email@example.com"); // Existing email
        ineligibleAccount.setProfile(profile);
        
        Set<AccountDetails> paperlessAccounts = new HashSet<>();
        paperlessAccounts.add(ineligibleAccount);

        // When
        Set<AccountDetails> updateEmailAccounts = new HashSet<>();
        multiAccountEstatementService.populateUpdateEmailAccountList(updateEmailAccounts, paperlessAccounts);

        // Then
        assertTrue(updateEmailAccounts.isEmpty());
    }

    @Test
    public void testUpdateMultiProfiles_WithException() {
        // Given
        String[] selectedAccounts = {"account-id-1"};
        PaperlessUpdateProfileRequest request = new PaperlessUpdateProfileRequest();
        request.setSelectedAccounts(selectedAccounts);
        request.setNewEmail("new.email@example.com");

        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(sessionProvider.getAccount("account-id-1")).thenReturn(accountDetails);
        when(midTierServiceHelper.updateMultiProfiles(any(RequestPayload.class), anyString())).thenThrow(new RuntimeException("Service error"));

        // When & Then
        assertThrows(MidtierUtilHelper.BusinessException.class, () -> {
            multiAccountEstatementService.updateMultiProfiles(request, httpServletRequest);
        });
    }
}
