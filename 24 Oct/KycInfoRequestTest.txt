package com.td.mbna.msec.kyc.dto;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class KycInfoRequestTest {

    @Test
    public void testDefaultConstructor() {
        KycInfoRequest kycInfoRequest = new KycInfoRequest();
        assertEquals("", kycInfoRequest.getPageId(), "Default pageId should be an empty string");
    }

    @Test
    public void testSetAndGetPageId() {
        KycInfoRequest kycInfoRequest = new KycInfoRequest();
        
        // Test setting a value
        String testPageId = "testPage";
        kycInfoRequest.setPageId(testPageId);
        assertEquals(testPageId, kycInfoRequest.getPageId(), "The pageId should be set correctly");

        // Test setting null
        kycInfoRequest.setPageId(null);
        assertNull(kycInfoRequest.getPageId(), "The pageId should be null after setting it to null");
    }

    @Test
    public void testToString() {
        KycInfoRequest kycInfoRequest = new KycInfoRequest();
        kycInfoRequest.setPageId("testPage");

        String expectedString = "com.td.mbna.msec.kyc.dto.KycInfoRequest@" +
                Integer.toHexString(System.identityHashCode(kycInfoRequest)) +
                "[pageId=testPage]";
        assertEquals(expectedString, kycInfoRequest.toString(), "toString() method should return the expected string");

        // Test with null pageId
        kycInfoRequest.setPageId(null);
        expectedString = "com.td.mbna.msec.kyc.dto.KycInfoRequest@" +
                Integer.toHexString(System.identityHashCode(kycInfoRequest)) +
                "[pageId=<null>]";
        assertEquals(expectedString, kycInfoRequest.toString(), "toString() method should handle null pageId");
    }

    @Test
    public void testHashCode() {
        KycInfoRequest kycInfoRequest1 = new KycInfoRequest();
        KycInfoRequest kycInfoRequest2 = new KycInfoRequest();
        assertEquals(kycInfoRequest1.hashCode(), kycInfoRequest2.hashCode(), "Hash codes should be equal for two default instances");

        kycInfoRequest1.setPageId("testPage");
        kycInfoRequest2.setPageId("testPage");
        assertEquals(kycInfoRequest1.hashCode(), kycInfoRequest2.hashCode(), "Hash codes should be equal when pageId is the same");
        
        kycInfoRequest2.setPageId("anotherPage");
        assertNotEquals(kycInfoRequest1.hashCode(), kycInfoRequest2.hashCode(), "Hash codes should be different when pageId is different");
    }

    @Test
    public void testEquals() {
        KycInfoRequest kycInfoRequest1 = new KycInfoRequest();
        KycInfoRequest kycInfoRequest2 = new KycInfoRequest();

        assertEquals(kycInfoRequest1, kycInfoRequest2, "Two default instances should be equal");

        kycInfoRequest1.setPageId("testPage");
        kycInfoRequest2.setPageId("testPage");
        assertEquals(kycInfoRequest1, kycInfoRequest2, "Instances with the same pageId should be equal");

        kycInfoRequest2.setPageId("anotherPage");
        assertNotEquals(kycInfoRequest1, kycInfoRequest2, "Instances with different pageId should not be equal");

        assertNotEquals(kycInfoRequest1, null, "An instance should not be equal to null");
        assertNotEquals(kycInfoRequest1, new Object(), "An instance should not be equal to an object of a different class");
    }

    @Test
    public void testEqualsWithNullField() {
        KycInfoRequest kycInfoRequest1 = new KycInfoRequest();
        KycInfoRequest kycInfoRequest2 = new KycInfoRequest();
        kycInfoRequest1.setPageId(null);
        kycInfoRequest2.setPageId(null);
        assertEquals(kycInfoRequest1, kycInfoRequest2, "Instances with null pageId should be equal");

        kycInfoRequest2.setPageId("testPage");
        assertNotEquals(kycInfoRequest1, kycInfoRequest2, "Instances with one null pageId and one non-null should not be equal");
    }
}
