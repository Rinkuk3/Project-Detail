package com.td.mbna.msec.notification.model;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CustomerNotificationAlertsTest {

    private CustomerNotificationAlerts alerts;

    @BeforeEach
    public void setUp() {
        alerts = CustomerNotificationAlerts.builder()
                .partyID("Party123")
                .editProcess("EditProcess123")
                .notificationAlertsList(Arrays.asList(new AccountNotificationAlerts()))
                .build();
    }

    @Test
    public void testGetAndSetPartyID() {
        alerts.setPartyID("NewPartyID");
        assertEquals("NewPartyID", alerts.getPartyID());
    }

    @Test
    public void testGetAndSetEditProcess() {
        alerts.setEditProcess("NewEditProcess");
        assertEquals("NewEditProcess", alerts.getEditProcess());
    }

    @Test
    public void testGetAndSetNotificationAlertsList() {
        AccountNotificationAlerts newAlert = new AccountNotificationAlerts();
        alerts.setNotificationAlertsList(Arrays.asList(newAlert));
        assertEquals(Arrays.asList(newAlert), alerts.getNotificationAlertsList());
    }

    @Test
    public void testEqualsAndHashCode() {
        CustomerNotificationAlerts alerts1 = CustomerNotificationAlerts.builder()
                .partyID("Party123")
                .editProcess("EditProcess123")
                .notificationAlertsList(Arrays.asList(new AccountNotificationAlerts()))
                .build();

        CustomerNotificationAlerts alerts2 = CustomerNotificationAlerts.builder()
                .partyID("Party123")
                .editProcess("EditProcess123")
                .notificationAlertsList(Arrays.asList(new AccountNotificationAlerts()))
                .build();

        // Test equality
        assertEquals(alerts1, alerts2);
        assertEquals(alerts1.hashCode(), alerts2.hashCode());

        // Test inequality
        alerts2.setPartyID("DifferentParty");
        assertNotEquals(alerts1, alerts2);
    }

    @Test
    public void testToString() {
        String expectedString = "CustomerNotificationAlerts(partyID=Party123, editProcess=EditProcess123, notificationAlertsList=[AccountNotificationAlerts()])";
        assertEquals(expectedString, alerts.toString());
    }

    @Test
    public void testBuilder() {
        CustomerNotificationAlerts builtAlerts = CustomerNotificationAlerts.builder()
                .partyID("Party456")
                .editProcess("EditProcess456")
                .notificationAlertsList(Arrays.asList(new AccountNotificationAlerts()))
                .build();

        assertEquals("Party456", builtAlerts.getPartyID());
        assertEquals("EditProcess456", builtAlerts.getEditProcess());
        assertNotNull(builtAlerts.getNotificationAlertsList());
        assertEquals(1, builtAlerts.getNotificationAlertsList().size());
    }

    @Test
    public void testSerialVersionUID() {
        // Check if the serialVersionUID matches
        assertEquals(-4871800013633484951L, CustomerNotificationAlerts.serialVersionUID);
    }
}
