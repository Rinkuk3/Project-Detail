package com.td.mbna.msec.nudge.model;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.td.mbna.msec.account.domain.mobile.FormVariable;

public class TargetURLTest {

    private TargetURL targetURL;
    private FormVariable formVariable;

    @BeforeEach
    public void setUp() {
        targetURL = new TargetURL();
        formVariable = mock(FormVariable.class); // Mocking FormVariable
    }

    @Test
    public void testGetAndSetMethod() {
        String expectedMethod = "POST";
        targetURL.setMethod(expectedMethod);
        assertEquals(expectedMethod, targetURL.getMethod());
    }

    @Test
    public void testGetAndSetAction() {
        String expectedAction = "submit";
        targetURL.setAction(expectedAction);
        assertEquals(expectedAction, targetURL.getAction());
    }

    @Test
    public void testGetAndSetFormVariables() {
        List<FormVariable> expectedFormVariables = new ArrayList<>();
        expectedFormVariables.add(formVariable);
        targetURL.setFormVariables(expectedFormVariables);
        assertEquals(expectedFormVariables, targetURL.getFormVariables());
    }

    @Test
    public void testHashCode() {
        targetURL.setMethod("POST");
        targetURL.setAction("submit");
        targetURL.setFormVariables(new ArrayList<>());
        
        int expectedHashCode = targetURL.hashCode();
        assertEquals(expectedHashCode, targetURL.hashCode());
    }

    @Test
    public void testEquals_SameObject() {
        assertTrue(targetURL.equals(targetURL));
    }

    @Test
    public void testEquals_NullObject() {
        assertFalse(targetURL.equals(null));
    }

    @Test
    public void testEquals_DifferentClass() {
        assertFalse(targetURL.equals("Some String"));
    }

    @Test
    public void testEquals_DifferentValues() {
        TargetURL anotherTargetURL = new TargetURL();
        anotherTargetURL.setMethod("GET");
        anotherTargetURL.setAction("submit");
        anotherTargetURL.setFormVariables(new ArrayList<>());

        assertFalse(targetURL.equals(anotherTargetURL));
    }

    @Test
    public void testEquals_SameValues() {
        TargetURL anotherTargetURL = new TargetURL();
        anotherTargetURL.setMethod("POST");
        anotherTargetURL.setAction("submit");
        anotherTargetURL.setFormVariables(new ArrayList<>());

        targetURL.setMethod("POST");
        targetURL.setAction("submit");
        targetURL.setFormVariables(new ArrayList<>());

        assertTrue(targetURL.equals(anotherTargetURL));
    }

    @Test
    public void testEquals_NullAction() {
        TargetURL anotherTargetURL = new TargetURL();
        targetURL.setMethod("POST");
        targetURL.setAction(null);
        anotherTargetURL.setMethod("POST");
        anotherTargetURL.setAction(null);
        
        assertTrue(targetURL.equals(anotherTargetURL));
    }
    
    @Test
    public void testEquals_NullFormVariables() {
        TargetURL anotherTargetURL = new TargetURL();
        targetURL.setMethod("POST");
        targetURL.setAction("submit");
        targetURL.setFormVariables(null);
        anotherTargetURL.setMethod("POST");
        anotherTargetURL.setAction("submit");
        anotherTargetURL.setFormVariables(null);
        
        assertTrue(targetURL.equals(anotherTargetURL));
    }
}
