package com.td.mbna.msec.pin.resource;

import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.pin.application.ChangePinService;
import com.td.mbna.msec.pin.application.PinTimeoutService;
import com.td.mbna.msec.pin.application.UnblockPinService;
import com.td.mbna.msec.pin.application.ViewPinService;
import com.td.mbna.msec.pin.domain.ChangePinRequest;
import com.td.mbna.msec.pin.domain.ViewPin;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.ModelAndView;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class PinResourceTest {

    @InjectMocks
    private PinResource pinResource;

    @Mock
    private ViewPinService viewPinService;

    @Mock
    private PinTimeoutService pinTimeoutService;

    @Mock
    private UnblockPinService unblockPinService;

    @Mock
    private ChangePinService changePinService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetPin() throws Exception {
        // Arrange
        ViewPin expectedViewPin = new ViewPin();
        expectedViewPin.setPin("1234");
        when(viewPinService.getPin()).thenReturn(expectedViewPin);

        // Act
        ViewPin actualViewPin = pinResource.getPin();

        // Assert
        assertEquals(expectedViewPin, actualViewPin);
        verify(viewPinService, times(1)).getPin();
    }

    @Test
    public void testSetPinTimeOut() {
        // Arrange
        BaseMsecbffResponse expectedResponse = new BaseMsecbffResponse();
        when(pinTimeoutService.setPinTimeout()).thenReturn(expectedResponse);

        // Act
        BaseMsecbffResponse actualResponse = pinResource.setPinTimeOut();

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(pinTimeoutService, times(1)).setPinTimeout();
    }

    @Test
    public void testUnblockPin() {
        // Arrange
        BaseMsecbffResponse expectedResponse = new BaseMsecbffResponse();
        when(unblockPinService.unblockPin()).thenReturn(expectedResponse);

        // Act
        BaseMsecbffResponse actualResponse = pinResource.unblockPin();

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(unblockPinService, times(1)).unblockPin();
    }

    @Test
    public void testChangePinValidate() {
        // Arrange
        BaseMsecbffResponse expectedResponse = new BaseMsecbffResponse();
        when(changePinService.changePinValidate()).thenReturn(expectedResponse);

        // Act
        BaseMsecbffResponse actualResponse = pinResource.changePinValidate();

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(changePinService, times(1)).changePinValidate();
    }

    @Test
    public void testChangePinSubmit() throws Exception {
        // Arrange
        ChangePinRequest request = new ChangePinRequest();
        request.setPinNumber("1234");
        request.setRetryPinNumber("1234");
        
        BaseMsecbffResponse expectedResponse = new BaseMsecbffResponse();
        when(changePinService.changePinSubmit(request.getPinNumber(), request.getRetryPinNumber()))
                .thenReturn(expectedResponse);

        // Act
        BaseMsecbffResponse actualResponse = pinResource.changePinSubmit(request);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(changePinService, times(1)).changePinSubmit(request.getPinNumber(), request.getRetryPinNumber());
    }

    @Test
    public void testHandleChangePin() {
        // Arrange
        ModelAndView expectedModelAndView = new ModelAndView();
        when(changePinService.handelChangePin()).thenReturn(expectedModelAndView);

        // Act
        ModelAndView actualModelAndView = pinResource.handleChangePin();

        // Assert
        assertEquals(expectedModelAndView, actualModelAndView);
        verify(changePinService, times(1)).handelChangePin();
    }

    @Test
    public void testHandleChangePinServlet() {
        // Arrange
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ModelAndView expectedModelAndView = new ModelAndView();
        when(changePinService.handelChangePinServlet(request, response)).thenReturn(expectedModelAndView);

        // Act
        ModelAndView actualModelAndView = pinResource.handleChangePinServlet(request, response);

        // Assert
        assertEquals(expectedModelAndView, actualModelAndView);
        verify(changePinService, times(1)).handelChangePinServlet(request, response);
    }
}
