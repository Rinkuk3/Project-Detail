package com.td.mbna.msec.interceptor.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class InterceptorItemInWcmTest {

    private InterceptorItemInWcm interceptorItemInWcm;
    private Button button;
    private List<Button> buttons;

    @BeforeEach
    void setUp() {
        interceptorItemInWcm = new InterceptorItemInWcm();
        button = new Button();
        buttons = Arrays.asList(button);
    }

    @Test
    void testSetAndGetId() {
        interceptorItemInWcm.setId("12345");
        assertEquals("12345", interceptorItemInWcm.getId());
    }

    @Test
    void testSetAndGetName() {
        interceptorItemInWcm.setName("Test Name");
        assertEquals("Test Name", interceptorItemInWcm.getName());
    }

    @Test
    void testSetAndGetDataAuditMessage() {
        interceptorItemInWcm.setDataAuditMessage("Audit Message");
        assertEquals("Audit Message", interceptorItemInWcm.getDataAuditMessage());
    }

    @Test
    void testSetAndGetImageUrl() {
        interceptorItemInWcm.setImageurl("http://image.url");
        assertEquals("http://image.url", interceptorItemInWcm.getImageurl());
    }

    @Test
    void testSetAndGetTitle() {
        interceptorItemInWcm.setTitle("Title");
        assertEquals("Title", interceptorItemInWcm.getTitle());
    }

    @Test
    void testSetAndGetBodyCopy() {
        interceptorItemInWcm.setBodycopy("Body Copy Text");
        assertEquals("Body Copy Text", interceptorItemInWcm.getBodycopy());
    }

    @Test
    void testSetAndGetLegalNote() {
        interceptorItemInWcm.setLegalnote("Legal Note Text");
        assertEquals("Legal Note Text", interceptorItemInWcm.getLegalnote());
    }

    @Test
    void testSetAndGetContent() {
        interceptorItemInWcm.setContent("Content text");
        assertEquals("Content text", interceptorItemInWcm.getContent());
    }

    @Test
    void testSetAndGetClosable() {
        interceptorItemInWcm.setClosable(true);
        assertTrue(interceptorItemInWcm.isClosable());
    }

    @Test
    void testSetAndGetIsMarketingIntercept() {
        interceptorItemInWcm.setMarketingIntercept(true);
        assertTrue(interceptorItemInWcm.isMarketingIntercept());
    }

    @Test
    void testSetAndGetButtons() {
        interceptorItemInWcm.setButtons(buttons);
        assertEquals(buttons, interceptorItemInWcm.getButtons());
    }

    @Test
    void testSetAndGetLink() {
        interceptorItemInWcm.setLink(button);
        assertEquals(button, interceptorItemInWcm.getLink());
    }

    @Test
    void testSetAndGetLabel() {
        interceptorItemInWcm.setLabel(button);
        assertEquals(button, interceptorItemInWcm.getLabel());
    }

    @Test
    void testSetAndGetPublish() {
        interceptorItemInWcm.setPublish(true);
        assertTrue(interceptorItemInWcm.isPublish());
    }

    @Test
    void testSetAndGetAccountLevel() {
        interceptorItemInWcm.setAccountLevel(true);
        assertTrue(interceptorItemInWcm.isAccountLevel());
    }

    @Test
    void testSetAndGetDuration() {
        interceptorItemInWcm.setDuration(5);
        assertEquals(5, interceptorItemInWcm.getDuration());
    }

    @Test
    void testSetAndGetCounter() {
        interceptorItemInWcm.setCounter(10);
        assertEquals(10, interceptorItemInWcm.getCounter());
    }

    @Test
    void testSetAndGetRequiredHybridAccount() {
        interceptorItemInWcm.setReqiredHybridAccount(true);
        assertTrue(interceptorItemInWcm.isReqiredHybridAccount());
    }

    @Test
    void testSetAndGetAccountCurrentSetting() {
        interceptorItemInWcm.setAccountCurrentSetting("Current Setting");
        assertEquals("Current Setting", interceptorItemInWcm.getAccountCurrentSetting());
    }

    @Test
    void testSetAndGetUcid() {
        interceptorItemInWcm.setUcid("UCID123");
        assertEquals("UCID123", interceptorItemInWcm.getUcid());
    }

    @Test
    void testSetAndGetCardRole() {
        interceptorItemInWcm.setCardRole("Card Role");
        assertEquals("Card Role", interceptorItemInWcm.getCardRole());
    }

    @Test
    void testSetAndGetFirstTimeLogin() {
        interceptorItemInWcm.setFirstTimeLogin(true);
        assertTrue(interceptorItemInWcm.isFirstTimeLogin());
    }

    @Test
    void testSetAndGetCheckBTDeeplinkAndKyc() {
        interceptorItemInWcm.setCheckBTDeeplinkAndKyc(true);
        assertTrue(interceptorItemInWcm.isCheckBTDeeplinkAndKyc());
    }

    @Test
    void testSetAndGetDeeplinkSuppressed() {
        interceptorItemInWcm.setDeeplinkSuppressed(true);
        assertTrue(interceptorItemInWcm.isDeeplinkSuppressed());
    }

    @Test
    void testSetAndGetSuppressedFrom() {
        interceptorItemInWcm.setSuppressedFrom(true);
        assertTrue(interceptorItemInWcm.isSuppressedFrom());
    }

    @Test
    void testSetAndGetSuppressedTo() {
        interceptorItemInWcm.setSuppressedTo(true);
        assertTrue(interceptorItemInWcm.isSuppressedTo());
    }

    @Test
    void testSetAndGetDisplayDay() {
        interceptorItemInWcm.setDisplayDay("Monday");
        assertEquals("Monday", interceptorItemInWcm.getDisplayDay());
    }

    @Test
    void testSetAndGetIncludeProductionCode() {
        interceptorItemInWcm.setIncludeProductionCode("IncludeCode");
        assertEquals("IncludeCode", interceptorItemInWcm.getIncludeProductionCode());
    }

    @Test
    void testSetAndGetExcludeProductionCode() {
        interceptorItemInWcm.setExcludeProductionCode("ExcludeCode");
        assertEquals("ExcludeCode", interceptorItemInWcm.getExcludeProductionCode());
    }

    @Test
    void testSetAndGetNewlyOpenedAccount() {
        interceptorItemInWcm.setNewlyOpenedaccount(1);
        assertEquals(1, interceptorItemInWcm.getNewlyOpenedaccount());
    }

    @Test
    void testSetAndGetStartDate() {
        interceptorItemInWcm.setStartDate_yyyyMMdd("20231010");
        assertEquals("20231010", interceptorItemInWcm.getStartDate_yyyyMMdd());
    }

    @Test
    void testSetAndGetDurationForMessageDisplay() {
        interceptorItemInWcm.setDurationForMessageDisplay(30);
        assertEquals(30, interceptorItemInWcm.getDurationForMessageDisplay());
    }

    @Test
    void testSetAndGetStatementCycleCount() {
        interceptorItemInWcm.setStatmentCycleCnt(3);
        assertEquals(3, interceptorItemInWcm.getStatmentCycleCnt());
    }

    @Test
    void testSetAndGetTransaction() {
        interceptorItemInWcm.setTransaction("TXN123");
        assertEquals("TXN123", interceptorItemInWcm.getTransaction());
    }

    @Test
    void testSetAndGetOfferType() {
        interceptorItemInWcm.setOfferType("Offer Type");
        assertEquals("Offer Type", interceptorItemInWcm.getOfferType());
    }

    @Test
    void testSetAndGetOfferId() {
        interceptorItemInWcm.setOfferId("Offer123");
        assertEquals("Offer123", interceptorItemInWcm.getOfferId());
    }

    @Test
    void testSetAndGetAllowedBalanceProtection() {
        interceptorItemInWcm.setAllowedBalanceProtection(true);
        assertTrue(interceptorItemInWcm.isAllowedBalanceProtection());
    }

    @Test
    void testSetAndGetAllowedBalanceTransfer() {
        interceptorItemInWcm.setAllowedBalanceTransfer(true);
        assertTrue(interceptorItemInWcm.isAllowedBalanceTransfer());
    }

    @Test
    void testSetAndGetAllowedCreditLimitIncrease() {
        interceptorItemInWcm.setAllowedCreditLimitIncrease(true);
        assertTrue(interceptorItemInWcm.isAllowedCreditLimitIncrease());
    }

    @Test
    void testSetAndGetAllowedPaperSuppression() {
        interceptorItemInWcm.setAllowedPaperSuppression(true);
        assertTrue(interceptorItemInWcm.isAllowedPaperSuppression());
    }

    @Test
    void testSetAndGetAllowedSpecialOffers() {
        interceptorItemInWcm.setAllowedSpecialOffers(true);
        assertTrue(interceptorItemInWcm.isAllowedSpecialOffers());
    }

    @Test
    void testSetAndGetAllowedStandardEForms() {
        interceptorItemInWcm.setAllowedStandardEForms(true);
        assertTrue(interceptorItemInWcm.isAllowedStandardEForms());
    }

    @Test
    void testSetAndGetAllowedToAddAU() {
        interceptorItemInWcm.setAllowedToAddAU(true);
        assertTrue(interceptorItemInWcm.isAllowedToAddAU());
    }

    @Test
    void testSetAndGetEligibleForIPOffer() {
        interceptorItemInWcm.setEligibleForIPOffer(true);
        assertTrue(interceptorItemInWcm.isEligibleForIPOffer());
    }

    @Test
    void testSetAndGetRequireBtOffer() {
        interceptorItemInWcm.setRequireBtOffer(true);
        assertTrue(interceptorItemInWcm.isRequireBtOffer());
    }

    @Test
    void testSetAndGetRequireBtDuration() {
        interceptorItemInWcm.setRequireBtDuration(true);
        assertTrue(interceptorItemInWcm.isRequireBtDuration());
    }

    @Test
    void testSetAndGetRequireBtExpiryDate() {
        interceptorItemInWcm.setRequireBtExpiryDate(true);
        assertTrue(interceptorItemInWcm.isRequireBtExpiryDate());
    }

    @Test
    void testSetAndGetRequiredBpOffer() {
        interceptorItemInWcm.setRequiredBpOffer(true);
        assertTrue(interceptorItemInWcm.isRequiredBpOffer());
    }

    @Test
    void testSetAndGetRequiredCliOffer() {
        interceptorItemInWcm.setRequiredCliOffer(true);
        assertTrue(interceptorItemInWcm.isRequiredCliOffer());
    }

    @Test
    void testSetAndGetRequiredProductUpgradeOffer() {
        interceptorItemInWcm.setRequiredProductUpgradeOffer(true);
        assertTrue(interceptorItemInWcm.isRequiredProductUpgradeOffer());
    }

    @Test
    void testSetAndGetRequiredIpEligibleTrans() {
        interceptorItemInWcm.setRequiredIpEligibleTrans(true);
        assertTrue(interceptorItemInWcm.isRequiredIpEligibleTrans());
    }

    @Test
    void testSetAndGetEmailRequired() {
        interceptorItemInWcm.setEmailRequired(true);
        assertTrue(interceptorItemInWcm.isEmailRequired());
    }
}
