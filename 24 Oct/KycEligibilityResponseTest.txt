package com.td.mbna.msec.kyc.dto;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class KycEligibilityResponseTest {

    @Test
    public void testDefaultConstructor() {
        KycEligibilityResponse response = new KycEligibilityResponse();
        assertFalse(response.getEligibility(), "Default eligibility should be false");
    }

    @Test
    public void testSetAndGetEligibility() {
        KycEligibilityResponse response = new KycEligibilityResponse();
        response.setEligibility(true);
        assertTrue(response.getEligibility(), "The eligibility should be set and retrieved correctly");
        
        response.setEligibility(false);
        assertFalse(response.getEligibility(), "The eligibility should be set to false correctly");
    }

    @Test
    public void testToString() {
        KycEligibilityResponse response = new KycEligibilityResponse();
        response.setEligibility(true);
        String expectedString = "com.td.mbna.msec.kyc.dto.KycEligibilityResponse@" + 
                Integer.toHexString(System.identityHashCode(response)) + "[eligibility=true]";
        assertEquals(expectedString, response.toString(), "toString() method should return the expected string");
        
        response.setEligibility(null);
        expectedString = "com.td.mbna.msec.kyc.dto.KycEligibilityResponse@" + 
                Integer.toHexString(System.identityHashCode(response)) + "[eligibility=<null>]";
        assertEquals(expectedString, response.toString(), "toString() method should handle null eligibility");
    }

    @Test
    public void testHashCode() {
        KycEligibilityResponse response1 = new KycEligibilityResponse();
        KycEligibilityResponse response2 = new KycEligibilityResponse();
        assertEquals(response1.hashCode(), response2.hashCode(), "Hash codes should be equal for two default instances");

        response1.setEligibility(true);
        response2.setEligibility(true);
        assertEquals(response1.hashCode(), response2.hashCode(), "Hash codes should be equal when eligibility is the same");
        
        response2.setEligibility(false);
        assertNotEquals(response1.hashCode(), response2.hashCode(), "Hash codes should be different when eligibility is different");
    }

    @Test
    public void testEquals() {
        KycEligibilityResponse response1 = new KycEligibilityResponse();
        KycEligibilityResponse response2 = new KycEligibilityResponse();

        assertEquals(response1, response2, "Two default instances should be equal");

        response1.setEligibility(true);
        response2.setEligibility(true);
        assertEquals(response1, response2, "Instances with the same eligibility should be equal");
        
        response2.setEligibility(false);
        assertNotEquals(response1, response2, "Instances with different eligibility should not be equal");

        assertNotEquals(response1, null, "An instance should not be equal to null");
        assertNotEquals(response1, new Object(), "An instance should not be equal to an object of a different class");
    }

    @Test
    public void testEqualsWithNullEligibility() {
        KycEligibilityResponse response1 = new KycEligibilityResponse();
        KycEligibilityResponse response2 = new KycEligibilityResponse();
        response1.setEligibility(null);
        response2.setEligibility(null);
        assertEquals(response1, response2, "Instances with null eligibility should be equal");

        response2.setEligibility(true);
        assertNotEquals(response1, response2, "Instances with one null eligibility and one non-null should not be equal");
    }
}
