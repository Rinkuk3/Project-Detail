package com.td.mbna.msec.interceptor.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ButtonTest {

    private Button button;

    @BeforeEach
    void setUp() {
        button = new Button();
    }

    @Test
    void testSetAndGetText() {
        String text = "Click Me";
        button.setText(text);
        assertEquals(text, button.getText());

        button.setText(null);
        assertNull(button.getText());
    }

    @Test
    void testSetAndGetPrimary() {
        button.setPrimary(true);
        assertTrue(button.isPrimary());

        button.setPrimary(false);
        assertFalse(button.isPrimary());
    }

    @Test
    void testSetAndGetMethod() {
        String method = "POST";
        button.setMethod(method);
        assertEquals(method, button.getMethod());

        button.setMethod(null);
        assertNull(button.getMethod());
    }

    @Test
    void testSetAndGetActionURL() {
        String actionURL = "http://example.com";
        button.setActionURL(actionURL);
        assertEquals(actionURL, button.getActionURL());

        button.setActionURL(null);
        assertNull(button.getActionURL());
    }

    @Test
    void testSetAndGetDataAuditEventcode() {
        String eventCode = "EVENT_123";
        button.setDataAuditEventcode(eventCode);
        assertEquals(eventCode, button.getDataAuditEventcode());

        button.setDataAuditEventcode(null);
        assertNull(button.getDataAuditEventcode());
    }

    @Test
    void testSetAndGetDataAuditMessage() {
        String message = "Audit message";
        button.setDataAuditMessage(message);
        assertEquals(message, button.getDataAuditMessage());

        button.setDataAuditMessage(null);
        assertNull(button.getDataAuditMessage());
    }

    @Test
    void testSetAndGetDataAnalyticsClick() {
        String analyticsClick = "analytics123";
        button.setDataAnalyticsClick(analyticsClick);
        assertEquals(analyticsClick, button.getDataAnalyticsClick());

        button.setDataAnalyticsClick(null);
        assertNull(button.getDataAnalyticsClick());
    }

    @Test
    void testSetAndGetDispositionStatus() {
        String status = "approved";
        button.setDispositionStatus(status);
        assertEquals(status, button.getDispositionStatus());

        button.setDispositionStatus(null);
        assertNull(button.getDispositionStatus());
    }

    @Test
    void testSetAndGetBusinessEventReasonView() {
        String reasonView = "reason123";
        button.setBusinessEventReasonView(reasonView);
        assertEquals(reasonView, button.getBusinessEventReasonView());

        button.setBusinessEventReasonView(null);
        assertNull(button.getBusinessEventReasonView());
    }

    @Test
    void testEquals() {
        Button anotherButton = new Button();
        assertTrue(button.equals(button)); // Reflexivity

        assertFalse(button.equals(null)); // Null check
        assertFalse(button.equals("Some String")); // Type check

        // Test equality for all fields
        button.setText("Click Me");
        anotherButton.setText("Click Me");
        button.setPrimary(true);
        anotherButton.setPrimary(true);
        assertTrue(button.equals(anotherButton));

        anotherButton.setText("Don't Click Me");
        assertFalse(button.equals(anotherButton));
    }

    @Test
    void testHashCode() {
        button.setText("Click Me");
        button.setPrimary(true);
        
        // Generate expected hash code manually
        int expectedHashCode = 1;
        expectedHashCode = 31 * expectedHashCode + (button.getText() == null ? 0 : button.getText().hashCode());
        expectedHashCode = 31 * expectedHashCode + (button.isPrimary() ? 1 : 0);
        
        assertEquals(expectedHashCode, button.hashCode());
    }

    @Test
    void testToString() {
        button.setText("Click Me");
        button.setPrimary(true);
        
        String expectedString = "Button(text=Click Me, primary=true, method=null, actionURL=null, dataAuditEventcode=null, dataAuditMessage=null, dataAnalyticsClick=null, dispositionStatus=null, businessEventReasonView=null)";
        
        assertTrue(button.toString().contains("Button"));
        assertTrue(button.toString().contains("text=Click Me"));
        assertTrue(button.toString().contains("primary=true"));
    }
}
