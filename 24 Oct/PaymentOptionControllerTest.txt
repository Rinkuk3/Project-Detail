package com.td.mbna.msec.paymentoption.controller;

import com.td.mbna.msec.common.domain.DisclosureDetails;
import com.td.mbna.msec.paymentoption.model.EnrolledForPAD;
import com.td.mbna.msec.paymentoption.model.PadInfo;
import com.td.mbna.msec.paymentoption.model.SubmitfPadInfoResponse;
import com.td.mbna.msec.paymentoption.service.PaymentOptionService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class PaymentOptionControllerTest {

    @InjectMocks
    private PaymentOptionController paymentOptionController;

    @Mock
    private PaymentOptionService paymentOptionService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCheckPADforAccount() {
        // Arrange
        String accountNumber = "123456";
        EnrolledForPAD expectedResponse = new EnrolledForPAD();
        when(paymentOptionService.hasEnrolledPAD(accountNumber)).thenReturn(expectedResponse);

        // Act
        EnrolledForPAD actualResponse = paymentOptionController.checkPADforAccount(accountNumber);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(paymentOptionService, times(1)).hasEnrolledPAD(accountNumber);
    }

    @Test
    public void testVerifyPadInfo() {
        // Arrange
        PadInfo padInfo = new PadInfo();
        PadInfo expectedResponse = new PadInfo();
        when(paymentOptionService.verifyPadInfo(padInfo)).thenReturn(expectedResponse);

        // Act
        PadInfo actualResponse = paymentOptionController.verifyPadInfo(padInfo);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(paymentOptionService, times(1)).verifyPadInfo(padInfo);
    }

    @Test
    public void testGetEaaReview() {
        // Arrange
        DisclosureDetails expectedResponse = new DisclosureDetails();
        when(paymentOptionService.getDisclosure()).thenReturn(expectedResponse);

        // Act
        DisclosureDetails actualResponse = paymentOptionController.getEaaReview();

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(paymentOptionService, times(1)).getDisclosure();
    }

    @Test
    public void testSubmitPadInfo() {
        // Arrange
        PadInfo padInfo = new PadInfo();
        SubmitfPadInfoResponse expectedResponse = new SubmitfPadInfoResponse();
        when(paymentOptionService.submitPadInfo(padInfo)).thenReturn(expectedResponse);

        // Act
        SubmitfPadInfoResponse actualResponse = paymentOptionController.submitPadInfo(padInfo);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(paymentOptionService, times(1)).submitPadInfo(padInfo);
    }
}
