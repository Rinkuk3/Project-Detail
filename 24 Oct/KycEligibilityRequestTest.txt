package com.td.mbna.msec.kyc.dto;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class KycEligibilityRequestTest {

    @Test
    public void testDefaultConstructor() {
        KycEligibilityRequest request = new KycEligibilityRequest();
        assertEquals("", request.getPageId(), "Default pageId should be an empty string");
    }

    @Test
    public void testSetAndGetPageId() {
        KycEligibilityRequest request = new KycEligibilityRequest();
        String testPageId = "testPageId";
        request.setPageId(testPageId);
        assertEquals(testPageId, request.getPageId(), "The pageId should be set and retrieved correctly");
    }

    @Test
    public void testToString() {
        KycEligibilityRequest request = new KycEligibilityRequest();
        request.setPageId("testPageId");
        String expectedString = "com.td.mbna.msec.kyc.dto.KycEligibilityRequest@" + 
                Integer.toHexString(System.identityHashCode(request)) + "[pageId=testPageId]";
        assertEquals(expectedString, request.toString(), "toString() method should return the expected string");
    }

    @Test
    public void testHashCode() {
        KycEligibilityRequest request1 = new KycEligibilityRequest();
        KycEligibilityRequest request2 = new KycEligibilityRequest();
        assertEquals(request1.hashCode(), request2.hashCode(), "Hash codes should be equal for two default instances");

        request1.setPageId("testPageId");
        request2.setPageId("testPageId");
        assertEquals(request1.hashCode(), request2.hashCode(), "Hash codes should be equal when pageId is the same");
        
        request2.setPageId("differentPageId");
        assertNotEquals(request1.hashCode(), request2.hashCode(), "Hash codes should be different when pageId is different");
    }

    @Test
    public void testEquals() {
        KycEligibilityRequest request1 = new KycEligibilityRequest();
        KycEligibilityRequest request2 = new KycEligibilityRequest();

        assertEquals(request1, request2, "Two default instances should be equal");

        request1.setPageId("testPageId");
        request2.setPageId("testPageId");
        assertEquals(request1, request2, "Instances with the same pageId should be equal");
        
        request2.setPageId("differentPageId");
        assertNotEquals(request1, request2, "Instances with different pageId should not be equal");

        assertNotEquals(request1, null, "An instance should not be equal to null");
        assertNotEquals(request1, new Object(), "An instance should not be equal to an object of a different class");
    }

    @Test
    public void testEqualsWithNullPageId() {
        KycEligibilityRequest request1 = new KycEligibilityRequest();
        KycEligibilityRequest request2 = new KycEligibilityRequest();
        request1.setPageId(null);
        request2.setPageId(null);
        assertEquals(request1, request2, "Instances with null pageId should be equal");

        request2.setPageId("someValue");
        assertNotEquals(request1, request2, "Instances with one null pageId and one non-null should not be equal");
    }
}
