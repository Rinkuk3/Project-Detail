package com.td.mbna.msec.pin.application.impl;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.INVALID;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.NOT_AUTHORIZED_ERROR;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.PINEXPIRED;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.SUCCESS;
import static com.td.mbna.msec.common.infrastructure.util.PinUtil.INVALID_ACCOUNT_ERROR;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.BaseCommonServiceImpl;
import com.td.mbna.msec.common.domain.BaseMsecbffResponse;
import com.td.mbna.msec.common.infrastructure.util.PinUtil;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.customer.domain.CustomerDetails;
import com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.RequestPayload;
import com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.ResponsePayload;
import com.td.mbna.msec.midtier.pinmanagement.payload.unlockpin.UnblockPinResponse;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class UnblockPinServiceImplTest {

    @InjectMocks
    private UnblockPinServiceImpl unblockPinService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private PinUtil pinUtil;

    @Mock
    private CustomerDetails customerDetails;

    @Mock
    private AccountDetails accountDetails;

    @Mock
    private UnblockPinResponse unblockPinResponse;

    @Mock
    private ResponsePayload responsePayload;

    @Mock
    private MbnaLogger logger; // Logger mock if needed

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUnblockPin_WithNullCurrentAccount() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(accountDetails);
        when(accountDetails.getAccountId()).thenReturn("12345");
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);
        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(customerDetails.getId()).thenReturn("custId");
        when(accountDetails.getPaaSequenceNumber()).thenReturn(1);
        when(accountDetails.getAliasCustId()).thenReturn("aliasCustId");
        when(pinUtil.checkPinSessionExpired(anyLong(), anyString())).thenReturn(false);
        
        RequestPayload unblockPinRqPayload = new RequestPayload();
        unblockPinRqPayload.setCustId("custId");
        unblockPinRqPayload.setAcctId("12345");
        unblockPinRqPayload.setSequenceNumber("1");
        unblockPinRqPayload.setSendPINChgScript(true);
        unblockPinRqPayload.setPartyKey("aliasCustId");

        // Mock midTierServiceHelper behavior
        when(midTierServiceHelper.unblockPin(any(), anyString())).thenReturn(unblockPinResponse);
        when(unblockPinResponse.getResponsePayload()).thenReturn(responsePayload);
        when(responsePayload.getStatus()).thenReturn(true);
        
        // Act
        BaseMsecbffResponse response = unblockPinService.unblockPin();

        // Assert
        assertEquals(SUCCESS, response.getStatus());
        assertEquals("", response.getErrorCode());
    }

    @Test
    void testUnblockPin_WithNotAuthorized() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(false);
        
        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            unblockPinService.unblockPin();
        });
        assertEquals(NOT_AUTHORIZED_ERROR, exception.getMessage());
    }

    @Test
    void testUnblockPin_WithNullAccount() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        when(sessionProvider.getCurrentOrRequestedAccount()).thenReturn(null);

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            unblockPinService.unblockPin();
        });
        assertEquals(INVALID_ACCOUNT_ERROR, exception.getMessage());
    }

    @Test
    void testUnblockPin_WithUAPNotAuthenticated() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);
        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(customerDetails.getId()).thenReturn("custId");
        when(accountDetails.getAccountId()).thenReturn("12345");
        when(pinUtil.checkPinSessionExpired(anyLong(), anyString())).thenReturn(false);
        when(accountDetails.getPaaSequenceNumber()).thenReturn(1);
        when(accountDetails.getAliasCustId()).thenReturn("aliasCustId");
        
        // Simulate UAP not authenticated
        when(pinUtil.isUAPAuthenticated(anyString())).thenReturn(false);

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            unblockPinService.unblockPin();
        });
        assertEquals(INVALID, exception.getMessage());
    }

    @Test
    void testUnblockPin_WithExpiredSession() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);
        when(sessionProvider.getSessionCustomer()).thenReturn(customerDetails);
        when(customerDetails.getId()).thenReturn("custId");
        when(accountDetails.getAccountId()).thenReturn("12345");
        when(pinUtil.checkPinSessionExpired(anyLong(), anyString())).thenReturn(true);
        
        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            unblockPinService.unblockPin();
        });
        assertEquals(PINEXPIRED, exception.getMessage());
    }

    @Test
    void testIsAuthorized_WithAllowedPinManagement() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(true);

        // Act
        boolean isAuthorized = unblockPinService.isAuthorized();

        // Assert
        assertTrue(isAuthorized);
    }

    @Test
    void testIsAuthorized_WithNotAllowedPinManagement() {
        // Arrange
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(accountDetails.isAllowedPinManagement()).thenReturn(false);

        // Act
        boolean isAuthorized = unblockPinService.isAuthorized();

        // Assert
        assertFalse(isAuthorized);
    }
}
