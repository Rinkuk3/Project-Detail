package com.td.mbna.msec.notification.model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class SessionManagementTest {

    private SessionManagement sessionManagement;

    @BeforeEach
    public void setUp() {
        sessionManagement = new SessionManagement();
        sessionManagement.setSuccessUrl("https://example.com/success");
        sessionManagement.setCancelUrl("https://example.com/cancel");
        sessionManagement.setKeepAliveUrl("/waw/mbna/keepAlive");
        sessionManagement.setSessionTimeoutUrl("https://example.com/sessionTimeout");
    }

    @Test
    public void testGetAndSetSuccessUrl() {
        sessionManagement.setSuccessUrl("https://newexample.com/success");
        assertEquals("https://newexample.com/success", sessionManagement.getSuccessUrl());
    }

    @Test
    public void testGetAndSetCancelUrl() {
        sessionManagement.setCancelUrl("https://newexample.com/cancel");
        assertEquals("https://newexample.com/cancel", sessionManagement.getCancelUrl());
    }

    @Test
    public void testGetAndSetKeepAliveUrl() {
        sessionManagement.setKeepAliveUrl("/new/keepAlive");
        assertEquals("/new/keepAlive", sessionManagement.getKeepAliveUrl());
    }

    @Test
    public void testGetAndSetSessionTimeoutUrl() {
        sessionManagement.setSessionTimeoutUrl("https://newexample.com/sessionTimeout");
        assertEquals("https://newexample.com/sessionTimeout", sessionManagement.getSessionTimeoutUrl());
    }

    @Test
    public void testDefaultKeepAliveUrl() {
        assertEquals("/waw/mbna/keepAlive", sessionManagement.getKeepAliveUrl());
    }

    @Test
    public void testEqualsAndHashCode() {
        SessionManagement sm1 = new SessionManagement();
        sm1.setSuccessUrl("https://example.com/success");
        sm1.setCancelUrl("https://example.com/cancel");
        sm1.setKeepAliveUrl("/waw/mbna/keepAlive");
        sm1.setSessionTimeoutUrl("https://example.com/sessionTimeout");

        SessionManagement sm2 = new SessionManagement();
        sm2.setSuccessUrl("https://example.com/success");
        sm2.setCancelUrl("https://example.com/cancel");
        sm2.setKeepAliveUrl("/waw/mbna/keepAlive");
        sm2.setSessionTimeoutUrl("https://example.com/sessionTimeout");

        // Test equality
        assertEquals(sm1, sm2);
        assertEquals(sm1.hashCode(), sm2.hashCode());

        // Test inequality
        sm2.setSuccessUrl("https://different.com/success");
        assertNotEquals(sm1, sm2);
    }

    @Test
    public void testToString() {
        String stringRepresentation = sessionManagement.toString();
        assertTrue(stringRepresentation.contains("successUrl=https://example.com/success"));
        assertTrue(stringRepresentation.contains("cancelUrl=https://example.com/cancel"));
        assertTrue(stringRepresentation.contains("keepAliveUrl=/waw/mbna/keepAlive"));
        assertTrue(stringRepresentation.contains("sessionTimeoutUrl=https://example.com/sessionTimeout"));
    }

    @Test
    public void testSerialVersionUID() {
        assertEquals(-1681266647743521099L, SessionManagement.serialVersionUID);
    }
}
