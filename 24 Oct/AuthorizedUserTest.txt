package com.td.mbna.msec.kyc.dto;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;

public class AuthorizedUserTest {

    @Test
    public void testDefaultConstructor() {
        AuthorizedUser authorizedUser = new AuthorizedUser();

        // Test default values
        assertEquals("", authorizedUser.getAliasCustomerId());
        assertEquals("", authorizedUser.getName());
        assertEquals(0, authorizedUser.getDob().size());
        assertFalse(authorizedUser.getSameAddress());
        assertNull(authorizedUser.getAddress());
        assertNull(authorizedUser.getPhone());
    }

    @Test
    public void testSetAndGetAliasCustomerId() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setAliasCustomerId("alias123");
        assertEquals("alias123", authorizedUser.getAliasCustomerId());
    }

    @Test
    public void testSetAndGetName() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setName("John Doe");
        assertEquals("John Doe", authorizedUser.getName());
    }

    @Test
    public void testSetAndGetDob() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setDob(Arrays.asList(1985, 5, 15)); // Example date of birth
        assertEquals(Arrays.asList(1985, 5, 15), authorizedUser.getDob());
    }

    @Test
    public void testSetAndGetSameAddress() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setSameAddress(true);
        assertTrue(authorizedUser.getSameAddress());
    }

    @Test
    public void testSetAndGetAddress() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        Address address = new Address();
        authorizedUser.setAddress(address);
        assertEquals(address, authorizedUser.getAddress());
    }

    @Test
    public void testSetAndGetPhone() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        Phone phone = new Phone(); // Assuming Phone is a valid class
        authorizedUser.setPhone(phone);
        assertEquals(phone, authorizedUser.getPhone());
    }

    @Test
    public void testEqualsAndHashCode() {
        AuthorizedUser user1 = new AuthorizedUser();
        AuthorizedUser user2 = new AuthorizedUser();

        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        user1.setAliasCustomerId("alias123");
        assertNotEquals(user1, user2);

        user2.setAliasCustomerId("alias123");
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        user1.setName("John Doe");
        assertNotEquals(user1, user2);

        user2.setName("John Doe");
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        user1.setDob(Arrays.asList(1985, 5, 15));
        assertNotEquals(user1, user2);

        user2.setDob(Arrays.asList(1985, 5, 15));
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        user1.setSameAddress(true);
        assertNotEquals(user1, user2);

        user2.setSameAddress(true);
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        // Test address and phone equality similarly
        Address address1 = new Address();
        Address address2 = new Address();
        user1.setAddress(address1);
        user2.setAddress(address2);
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());

        Phone phone1 = new Phone(); // Assuming Phone has a suitable constructor
        Phone phone2 = new Phone();
        user1.setPhone(phone1);
        user2.setPhone(phone2);
        assertEquals(user1, user2);
        assertEquals(user1.hashCode(), user2.hashCode());
    }

    @Test
    public void testToString() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setAliasCustomerId("alias123");
        authorizedUser.setName("John Doe");
        authorizedUser.setDob(Arrays.asList(1985, 5, 15));
        authorizedUser.setSameAddress(true);
        Address address = new Address();
        authorizedUser.setAddress(address);
        Phone phone = new Phone();
        authorizedUser.setPhone(phone);

        String expectedString = "com.td.mbna.msec.kyc.dto.AuthorizedUser@" +
                Integer.toHexString(System.identityHashCode(authorizedUser)) +
                "[aliasCustomerId=alias123,name=John Doe,dob=[1985, 5, 15],sameAddress=true,address=" + address + ",phone=" + phone + "]";
        assertEquals(expectedString, authorizedUser.toString());
    }
}
