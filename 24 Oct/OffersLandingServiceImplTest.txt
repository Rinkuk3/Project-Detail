package com.td.mbna.msec.offerslanding.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.WcmContentService;
import com.td.mbna.msec.offers.application.OffersEligibilityService;
import com.td.mbna.msec.offerslanding.model.OfferLanding;
import com.td.mbna.msec.offerslanding.model.OfferLandingItem;
import com.td.mbna.msec.offerslanding.model.OfferItemsInWcm;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class OffersLandingServiceImplTest {

    @InjectMocks
    private OffersLandingServiceImpl offersLandingService;

    @Mock
    private OffersEligibilityService offersEligibilityService;

    @Mock
    private WcmContentService wcmContentService;

    @Mock
    private AccountManagementServiceImpl accountService;

    @Mock
    private SessionProvider sessionProvider;

    private AccountDetails mockAccount;
    private List<OfferLandingItem> mockOfferItems;
    private String mockWcmContent;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        mockAccount = mock(AccountDetails.class);
        mockOfferItems = new ArrayList<>();
        mockWcmContent = "{\"items\": []}"; // Mocked WCM content
    }

    @Test
    public void testGetOffersLanding_WhenAccountIsNull() {
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        List<OfferLanding> result = offersLandingService.getOffersLanding();
        assertNull(result);
    }

    @Test
    public void testGetOffersLanding_WhenWcmContentIsEmpty() {
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccount);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(LANGUAGE_EN);
        when(wcmContentService.getContentByID(anyString(), anyString())).thenReturn("");
        
        List<OfferLanding> result = offersLandingService.getOffersLanding();
        assertNull(result);
    }

    @Test
    public void testGetOffersLanding_WhenJsonParsingFails() {
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccount);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(LANGUAGE_EN);
        when(wcmContentService.getContentByID(anyString(), anyString())).thenReturn(mockWcmContent);

        // Malformed JSON test
        String invalidJson = "{\"items\": [{\"title\": \"Test Offer\"}";
        when(wcmContentService.getContentByID(anyString(), anyString())).thenReturn(invalidJson);
        
        List<OfferLanding> result = offersLandingService.getOffersLanding();
        assertNull(result);
    }

    @Test
    public void testGetOffersLanding_WhenOfferItemsAreNull() {
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccount);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(LANGUAGE_EN);
        when(wcmContentService.getContentByID(anyString(), anyString())).thenReturn(mockWcmContent);

        // Simulate null offers items
        OfferItemsInWcm offerItemsInWcm = new OfferItemsInWcm();
        when(new Gson().fromJson(mockWcmContent, OfferItemsInWcm.class)).thenReturn(offerItemsInWcm);
        
        List<OfferLanding> result = offersLandingService.getOffersLanding();
        assertNull(result);
    }

    @Test
    public void testGetOffersLanding_WithValidData() {
        when(sessionProvider.getCurrentAccount()).thenReturn(mockAccount);
        when(sessionProvider.getSessionAttribute(SELECTED_LOCALE)).thenReturn(LANGUAGE_EN);
        when(wcmContentService.getContentByID(anyString(), anyString())).thenReturn(mockWcmContent);

        // Add mock OfferLandingItem
        OfferLandingItem item = new OfferLandingItem();
        item.setTitle("Test Offer");
        item.setCategoryId("test-category");
        mockOfferItems.add(item);
        
        OfferItemsInWcm offerItemsInWcm = new OfferItemsInWcm();
        offerItemsInWcm.setItems(mockOfferItems);
        when(new Gson().fromJson(mockWcmContent, OfferItemsInWcm.class)).thenReturn(offerItemsInWcm);
        
        List<OfferLanding> result = offersLandingService.getOffersLanding();
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Test Offer", result.get(0).getTitle());
    }

    @Test
    public void testGenerateOfferCategoryDTO_WhenOrderByWcm() {
        List<OfferLandingItem> items = new ArrayList<>();
        OfferLandingItem item = new OfferLandingItem();
        item.setTitle("Offer1");
        item.setCategoryId("cat1");
        item.setPublish(true);
        items.add(item);

        List<OfferLanding> result = offersLandingService.generateOfferCategoryDTO(mockAccount, items, "", "", true);
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Offer1", result.get(0).getTitle());
    }

    @Test
    public void testGenerateOfferCategoryDTO_WhenOrderByApi() {
        List<OfferLandingItem> items = new ArrayList<>();
        OfferLandingItem item = new OfferLandingItem();
        item.setTitle("Offer1");
        item.setCategoryId("cat1");
        item.setPublish(true);
        items.add(item);

        when(mockAccount.getOffersPriority()).thenReturn(Arrays.asList("cat1"));

        List<OfferLanding> result = offersLandingService.generateOfferCategoryDTO(mockAccount, items, "", "", false);
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Offer1", result.get(0).getTitle());
    }

    @Test
    public void testProcessOfferItem_WhenPublishIsTrue() {
        List<OfferLanding> offerCategoryDTOs = new ArrayList<>();
        OfferLandingItem item = new OfferLandingItem();
        item.setTitle("Test Offer");
        item.setCategoryId("test-category");
        item.setPublish(true);
        when(mockAccount.isAllowedBalanceProtection()).thenReturn(true);

        offersLandingService.processOfferItem(mockAccount, offerCategoryDTOs, item);
        
        assertEquals(1, offerCategoryDTOs.size());
        assertEquals("Test Offer", offerCategoryDTOs.get(0).getTitle());
    }

    @Test
    public void testProcessOfferItem_WhenPublishIsFalse() {
        List<OfferLanding> offerCategoryDTOs = new ArrayList<>();
        OfferLandingItem item = new OfferLandingItem();
        item.setTitle("Unpublished Offer");
        item.setCategoryId("test-category");
        item.setPublish(false);
        
        offersLandingService.processOfferItem(mockAccount, offerCategoryDTOs, item);
        
        assertEquals(0, offerCategoryDTOs.size());
    }

    @Test
    public void testIsAuthorized_WhenAccountIsNull
