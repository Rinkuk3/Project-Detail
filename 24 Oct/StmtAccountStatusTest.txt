package com.td.mbna.msec.statement.domain;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class StmtAccountStatusTest {

    @Test
    void testGettersAndSetters() {
        // Arrange
        StmtAccountStatus status = new StmtAccountStatus();
        
        String accountNumber = "123456789";
        BigDecimal creditLimit = BigDecimal.valueOf(5000);
        BigDecimal cashAdvanceLimit = BigDecimal.valueOf(1000);
        BigDecimal creditAvailable = BigDecimal.valueOf(3000);
        BigDecimal cashAdvanceAvailable = BigDecimal.valueOf(500);
        int daysInBillingCycle = 30;
        Date closingDate = new Date();
        BigDecimal totalMinimumPaymentDue = BigDecimal.valueOf(150);
        Date totalMinimumPaymentDueDate = new Date();
        BigDecimal statementBalance = BigDecimal.valueOf(1200);

        // Act
        status.setAccountNumber(accountNumber);
        status.setCreditLimit(creditLimit);
        status.setCacheAdvanceLimit(cashAdvanceLimit);
        status.setCreditAvailable(creditAvailable);
        status.setCacheAdvanceAvailable(cashAdvanceAvailable);
        status.setDaysInBillingCycle(daysInBillingCycle);
        status.setClosingDate(closingDate);
        status.setTotalMinimumPaymentDue(totalMinimumPaymentDue);
        status.setTotalMinimumPaymentDueDate(totalMinimumPaymentDueDate);
        status.setStatementBalance(statementBalance);

        // Assert
        assertEquals(accountNumber, status.getAccountNumber());
        assertEquals(creditLimit, status.getCreditLimit());
        assertEquals(cashAdvanceLimit, status.getCacheAdvanceLimit());
        assertEquals(creditAvailable, status.getCreditAvailable());
        assertEquals(cashAdvanceAvailable, status.getCacheAdvanceAvailable());
        assertEquals(daysInBillingCycle, status.getDaysInBillingCycle());
        assertEquals(closingDate, status.getClosingDate());
        assertEquals(totalMinimumPaymentDue, status.getTotalMinimumPaymentDue());
        assertEquals(totalMinimumPaymentDueDate, status.getTotalMinimumPaymentDueDate());
        assertEquals(statementBalance, status.getStatementBalance());
    }
    
    @Test
    void testSetterWithNullValues() {
        // Arrange
        StmtAccountStatus status = new StmtAccountStatus();

        // Act
        status.setAccountNumber(null);
        status.setCreditLimit(null);
        status.setCacheAdvanceLimit(null);
        status.setCreditAvailable(null);
        status.setCacheAdvanceAvailable(null);
        status.setClosingDate(null);
        status.setTotalMinimumPaymentDue(null);
        status.setTotalMinimumPaymentDueDate(null);
        status.setStatementBalance(null);

        // Assert
        assertNull(status.getAccountNumber());
        assertNull(status.getCreditLimit());
        assertNull(status.getCacheAdvanceLimit());
        assertNull(status.getCreditAvailable());
        assertNull(status.getCacheAdvanceAvailable());
        assertNull(status.getClosingDate());
        assertNull(status.getTotalMinimumPaymentDue());
        assertNull(status.getTotalMinimumPaymentDueDate());
        assertNull(status.getStatementBalance());
    }
}
