package com.td.mbna.msec.offers.domain;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

public class IPOfferTest {

    private IPOffer ipOffer;

    @BeforeEach
    public void setUp() {
        ipOffer = new IPOffer();
    }

    @Test
    public void testDefaultConstructor() {
        assertNotNull(ipOffer); // Ensure object is created
        assertEquals(OfferCategory.INSTALLMENT_PLAN, ipOffer.getCategory()); // Check the OfferCategory is set correctly
    }

    @Test
    public void testParameterizedConstructor() {
        String id = "offer123";
        String type = "IP Offer";
        String duration = "12 months";
        BigDecimal fixedRate = BigDecimal.valueOf(4.99);
        BigDecimal feePercentage = BigDecimal.valueOf(1.5);
        Boolean hasIpEligibleTrans = true;

        IPOffer ipOfferWithParams = new IPOffer(id, type, duration, fixedRate, feePercentage, hasIpEligibleTrans);

        assertEquals(id, ipOfferWithParams.getId());
        assertEquals(type, ipOfferWithParams.getType());
        assertEquals(duration, ipOfferWithParams.getDuration());
        assertEquals(fixedRate, ipOfferWithParams.getFixedRate());
        assertEquals(feePercentage, ipOfferWithParams.getFeePercentage());
        assertEquals(hasIpEligibleTrans, ipOfferWithParams.getHasIpEligibleTrans());
        assertEquals(OfferCategory.INSTALLMENT_PLAN, ipOfferWithParams.getCategory()); // Ensure category is correct
    }

    @Test
    public void testSettersAndGetters() {
        String duration = "24 months";
        BigDecimal fixedRate = BigDecimal.valueOf(5.49);
        BigDecimal feePercentage = BigDecimal.valueOf(2.0);
        Boolean hasIpEligibleTrans = false;

        ipOffer.setDuration(duration);
        ipOffer.setFixedRate(fixedRate);
        ipOffer.setFeePercentage(feePercentage);
        ipOffer.setHasIpEligibleTrans(hasIpEligibleTrans);

        assertEquals(duration, ipOffer.getDuration());
        assertEquals(fixedRate, ipOffer.getFixedRate());
        assertEquals(feePercentage, ipOffer.getFeePercentage());
        assertEquals(hasIpEligibleTrans, ipOffer.getHasIpEligibleTrans());
    }

    @Test
    public void testHasIpEligibleTransTrue() {
        ipOffer.setHasIpEligibleTrans(true);
        assertTrue(ipOffer.getHasIpEligibleTrans());
    }

    @Test
    public void testHasIpEligibleTransFalse() {
        ipOffer.setHasIpEligibleTrans(false);
        assertFalse(ipOffer.getHasIpEligibleTrans());
    }

    @Test
    public void testFixedRateSetterAndGetter() {
        BigDecimal fixedRate = BigDecimal.valueOf(3.75);
        ipOffer.setFixedRate(fixedRate);
        assertEquals(fixedRate, ipOffer.getFixedRate());
    }

    @Test
    public void testFeePercentageSetterAndGetter() {
        BigDecimal feePercentage = BigDecimal.valueOf(1.25);
        ipOffer.setFeePercentage(feePercentage);
        assertEquals(feePercentage, ipOffer.getFeePercentage());
    }

    @Test
    public void testDurationSetterAndGetter() {
        String duration = "6 months";
        ipOffer.setDuration(duration);
        assertEquals(duration, ipOffer.getDuration());
    }
}
