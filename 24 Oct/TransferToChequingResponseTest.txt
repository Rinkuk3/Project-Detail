package com.td.mbna.msec.transfertochequing.domain;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class TransferToChequingResponseTest {

    @Test
    void testBuilder() {
        // Arrange
        String accountNum = "ACC123456";
        BigDecimal transferAmt = BigDecimal.valueOf(100.00);
        BigDecimal transferFee = BigDecimal.valueOf(2.50);
        BigDecimal totalAmt = transferAmt.add(transferFee);
        String refId = "REF123";
        Integer minNumOfDays = 1;
        Integer maxNumOfDays = 3;

        // Act
        TransferToChequingResponse response = TransferToChequingResponse.builder()
                .accountNum(accountNum)
                .transferAmt(transferAmt)
                .transferFee(transferFee)
                .totalAmt(totalAmt)
                .refId(refId)
                .minNumOfDays(minNumOfDays)
                .maxNumOfDays(maxNumOfDays)
                .build();

        // Assert
        assertEquals(accountNum, response.getAccountNum());
        assertEquals(transferAmt, response.getTransferAmt());
        assertEquals(transferFee, response.getTransferFee());
        assertEquals(totalAmt, response.getTotalAmt());
        assertEquals(refId, response.getRefId());
        assertEquals(minNumOfDays, response.getMinNumOfDays());
        assertEquals(maxNumOfDays, response.getMaxNumOfDays());
    }

    @Test
    void testEqualsAndHashCode() {
        // Arrange
        TransferToChequingResponse response1 = TransferToChequingResponse.builder()
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .refId("REF123")
                .minNumOfDays(1)
                .maxNumOfDays(3)
                .build();

        TransferToChequingResponse response2 = TransferToChequingResponse.builder()
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .refId("REF123")
                .minNumOfDays(1)
                .maxNumOfDays(3)
                .build();

        TransferToChequingResponse response3 = TransferToChequingResponse.builder()
                .accountNum("ACC654321")
                .transferAmt(BigDecimal.valueOf(200.00))
                .transferFee(BigDecimal.valueOf(5.00))
                .totalAmt(BigDecimal.valueOf(205.00))
                .refId("REF456")
                .minNumOfDays(2)
                .maxNumOfDays(4)
                .build();

        // Assert Equals
        assertEquals(response1, response2);
        assertNotEquals(response1, response3);
        assertNotEquals(response2, response3);

        // Assert HashCode
        assertEquals(response1.hashCode(), response2.hashCode());
        assertNotEquals(response1.hashCode(), response3.hashCode());
    }

    @Test
    void testToString() {
        // Arrange
        TransferToChequingResponse response = TransferToChequingResponse.builder()
                .accountNum("ACC123456")
                .transferAmt(BigDecimal.valueOf(100.00))
                .transferFee(BigDecimal.valueOf(2.50))
                .totalAmt(BigDecimal.valueOf(102.50))
                .refId("REF123")
                .minNumOfDays(1)
                .maxNumOfDays(3)
                .build();

        // Act
        String expectedString = "TransferToChequingResponse(accountNum=ACC123456, transferAmt=100.00, transferFee=2.50, totalAmt=102.50, refId=REF123, minNumOfDays=1, maxNumOfDays=3)";
        
        // Assert
        assertEquals(expectedString, response.toString());
    }
}
