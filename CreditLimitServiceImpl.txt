package com.td.mbna.msec.creditlimit.service.impl;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.DISCLOSURE_CLI_NO_OFFER;
import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.YES;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.common.DisclosureService;
import com.td.mbna.msec.creditlimit.service.CreditLimitService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.BaseCommonServiceImpl;
import com.td.mbna.msec.common.domain.DisclosureDetails;
import com.td.mbna.msec.common.infrastructure.util.UIGeneralUtil;
import com.td.mbna.msec.common.midtier.MidTierServiceHelper;
import com.td.mbna.msec.core.support.AccountHelper;
import com.td.mbna.msec.creditlimit.model.CreditLimitDecreaseRequest;
import com.td.mbna.msec.creditlimit.model.CreditLimitDecreaseResponse;
import com.td.mbna.msec.creditlimit.model.CreditLimitEligibility;
import com.td.mbna.msec.creditlimit.model.CreditLimitIncreaseCliRequest;
import com.td.mbna.msec.creditlimit.model.CreditLimitIncreaseRequest;
import com.td.mbna.msec.creditlimit.model.CreditLimitIncreaseResponse;
import com.td.mbna.msec.creditlimit.model.CreditLimitInfoIncrease;
import com.td.mbna.msec.creditlimit.model.CreditLimitInfoIncreaseCli;
import com.td.mbna.msec.creditlimit.model.CreditLimitInfoResponse;
import com.td.mbna.msec.customer.domain.DisclosureTextResponse;
import com.td.mbna.msec.customer.domain.EmployerInfo;
import com.td.mbna.msec.customer.domain.OtherIncome;
import com.td.mbna.msec.profile.model.CustomerProfile;
import com.td.mbna.msec.customer.util.CustomerUtil;
import com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit.DecreaseCardLimitResponse;
import com.td.mbna.msec.midtier.creditcard.payload.increasecardlimit.IncreaseCardLimitResponse;
import com.td.mbna.msec.midtier.creditcard.payload.increasecardlimit.RequestPayload;
import com.td.mbna.msec.midtier.creditcard.payload.increasecardlimit.ResponsePayload;
import com.td.mbna.msec.midtier.types.common.CustAcctType;
import com.td.mbna.msec.midtier.types.common.CustomerIncomeInfoType;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.offers.domain.OfferDetails;

@Component
public class CreditLimitService extends BaseCommonServiceImpl implements CreditLimitService {

    private final String ACTION_CLI = "ACTION_CLI";
    private final String DL_CLI = "CLI";

    private static final MbnaLogger logger = new MbnaLogger(CreditLimitServiceImpl.class);

    public static final String AUDIT_CODE_DISCLOSURE="SS0901";
    public static final String AUDIT_CODE_CLD_BEGIN = "SS0801";
    public static final String AUDIT_CODE_ACLI_VERIFY = "SS0904";

    @Autowired
    private DisclosureService disclosureService;

    @Override
    public String getCreditLimitEligibility(String accountId, HttpServletRequest request) {

        AccountDetails account = getAccount(accountId);

        sessionProvider.setSessionAttribute(ACTION_CLI, DL_CLI);

        //check if the account is in the list of CLI accounts that need kyc
        List<CustAcctType> cliAccts = sessionProvider.getSessionCustomer().getCliAccts();
        if (!(cliAccts == null || cliAccts.isEmpty())){
            return CreditLimitEligibility.PAGE_KYC_KEY.getValue();
        }
        if (AccountHelper.getCLIOfferForAccount(account,request) == null){
        	return CreditLimitEligibility.PAGE_CLI_LONG.getValue(); // no CLI Offer, show the long form
        }
       	return CreditLimitEligibility.PAGE_CLI_SHORT.getValue(); // CLI offer exists, show the short form.
    }

    @Override
    public CreditLimitInfoIncrease getCreditLimitInfoIncrease(String accountId, HttpServletRequest request) {
        AccountDetails account = getAccount(accountId);
        
        CreditLimitInfoIncrease creditLimitInfoIncrease = CreditLimitInfoIncrease
                .builder()
                .creditLimit(account.getCreditLimit())
                .approvedCreditLimit(getApprovedCreditLimit(account, request))
                .build();
        return creditLimitInfoIncrease;
    }


    private BigDecimal getApprovedCreditLimit(AccountDetails account, HttpServletRequest request) {

    	if(account == null){
    		return new BigDecimal(0);
    	}

        // Get the top CLI offer
        String offerID = AccountHelper.getCLIOfferForAccount(account,request);
        //creditLimitInfo.setOfferID(offerID);
        OfferDetails offer = account.getCLIOffer(offerID);

		if(offer == null || offer.getCliOffer() == null){
			return new BigDecimal(0);
		}
        return offer.getCliOffer().getCliAmount();
    }

    //ACLI
    @Override
    public CreditLimitIncreaseResponse submitApprovedCreditLimitIncrease(CreditLimitIncreaseRequest creditLimitIncreaseRequest, boolean validateOnly, HttpServletRequest request) {
        String methodName = "CreditLimitService::submitApprovedCreditLimitIncrease";
        
        if (creditLimitIncreaseRequest == null){
        	String message = " the request is null";
        	logger.error(methodName, message);
        	throw genBusinessException("MS601", message);
        }
    	logger.debug("creditLimitIncreaseRequest=" + creditLimitIncreaseRequest);
        AccountDetails account = creditLimitIncreaseRequest.getAccountId() != null ? sessionProvider.getRequestedAccount(creditLimitIncreaseRequest.getAccountId()): sessionProvider.getCurrentAccount();
        String offerId = AccountHelper.getCLIOfferForAccount(account,request);
        String lmt = creditLimitIncreaseRequest.getRequestedCreditLimit() == null ? "0" : creditLimitIncreaseRequest.getRequestedCreditLimit();
        IncreaseCardLimitResponse response = submitIncreaseCreditLimitToMidtier(account, validateOnly, new BigDecimal(lmt), false, offerId, null);

    	if (response == null){
    		String message = "Got null response from midtier";
        	logger.error(methodName, message);
    		throw genBusinessException("MS601", message);
    	}

    	return CreditLimitIncreaseResponse
                .builder()
                .build();

    }

    //CLI
    @Override
    public CreditLimitInfoIncreaseCli getCreditLimitInfoIncreaseCli(String accountId) {
    	midTierServiceHelper.createAuditLog(AUDIT_CODE_DISCLOSURE, null, false);
    	
    	AccountDetails account = getAccount(accountId);
        
		boolean isAuthorizedUser = !account.isPrimaryUser();
		//Call MT to retrieve the latest profile
		CustomerProfile profile = retrieveProfileForCustomerAndAccount(sessionProvider.getSessionCustomerId(), account.getAccountNumber() , isAuthorizedUser);
		account.setProfile(profile);
		updateCustomerAndAccountProfle(account, sessionProvider.getSessionCustomer());	

		EmployerInfo employerInfo = new EmployerInfo();
		employerInfo.setEmployerAddress(profile.getEmployerAddress());
		employerInfo.setEmployerCity(profile.getEmployerCity());
		employerInfo.setEmployerName(profile.getEmployerName());
		employerInfo.setEmployerPhone(profile.getEmployerPhone());
		employerInfo.setEmployerPhoneType(profile.getEmployerPhoneType());
		employerInfo.setEmployerPostalCode(profile.getEmployerPostalCode());
		employerInfo.setEmployerProvince(profile.getEmployerProvince());
		employerInfo.setEmployerStatus(profile.getEmploymentStatus());
		employerInfo.setIncome(profile.getIncome());
		employerInfo.setIncomePeriod(profile.getIncomeFrequency());
		employerInfo.setJobDescription(null);
		employerInfo.setNatureOfYourBusiness(profile.getNatureOfBusiness());
		employerInfo.setOccupation(profile.getOccupation());
		employerInfo.setPosition(profile.getPosition());
		
		OtherIncome otherIncome = new OtherIncome();
		otherIncome.setOtherIncomeAmount(profile.getOtherIncome());
		otherIncome.setOtherIncomeAmountPeriod(profile.getOtherIncomeFrequency());
		otherIncome.setSourceOfOtherIncome(profile.getOtherIncomeSource());
		otherIncome.setHaveOtherIncome(profile.isHasOtherIncome()?"Yes":"No");

        return CreditLimitInfoIncreaseCli
                .builder()
                .creditLimit(account.getCreditLimit())
                .currentBalance(account.getBalance())
                .employerInfo(employerInfo)
                .otherIncome(otherIncome)
                .build();
    }

    //CLI
    @Override
    public CreditLimitIncreaseResponse increaseCreditLimitCli(CreditLimitIncreaseCliRequest creditLimitIncreaseCliRequest, boolean validateOnly, HttpServletRequest request)  {
    	String methodName = "CreditLimitService:increaseCreditLimitCli";
    	// 0
    	if (!creditLimitIncreaseCliRequest.getLimitConsent() && validateOnly){
    		String message="CLI BFF Step 0 - Required field. Please consent to the terms and conditions.";
    		logger.error(methodName, message);
    		throw this.genBusinessException("MS148", message);
    	}
    	
    	//1
    	AccountDetails account = sessionProvider.getCurrentAccount();
    	String offerId = AccountHelper.getCLIOfferForAccount(account,request);
    	IncreaseCardLimitResponse response = submitIncreaseCreditLimitToMidtier(account, validateOnly, creditLimitIncreaseCliRequest.getRequestCreditLimitIncrease(), true, offerId, creditLimitIncreaseCliRequest);

    	if (response == null){
    		String message="CLI BFF Step 1 - Got null response from midtier";
    		logger.error(methodName, message);
    		throw genBusinessException("MS601", message);
    	} 

    	return CreditLimitIncreaseResponse
			.builder()
			.address(CustomerUtil.buildAddress(account))
			.build();
    }


    private IncreaseCardLimitResponse submitIncreaseCreditLimitToMidtier(AccountDetails account, boolean validateOnly,  BigDecimal requestedIncreaseCreditLimit, boolean isLongForm, String offerID, CreditLimitIncreaseCliRequest creditLimitIncreaseCliRequest) {

        IncreaseCardLimitResponse response = null;

        RequestPayload uPayload = getRequestPayload(account, validateOnly, isLongForm, requestedIncreaseCreditLimit, offerID, creditLimitIncreaseCliRequest);

        response = midTierServiceHelper.increaseCardLimit(uPayload);
        
        if (validateOnly) {
            midTierServiceHelper.createAuditLog(AUDIT_CODE_ACLI_VERIFY, null, false);
            return response;
        }
  
        // the following is for submit
        
        //If only validating, or confirming and response status is true then it was successful
        if (response != null && response.getResponsePayload() != null && response.getResponsePayload().getStatus() != null && response.getResponsePayload().getStatus() && account.getTopCLIOffer() != null ) {

            //if there is an offer and we are confirming CLI,
            //remove CLI offer from session regardless if we are in short form or long form
            account.setCliOffers(null);
        }

        
        //Only process response if confirmation was sent
        BigDecimal respCreditLimit = account.getCreditLimit();     //initialize to existing limit
        BigDecimal respCreditLimitPrev = account.getCreditAvailable(); //initialize to existing available limit
        if (response != null && response.getResponsePayload() != null) {
        	ResponsePayload respLoad = response.getResponsePayload();
        	
        	respCreditLimit = respLoad.getCreditLimitNewAmt();
        	if (respCreditLimit == null) {
        		respCreditLimit = account.getCreditLimit(); //reset back value in case long form returns back dummy payload
        	}
        	respCreditLimitPrev = respLoad.getCreditLimitPrevAmt();
        	if (respCreditLimitPrev == null) {
        		respCreditLimitPrev = account.getCreditAvailable(); //reset back value in case long form returns back dummy payload
        	}
        	
        	BigDecimal respCashAdvLimit = respLoad.getCashLimitNewAmt();
        	if (respCashAdvLimit!=null) {
        		account.setCashAdvLimit(respCashAdvLimit); //for accountSnapshot
        	}
        }
        
        account.setCreditLimit(respCreditLimit);
        //If previous credit available value is the limit value, set the new available value to new limit
        if ((account.getCreditAvailable()).compareTo(respCreditLimitPrev) == 0) {
        	account.setCreditAvailable(respCreditLimit);
        }

        // call audit log
        if(isLongForm){//cli
        	updateCustomerProfile(creditLimitIncreaseCliRequest);
        	CustomerUtil.syncCustomerDataAfterCLI(sessionProvider.getSessionCustomer(),sessionProvider.getCurrentAccount());
        	
        	midTierServiceHelper.createAuditLog("SS0902", MidTierServiceHelper.TRANSACTION_SUCCESS);
        } else{//acli
        	midTierServiceHelper.createAuditLog("SS0905", requestedIncreaseCreditLimit);
        }

        return response;
    }

    private RequestPayload getRequestPayload(AccountDetails account, boolean validateOnly, boolean isLongForm, BigDecimal requestedIncreaseCreditLimit, String offerId, CreditLimitIncreaseCliRequest creditLimitIncreaseCliRequest) {
        if(account == null){
        	return new RequestPayload();
        }
    	RequestPayload uPayload = null;

        //set the fields specific for the form type
        if (isLongForm){
            uPayload = getRequestPayloadLongForm(account, creditLimitIncreaseCliRequest,offerId);
        }else{
            uPayload = getRequestPayloadShortForm(requestedIncreaseCreditLimit, offerId);
        }

        //Sets the common fields for both short form and long form
        uPayload.setAcctId(account.getAccountId());
        uPayload.setCreditLimit(requestedIncreaseCreditLimit);
        uPayload.setRoleCD(account.getRoleCD());
        uPayload.setLongForm(isLongForm);
        uPayload.setCurrentBalance(account.getBalance());
        uPayload.setUnbilledAmount(account.getTempAuths());
        uPayload.setCurrentCreditLimit(account.getCreditLimit());

        uPayload.setConfirmed(!validateOnly);

        if (!validateOnly){
            //only send email if submit
            uPayload.setEmailNotificationInfo(getEmailNotificationType(account, null, false));
            uPayload.setDisclosureInfo(getDisclosure().getDisclosureInfoType());

    		// task 5849
    		Date now = new Date();
			uPayload.getDisclosureInfo().setDisclosureDocCreationDate(now.getTime());

        }

        return uPayload;
    }

    private RequestPayload getRequestPayloadLongForm(AccountDetails account,CreditLimitIncreaseCliRequest creditLimitIncreaseCliRequest, String offerId) {
		RequestPayload uPayload = new RequestPayload();

		CustomerIncomeInfoType customerInfo = new CustomerIncomeInfoType();
		customerInfo.setOccupation(creditLimitIncreaseCliRequest.getEmployerInfo().getOccupation());
		customerInfo.setIncome(creditLimitIncreaseCliRequest.getEmployerInfo().getIncome());
		customerInfo.setIncomeFrequency(creditLimitIncreaseCliRequest.getEmployerInfo().getIncomePeriod());
		customerInfo.setHousingStatus(creditLimitIncreaseCliRequest.getHousingStatus());
		customerInfo.setHousingPayment(creditLimitIncreaseCliRequest.getMonthlyHousingPayments());
		customerInfo.setAdditionalIncome(creditLimitIncreaseCliRequest.getOtherIncome().getOtherIncomeAmount());
		customerInfo.setAdditionalIncomeFrequency(creditLimitIncreaseCliRequest.getOtherIncome().getOtherIncomeAmountPeriod());
		customerInfo.setAdditionalIncomeSource(creditLimitIncreaseCliRequest.getOtherIncome().getSourceOfOtherIncome());
		uPayload.setCustomerInfo(customerInfo);
		
		// employment info
		uPayload.setEmployerAddress(UIGeneralUtil.trim(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerAddress()));
		uPayload.setEmployerCity(UIGeneralUtil.trim(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerCity()));
		uPayload.setEmployerName(UIGeneralUtil.trim(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerName()));
		uPayload.setEmployerPhone(UIGeneralUtil.convertToNAPhoneFormat(account.getProfile().getEmployerPhone(),creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPhone()));
		uPayload.setEmployerPhoneType(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPhoneType());
		uPayload.setEmployerPostalCode(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPostalCode());
		uPayload.setEmployerProvince(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerProvince());
		uPayload.setEmploymentStatus(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerStatus());
		uPayload.setLengthOfService(creditLimitIncreaseCliRequest.getEmployerInfo().getLengthOfService());
		uPayload.setNatureOfBusiness(creditLimitIncreaseCliRequest.getEmployerInfo().getNatureOfYourBusiness());
		uPayload.setPosition(UIGeneralUtil.trim(creditLimitIncreaseCliRequest.getEmployerInfo().getPosition()));
		
		uPayload.setPersonLastUpdatedTS(account.getProfile().getPersonLastUpdatedTS());
		uPayload.setBookOfBusLastUpdatedTS(account.getProfile().getBookOfBusLastUpdatedTS());
		uPayload.setEmploymentLastUpdatedTS(account.getProfile().getEmploymentLastUpdatedTS());
		uPayload.setPrimIncomeLastUpdatedTS(account.getProfile().getPrimIncomeLastUpdatedTS());
		uPayload.setOtherIncomeLastUpdatedTS(account.getProfile().getOtherIncomeLastUpdatedTS());
		uPayload.setPartyAgreementLastUpdatedTS(account.getProfile().getPartyAgreementLastUpdatedTS());
		
		if (offerId != null){
			uPayload.setPromotionOfferId(offerId);
			uPayload.setPromotionOfferAmount(account.getCLIOffer(offerId).getCliOffer().getCliAmount());
		}

		
		return uPayload;
	}

    @Override
    public DisclosureTextResponse getDisclosure()  {
    	
        DisclosureTextResponse disclosureTextResponse = new DisclosureTextResponse();

        //try {
            DisclosureDetails disclosureDetails = disclosureService.retrieveDisclosureDetails(DISCLOSURE_CLI_NO_OFFER, sessionProvider.getLocale(), null);

            if (disclosureDetails != null){
                disclosureTextResponse.setDisclosureText(disclosureDetails.getDisclosureText());
                disclosureTextResponse.setDisclosureInfoType(disclosureDetails.getDisclosureInfo());
            }
            return disclosureTextResponse;

        /*//} catch (CommandException e) {
           logger.error("CreditLimitService:getDislcosure()", e.getLocalizedMessage(),e);
            throw e;
        }*/

    }

    private RequestPayload getRequestPayloadShortForm(BigDecimal requestedIncreaseCreditLimit, String offerId) {
        RequestPayload uPayload = new RequestPayload();
        uPayload.setPromotionOfferId(offerId);
        uPayload.setPromotionOfferAmount(requestedIncreaseCreditLimit);
        return uPayload;
    }

    @Override
    public CreditLimitInfoResponse getCreditLimitInfoDecrease(HttpServletRequest request) {
    	boolean audit = isAuditLogCapture(request);
    	
    	if(audit){
    		midTierServiceHelper.createAuditLog(AUDIT_CODE_CLD_BEGIN, null, false);
    	}
    	
        return this.getCreditLimitInfoResponse();
    }

    @Override
    public CreditLimitDecreaseResponse verifyCreditLimitDecrease(CreditLimitDecreaseRequest creditLimitDecreaseRequest) {
        AccountDetails account = sessionProvider.getCurrentAccount();
        return submitDecreaseCreditLimitToMidtier(true, account, creditLimitDecreaseRequest.getRequestedCreditLimit());
    }

    @Override
    public CreditLimitDecreaseResponse submitCreditLimitDecrease(CreditLimitDecreaseRequest creditLimitDecreaseRequest) {
        AccountDetails account = sessionProvider.getCurrentAccount();
        return submitDecreaseCreditLimitToMidtier(false, account, creditLimitDecreaseRequest.getRequestedCreditLimit());

    }

    private CreditLimitDecreaseResponse submitDecreaseCreditLimitToMidtier(boolean validateOnly, AccountDetails account, String input){
    	
    	String methodName = "CreditLimitService::submitDecreaseCreditLimitToMidtier";
        BigDecimal requestedDecreaseCreditLimit = input == null || input.trim().isEmpty() ? BigDecimal.ZERO: new BigDecimal(input);
       
        com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit.RequestPayload uPayload = new com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit.RequestPayload();
        uPayload.setAcctId(account.getAccountId());
        uPayload.setCreditLimit(requestedDecreaseCreditLimit);
        uPayload.setCurrentCreditLimit(account.getCreditLimit());
        uPayload.setUnbilledAmount(account.getTempAuths());
        uPayload.setCurrentBalance(account.getBalance());

        //Do not send email info on validation
        if (!validateOnly){
        	uPayload.setEmailNotificationInfo(getEmailNotificationType(account, null));
        }

        uPayload.setConfirmed(!validateOnly);

        //setAuditStartTime(System.currentTimeMillis());
        //If validation, then set validation audit log
        DecreaseCardLimitResponse uRs = null;
        if ( validateOnly ){
            uRs = midTierServiceHelper.decreaseCardLimit(uPayload, "SS0804", null);
        }else{
            uRs = midTierServiceHelper.decreaseCardLimit(uPayload, "SS0802", MidTierServiceHelper.TRANSACTION_SUCCESS);
        }
        
        //Process response if not validation (is confirmation)
        if (!validateOnly){
            BigDecimal respCreditLimit = account.getCreditLimit(); //initialize to credit existing limit
            if (uRs != null) {
                com.td.mbna.msec.midtier.creditcard.payload.decreasecardlimit.ResponsePayload respLoad = uRs.getResponsePayload();
                if (respLoad != null) {
                    respCreditLimit = respLoad.getCreditLimitNewAmt();
                    if (respCreditLimit == null) {
                        respCreditLimit = account.getCreditLimit(); //reset back value
                    }
                    BigDecimal respCashAdvLimit = respLoad.getCashLimitNewAmt();
                    if (respCashAdvLimit!=null) {
                        account.setCashAdvLimit(respCashAdvLimit); //for accountSnapshot
                    }
                }
            }

            account.setCreditLimit(respCreditLimit);	//for creditLimitDecEdit.jsp
            if ((account.getCreditAvailable()).compareTo(respCreditLimit) > 0 ) { //for accountSnapshot
                account.setCreditAvailable(respCreditLimit);
            }

        }


        if (uRs == null){
        	String message="Got null response from midtier";
    		logger.error(methodName, message);
    		throw genBusinessException("MS601", message);
        }

        return CreditLimitDecreaseResponse
                .builder()
                .reqCreditLimit(requestedDecreaseCreditLimit)
                .build();
    }

	private void updateCustomerProfile(CreditLimitIncreaseCliRequest creditLimitIncreaseCliRequest) {
		
		AccountDetails account = sessionProvider.getCurrentAccount();
		
		CustomerProfile profile = account.getProfile();
		
		profile.setOccupation(creditLimitIncreaseCliRequest.getEmployerInfo().getOccupation());
		profile.setIncome(creditLimitIncreaseCliRequest.getEmployerInfo().getIncome());
		profile.setIncomeFrequency(creditLimitIncreaseCliRequest.getEmployerInfo().getIncomePeriod());
		profile.setOtherIncome(creditLimitIncreaseCliRequest.getOtherIncome().getOtherIncomeAmount());
		profile.setOtherIncomeFrequency(creditLimitIncreaseCliRequest.getOtherIncome().getOtherIncomeAmountPeriod());
		profile.setOtherIncomeSource(creditLimitIncreaseCliRequest.getOtherIncome().getSourceOfOtherIncome());
		profile.setEmploymentStatus(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerStatus());
		profile.setPosition(creditLimitIncreaseCliRequest.getEmployerInfo().getPosition());
		profile.setEmployerName(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerName());
		profile.setEmployerAddress(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerAddress());
		profile.setEmployerCity(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerCity());
		profile.setEmployerProvince(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerProvince());
		profile.setEmployerPostalCode(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPostalCode());
		profile.setEmployerPhoneType(creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPhoneType());
		profile.setEmployerPhone(UIGeneralUtil.convertToNAPhoneFormat(account.getProfile().getEmployerPhone(),creditLimitIncreaseCliRequest.getEmployerInfo().getEmployerPhone()));
		profile.setNatureOfBusiness(creditLimitIncreaseCliRequest.getEmployerInfo().getNatureOfYourBusiness());
		if (YES.equalsIgnoreCase(creditLimitIncreaseCliRequest.getOtherIncome().getHaveOtherIncome())) {
			profile.setHasOtherIncome(true);
		}
		
	}

	@Override
    public boolean isACLI(HttpServletRequest request) {
		logger.debug("isACLI", "for MApp only to check if ACLI");
		String offerId = AccountHelper.getCLIOfferForAccount(this.sessionProvider.getCurrentOrRequestedAccount(),request);
		boolean result = offerId != null ? true : false;
		logger.debug("isACLI", "for MApp only to check if ACLI, result="+result);
        return result;
    }

}