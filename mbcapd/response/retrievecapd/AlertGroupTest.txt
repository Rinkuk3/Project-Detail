import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;

class AlertGroupTest {

    @Test
    void testGetterAndSetterForGroupCd() {
        AlertGroup group = new AlertGroup();
        group.setGroupCd("Group123");
        assertEquals("Group123", group.getGroupCd());
    }

    @Test
    void testGetterAndSetterForBlocklistedInd() {
        AlertGroup group = new AlertGroup();
        group.setBlocklistedInd(true);
        assertTrue(group.getBlocklistedInd());
    }

    @Test
    void testGetterAndSetterForAlertType() {
        AlertGroup group = new AlertGroup();
        AlertType type = new AlertType(); // Assuming AlertType has a default constructor
        group.setAlertType(Arrays.asList(type));
        assertEquals(1, group.getAlertType().size());
    }

    @Test
    void testToString() {
        AlertGroup group = new AlertGroup();
        group.setGroupCd("Group123");
        group.setBlocklistedInd(true);
        AlertType type = new AlertType(); // Assuming AlertType has a default constructor
        group.setAlertType(Arrays.asList(type));

        String result = group.toString();
        assertTrue(result.contains("groupCd"));
        assertTrue(result.contains("blocklistedInd"));
        assertTrue(result.contains("alertType"));
    }

    @Test
    void testHashCode() {
        AlertGroup group1 = new AlertGroup();
        group1.setGroupCd("Group123");
        group1.setBlocklistedInd(true);
        AlertType type1 = new AlertType(); // Assuming AlertType has a default constructor
        group1.setAlertType(Arrays.asList(type1));

        AlertGroup group2 = new AlertGroup();
        group2.setGroupCd("Group123");
        group2.setBlocklistedInd(true);
        AlertType type2 = new AlertType(); // Assuming AlertType has a default constructor
        group2.setAlertType(Arrays.asList(type2));

        assertEquals(group1.hashCode(), group2.hashCode());
    }

    @Test
    void testEqualsSameObject() {
        AlertGroup group = new AlertGroup();
        assertTrue(group.equals(group));
    }

    @Test
    void testEqualsDifferentObject() {
        AlertGroup group1 = new AlertGroup();
        group1.setGroupCd("Group123");
        AlertGroup group2 = new AlertGroup();
        group2.setGroupCd("Group123");
        assertTrue(group1.equals(group2));
    }

    @Test
    void testEqualsNull() {
        AlertGroup group = new AlertGroup();
        assertFalse(group.equals(null));
    }

    @Test
    void testEqualsDifferentClass() {
        AlertGroup group = new AlertGroup();
        assertFalse(group.equals(new Object()));
    }

    @Test
    void testEqualsWithDifferentAlertType() {
        AlertGroup group1 = new AlertGroup();
        group1.setGroupCd("Group123");
        group1.setBlocklistedInd(true);
        AlertType type1 = new AlertType(); // Assuming AlertType has a default constructor
        group1.setAlertType(Arrays.asList(type1));

        AlertGroup group2 = new AlertGroup();
        group2.setGroupCd("Group123");
        group2.setBlocklistedInd(true);
        AlertType type2 = new AlertType(); // Assuming AlertType has a default constructor
        group2.setAlertType(Arrays.asList(type2));

        assertTrue(group1.equals(group2));
    }

    @Test
    void testEqualsWithNullAlertType() {
        AlertGroup group1 = new AlertGroup();
        group1.setAlertType(null);

        AlertGroup group2 = new AlertGroup();
        group2.setAlertType(null);

        assertTrue(group1.equals(group2));
    }

    @Test
    void testEqualsWithNullBlocklistedInd() {
        AlertGroup group1 = new AlertGroup();
        group1.setBlocklistedInd(null);

        AlertGroup group2 = new AlertGroup();
        group2.setBlocklistedInd(null);

        assertTrue(group1.equals(group2));
    }

    @Test
    void testHashCodeWithNullValues() {
        AlertGroup group1 = new AlertGroup();
        group1.setGroupCd(null);
        group1.setBlocklistedInd(null);
        group1.setAlertType(null);

        AlertGroup group2 = new AlertGroup();
        group2.setGroupCd(null);
        group2.setBlocklistedInd(null);
        group2.setAlertType(null);

        assertEquals(group1.hashCode(), group2.hashCode());
    }
}
