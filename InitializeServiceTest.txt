import com.td.mbna.msec.core.service.OAuthTokenService;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.core.support.HttpUtil;
import com.td.mbna.msec.midtier.customerprofile.payload.retrieveenrollment.RetrieveEnrollmentResponse;
import com.td.mbna.msec.midtier.enrollment.MbnaEnrollment;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import static com.td.mbna.msec.common.infrastructure.util.MsecbffConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class InitializeServiceTest {

    @InjectMocks
    private InitializeServiceImpl initializeService;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private OAuthTokenService tokenService;

    @Mock
    private MbnaEnrollment mbnaEnrollment;

    @Mock
    private HttpServletRequest request;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSetLocaleInSession_WithUgoAppCookie() {
        // Arrange
        when(HttpUtil.isUgoApp(request)).thenReturn(true);
        when(HttpUtil.getCookieValue(PARAMETER_LANGUAGE, request)).thenReturn(LANGUAGE_FR_CA);

        // Act
        initializeService.setLocaleInSession(request);

        // Assert
        verify(sessionProvider).setSessionAttribute(COOKIE_UAP_LANGUAGE, LOCALE_FR_CA);
        verify(sessionProvider).setSessionAttribute(SELECTED_LOCALE, LOCALE_FR_CA);
    }

    @Test
    public void testSetLocaleInSession_WithNoLanguageCookie() {
        // Arrange
        when(HttpUtil.getCookieValue(COOKIE_UAP_LANGUAGE, request)).thenReturn(null);
        when(HttpUtil.getCookieValue(PARAMETER_LANGUAGE, request)).thenReturn(null);
        when(HttpUtil.getPreferredLocale(request)).thenReturn(LANGUAGE_EN_CA);

        // Act
        initializeService.setLocaleInSession(request);

        // Assert
        verify(sessionProvider).setSessionAttribute(COOKIE_UAP_LANGUAGE, LOCALE_EN_CA);
        verify(sessionProvider).setSessionAttribute(SELECTED_LOCALE, LOCALE_EN_CA);
    }

    @Test
    public void testVerifyToken_TokenIsNull_UAPDisabled() throws Exception {
        // Arrange
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(null);
        when(MockTokenUtil.generateToken()).thenReturn("mockToken");
        String connectId = "connectId";
        String domainName = "domain.com";
        String authCode = "authCode";

        // Act
        boolean result = initializeService.verifyToken(connectId, domainName, authCode);

        // Assert
        assertTrue(result);
        verify(sessionProvider).setSessionAttribute(JWT_ACCESS_TOKEN, "mockToken");
        verify(sessionProvider).setConnectId(connectId);
    }

    @Test
    public void testVerifyToken_TokenIsNull_UAPEnabled() throws Exception {
        // Arrange
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(null);
        when(HttpUtil.getUAPRedirectUrl(anyString())).thenReturn("redirectUrl");
        when(tokenService.getAccessTokenFromPing(anyString(), anyString(), anyString())).thenReturn("token");
        
        String connectId = "connectId";
        String domainName = "domain.com";
        String authCode = "authCode";

        // Act
        boolean result = initializeService.verifyToken(connectId, domainName, authCode);

        // Assert
        assertTrue(result);
        verify(sessionProvider).setSessionAttribute(JWT_ACCESS_TOKEN, "token");
    }

    @Test
    public void testVerifyToken_TokenRetrievalFails() throws Exception {
        // Arrange
        when(sessionProvider.getSessionAttribute(JWT_ACCESS_TOKEN)).thenReturn(null);
        when(HttpUtil.getUAPRedirectUrl(anyString())).thenReturn("redirectUrl");
        when(tokenService.getAccessTokenFromPing(anyString(), anyString(), anyString())).thenThrow(new RuntimeException());

        String connectId = "connectId";
        String domainName = "domain.com";
        String authCode = "authCode";

        // Act
        boolean result = initializeService.verifyToken(connectId, domainName, authCode);

        // Assert
        assertFalse(result);
    }

    @Test
    public void testGetEnrollment_Success() {
        // Arrange
        String connectId = "connectId";
        String token = "token";
        RetrieveEnrollmentResponse response = new RetrieveEnrollmentResponse();
        when(mbnaEnrollment.retrieveEnrollment(connectId, token)).thenReturn(response);

        // Act
        RetrieveEnrollmentResponse result = initializeService.getEnrollment(connectId, token);

        // Assert
        assertEquals(response, result);
    }

    @Test
    public void testGetEnrollment_Failure() {
        // Arrange
        String connectId = "connectId";
        String token = "token";
        when(mbnaEnrollment.retrieveEnrollment(connectId, token)).thenThrow(new RuntimeException());

        // Act & Assert
        assertThrows(RuntimeException.class, () -> initializeService.getEnrollment(connectId, token));
    }
}
