import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

import javax.servlet.http.HttpServletRequest;

import com.td.mbna.msec.account.application.CurrentAccountService;
import com.td.mbna.msec.account.domain.AccountDetails;
import com.td.mbna.msec.common.exception.InvalidAccountException;
import com.td.mbna.msec.common.infrastructure.util.TextProvider;
import com.td.mbna.msec.common.infrastructure.util.TimeUtil;
import com.td.mbna.msec.core.session.SessionProvider;
import com.td.mbna.msec.midtier.statement.payload.StatementActivityStatusType;
import com.td.mbna.msec.midtier.statement.payload.getStatementActivity.GetStatementActivityResponse;
import com.td.mbna.msec.midtier.statement.payload.getStatementActivity.RequestPayload;
import com.td.mbna.msec.midtier.types.common.StmtActivityType;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.account.statement.StatementDisplayHelper;
import com.td.mbna.msec.midtier.MidTierServiceHelper;
import com.td.mbna.msec.statement.domain.DownloadFormatOption;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DownloadStmtDataServiceTest {

    @Mock
    private MidTierServiceHelper midTierServiceHelper;

    @Mock
    private CurrentAccountService currentAccountService;

    @Mock
    private StatementDisplayHelper statementDisplayHelper;

    @Mock
    private SessionProvider sessionProvider;

    @Mock
    private TextProvider textProvider;

    @Mock
    private TimeUtil timeUtil;

    @InjectMocks
    private DownloadStmtDataServiceImpl downloadStmtDataService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetDownloadFormatOptions() {
        when(textProvider.getText("download.Format.CSV")).thenReturn("CSV Format");
        when(textProvider.getText("download.Format.QFX")).thenReturn("QFX Format");
        when(textProvider.getText("download.Format.OFX")).thenReturn("OFX Format");

        List<DownloadFormatOption> result = downloadStmtDataService.getDownloadFormatOptions();

        assertEquals(3, result.size());
        assertEquals("CSV", result.get(0).getKey());
        assertEquals("CSV Format", result.get(0).getValue());
    }

    @Test
    public void testGetStatementClosingDates_validAccount() throws InvalidAccountException {
        AccountDetails accountDetails = mock(AccountDetails.class);
        HttpServletRequest request = mock(HttpServletRequest.class);

        when(sessionProvider.getSessionCustomer()).thenReturn(mock(AccountDetails.class));
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(statementDisplayHelper.buildStatementClosingDateList(any())).thenReturn(Collections.singletonMap("date", "closingDate"));

        Map<String, String> result = downloadStmtDataService.getStatementClosingDates("123", request);

        assertNotNull(result);
        assertEquals(1, result.size());
    }

    @Test(expected = InvalidAccountException.class)
    public void testGetStatementClosingDates_invalidAccount() throws InvalidAccountException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(sessionProvider.getCurrentAccount()).thenReturn(null);

        downloadStmtDataService.getStatementClosingDates("invalidId", request);
    }

    @Test
    public void testGenerateCSVFile_success() throws Exception {
        String accountId = "12345";
        String stmtClosingDate = "01/01/2022";
        HttpServletRequest request = mock(HttpServletRequest.class);
        AccountDetails accountDetails = mock(AccountDetails.class);

        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(textProvider.getText("download.csv.header")).thenReturn("Date,Description,Amount");

        StmtActivityType stmtActivityType = mock(StmtActivityType.class);
        when(stmtActivityType.getPostingDate()).thenReturn("1672531200000");
        when(stmtActivityType.getDescription()).thenReturn("Payment");
        when(stmtActivityType.getMerchantCity()).thenReturn("New York");
        when(stmtActivityType.getAmount()).thenReturn(new BigDecimal("100.00"));

        List<StmtActivityType> statementActivities = Arrays.asList(stmtActivityType);

        when(midTierServiceHelper.getStatementActivity(any(RequestPayload.class))).thenReturn(mock(GetStatementActivityResponse.class));
        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(currentAccountService.setCurrentAccount(accountId)).thenReturn(null);
        when(timeUtil.convertMsToDate(anyLong())).thenReturn(new Date());

        byte[] csvBytes = downloadStmtDataService.generateCSVFile(accountId, stmtClosingDate, request);
        String csvContent = new String(csvBytes, "ISO-8859-1");

        assertNotNull(csvContent);
        assertTrue(csvContent.contains("Date,Description,Amount"));
        assertTrue(csvContent.contains("100.00"));
    }

    @Test(expected = RuntimeException.class)
    public void testGenerateCSVFile_invalidAccount() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        when(sessionProvider.getCurrentAccount()).thenReturn(null);
        downloadStmtDataService.generateCSVFile("invalidAccount", "01/01/2022", request);
    }

    @Test
    public void testGenerateQFX_success() throws Exception {
        String accountId = "12345";
        String stmtClosingDate = "01/01/2022";
        HttpServletRequest request = mock(HttpServletRequest.class);
        AccountDetails accountDetails = mock(AccountDetails.class);

        when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
        when(timeUtil.convertMsToDate(anyLong())).thenReturn(new Date());
        when(midTierServiceHelper.getStatementActivity(any(RequestPayload.class))).thenReturn(mock(GetStatementActivityResponse.class));
        
        byte[] qfxBytes = downloadStmtDataService.generateQFX(accountId, stmtClosingDate, "auditCode", request);
        assertNotNull(qfxBytes);
    }
    
    @Test
void testGetDownloadFormatOptions() {
    List<DownloadFormatOption> downloadFormatOptions = downloadStmtDataServiceImpl.getDownloadFormatOptions();

    assertNotNull(downloadFormatOptions);
    assertEquals(3, downloadFormatOptions.size());
    assertEquals("CSV", downloadFormatOptions.get(0).getKey());
    assertEquals("QFX", downloadFormatOptions.get(1).getKey());
    assertEquals("OFX", downloadFormatOptions.get(2).getKey());
}

@Test
void testGetSupportedDownloadFormatValue() {
    when(textProvider.getText("download.Format.CSV")).thenReturn("Comma-Separated Values");
    when(textProvider.getText("download.Format.QFX")).thenReturn("Quicken Format");
    when(textProvider.getText("download.Format.OFX")).thenReturn("Open Financial Exchange");

    assertEquals("Comma-Separated Values", downloadStmtDataServiceImpl.getSupportedDownloadFormatValue(SupportedDownloadFormat.CSV));
    assertEquals("Quicken Format", downloadStmtDataServiceImpl.getSupportedDownloadFormatValue(SupportedDownloadFormat.QFX));
    assertEquals("Open Financial Exchange", downloadStmtDataServiceImpl.getSupportedDownloadFormatValue(SupportedDownloadFormat.OFX));
}

@Test
void testGetStatementClosingDatesValidAccount() throws Exception {
    AccountDetails accountDetails = new AccountDetails();
    when(sessionProvider.getCurrentAccount()).thenReturn(accountDetails);
    when(statementDisplayHelper.buildStatementClosingDateList(accountDetails)).thenReturn(Map.of("01-2024", "January 2024"));

    Map<String, String> result = downloadStmtDataServiceImpl.getStatementClosingDates("validAccountId", httpServletRequest);
    assertNotNull(result);
    assertEquals(1, result.size());
    assertEquals("January 2024", result.get("01-2024"));
}

@Test
void testGetStatementClosingDatesInvalidAccount() throws Exception {
    when(sessionProvider.getSessionCustomer()).thenThrow(new InvalidAccountException("invalidAccountId"));

    assertThrows(InvalidAccountException.class, () -> {
        downloadStmtDataServiceImpl.getStatementClosingDates("invalidAccountId", httpServletRequest);
    });
}
@Test
void testGenerateCSVFile() throws Exception {
    AccountDetails account = new AccountDetails();
    when(sessionProvider.getCurrentAccount()).thenReturn(account);
    List<StmtActivityType> statementActivities = new ArrayList<>();
    StmtActivityType activity = new StmtActivityType();
    activity.setPostingDate(1672531200000L); // Example timestamp
    activity.setDescription("Test Transaction");
    activity.setMerchantCity("Toronto");
    activity.setMerchantStateProvince("ON");
    activity.setAmount(BigDecimal.valueOf(100));
    statementActivities.add(activity);

    when(midTierServiceHelper.getStatementActivity(any())).thenReturn(new GetStatementActivityResponse());

    byte[] csvBytes = downloadStmtDataServiceImpl.generateCSVFile("validAccountId", "01-2024", httpServletRequest);
    assertNotNull(csvBytes);
    String csvData = new String(csvBytes, "ISO-8859-1");
    assertTrue(csvData.contains("Test Transaction"));
}

@Test
void testGenerateCSVFileInvalidAccount() throws Exception {
    when(sessionProvider.getCurrentAccount()).thenThrow(new InvalidAccountException("invalidAccountId"));

    assertThrows(InvalidAccountException.class, () -> {
        downloadStmtDataServiceImpl.generateCSVFile("invalidAccountId", "01-2024", httpServletRequest);
    });
}

@Test
void testGenerateCSVFile() throws Exception {
    AccountDetails account = new AccountDetails();
    when(sessionProvider.getCurrentAccount()).thenReturn(account);
    List<StmtActivityType> statementActivities = new ArrayList<>();
    StmtActivityType activity = new StmtActivityType();
    activity.setPostingDate(1672531200000L); // Example timestamp
    activity.setDescription("Test Transaction");
    activity.setMerchantCity("Toronto");
    activity.setMerchantStateProvince("ON");
    activity.setAmount(BigDecimal.valueOf(100));
    statementActivities.add(activity);

    when(midTierServiceHelper.getStatementActivity(any())).thenReturn(new GetStatementActivityResponse());

    byte[] csvBytes = downloadStmtDataServiceImpl.generateCSVFile("validAccountId", "01-2024", httpServletRequest);
    assertNotNull(csvBytes);
    String csvData = new String(csvBytes, "ISO-8859-1");
    assertTrue(csvData.contains("Test Transaction"));
}

@Test
void testGenerateCSVFileInvalidAccount() throws Exception {
    when(sessionProvider.getCurrentAccount()).thenThrow(new InvalidAccountException("invalidAccountId"));

    assertThrows(InvalidAccountException.class, () -> {
        downloadStmtDataServiceImpl.generateCSVFile("invalidAccountId", "01-2024", httpServletRequest);
    });
}

@Test
void testGenerateQFX() throws Exception {
    AccountDetails account = new AccountDetails();
    account.setAcctEnding("1234");
    when(sessionProvider.getCurrentAccount()).thenReturn(account);
    List<StmtActivityType> statementActivities = new ArrayList<>();
    StmtActivityType activity = new StmtActivityType();
    activity.setPostingDate(1672531200000L); // Example timestamp
    activity.setDescription("Test Transaction");
    activity.setAmount(BigDecimal.valueOf(100));
    statementActivities.add(activity);

    when(midTierServiceHelper.getStatementActivity(any())).thenReturn(new GetStatementActivityResponse());

    byte[] qfxBytes = downloadStmtDataServiceImpl.generateQFX("validAccountId", "01-2024", "auditCode", httpServletRequest);
    assertNotNull(qfxBytes);
    String qfxData = new String(qfxBytes);
    assertTrue(qfxData.contains("<NAME>Test Transaction"));
}

@Test
void testGenerateQFXInvalidAccount() throws Exception {
    when(sessionProvider.getCurrentAccount()).thenThrow(new InvalidAccountException("invalidAccountId"));

    assertThrows(InvalidAccountException.class, () -> {
        downloadStmtDataServiceImpl.generateQFX("invalidAccountId", "01-2024", "auditCode", httpServletRequest);
    });
}

@Test
void testDownloadFileName() throws Exception {
    AccountDetails account = new AccountDetails();
    account.setAcctEnding("1234");
    when(sessionProvider.getCurrentAccount()).thenReturn(account);

    String fileName = downloadStmtDataServiceImpl.downloadFileName("validAccountId", "2023-05-15");
    assertNotNull(fileName);
    assertTrue(fileName.contains("May2023_1234"));
}

@Test
void testDownloadFileNameInvalidDate() {
    String fileName = downloadStmtDataServiceImpl.downloadFileName("validAccountId", "invalidDate");
    assertNull(fileName);
}

@Test
void testGetStatementBal() throws Exception {
    AccountDetails account = new AccountDetails();
    account.setAcctEnding("1234");

    List<StatementActivityStatusType> statementActivityList = new ArrayList<>();
    StatementActivityStatusType statusType = new StatementActivityStatusType();
    statusType.setStatementEndDate("20230501");
    statusType.setStatementBalance(BigDecimal.valueOf(500.00));
    statementActivityList.add(statusType);

    when(midTierServiceHelper.getAvailableStatementList(any())).thenReturn(new GetAvailableStatementListResponse());

    BigDecimal balance = downloadStmtDataServiceImpl.getStatementBal(account, "2023-05-01");
    assertNotNull(balance);
    assertEquals(BigDecimal.valueOf(500.00), balance);
}

@Test
void testGetStatementBalInvalidDate() throws Exception {
    AccountDetails account = new AccountDetails();
    account.setAcctEnding("1234");

    when(midTierServiceHelper.getAvailableStatementList(any())).thenReturn(new GetAvailableStatementListResponse());

    BigDecimal balance = downloadStmtDataServiceImpl.getStatementBal(account, "invalidDate");
    assertNotNull(balance);
    assertEquals(BigDecimal.ZERO, balance);
}

}
