package com.td.mbna.msec.midtier.cardservice;

import com.td.api.mbcca.response.card.Card;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.*;
import com.td.mbna.msec.midtier.mbcca.MbnaCCA;
import com.td.mbna.msec.midtier.service.SessionInfo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FindEligibilityOperationTest {

    private FindEligibilityOperation findEligibilityOperation;

    @Mock
    private ActivationUtil activationUtil;

    @Mock
    private MbnaCCA mbnaCCA;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        findEligibilityOperation = new FindEligibilityOperation();
        findEligibilityOperation.activationUtil = activationUtil;
        findEligibilityOperation.mbnaCCA = mbnaCCA;
    }

    @Test
    void testInvokeService_PrimaryUser() {
        // Arrange
        CardActivationEligibilityRequests requests = new CardActivationEligibilityRequests();
        SessionInfo sessionInfo = new SessionInfo();
        sessionInfo.setConnectId("connectId");
        requests.setSessionInfo(sessionInfo);

        CardActivationEligibilityRequest requestPayload = new CardActivationEligibilityRequest();
        requestPayload.setCardNum("123456789");
        requestPayload.setAliasCustId("custId");
        requestPayload.setIsPrimaryUser(true);

        List<CardActivationEligibilityRequest> requestList = new ArrayList<>();
        requestList.add(requestPayload);
        requests.setCardActivationEligibilityRequests(requestList);

        Card card = new Card();
        card.setLastCardRequestReasonCd("NEW");
        card.setReceiptVerificationInd(false);

        when(mbnaCCA.retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(true), anyString()))
                .thenReturn(new CardResponse(card));

        when(activationUtil.findMessageCode(any(), eq(true))).thenReturn("C001");

        // Act
        CardActivationEligibilityResponses responses = findEligibilityOperation.invokeService(requests, "token");

        // Assert
        assertNotNull(responses);
        assertEquals(1, responses.getCardActivationEligibilityResponses().size());
        assertTrue(responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().isEligible());
        assertEquals("123456789", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getCardNumber());
        assertEquals("C001", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getMessageId());

        verify(mbnaCCA, times(1)).retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(true), anyString());
        verify(activationUtil, times(1)).findMessageCode(any(), eq(true));
    }

    @Test
    void testInvokeService_AuthorizedUser() {
        // Arrange
        CardActivationEligibilityRequests requests = new CardActivationEligibilityRequests();
        SessionInfo sessionInfo = new SessionInfo();
        sessionInfo.setConnectId("connectId");
        requests.setSessionInfo(sessionInfo);

        CardActivationEligibilityRequest requestPayload = new CardActivationEligibilityRequest();
        requestPayload.setCardNum("123456789");
        requestPayload.setAliasCustId("custId");
        requestPayload.setIsPrimaryUser(false);

        List<CardActivationEligibilityRequest> requestList = new ArrayList<>();
        requestList.add(requestPayload);
        requests.setCardActivationEligibilityRequests(requestList);

        Card card = new Card();
        card.setLastCardRequestReasonCd("NEW");

        when(mbnaCCA.retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(false), anyString()))
                .thenReturn(new CardResponse(card));

        when(activationUtil.canAUActivate(any())).thenReturn(true);
        when(activationUtil.findMessageCode(any(), eq(false))).thenReturn("C002");

        // Act
        CardActivationEligibilityResponses responses = findEligibilityOperation.invokeService(requests, "token");

        // Assert
        assertNotNull(responses);
        assertEquals(1, responses.getCardActivationEligibilityResponses().size());
        assertTrue(responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().isEligible());
        assertEquals("123456789", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getCardNumber());
        assertEquals("C002", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getMessageId());

        verify(mbnaCCA, times(1)).retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(false), anyString());
        verify(activationUtil, times(1)).canAUActivate(any());
        verify(activationUtil, times(1)).findMessageCode(any(), eq(false));
    }

    @Test
    void testInvokeService_ExceptionHandling() {
        // Arrange
        CardActivationEligibilityRequests requests = new CardActivationEligibilityRequests();
        SessionInfo sessionInfo = new SessionInfo();
        sessionInfo.setConnectId("connectId");
        requests.setSessionInfo(sessionInfo);

        CardActivationEligibilityRequest requestPayload = new CardActivationEligibilityRequest();
        requestPayload.setCardNum("123456789");
        requestPayload.setAliasCustId("custId");
        requestPayload.setIsPrimaryUser(true);

        List<CardActivationEligibilityRequest> requestList = new ArrayList<>();
        requestList.add(requestPayload);
        requests.setCardActivationEligibilityRequests(requestList);

        when(mbnaCCA.retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(true), anyString()))
                .thenThrow(new RuntimeException("Service exception"));

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            findEligibilityOperation.invokeService(requests, "token");
        });

        assertEquals("Service exception", exception.getMessage());
        verify(mbnaCCA, times(1)).retrieveCreditCardInfo(anyString(), anyBoolean(), anyString(), anyString(), eq(true), anyString());
    }
}
