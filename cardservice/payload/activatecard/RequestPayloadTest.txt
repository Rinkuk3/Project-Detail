package com.td.mbna.msec.midtier.cardservice.payload.activatecard;

import com.td.mbna.msec.midtier.cardservice.payload.eligibility.AuthorizedUser;
import com.td.mbna.msec.midtier.types.common.EmailNotificationInfoType;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class RequestPayloadTest {

    @Test
    void testSettersAndGetters() {
        RequestPayload payload = new RequestPayload();

        payload.setCustId("12345");
        assertEquals("12345", payload.getCustId());

        payload.setAcctId("67890");
        assertEquals("67890", payload.getAcctId());

        payload.setCardNum("4111111111111111");
        assertEquals("4111111111111111", payload.getCardNum());

        payload.setCvc("123");
        assertEquals("123", payload.getCvc());

        payload.setExpiryMonth(12);
        assertEquals(12, payload.getExpiryMonth());

        payload.setExpiryYear("2025");
        assertEquals("2025", payload.getExpiryYear());

        payload.setRealExpiryMonth("11");
        assertEquals("11", payload.getRealExpiryMonth());

        payload.setRealExpiryYear("2024");
        assertEquals("2024", payload.getRealExpiryYear());

        payload.setEmail("test@email.com");
        assertEquals("test@email.com", payload.getEmail());

        payload.setEmailRequired(true);
        assertTrue(payload.getEmailRequired());

        payload.setEmailNotificationInfoType(EmailNotificationInfoType.WITH_EMAIL);
        assertEquals(EmailNotificationInfoType.WITH_EMAIL, payload.getEmailNotificationInfoType());

        payload.setMultiCard(true);
        assertTrue(payload.isMultiCard());

        payload.setPCHActivated(true);
        assertTrue(payload.getPCHActivated());

        List<AuthorizedUser> authorizedUsers = new ArrayList<>();
        payload.setAuthorizedUsers(authorizedUsers);
        assertEquals(authorizedUsers, payload.getAuthorizedUsers());

        payload.setPartyKey("party-key-123");
        assertEquals("party-key-123", payload.getPartyKey());
    }

    @Test
    void testToString() {
        RequestPayload payload = new RequestPayload();
        payload.setCustId("12345");
        payload.setAcctId("67890");
        payload.setCardNum("4111111111111111");
        payload.setCvc("123");
        payload.setExpiryMonth(12);
        payload.setExpiryYear("2025");
        payload.setRealExpiryMonth("11");
        payload.setRealExpiryYear("2024");
        payload.setEmail("test@email.com");
        payload.setEmailRequired(true);
        payload.setEmailNotificationInfoType(EmailNotificationInfoType.WITH_EMAIL);
        payload.setMultiCard(true);
        payload.setPCHActivated(true);
        List<AuthorizedUser> authorizedUsers = new ArrayList<>();
        payload.setAuthorizedUsers(authorizedUsers);
        payload.setPartyKey("party-key-123");

        String toStringOutput = payload.toString();
        assertNotNull(toStringOutput);
        assertTrue(toStringOutput.contains("custId=12345"));
        assertTrue(toStringOutput.contains("acctId=67890"));
        assertTrue(toStringOutput.contains("cardNum=4111111111111111"));
        assertTrue(toStringOutput.contains("cvc=123"));
    }

    @Test
    void testEquals() {
        RequestPayload payload1 = new RequestPayload();
        payload1.setCustId("custId1");
        payload1.setAcctId("acctId1");

        RequestPayload payload2 = new RequestPayload();
        payload2.setCustId("custId1");
        payload2.setAcctId("acctId1");

        assertTrue(payload1.equals(payload2));
    }

    @Test
    void testEqualsNegative() {
        RequestPayload payload1 = new RequestPayload();
        payload1.setCustId("custId1");

        RequestPayload payload2 = new RequestPayload();
        payload2.setAcctId("acctId2");

        assertFalse(payload1.equals(payload2));
    }

    @Test
    void testHashCode() {
        RequestPayload payload = new RequestPayload();
        payload.setCustId("custId");
        payload.setAcctId("acctId");

        int hashCode1 = payload.hashCode();
        payload.setAcctId("differentAcctId");
        int hashCode2 = payload.hashCode();

        assertNotEquals(hashCode1, hashCode2);
    }

    @Test
    void testNullFieldsInHashCodeAndEquals() {
        RequestPayload payload1 = new RequestPayload();
        RequestPayload payload2 = new RequestPayload();

        assertTrue(payload1.equals(payload2));
        assertEquals(payload1.hashCode(), payload2.hashCode());
    }

}
