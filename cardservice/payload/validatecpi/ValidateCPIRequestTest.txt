package com.td.mbna.msec.midtier.cardservice.payload.validatecpi;

import com.td.mbna.msec.midtier.types.common.BaseRequest;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class ValidateCPIRequestTest {

    @Test
    void testGetterAndSetter() {
        // Create an instance of ValidateCPIRequest
        ValidateCPIRequest request = new ValidateCPIRequest();

        // Create a RequestPayload object and set it
        RequestPayload payload = new RequestPayload();
        payload.setCustId("12345");
        request.setRequestPayload(payload);

        // Verify the getter
        assertNotNull(request.getRequestPayload());
        assertEquals("12345", request.getRequestPayload().getCustId());
    }

    @Test
    void testToString() {
        // Create an instance of ValidateCPIRequest and set values
        ValidateCPIRequest request = new ValidateCPIRequest();
        request.setSessionInfo("Session123");
        request.setCustId("Cust123");
        request.setAliasCustId("Alias123");
        request.setAcctNum("Acct123");
        request.setAcctType("Type123");
        request.setLanguagePref("EN");
        request.setAuditInfo("Audit123");
        request.setIsPrimaryUser(true);
        request.setReserved1("Reserved123");
        request.setCustInterface("Interface123");

        RequestPayload payload = new RequestPayload();
        payload.setCustId("CustPayload");
        request.setRequestPayload(payload);

        // Verify the toString output
        String toStringOutput = request.toString();
        assertNotNull(toStringOutput);
        assertTrue(toStringOutput.contains("Session123"));
        assertTrue(toStringOutput.contains("Cust123"));
        assertTrue(toStringOutput.contains("Alias123"));
        assertTrue(toStringOutput.contains("Acct123"));
        assertTrue(toStringOutput.contains("Type123"));
        assertTrue(toStringOutput.contains("EN"));
        assertTrue(toStringOutput.contains("Audit123"));
        assertTrue(toStringOutput.contains("true"));
        assertTrue(toStringOutput.contains("Reserved123"));
        assertTrue(toStringOutput.contains("Interface123"));
        assertTrue(toStringOutput.contains("CustPayload"));
    }

    @Test
    void testHashCode() {
        // Create two instances of ValidateCPIRequest
        ValidateCPIRequest request1 = new ValidateCPIRequest();
        ValidateCPIRequest request2 = new ValidateCPIRequest();

        // Both have default values, so hashCode should be the same
        assertEquals(request1.hashCode(), request2.hashCode());

        // Set the same values for both and verify hashCode
        request1.setSessionInfo("Session123");
        request2.setSessionInfo("Session123");
        assertEquals(request1.hashCode(), request2.hashCode());

        // Change one value and verify hashCode
        request1.setCustId("Cust123");
        assertNotEquals(request1.hashCode(), request2.hashCode());
    }

    @Test
    void testEquals() {
        // Create two instances of ValidateCPIRequest
        ValidateCPIRequest request1 = new ValidateCPIRequest();
        ValidateCPIRequest request2 = new ValidateCPIRequest();

        // Both have default values, so they should be equal
        assertEquals(request1, request2);

        // Set the same values for both and verify equality
        request1.setSessionInfo("Session123");
        request2.setSessionInfo("Session123");
        assertEquals(request1, request2);

        // Change one value and verify inequality
        request1.setCustId("Cust123");
        assertNotEquals(request1, request2);

        // Test with same reference
        assertEquals(request1, request1);

        // Test with null and other object type
        assertNotEquals(request1, null);
        assertNotEquals(request1, "Some String");
    }

    @Test
    void testEqualsWithPayload() {
        // Create two instances of ValidateCPIRequest
        ValidateCPIRequest request1 = new ValidateCPIRequest();
        ValidateCPIRequest request2 = new ValidateCPIRequest();

        // Set RequestPayload for both
        RequestPayload payload1 = new RequestPayload();
        payload1.setCustId("CustPayload");
        request1.setRequestPayload(payload1);

        RequestPayload payload2 = new RequestPayload();
        payload2.setCustId("CustPayload");
        request2.setRequestPayload(payload2);

        // Verify equality
        assertEquals(request1, request2);

        // Change the payload of one and verify inequality
        payload2.setCustId("DifferentPayload");
        assertNotEquals(request1, request2);
    }

    @Test
    void testEdgeCases() {
        // Create an instance with empty fields
        ValidateCPIRequest request = new ValidateCPIRequest();

        // Test null requestPayload
        request.setRequestPayload(null);
        assertNull(request.getRequestPayload());

        // Verify default fields
        assertNull(request.getSessionInfo());
        assertNull(request.getCustId());
        assertNull(request.getAliasCustId());
        assertNull(request.getAcctNum());
        assertNull(request.getAcctType());
        assertNull(request.getLanguagePref());
        assertNull(request.getAuditInfo());
        assertNull(request.getIsPrimaryUser());
        assertNull(request.getReserved1());
        assertNull(request.getCustInterface());
    }
}
