package com.td.mbna.msec.midtier.cardservice.payload.eligibility;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ResponsePayloadTest {

    @Test
    void testGetterAndSetter() {
        // Create instance of ResponsePayload
        ResponsePayload responsePayload = new ResponsePayload();

        // Test setters
        responsePayload.setCardNumber("123456");
        responsePayload.setEligible(true);
        responsePayload.setMessageId("MSG123");

        List<AuthorizedUser> authorizedUsers = new ArrayList<>();
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("customer1");
        user1.setCardNumber("654321");

        authorizedUsers.add(user1);
        responsePayload.setAuthorizedUsers(authorizedUsers);

        // Test getters
        assertEquals("123456", responsePayload.getCardNumber());
        assertTrue(responsePayload.getEligible());
        assertEquals("MSG123", responsePayload.getMessageId());
        assertNotNull(responsePayload.getAuthorizedUsers());
        assertEquals(1, responsePayload.getAuthorizedUsers().size());
        assertEquals("customer1", responsePayload.getAuthorizedUsers().get(0).getCustomerId());
        assertEquals("654321", responsePayload.getAuthorizedUsers().get(0).getCardNumber());
    }

    @Test
    void testToString() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setCardNumber("123456");
        responsePayload.setEligible(false);
        responsePayload.setMessageId("MSG456");

        String expected = "com.td.mbna.msec.midtier.cardservice.payload.eligibility.ResponsePayload@" +
                Integer.toHexString(System.identityHashCode(responsePayload)) +
                "[cardNumber=123456,eligible=false,messageId=MSG456,]";
        assertTrue(responsePayload.toString().contains(expected.substring(0, 50))); // Partial match for robustness
    }

    @Test
    void testHashCode() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setCardNumber("123456");
        responsePayload1.setEligible(true);
        responsePayload1.setMessageId("MSG123");

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setCardNumber("123456");
        responsePayload2.setEligible(true);
        responsePayload2.setMessageId("MSG123");

        // Same hash code for equal objects
        assertEquals(responsePayload1.hashCode(), responsePayload2.hashCode());

        // Modify one object and verify hash codes differ
        responsePayload2.setMessageId("MSG789");
        assertNotEquals(responsePayload1.hashCode(), responsePayload2.hashCode());
    }

    @Test
    void testEquals() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        responsePayload1.setCardNumber("123456");
        responsePayload1.setEligible(true);
        responsePayload1.setMessageId("MSG123");

        ResponsePayload responsePayload2 = new ResponsePayload();
        responsePayload2.setCardNumber("123456");
        responsePayload2.setEligible(true);
        responsePayload2.setMessageId("MSG123");

        // Test equality with same values
        assertTrue(responsePayload1.equals(responsePayload2));

        // Test equality with the same reference
        assertTrue(responsePayload1.equals(responsePayload1));

        // Test inequality with null
        assertFalse(responsePayload1.equals(null));

        // Test inequality with a different object type
        assertFalse(responsePayload1.equals("String"));

        // Test inequality with different values
        responsePayload2.setMessageId("MSG789");
        assertFalse(responsePayload1.equals(responsePayload2));
    }

    @Test
    void testEqualsWithNullValues() {
        ResponsePayload responsePayload1 = new ResponsePayload();
        ResponsePayload responsePayload2 = new ResponsePayload();

        // Both have null values; should be equal
        assertTrue(responsePayload1.equals(responsePayload2));

        // Set a field in one object
        responsePayload1.setCardNumber("123456");
        assertFalse(responsePayload1.equals(responsePayload2));
    }

    @Test
    void testEmptyAuthorizedUserList() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setAuthorizedUsers(new ArrayList<>());

        assertNotNull(responsePayload.getAuthorizedUsers());
        assertTrue(responsePayload.getAuthorizedUsers().isEmpty());
    }

    @Test
    void testNullAuthorizedUsers() {
        ResponsePayload responsePayload = new ResponsePayload();
        responsePayload.setAuthorizedUsers(null);

        assertNull(responsePayload.getAuthorizedUsers());
    }
}
