package com.td.mbna.msec.midtier.cardservice.payload.eligibility;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AuthorizedUserTest {

    @Test
    void testSettersAndGetters() {
        AuthorizedUser authorizedUser = new AuthorizedUser();

        // Test setting and getting customerId
        authorizedUser.setCustomerId("cust123");
        assertEquals("cust123", authorizedUser.getCustomerId());

        // Test setting and getting cardNumber
        authorizedUser.setCardNumber("card123");
        assertEquals("card123", authorizedUser.getCardNumber());
    }

    @Test
    void testToString() {
        AuthorizedUser authorizedUser = new AuthorizedUser();
        authorizedUser.setCustomerId("cust123");
        authorizedUser.setCardNumber("card123");

        String toStringOutput = authorizedUser.toString();
        assertNotNull(toStringOutput);
        assertTrue(toStringOutput.contains("customerId=cust123"));
        assertTrue(toStringOutput.contains("cardNumber=card123"));
    }

    @Test
    void testEquals_SameFields() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust123");
        user2.setCardNumber("card123");

        assertTrue(user1.equals(user2));
    }

    @Test
    void testEquals_DifferentCustomerId() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust999");
        user2.setCardNumber("card123");

        assertFalse(user1.equals(user2));
    }

    @Test
    void testEquals_DifferentCardNumber() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust123");
        user2.setCardNumber("card999");

        assertFalse(user1.equals(user2));
    }

    @Test
    void testEquals_NullCheck() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId(null);
        user1.setCardNumber(null);

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId(null);
        user2.setCardNumber(null);

        assertTrue(user1.equals(user2));
    }

    @Test
    void testHashCode_SameFields() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust123");
        user2.setCardNumber("card123");

        assertEquals(user1.hashCode(), user2.hashCode());
    }

    @Test
    void testHashCode_DifferentCustomerId() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust999");
        user2.setCardNumber("card123");

        assertNotEquals(user1.hashCode(), user2.hashCode());
    }

    @Test
    void testHashCode_DifferentCardNumber() {
        AuthorizedUser user1 = new AuthorizedUser();
        user1.setCustomerId("cust123");
        user1.setCardNumber("card123");

        AuthorizedUser user2 = new AuthorizedUser();
        user2.setCustomerId("cust123");
        user2.setCardNumber("card999");

        assertNotEquals(user1.hashCode(), user2.hashCode());
    }
}
