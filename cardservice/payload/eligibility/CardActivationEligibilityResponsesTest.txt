package com.td.mbna.msec.midtier.cardservice.payload.eligibility;

import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class CardActivationEligibilityResponsesTest {

    @Test
    void testGetterAndSetter() {
        // Create instance of the response class
        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();

        // Create and set up the responses list
        CardActivationEligibilityResponse response1 = new CardActivationEligibilityResponse();
        ResponsePayload payload1 = new ResponsePayload();
        payload1.setSomeField("test1");
        response1.setResponsePayload(payload1);

        CardActivationEligibilityResponse response2 = new CardActivationEligibilityResponse();
        ResponsePayload payload2 = new ResponsePayload();
        payload2.setSomeField("test2");
        response2.setResponsePayload(payload2);

        List<CardActivationEligibilityResponse> responseList = new ArrayList<>();
        responseList.add(response1);
        responseList.add(response2);

        responses.setCardActivationEligibilityResponses(responseList);

        // Verify getter logic
        assertNotNull(responses.getCardActivationEligibilityResponses());
        assertEquals(2, responses.getCardActivationEligibilityResponses().size());
        assertEquals("test1", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getSomeField());
        assertEquals("test2", responses.getCardActivationEligibilityResponses().get(1).getResponsePayload().getSomeField());
    }

    @Test
    void testGetterWithEmptyList() {
        // Test empty list scenario
        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(new ArrayList<>());

        assertNotNull(responses.getCardActivationEligibilityResponses());
        assertTrue(responses.getCardActivationEligibilityResponses().isEmpty());
    }

    @Test
    void testGetterWithNull() {
        // Test when the getter returns null
        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        assertNull(responses.getCardActivationEligibilityResponses());
    }

    @Test
    void testSetterWithNull() {
        // Test setting the list to null
        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(null);

        assertNull(responses.getCardActivationEligibilityResponses());
    }

    @Test
    void testSetterWithNonEmptyList() {
        // Test setting a populated list
        List<CardActivationEligibilityResponse> responseList = new ArrayList<>();
        CardActivationEligibilityResponse response = new CardActivationEligibilityResponse();
        ResponsePayload payload = new ResponsePayload();
        payload.setSomeField("test");
        response.setResponsePayload(payload);
        responseList.add(response);

        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(responseList);

        assertNotNull(responses.getCardActivationEligibilityResponses());
        assertEquals(1, responses.getCardActivationEligibilityResponses().size());
    }

    @Test
    void testEmptyResponsesList() {
        // Test with explicitly empty list
        List<CardActivationEligibilityResponse> responseList = new ArrayList<>();
        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(responseList);

        assertNotNull(responses.getCardActivationEligibilityResponses());
        assertEquals(0, responses.getCardActivationEligibilityResponses().size());
    }

    @Test
    void testSingleResponseInList() {
        // Test with a single item in the responses list
        CardActivationEligibilityResponse response = new CardActivationEligibilityResponse();
        ResponsePayload payload = new ResponsePayload();
        payload.setSomeField("uniqueTest");
        response.setResponsePayload(payload);

        List<CardActivationEligibilityResponse> responseList = new ArrayList<>();
        responseList.add(response);

        CardActivationEligibilityResponses responses = new CardActivationEligibilityResponses();
        responses.setCardActivationEligibilityResponses(responseList);

        assertNotNull(responses.getCardActivationEligibilityResponses());
        assertEquals(1, responses.getCardActivationEligibilityResponses().size());
        assertEquals("uniqueTest", responses.getCardActivationEligibilityResponses().get(0).getResponsePayload().getSomeField());
    }
}
