package com.td.mbna.msec.midtier.cardservice;

import com.td.mbna.msec.midtier.cardservice.payload.activatecard.ActivateCardRequest;
import com.td.mbna.msec.midtier.cardservice.payload.activatecard.ActivateCardResponse;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.CardActivationEligibilityRequests;
import com.td.mbna.msec.midtier.cardservice.payload.eligibility.CardActivationEligibilityResponses;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIRequest;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class CardServiceTest {

    private CardServiceImpl cardService;

    @Mock
    private ActivateCardOperation activationCardOperation;

    @Mock
    private ValidateCPIOperation validateCPI;

    @Mock
    private FindEligibilityOperation findEligibilityOperation;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        cardService = new CardServiceImpl();
        cardService.activationCardOperation = activationCardOperation;
        cardService.validateCPI = validateCPI;
        cardService.findEligibilityOperation = findEligibilityOperation;
    }

    @Test
    void testActivateCard() {
        // Arrange
        ActivateCardRequest request = new ActivateCardRequest();
        ActivateCardResponse expectedResponse = new ActivateCardResponse();
        String[] token = {"testToken"};

        when(activationCardOperation.invokeService(request, token)).thenReturn(expectedResponse);

        // Act
        ActivateCardResponse response = cardService.activateCard(request, token);

        // Assert
        assertEquals(expectedResponse, response);
        verify(activationCardOperation, times(1)).invokeService(request, token);
    }

    @Test
    void testValidateCPI() {
        // Arrange
        ValidateCPIRequest request = new ValidateCPIRequest();
        ValidateCPIResponse expectedResponse = new ValidateCPIResponse();
        String[] token = {"testToken"};

        when(validateCPI.invokeService(request, token)).thenReturn(expectedResponse);

        // Act
        ValidateCPIResponse response = cardService.validateCPI(request, token);

        // Assert
        assertEquals(expectedResponse, response);
        verify(validateCPI, times(1)).invokeService(request, token);
    }

    @Test
    void testFindEligibility() {
        // Arrange
        CardActivationEligibilityRequests request = new CardActivationEligibilityRequests();
        CardActivationEligibilityResponses expectedResponse = new CardActivationEligibilityResponses();
        String[] token = {"testToken"};

        when(findEligibilityOperation.invokeService(request, token)).thenReturn(expectedResponse);

        // Act
        CardActivationEligibilityResponses response = cardService.findEligibility(request, token);

        // Assert
        assertEquals(expectedResponse, response);
        verify(findEligibilityOperation, times(1)).invokeService(request, token);
    }
}
