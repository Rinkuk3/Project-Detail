package com.td.mbna.msec.midtier.cardservice;

import com.td.mbna.msec.midtier.mbnaad.MbnaAd;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIRequest;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIResponse;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import com.td.mbna.msec.midtier.util.services.TDRestServiceUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.remoting.jaxws.JaxWsSoapFaultException;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ValidateCPIOperationTest {

    @InjectMocks
    private ValidateCPIOperation validateCPIOperation;

    @Mock
    private MbnaAd mbnaAd;

    @Mock
    private ValangValidator validateCPIRequestValidator;

    @BeforeEach
    void setUp() {
        Mockito.openMocks(this);
    }

    @Test
    void testInvokeService_withNullRequest() {
        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(null, "token")
        );
    }

    @Test
    void testInvokeService_withNullRequestPayload() {
        ValidateCPIRequest request = new ValidateCPIRequest();
        request.setRequestPayload(null);

        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(request, "token")
        );
    }

    @Test
    void testInvokeService_EmptyRealExpiryMonth() {
        ValidateCPIRequest request = new ValidateCPIRequest();
        request.setRequestPayload(
            new com.td.mbna.msec.midtier.cardservice.payload.validatecpi.RequestPayload()
        );
        request.getRequestPayload().setRealExpiryMonth("");
        request.setAuditInfo(new com.td.mbna.msec.midtier.cardservice.payload.validatecpi.AuditInfo());
        request.getAuditInfo().setTransactionCode("SS0200");

        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(request, "token")
        );

        verify(mbnaAd, never()).cardVerification(any(), any(), any(), any(), any(), any());
    }

    @Test
    void testMismatchExpiryMonth() {
        ValidateCPIRequest request = new ValidateCPIRequest();
        request.setRequestPayload(
            new com.td.mbna.msec.midtier.cardservice.payload.validatecpi.RequestPayload()
        );
        request.getRequestPayload().setRealExpiryMonth("12");
        request.getRequestPayload().setExpiryMonth(1);

        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(request, "token")
        );
    }

    @Test
    void testMismatchExpiryYear() {
        ValidateCPIRequest request = new ValidateCPIRequest();
        request.setRequestPayload(
            new com.td.mbna.msec.midtier.cardservice.payload.validatecpi.RequestPayload()
        );
        request.getRequestPayload().setRealExpiryYear("2022");
        request.getRequestPayload().setExpiryYear("2023");

        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(request, "token")
        );
    }

    @Test
    void testSuccessfulCPIRequest() {
        ValidateCPIRequest request = mock(ValidateCPIRequest.class);
        when(mbnaAd.cardVerification(any(), any(), any(), any(), any(), any()))
            .thenReturn(new ValidateCPIResponse());

        ValidateCPIResponse response = validateCPIOperation.invokeService(request, "token");

        assertNotNull(response);
        verify(mbnaAd, times(1)).cardVerification(any(), any(), any(), any(), any(), any());
    }

    @Test
    void testDownstreamFailure() {
        Mockito.when(
            mbnaAd.cardVerification(any(), any(), any(), any(), any(), any())
        ).thenThrow(new JaxWsSoapFaultException(null, "Downstream Service Failure"));

        assertThrows(
            RuntimeException.class,
            () -> validateCPIOperation.invokeService(mock(ValidateCPIRequest.class), "token")
        );

        verify(mbnaAd, times(1)).cardVerification(any(), any(), any(), any(), any(), any());
    }

    @Test
    void testInvalidAuditCodeChangeOnError() {
        ValidateCPIRequest request = mock(ValidateCPIRequest.class);
        when(mbnaAd.cardVerification(any(), any(), any(), any(), any(), any()))
            .thenReturn(null);

        validateCPIOperation.invokeService(request, "token");

        assertNotNull(request.getAuditInfo());
        assertEquals("SS0204", request.getAuditInfo().getTransactionCode());
    }
}
