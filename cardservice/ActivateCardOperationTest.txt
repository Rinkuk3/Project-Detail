package com.td.mbna.msec.midtier.cardservice;

import com.td.api.mbcca.CardInfo;
import com.td.mbna.msec.midtier.cardservice.payload.activatecard.ActivateCardRequest;
import com.td.mbna.msec.midtier.cardservice.payload.activatecard.ActivateCardResponse;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.RequestPayload;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIRequest;
import com.td.mbna.msec.midtier.cardservice.payload.validatecpi.ValidateCPIResponse;
import com.td.mbna.msec.midtier.mbnaad.MbnaAd;
import com.td.mbna.msec.midtier.mbcca.MbnaCCA;
import com.td.mbna.msec.midtier.services.IMBNAConstants;
import com.td.mbna.msec.midtier.types.common.SessionInfo;
import com.td.mbna.msec.midtier.util.MbnaLogger;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springmodules.validation.valang.ValangValidator;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ActivateCardOperationTest {

    @InjectMocks
    private ActivateCardOperation activateCardOperation;

    @Mock
    private ActivationUtil activationUtil;

    @Mock
    private ValidateCPIOperation validateCPI;

    @Mock
    private ValangValidator activateCardRequestValidator;

    @Mock
    private MbnaCCA mbnaCCA;

    @Mock
    private MbnaAd mbnaAd;

    private ActivateCardRequest activateCardRequest;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        activateCardRequest = new ActivateCardRequest();
        activateCardRequest.setSessionInfo(new SessionInfo());
        activateCardRequest.getSessionInfo().setConnectId("testConnectId");
    }

    @Test
    void testInvokeService_ValidateCPIResponseError() {
        ValidateCPIResponse validateCPIResponse = new ValidateCPIResponse();
        validateCPIResponse.setErrorMsgs(List.of("Validation Error"));

        when(validateCPI.invokeService(any(ValidateCPIRequest.class), any())).thenReturn(validateCPIResponse);

        Exception exception = assertThrows(RuntimeException.class, () ->
                activateCardOperation.invokeService(activateCardRequest, "testToken"));

        assertTrue(exception.getMessage().contains("ValidateCPI failed"));
        verify(validateCPI).invokeService(any(ValidateCPIRequest.class), any());
    }

    @Test
    void testInvokeService_SingleCardActivationSuccess() {
        ValidateCPIResponse validateCPIResponse = new ValidateCPIResponse();
        when(validateCPI.invokeService(any(ValidateCPIRequest.class), any())).thenReturn(validateCPIResponse);

        ActivateCardResponse mockResponse = new ActivateCardResponse();
        mockResponse.setResponsePayload(new com.td.mbna.msec.midtier.cardservice.payload.activatecard.ResponsePayload());
        mockResponse.getResponsePayload().setStatus(true);

        when(mbnaAd.activateCard(any(), any(), any(), any())).thenReturn(mockResponse);

        ActivateCardResponse response = activateCardOperation.invokeService(activateCardRequest, "testToken");

        assertNotNull(response);
        assertTrue(response.getResponsePayload().getStatus());
        verify(validateCPI).invokeService(any(ValidateCPIRequest.class), any());
        verify(mbnaAd).activateCard(any(), any(), any(), any());
    }

    @Test
    void testActivateCard_Success() {
        ActivateCardRequest request = new ActivateCardRequest();
        request.setRequestPayload(new com.td.mbna.msec.midtier.cardservice.payload.activatecard.RequestPayload());
        request.getRequestPayload().setCardNum("1234");

        when(mbnaAd.activateCard(any(), any(), any(), any())).thenReturn(new ActivateCardResponse());

        ActivateCardResponse response = activateCardOperation.activateCard(request, false, "testToken");

        assertNotNull(response);
        verify(mbnaAd).activateCard(any(), any(), any(), any());
    }

    @Test
    void testCreateValidateCPIRequest() {
        activateCardRequest.setRequestPayload(new com.td.mbna.msec.midtier.cardservice.payload.activatecard.RequestPayload());
        activateCardRequest.getRequestPayload().setAcctId("1234");

        ValidateCPIRequest validateCPIRequest = activateCardOperation.createValidateCPIRequest(activateCardRequest);

        assertNotNull(validateCPIRequest);
        assertEquals("1234", validateCPIRequest.getRequestPayload().getAcctId());
    }

    @Test
    void testGetEmailInfoBean_Success() {
        ActivateCardResponse response = new ActivateCardResponse();
        response.setResponsePayload(new com.td.mbna.msec.midtier.cardservice.payload.activatecard.ResponsePayload());
        response.getResponsePayload().setStatus(true);

        EmailInfo emailInfo = activateCardOperation.getEmailInfoBean(activateCardRequest, response);

        assertNotNull(emailInfo);
    }

    @Test
    void testGetEmailInfoBean_Failure() {
        ActivateCardResponse response = new ActivateCardResponse();
        response.setResponsePayload(new com.td.mbna.msec.midtier.cardservice.payload.activatecard.ResponsePayload());
        response.getResponsePayload().setStatus(false);

        EmailInfo emailInfo = activateCardOperation.getEmailInfoBean(activateCardRequest, response);

        assertNull(emailInfo);
    }
}
