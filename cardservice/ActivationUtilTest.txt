package com.td.mbna.msec.midtier.cardservice;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class ActivationUtilTest {

    private ActivationUtil activationUtil;

    @BeforeEach
    void setUp() {
        activationUtil = new ActivationUtil();
    }

    @Test
    void testCanAUActivate() {
        assertFalse(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.ACE), "ACE should return false");
        assertTrue(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.NEW), "NEW should return true");
        assertFalse(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.REISSUE), "REISSUE should return false");
        assertTrue(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.TRANSFER), "TRANSFER should return true");
        assertTrue(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.MASS_COMPROMISE), "MASS_COMPROMISE should return true");
        assertTrue(activationUtil.canAUActivate(ActivationUtil.LastRequestReason.SPECIAL), "SPECIAL should return true");
    }

    @Test
    void testCanPCHActivateAll() {
        assertTrue(activationUtil.canPCHActivateAll(ActivationUtil.LastRequestReason.ACE), "ACE should return true");
        assertFalse(activationUtil.canPCHActivateAll(ActivationUtil.LastRequestReason.NEW), "NEW should return false");
        assertTrue(activationUtil.canPCHActivateAll(ActivationUtil.LastRequestReason.REISSUE), "REISSUE should return true");
        assertTrue(activationUtil.canPCHActivateAll(ActivationUtil.LastRequestReason.TRANSFER), "TRANSFER should return true");
        assertFalse(activationUtil.canPCHActivateAll(ActivationUtil.LastRequestReason.SPECIAL), "SPECIAL should return false");
    }

    @Test
    void testFindMessageCodePrimaryCardHolder() {
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.ACE, true));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.NEW, true));
        assertEquals("C002", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.REISSUE, true));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.TRANSFER, true));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.MASS_COMPROMISE, true));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.SPECIAL, true));
    }

    @Test
    void testFindMessageCodeAuthorizedUser() {
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.ACE, false));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.NEW, false));
        assertEquals("C003", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.REISSUE, false));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.TRANSFER, false));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.MASS_COMPROMISE, false));
        assertEquals("C001", activationUtil.findMessageCode(ActivationUtil.LastRequestReason.SPECIAL, false));
    }

    @Test
    void testLastRequestReasonGetEnumValidValue() {
        assertEquals(ActivationUtil.LastRequestReason.ACE, ActivationUtil.LastRequestReason.getEnum("ACE"));
        assertEquals(ActivationUtil.LastRequestReason.NEW, ActivationUtil.LastRequestReason.getEnum("NEW"));
        assertEquals(ActivationUtil.LastRequestReason.REISSUE, ActivationUtil.LastRequestReason.getEnum("REISSUE"));
        assertEquals(ActivationUtil.LastRequestReason.TRANSFER, ActivationUtil.LastRequestReason.getEnum("TRANSFER"));
        assertEquals(ActivationUtil.LastRequestReason.SPECIAL, ActivationUtil.LastRequestReason.getEnum("SPECIAL"));
        assertEquals(ActivationUtil.LastRequestReason.MASS_COMPROMISE, ActivationUtil.LastRequestReason.getEnum("MASS COMPROMISE"));
    }

    @Test
    void testLastRequestReasonGetEnumInvalidValue() {
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> 
            ActivationUtil.LastRequestReason.getEnum("INVALID")
        );
        assertEquals("INVALID is not a recognized LastRequestReason", exception.getMessage());
    }
}
