package com.td.mbna.msec.midtier.autopay;

import com.td.mbna.msec.midtier.autopay.payload.checkpadenrolled.CheckPadEnrolledRequest;
import com.td.mbna.msec.midtier.autopay.payload.checkpadenrolled.CheckPadEnrolledResponse;
import com.td.mbna.msec.midtier.mbnaap.MbnaAP;
import com.td.mbna.msec.midtier.types.common.BaseRequest;
import com.td.mbna.msec.midtier.types.common.BaseResponse;
import com.td.mbna.msec.midtier.util.services.MidtierUtilHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CheckPadEnrolledOperationTest {

    @InjectMocks
    private CheckPadEnrolledOperation checkPadEnrolledOperation;

    @Mock
    private MbnaAP mbnaAP;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInvokeService_Success() {
        // Arrange
        CheckPadEnrolledRequest request = mock(CheckPadEnrolledRequest.class);
        CheckPadEnrolledRequest.RequestPayload payload = mock(CheckPadEnrolledRequest.RequestPayload.class);
        CheckPadEnrolledResponse expectedResponse = new CheckPadEnrolledResponse();
        String token = "test-token";

        when(request.getRequestPayload()).thenReturn(payload);
        when(payload.getCardNum()).thenReturn("1234567890123456");
        when(mbnaAP.checkEnrolledForPad("1234567890123456", token)).thenReturn(expectedResponse);

        // Act
        CheckPadEnrolledResponse actualResponse = checkPadEnrolledOperation.invokeService(request, token);

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);
        verify(mbnaAP, times(1)).checkEnrolledForPad("1234567890123456", token);
    }

    @Test
    void testInvokeService_Exception() {
        // Arrange
        CheckPadEnrolledRequest request = mock(CheckPadEnrolledRequest.class);
        CheckPadEnrolledRequest.RequestPayload payload = mock(CheckPadEnrolledRequest.RequestPayload.class);
        String token = "test-token";

        when(request.getRequestPayload()).thenReturn(payload);
        when(payload.getCardNum()).thenReturn("1234567890123456");
        when(mbnaAP.checkEnrolledForPad("1234567890123456", token)).thenThrow(new RuntimeException("Test exception"));

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () ->
                checkPadEnrolledOperation.invokeService(request, token));
        assertTrue(exception.getMessage().contains("Test exception"));
        verify(mbnaAP, times(1)).checkEnrolledForPad("1234567890123456", token);
    }

    @Test
    void testRequiresDisclosureConsent() {
        // Act
        boolean result = checkPadEnrolledOperation.requiresDisclosureConsent();

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetConsentDisclosureFailedMsgCode() {
        // Act
        String result = checkPadEnrolledOperation.getConsentDisclosureFailedMsgCode();

        // Assert
        assertNull(result);
    }

    @Test
    void testGenerateAutoComment() {
        // Act
        boolean result = checkPadEnrolledOperation.generateAutoComment();

        // Assert
        assertFalse(result);
    }

    @Test
    void testCreateAutoComment() {
        // Act
        List<String> result = checkPadEnrolledOperation.createAutoComment(mock(BaseRequest.class), mock(BaseResponse.class));

        // Assert
        assertNull(result);
    }

    @Test
    void testGetEmailInfoBean() {
        // Act
        assertNull(checkPadEnrolledOperation.getEmailInfoBean(mock(BaseRequest.class), mock(BaseResponse.class)));
    }

    @Test
    void testGetValidator() {
        // Act
        assertNull(checkPadEnrolledOperation.getValidator());
    }
}
